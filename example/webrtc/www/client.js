"use strict";
(function() {

Error.stackTraceLimit = Infinity;

var $global, $module;
if (typeof window !== "undefined") { /* web page */
  $global = window;
} else if (typeof self !== "undefined") { /* web worker */
  $global = self;
} else if (typeof global !== "undefined") { /* Node.js */
  $global = global;
  $global.require = require;
} else { /* others (e.g. Nashorn) */
  $global = this;
}

if ($global === undefined || $global.Array === undefined) {
  throw new Error("no global object found");
}
if (typeof module !== "undefined") {
  $module = module;
}

var $packages = {}, $idCounter = 0;
var $keys = function(m) { return m ? Object.keys(m) : []; };
var $flushConsole = function() {};
var $throwRuntimeError; /* set by package "runtime" */
var $throwNilPointerError = function() { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $call = function(fn, rcvr, args) { return fn.apply(rcvr, args); };
var $makeFunc = function(fn) { return function() { return $externalize(fn(this, new ($sliceType($jsObjectPtr))($global.Array.prototype.slice.call(arguments, []))), $emptyInterface); }; };
var $unused = function(v) {};

var $mapArray = function(array, f) {
  var newArray = new array.constructor(array.length);
  for (var i = 0; i < array.length; i++) {
    newArray[i] = f(array[i]);
  }
  return newArray;
};

var $methodVal = function(recv, name) {
  var vals = recv.$methodVals || {};
  recv.$methodVals = vals; /* noop for primitives */
  var f = vals[name];
  if (f !== undefined) {
    return f;
  }
  var method = recv[name];
  f = function() {
    $stackDepthOffset--;
    try {
      return method.apply(recv, arguments);
    } finally {
      $stackDepthOffset++;
    }
  };
  vals[name] = f;
  return f;
};

var $methodExpr = function(typ, name) {
  var method = typ.prototype[name];
  if (method.$expr === undefined) {
    method.$expr = function() {
      $stackDepthOffset--;
      try {
        if (typ.wrapped) {
          arguments[0] = new typ(arguments[0]);
        }
        return Function.call.apply(method, arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return method.$expr;
};

var $ifaceMethodExprs = {};
var $ifaceMethodExpr = function(name) {
  var expr = $ifaceMethodExprs["$" + name];
  if (expr === undefined) {
    expr = $ifaceMethodExprs["$" + name] = function() {
      $stackDepthOffset--;
      try {
        return Function.call.apply(arguments[0][name], arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return expr;
};

var $subslice = function(slice, low, high, max) {
  if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
    $throwRuntimeError("slice bounds out of range");
  }
  var s = new slice.constructor(slice.$array);
  s.$offset = slice.$offset + low;
  s.$length = slice.$length - low;
  s.$capacity = slice.$capacity - low;
  if (high !== undefined) {
    s.$length = high - low;
  }
  if (max !== undefined) {
    s.$capacity = max - low;
  }
  return s;
};

var $substring = function(str, low, high) {
  if (low < 0 || high < low || high > str.length) {
    $throwRuntimeError("slice bounds out of range");
  }
  return str.substring(low, high);
};

var $sliceToArray = function(slice) {
  if (slice.$array.constructor !== Array) {
    return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
  }
  return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
};

var $decodeRune = function(str, pos) {
  var c0 = str.charCodeAt(pos);

  if (c0 < 0x80) {
    return [c0, 1];
  }

  if (c0 !== c0 || c0 < 0xC0) {
    return [0xFFFD, 1];
  }

  var c1 = str.charCodeAt(pos + 1);
  if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xE0) {
    var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
    if (r <= 0x7F) {
      return [0xFFFD, 1];
    }
    return [r, 2];
  }

  var c2 = str.charCodeAt(pos + 2);
  if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF0) {
    var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
    if (r <= 0x7FF) {
      return [0xFFFD, 1];
    }
    if (0xD800 <= r && r <= 0xDFFF) {
      return [0xFFFD, 1];
    }
    return [r, 3];
  }

  var c3 = str.charCodeAt(pos + 3);
  if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF8) {
    var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
    if (r <= 0xFFFF || 0x10FFFF < r) {
      return [0xFFFD, 1];
    }
    return [r, 4];
  }

  return [0xFFFD, 1];
};

var $encodeRune = function(r) {
  if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
    r = 0xFFFD;
  }
  if (r <= 0x7F) {
    return String.fromCharCode(r);
  }
  if (r <= 0x7FF) {
    return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
  }
  if (r <= 0xFFFF) {
    return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
  }
  return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = function(str) {
  var array = new Uint8Array(str.length);
  for (var i = 0; i < str.length; i++) {
    array[i] = str.charCodeAt(i);
  }
  return array;
};

var $bytesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i += 10000) {
    str += String.fromCharCode.apply(undefined, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
  }
  return str;
};

var $stringToRunes = function(str) {
  var array = new Int32Array(str.length);
  var rune, j = 0;
  for (var i = 0; i < str.length; i += rune[1], j++) {
    rune = $decodeRune(str, i);
    array[j] = rune[0];
  }
  return array.subarray(0, j);
};

var $runesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i++) {
    str += $encodeRune(slice.$array[slice.$offset + i]);
  }
  return str;
};

var $copyString = function(dst, src) {
  var n = Math.min(src.length, dst.$length);
  for (var i = 0; i < n; i++) {
    dst.$array[dst.$offset + i] = src.charCodeAt(i);
  }
  return n;
};

var $copySlice = function(dst, src) {
  var n = Math.min(src.$length, dst.$length);
  $copyArray(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
  return n;
};

var $copyArray = function(dst, src, dstOffset, srcOffset, n, elem) {
  if (n === 0 || (dst === src && dstOffset === srcOffset)) {
    return;
  }

  if (src.subarray) {
    dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
    return;
  }

  switch (elem.kind) {
  case $kindArray:
  case $kindStruct:
    if (dst === src && dstOffset > srcOffset) {
      for (var i = n - 1; i >= 0; i--) {
        elem.copy(dst[dstOffset + i], src[srcOffset + i]);
      }
      return;
    }
    for (var i = 0; i < n; i++) {
      elem.copy(dst[dstOffset + i], src[srcOffset + i]);
    }
    return;
  }

  if (dst === src && dstOffset > srcOffset) {
    for (var i = n - 1; i >= 0; i--) {
      dst[dstOffset + i] = src[srcOffset + i];
    }
    return;
  }
  for (var i = 0; i < n; i++) {
    dst[dstOffset + i] = src[srcOffset + i];
  }
};

var $clone = function(src, type) {
  var clone = type.zero();
  type.copy(clone, src);
  return clone;
};

var $pointerOfStructConversion = function(obj, type) {
  if(obj.$proxies === undefined) {
    obj.$proxies = {};
    obj.$proxies[obj.constructor.string] = obj;
  }
  var proxy = obj.$proxies[type.string];
  if (proxy === undefined) {
    var properties = {};
    for (var i = 0; i < type.elem.fields.length; i++) {
      (function(fieldProp) {
        properties[fieldProp] = {
          get: function() { return obj[fieldProp]; },
          set: function(value) { obj[fieldProp] = value; }
        };
      })(type.elem.fields[i].prop);
    }
    proxy = Object.create(type.prototype, properties);
    proxy.$val = proxy;
    obj.$proxies[type.string] = proxy;
    proxy.$proxies = obj.$proxies;
  }
  return proxy;
};

var $append = function(slice) {
  return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = function(slice, toAppend) {
  if (toAppend.constructor === String) {
    var bytes = $stringToBytes(toAppend);
    return $internalAppend(slice, bytes, 0, bytes.length);
  }
  return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
};

var $internalAppend = function(slice, array, offset, length) {
  if (length === 0) {
    return slice;
  }

  var newArray = slice.$array;
  var newOffset = slice.$offset;
  var newLength = slice.$length + length;
  var newCapacity = slice.$capacity;

  if (newLength > newCapacity) {
    newOffset = 0;
    newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

    if (slice.$array.constructor === Array) {
      newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
      newArray.length = newCapacity;
      var zero = slice.constructor.elem.zero;
      for (var i = slice.$length; i < newCapacity; i++) {
        newArray[i] = zero();
      }
    } else {
      newArray = new slice.$array.constructor(newCapacity);
      newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
    }
  }

  $copyArray(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

  var newSlice = new slice.constructor(newArray);
  newSlice.$offset = newOffset;
  newSlice.$length = newLength;
  newSlice.$capacity = newCapacity;
  return newSlice;
};

var $equal = function(a, b, type) {
  if (type === $jsObjectPtr) {
    return a === b;
  }
  switch (type.kind) {
  case $kindComplex64:
  case $kindComplex128:
    return a.$real === b.$real && a.$imag === b.$imag;
  case $kindInt64:
  case $kindUint64:
    return a.$high === b.$high && a.$low === b.$low;
  case $kindArray:
    if (a.length !== b.length) {
      return false;
    }
    for (var i = 0; i < a.length; i++) {
      if (!$equal(a[i], b[i], type.elem)) {
        return false;
      }
    }
    return true;
  case $kindStruct:
    for (var i = 0; i < type.fields.length; i++) {
      var f = type.fields[i];
      if (!$equal(a[f.prop], b[f.prop], f.typ)) {
        return false;
      }
    }
    return true;
  case $kindInterface:
    return $interfaceIsEqual(a, b);
  default:
    return a === b;
  }
};

var $interfaceIsEqual = function(a, b) {
  if (a === $ifaceNil || b === $ifaceNil) {
    return a === b;
  }
  if (a.constructor !== b.constructor) {
    return false;
  }
  if (a.constructor === $jsObjectPtr) {
    return a.object === b.object;
  }
  if (!a.constructor.comparable) {
    $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
  }
  return $equal(a.$val, b.$val, a.constructor);
};

var $min = Math.min;
var $mod = function(x, y) { return x % y; };
var $parseInt = parseInt;
var $parseFloat = function(f) {
  if (f !== undefined && f !== null && f.constructor === Number) {
    return f;
  }
  return parseFloat(f);
};

var $froundBuf = new Float32Array(1);
var $fround = Math.fround || function(f) {
  $froundBuf[0] = f;
  return $froundBuf[0];
};

var $imul = Math.imul || function(a, b) {
  var ah = (a >>> 16) & 0xffff;
  var al = a & 0xffff;
  var bh = (b >>> 16) & 0xffff;
  var bl = b & 0xffff;
  return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) >> 0);
};

var $floatKey = function(f) {
  if (f !== f) {
    $idCounter++;
    return "NaN$" + $idCounter;
  }
  return String(f);
};

var $flatten64 = function(x) {
  return x.$high * 4294967296 + x.$low;
};

var $shiftLeft64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$low << (y - 32), 0);
  }
  return new x.constructor(0, 0);
};

var $shiftRightInt64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
  }
  if (x.$high < 0) {
    return new x.constructor(-1, 4294967295);
  }
  return new x.constructor(0, 0);
};

var $shiftRightUint64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(0, x.$high >>> (y - 32));
  }
  return new x.constructor(0, 0);
};

var $mul64 = function(x, y) {
  var high = 0, low = 0;
  if ((y.$low & 1) !== 0) {
    high = x.$high;
    low = x.$low;
  }
  for (var i = 1; i < 32; i++) {
    if ((y.$low & 1<<i) !== 0) {
      high += x.$high << i | x.$low >>> (32 - i);
      low += (x.$low << i) >>> 0;
    }
  }
  for (var i = 0; i < 32; i++) {
    if ((y.$high & 1<<i) !== 0) {
      high += x.$low << i;
    }
  }
  return new x.constructor(high, low);
};

var $div64 = function(x, y, returnRemainder) {
  if (y.$high === 0 && y.$low === 0) {
    $throwRuntimeError("integer divide by zero");
  }

  var s = 1;
  var rs = 1;

  var xHigh = x.$high;
  var xLow = x.$low;
  if (xHigh < 0) {
    s = -1;
    rs = -1;
    xHigh = -xHigh;
    if (xLow !== 0) {
      xHigh--;
      xLow = 4294967296 - xLow;
    }
  }

  var yHigh = y.$high;
  var yLow = y.$low;
  if (y.$high < 0) {
    s *= -1;
    yHigh = -yHigh;
    if (yLow !== 0) {
      yHigh--;
      yLow = 4294967296 - yLow;
    }
  }

  var high = 0, low = 0, n = 0;
  while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
    yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
    yLow = (yLow << 1) >>> 0;
    n++;
  }
  for (var i = 0; i <= n; i++) {
    high = high << 1 | low >>> 31;
    low = (low << 1) >>> 0;
    if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
      xHigh = xHigh - yHigh;
      xLow = xLow - yLow;
      if (xLow < 0) {
        xHigh--;
        xLow += 4294967296;
      }
      low++;
      if (low === 4294967296) {
        high++;
        low = 0;
      }
    }
    yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
    yHigh = yHigh >>> 1;
  }

  if (returnRemainder) {
    return new x.constructor(xHigh * rs, xLow * rs);
  }
  return new x.constructor(high * s, low * s);
};

var $divComplex = function(n, d) {
  var ninf = n.$real === Infinity || n.$real === -Infinity || n.$imag === Infinity || n.$imag === -Infinity;
  var dinf = d.$real === Infinity || d.$real === -Infinity || d.$imag === Infinity || d.$imag === -Infinity;
  var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);
  var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);
  if(nnan || dnan) {
    return new n.constructor(NaN, NaN);
  }
  if (ninf && !dinf) {
    return new n.constructor(Infinity, Infinity);
  }
  if (!ninf && dinf) {
    return new n.constructor(0, 0);
  }
  if (d.$real === 0 && d.$imag === 0) {
    if (n.$real === 0 && n.$imag === 0) {
      return new n.constructor(NaN, NaN);
    }
    return new n.constructor(Infinity, Infinity);
  }
  var a = Math.abs(d.$real);
  var b = Math.abs(d.$imag);
  if (a <= b) {
    var ratio = d.$real / d.$imag;
    var denom = d.$real * ratio + d.$imag;
    return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);
  }
  var ratio = d.$imag / d.$real;
  var denom = d.$imag * ratio + d.$real;
  return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);
};

var $kindBool = 1;
var $kindInt = 2;
var $kindInt8 = 3;
var $kindInt16 = 4;
var $kindInt32 = 5;
var $kindInt64 = 6;
var $kindUint = 7;
var $kindUint8 = 8;
var $kindUint16 = 9;
var $kindUint32 = 10;
var $kindUint64 = 11;
var $kindUintptr = 12;
var $kindFloat32 = 13;
var $kindFloat64 = 14;
var $kindComplex64 = 15;
var $kindComplex128 = 16;
var $kindArray = 17;
var $kindChan = 18;
var $kindFunc = 19;
var $kindInterface = 20;
var $kindMap = 21;
var $kindPtr = 22;
var $kindSlice = 23;
var $kindString = 24;
var $kindStruct = 25;
var $kindUnsafePointer = 26;

var $methodSynthesizers = [];
var $addMethodSynthesizer = function(f) {
  if ($methodSynthesizers === null) {
    f();
    return;
  }
  $methodSynthesizers.push(f);
};
var $synthesizeMethods = function() {
  $methodSynthesizers.forEach(function(f) { f(); });
  $methodSynthesizers = null;
};

var $ifaceKeyFor = function(x) {
  if (x === $ifaceNil) {
    return 'nil';
  }
  var c = x.constructor;
  return c.string + '$' + c.keyFor(x.$val);
};

var $identity = function(x) { return x; };

var $typeIDCounter = 0;

var $idKey = function(x) {
  if (x.$id === undefined) {
    $idCounter++;
    x.$id = $idCounter;
  }
  return String(x.$id);
};

var $newType = function(size, kind, string, named, pkg, exported, constructor) {
  var typ;
  switch(kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $identity;
    break;

  case $kindString:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return "$" + x; };
    break;

  case $kindFloat32:
  case $kindFloat64:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return $floatKey(x); };
    break;

  case $kindInt64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindUint64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindComplex64:
    typ = function(real, imag) {
      this.$real = $fround(real);
      this.$imag = $fround(imag);
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindComplex128:
    typ = function(real, imag) {
      this.$real = real;
      this.$imag = imag;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindArray:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, false, "", false, function(array) {
      this.$get = function() { return array; };
      this.$set = function(v) { typ.copy(this, v); };
      this.$val = array;
    });
    typ.init = function(elem, len) {
      typ.elem = elem;
      typ.len = len;
      typ.comparable = elem.comparable;
      typ.keyFor = function(x) {
        return Array.prototype.join.call($mapArray(x, function(e) {
          return String(elem.keyFor(e)).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }), "$");
      };
      typ.copy = function(dst, src) {
        $copyArray(dst, src, 0, 0, src.length, elem);
      };
      typ.ptr.init(typ);
      Object.defineProperty(typ.ptr.nil, "nilCheck", { get: $throwNilPointerError });
    };
    break;

  case $kindChan:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $idKey;
    typ.init = function(elem, sendOnly, recvOnly) {
      typ.elem = elem;
      typ.sendOnly = sendOnly;
      typ.recvOnly = recvOnly;
    };
    break;

  case $kindFunc:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(params, results, variadic) {
      typ.params = params;
      typ.results = results;
      typ.variadic = variadic;
      typ.comparable = false;
    };
    break;

  case $kindInterface:
    typ = { implementedBy: {}, missingMethodFor: {} };
    typ.keyFor = $ifaceKeyFor;
    typ.init = function(methods) {
      typ.methods = methods;
      methods.forEach(function(m) {
        $ifaceNil[m.prop] = $throwNilPointerError;
      });
    };
    break;

  case $kindMap:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(key, elem) {
      typ.key = key;
      typ.elem = elem;
      typ.comparable = false;
    };
    break;

  case $kindPtr:
    typ = constructor || function(getter, setter, target) {
      this.$get = getter;
      this.$set = setter;
      this.$target = target;
      this.$val = this;
    };
    typ.keyFor = $idKey;
    typ.init = function(elem) {
      typ.elem = elem;
      typ.wrapped = (elem.kind === $kindArray);
      typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
    };
    break;

  case $kindSlice:
    typ = function(array) {
      if (array.constructor !== typ.nativeArray) {
        array = new typ.nativeArray(array);
      }
      this.$array = array;
      this.$offset = 0;
      this.$length = array.length;
      this.$capacity = array.length;
      this.$val = this;
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.comparable = false;
      typ.nativeArray = $nativeArray(elem.kind);
      typ.nil = new typ([]);
    };
    break;

  case $kindStruct:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, false, "", exported, constructor);
    typ.ptr.elem = typ;
    typ.ptr.prototype.$get = function() { return this; };
    typ.ptr.prototype.$set = function(v) { typ.copy(this, v); };
    typ.init = function(pkgPath, fields) {
      typ.pkgPath = pkgPath;
      typ.fields = fields;
      fields.forEach(function(f) {
        if (!f.typ.comparable) {
          typ.comparable = false;
        }
      });
      typ.keyFor = function(x) {
        var val = x.$val;
        return $mapArray(fields, function(f) {
          return String(f.typ.keyFor(val[f.prop])).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }).join("$");
      };
      typ.copy = function(dst, src) {
        for (var i = 0; i < fields.length; i++) {
          var f = fields[i];
          switch (f.typ.kind) {
          case $kindArray:
          case $kindStruct:
            f.typ.copy(dst[f.prop], src[f.prop]);
            continue;
          default:
            dst[f.prop] = src[f.prop];
            continue;
          }
        }
      };
      /* nil value */
      var properties = {};
      fields.forEach(function(f) {
        properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };
      });
      typ.ptr.nil = Object.create(constructor.prototype, properties);
      typ.ptr.nil.$val = typ.ptr.nil;
      /* methods for embedded fields */
      $addMethodSynthesizer(function() {
        var synthesizeMethod = function(target, m, f) {
          if (target.prototype[m.prop] !== undefined) { return; }
          target.prototype[m.prop] = function() {
            var v = this.$val[f.prop];
            if (f.typ === $jsObjectPtr) {
              v = new $jsObjectPtr(v);
            }
            if (v.$val === undefined) {
              v = new f.typ(v);
            }
            return v[m.prop].apply(v, arguments);
          };
        };
        fields.forEach(function(f) {
          if (f.name === "") {
            $methodSet(f.typ).forEach(function(m) {
              synthesizeMethod(typ, m, f);
              synthesizeMethod(typ.ptr, m, f);
            });
            $methodSet($ptrType(f.typ)).forEach(function(m) {
              synthesizeMethod(typ.ptr, m, f);
            });
          }
        });
      });
    };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  switch (kind) {
  case $kindBool:
  case $kindMap:
    typ.zero = function() { return false; };
    break;

  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8 :
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
  case $kindFloat32:
  case $kindFloat64:
    typ.zero = function() { return 0; };
    break;

  case $kindString:
    typ.zero = function() { return ""; };
    break;

  case $kindInt64:
  case $kindUint64:
  case $kindComplex64:
  case $kindComplex128:
    var zero = new typ(0, 0);
    typ.zero = function() { return zero; };
    break;

  case $kindPtr:
  case $kindSlice:
    typ.zero = function() { return typ.nil; };
    break;

  case $kindChan:
    typ.zero = function() { return $chanNil; };
    break;

  case $kindFunc:
    typ.zero = function() { return $throwNilPointerError; };
    break;

  case $kindInterface:
    typ.zero = function() { return $ifaceNil; };
    break;

  case $kindArray:
    typ.zero = function() {
      var arrayClass = $nativeArray(typ.elem.kind);
      if (arrayClass !== Array) {
        return new arrayClass(typ.len);
      }
      var array = new Array(typ.len);
      for (var i = 0; i < typ.len; i++) {
        array[i] = typ.elem.zero();
      }
      return array;
    };
    break;

  case $kindStruct:
    typ.zero = function() { return new typ.ptr(); };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  typ.id = $typeIDCounter;
  $typeIDCounter++;
  typ.size = size;
  typ.kind = kind;
  typ.string = string;
  typ.named = named;
  typ.pkg = pkg;
  typ.exported = exported;
  typ.methods = [];
  typ.methodSetCache = null;
  typ.comparable = true;
  return typ;
};

var $methodSet = function(typ) {
  if (typ.methodSetCache !== null) {
    return typ.methodSetCache;
  }
  var base = {};

  var isPtr = (typ.kind === $kindPtr);
  if (isPtr && typ.elem.kind === $kindInterface) {
    typ.methodSetCache = [];
    return [];
  }

  var current = [{typ: isPtr ? typ.elem : typ, indirect: isPtr}];

  var seen = {};

  while (current.length > 0) {
    var next = [];
    var mset = [];

    current.forEach(function(e) {
      if (seen[e.typ.string]) {
        return;
      }
      seen[e.typ.string] = true;

      if (e.typ.named) {
        mset = mset.concat(e.typ.methods);
        if (e.indirect) {
          mset = mset.concat($ptrType(e.typ).methods);
        }
      }

      switch (e.typ.kind) {
      case $kindStruct:
        e.typ.fields.forEach(function(f) {
          if (f.name === "") {
            var fTyp = f.typ;
            var fIsPtr = (fTyp.kind === $kindPtr);
            next.push({typ: fIsPtr ? fTyp.elem : fTyp, indirect: e.indirect || fIsPtr});
          }
        });
        break;

      case $kindInterface:
        mset = mset.concat(e.typ.methods);
        break;
      }
    });

    mset.forEach(function(m) {
      if (base[m.name] === undefined) {
        base[m.name] = m;
      }
    });

    current = next;
  }

  typ.methodSetCache = [];
  Object.keys(base).sort().forEach(function(name) {
    typ.methodSetCache.push(base[name]);
  });
  return typ.methodSetCache;
};

var $Bool          = $newType( 1, $kindBool,          "bool",           true, "", false, null);
var $Int           = $newType( 4, $kindInt,           "int",            true, "", false, null);
var $Int8          = $newType( 1, $kindInt8,          "int8",           true, "", false, null);
var $Int16         = $newType( 2, $kindInt16,         "int16",          true, "", false, null);
var $Int32         = $newType( 4, $kindInt32,         "int32",          true, "", false, null);
var $Int64         = $newType( 8, $kindInt64,         "int64",          true, "", false, null);
var $Uint          = $newType( 4, $kindUint,          "uint",           true, "", false, null);
var $Uint8         = $newType( 1, $kindUint8,         "uint8",          true, "", false, null);
var $Uint16        = $newType( 2, $kindUint16,        "uint16",         true, "", false, null);
var $Uint32        = $newType( 4, $kindUint32,        "uint32",         true, "", false, null);
var $Uint64        = $newType( 8, $kindUint64,        "uint64",         true, "", false, null);
var $Uintptr       = $newType( 4, $kindUintptr,       "uintptr",        true, "", false, null);
var $Float32       = $newType( 4, $kindFloat32,       "float32",        true, "", false, null);
var $Float64       = $newType( 8, $kindFloat64,       "float64",        true, "", false, null);
var $Complex64     = $newType( 8, $kindComplex64,     "complex64",      true, "", false, null);
var $Complex128    = $newType(16, $kindComplex128,    "complex128",     true, "", false, null);
var $String        = $newType( 8, $kindString,        "string",         true, "", false, null);
var $UnsafePointer = $newType( 4, $kindUnsafePointer, "unsafe.Pointer", true, "", false, null);

var $nativeArray = function(elemKind) {
  switch (elemKind) {
  case $kindInt:
    return Int32Array;
  case $kindInt8:
    return Int8Array;
  case $kindInt16:
    return Int16Array;
  case $kindInt32:
    return Int32Array;
  case $kindUint:
    return Uint32Array;
  case $kindUint8:
    return Uint8Array;
  case $kindUint16:
    return Uint16Array;
  case $kindUint32:
    return Uint32Array;
  case $kindUintptr:
    return Uint32Array;
  case $kindFloat32:
    return Float32Array;
  case $kindFloat64:
    return Float64Array;
  default:
    return Array;
  }
};
var $toNativeArray = function(elemKind, array) {
  var nativeArray = $nativeArray(elemKind);
  if (nativeArray === Array) {
    return array;
  }
  return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = function(elem, len) {
  var typeKey = elem.id + "$" + len;
  var typ = $arrayTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(12, $kindArray, "[" + len + "]" + elem.string, false, "", false, null);
    $arrayTypes[typeKey] = typ;
    typ.init(elem, len);
  }
  return typ;
};

var $chanType = function(elem, sendOnly, recvOnly) {
  var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
  var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
  var typ = elem[field];
  if (typ === undefined) {
    typ = $newType(4, $kindChan, string, false, "", false, null);
    elem[field] = typ;
    typ.init(elem, sendOnly, recvOnly);
  }
  return typ;
};
var $Chan = function(elem, capacity) {
  if (capacity < 0 || capacity > 2147483647) {
    $throwRuntimeError("makechan: size out of range");
  }
  this.$elem = elem;
  this.$capacity = capacity;
  this.$buffer = [];
  this.$sendQueue = [];
  this.$recvQueue = [];
  this.$closed = false;
};
var $chanNil = new $Chan(null, 0);
$chanNil.$sendQueue = $chanNil.$recvQueue = { length: 0, push: function() {}, shift: function() { return undefined; }, indexOf: function() { return -1; } };

var $funcTypes = {};
var $funcType = function(params, results, variadic) {
  var typeKey = $mapArray(params, function(p) { return p.id; }).join(",") + "$" + $mapArray(results, function(r) { return r.id; }).join(",") + "$" + variadic;
  var typ = $funcTypes[typeKey];
  if (typ === undefined) {
    var paramTypes = $mapArray(params, function(p) { return p.string; });
    if (variadic) {
      paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
    }
    var string = "func(" + paramTypes.join(", ") + ")";
    if (results.length === 1) {
      string += " " + results[0].string;
    } else if (results.length > 1) {
      string += " (" + $mapArray(results, function(r) { return r.string; }).join(", ") + ")";
    }
    typ = $newType(4, $kindFunc, string, false, "", false, null);
    $funcTypes[typeKey] = typ;
    typ.init(params, results, variadic);
  }
  return typ;
};

var $interfaceTypes = {};
var $interfaceType = function(methods) {
  var typeKey = $mapArray(methods, function(m) { return m.pkg + "," + m.name + "," + m.typ.id; }).join("$");
  var typ = $interfaceTypes[typeKey];
  if (typ === undefined) {
    var string = "interface {}";
    if (methods.length !== 0) {
      string = "interface { " + $mapArray(methods, function(m) {
        return (m.pkg !== "" ? m.pkg + "." : "") + m.name + m.typ.string.substr(4);
      }).join("; ") + " }";
    }
    typ = $newType(8, $kindInterface, string, false, "", false, null);
    $interfaceTypes[typeKey] = typ;
    typ.init(methods);
  }
  return typ;
};
var $emptyInterface = $interfaceType([]);
var $ifaceNil = {};
var $error = $newType(8, $kindInterface, "error", true, "", false, null);
$error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}]);

var $mapTypes = {};
var $mapType = function(key, elem) {
  var typeKey = key.id + "$" + elem.id;
  var typ = $mapTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(4, $kindMap, "map[" + key.string + "]" + elem.string, false, "", false, null);
    $mapTypes[typeKey] = typ;
    typ.init(key, elem);
  }
  return typ;
};
var $makeMap = function(keyForFunc, entries) {
  var m = {};
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i];
    m[keyForFunc(e.k)] = e;
  }
  return m;
};

var $ptrType = function(elem) {
  var typ = elem.ptr;
  if (typ === undefined) {
    typ = $newType(4, $kindPtr, "*" + elem.string, false, "", elem.exported, null);
    elem.ptr = typ;
    typ.init(elem);
  }
  return typ;
};

var $newDataPointer = function(data, constructor) {
  if (constructor.elem.kind === $kindStruct) {
    return data;
  }
  return new constructor(function() { return data; }, function(v) { data = v; });
};

var $indexPtr = function(array, index, constructor) {
  array.$ptr = array.$ptr || {};
  return array.$ptr[index] || (array.$ptr[index] = new constructor(function() { return array[index]; }, function(v) { array[index] = v; }));
};

var $sliceType = function(elem) {
  var typ = elem.slice;
  if (typ === undefined) {
    typ = $newType(12, $kindSlice, "[]" + elem.string, false, "", false, null);
    elem.slice = typ;
    typ.init(elem);
  }
  return typ;
};
var $makeSlice = function(typ, length, capacity) {
  capacity = capacity || length;
  if (length < 0 || length > 2147483647) {
    $throwRuntimeError("makeslice: len out of range");
  }
  if (capacity < 0 || capacity < length || capacity > 2147483647) {
    $throwRuntimeError("makeslice: cap out of range");
  }
  var array = new typ.nativeArray(capacity);
  if (typ.nativeArray === Array) {
    for (var i = 0; i < capacity; i++) {
      array[i] = typ.elem.zero();
    }
  }
  var slice = new typ(array);
  slice.$length = length;
  return slice;
};

var $structTypes = {};
var $structType = function(pkgPath, fields) {
  var typeKey = $mapArray(fields, function(f) { return f.name + "," + f.typ.id + "," + f.tag; }).join("$");
  var typ = $structTypes[typeKey];
  if (typ === undefined) {
    var string = "struct { " + $mapArray(fields, function(f) {
      return f.name + " " + f.typ.string + (f.tag !== "" ? (" \"" + f.tag.replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
    }).join("; ") + " }";
    if (fields.length === 0) {
      string = "struct {}";
    }
    typ = $newType(0, $kindStruct, string, false, "", false, function() {
      this.$val = this;
      for (var i = 0; i < fields.length; i++) {
        var f = fields[i];
        var arg = arguments[i];
        this[f.prop] = arg !== undefined ? arg : f.typ.zero();
      }
    });
    $structTypes[typeKey] = typ;
    typ.init(pkgPath, fields);
  }
  return typ;
};

var $assertType = function(value, type, returnTuple) {
  var isInterface = (type.kind === $kindInterface), ok, missingMethod = "";
  if (value === $ifaceNil) {
    ok = false;
  } else if (!isInterface) {
    ok = value.constructor === type;
  } else {
    var valueTypeString = value.constructor.string;
    ok = type.implementedBy[valueTypeString];
    if (ok === undefined) {
      ok = true;
      var valueMethodSet = $methodSet(value.constructor);
      var interfaceMethods = type.methods;
      for (var i = 0; i < interfaceMethods.length; i++) {
        var tm = interfaceMethods[i];
        var found = false;
        for (var j = 0; j < valueMethodSet.length; j++) {
          var vm = valueMethodSet[j];
          if (vm.name === tm.name && vm.pkg === tm.pkg && vm.typ === tm.typ) {
            found = true;
            break;
          }
        }
        if (!found) {
          ok = false;
          type.missingMethodFor[valueTypeString] = tm.name;
          break;
        }
      }
      type.implementedBy[valueTypeString] = ok;
    }
    if (!ok) {
      missingMethod = type.missingMethodFor[valueTypeString];
    }
  }

  if (!ok) {
    if (returnTuple) {
      return [type.zero(), false];
    }
    $panic(new $packages["runtime"].TypeAssertionError.ptr("", (value === $ifaceNil ? "" : value.constructor.string), type.string, missingMethod));
  }

  if (!isInterface) {
    value = value.$val;
  }
  if (type === $jsObjectPtr) {
    value = value.object;
  }
  return returnTuple ? [value, true] : value;
};

var $stackDepthOffset = 0;
var $getStackDepth = function() {
  var err = new Error();
  if (err.stack === undefined) {
    return undefined;
  }
  return $stackDepthOffset + err.stack.split("\n").length;
};

var $panicStackDepth = null, $panicValue;
var $callDeferred = function(deferred, jsErr, fromPanic) {
  if (!fromPanic && deferred !== null && deferred.index >= $curGoroutine.deferStack.length) {
    throw jsErr;
  }
  if (jsErr !== null) {
    var newErr = null;
    try {
      $curGoroutine.deferStack.push(deferred);
      $panic(new $jsErrorPtr(jsErr));
    } catch (err) {
      newErr = err;
    }
    $curGoroutine.deferStack.pop();
    $callDeferred(deferred, newErr);
    return;
  }
  if ($curGoroutine.asleep) {
    return;
  }

  $stackDepthOffset--;
  var outerPanicStackDepth = $panicStackDepth;
  var outerPanicValue = $panicValue;

  var localPanicValue = $curGoroutine.panicStack.pop();
  if (localPanicValue !== undefined) {
    $panicStackDepth = $getStackDepth();
    $panicValue = localPanicValue;
  }

  try {
    while (true) {
      if (deferred === null) {
        deferred = $curGoroutine.deferStack[$curGoroutine.deferStack.length - 1];
        if (deferred === undefined) {
          /* The panic reached the top of the stack. Clear it and throw it as a JavaScript error. */
          $panicStackDepth = null;
          if (localPanicValue.Object instanceof Error) {
            throw localPanicValue.Object;
          }
          var msg;
          if (localPanicValue.constructor === $String) {
            msg = localPanicValue.$val;
          } else if (localPanicValue.Error !== undefined) {
            msg = localPanicValue.Error();
          } else if (localPanicValue.String !== undefined) {
            msg = localPanicValue.String();
          } else {
            msg = localPanicValue;
          }
          throw new Error(msg);
        }
      }
      var call = deferred.pop();
      if (call === undefined) {
        $curGoroutine.deferStack.pop();
        if (localPanicValue !== undefined) {
          deferred = null;
          continue;
        }
        return;
      }
      var r = call[0].apply(call[2], call[1]);
      if (r && r.$blk !== undefined) {
        deferred.push([r.$blk, [], r]);
        if (fromPanic) {
          throw null;
        }
        return;
      }

      if (localPanicValue !== undefined && $panicStackDepth === null) {
        throw null; /* error was recovered */
      }
    }
  } finally {
    if (localPanicValue !== undefined) {
      if ($panicStackDepth !== null) {
        $curGoroutine.panicStack.push(localPanicValue);
      }
      $panicStackDepth = outerPanicStackDepth;
      $panicValue = outerPanicValue;
    }
    $stackDepthOffset++;
  }
};

var $panic = function(value) {
  $curGoroutine.panicStack.push(value);
  $callDeferred(null, null, true);
};
var $recover = function() {
  if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
    return $ifaceNil;
  }
  $panicStackDepth = null;
  return $panicValue;
};
var $throw = function(err) { throw err; };

var $noGoroutine = { asleep: false, exit: false, deferStack: [], panicStack: [] };
var $curGoroutine = $noGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true;
var $mainFinished = false;
var $go = function(fun, args, direct) {
  $totalGoroutines++;
  $awakeGoroutines++;
  var $goroutine = function() {
    try {
      $curGoroutine = $goroutine;
      var r = fun.apply(undefined, args);
      if (r && r.$blk !== undefined) {
        fun = function() { return r.$blk(); };
        args = [];
        return;
      }
      $goroutine.exit = true;
    } catch (err) {
      if (!$goroutine.exit) {
        throw err;
      }
    } finally {
      $curGoroutine = $noGoroutine;
      if ($goroutine.exit) { /* also set by runtime.Goexit() */
        $totalGoroutines--;
        $goroutine.asleep = true;
      }
      if ($goroutine.asleep) {
        $awakeGoroutines--;
        if (!$mainFinished && $awakeGoroutines === 0 && $checkForDeadlock) {
          console.error("fatal error: all goroutines are asleep - deadlock!");
          if ($global.process !== undefined) {
            $global.process.exit(2);
          }
        }
      }
    }
  };
  $goroutine.asleep = false;
  $goroutine.exit = false;
  $goroutine.deferStack = [];
  $goroutine.panicStack = [];
  $schedule($goroutine);
};

var $scheduled = [];
var $runScheduled = function() {
  try {
    var r;
    while ((r = $scheduled.shift()) !== undefined) {
      r();
    }
  } finally {
    if ($scheduled.length > 0) {
      setTimeout($runScheduled, 0);
    }
  }
};

var $schedule = function(goroutine) {
  if (goroutine.asleep) {
    goroutine.asleep = false;
    $awakeGoroutines++;
  }
  $scheduled.push(goroutine);
  if ($curGoroutine === $noGoroutine) {
    $runScheduled();
  }
};

var $setTimeout = function(f, t) {
  $awakeGoroutines++;
  return setTimeout(function() {
    $awakeGoroutines--;
    f();
  }, t);
};

var $block = function() {
  if ($curGoroutine === $noGoroutine) {
    $throwRuntimeError("cannot block in JavaScript callback, fix by wrapping code in goroutine");
  }
  $curGoroutine.asleep = true;
};

var $send = function(chan, value) {
  if (chan.$closed) {
    $throwRuntimeError("send on closed channel");
  }
  var queuedRecv = chan.$recvQueue.shift();
  if (queuedRecv !== undefined) {
    queuedRecv([value, true]);
    return;
  }
  if (chan.$buffer.length < chan.$capacity) {
    chan.$buffer.push(value);
    return;
  }

  var thisGoroutine = $curGoroutine;
  var closedDuringSend;
  chan.$sendQueue.push(function(closed) {
    closedDuringSend = closed;
    $schedule(thisGoroutine);
    return value;
  });
  $block();
  return {
    $blk: function() {
      if (closedDuringSend) {
        $throwRuntimeError("send on closed channel");
      }
    }
  };
};
var $recv = function(chan) {
  var queuedSend = chan.$sendQueue.shift();
  if (queuedSend !== undefined) {
    chan.$buffer.push(queuedSend(false));
  }
  var bufferedValue = chan.$buffer.shift();
  if (bufferedValue !== undefined) {
    return [bufferedValue, true];
  }
  if (chan.$closed) {
    return [chan.$elem.zero(), false];
  }

  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.value; } };
  var queueEntry = function(v) {
    f.value = v;
    $schedule(thisGoroutine);
  };
  chan.$recvQueue.push(queueEntry);
  $block();
  return f;
};
var $close = function(chan) {
  if (chan.$closed) {
    $throwRuntimeError("close of closed channel");
  }
  chan.$closed = true;
  while (true) {
    var queuedSend = chan.$sendQueue.shift();
    if (queuedSend === undefined) {
      break;
    }
    queuedSend(true); /* will panic */
  }
  while (true) {
    var queuedRecv = chan.$recvQueue.shift();
    if (queuedRecv === undefined) {
      break;
    }
    queuedRecv([chan.$elem.zero(), false]);
  }
};
var $select = function(comms) {
  var ready = [];
  var selection = -1;
  for (var i = 0; i < comms.length; i++) {
    var comm = comms[i];
    var chan = comm[0];
    switch (comm.length) {
    case 0: /* default */
      selection = i;
      break;
    case 1: /* recv */
      if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
        ready.push(i);
      }
      break;
    case 2: /* send */
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
        ready.push(i);
      }
      break;
    }
  }

  if (ready.length !== 0) {
    selection = ready[Math.floor(Math.random() * ready.length)];
  }
  if (selection !== -1) {
    var comm = comms[selection];
    switch (comm.length) {
    case 0: /* default */
      return [selection];
    case 1: /* recv */
      return [selection, $recv(comm[0])];
    case 2: /* send */
      $send(comm[0], comm[1]);
      return [selection];
    }
  }

  var entries = [];
  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.selection; } };
  var removeFromQueues = function() {
    for (var i = 0; i < entries.length; i++) {
      var entry = entries[i];
      var queue = entry[0];
      var index = queue.indexOf(entry[1]);
      if (index !== -1) {
        queue.splice(index, 1);
      }
    }
  };
  for (var i = 0; i < comms.length; i++) {
    (function(i) {
      var comm = comms[i];
      switch (comm.length) {
      case 1: /* recv */
        var queueEntry = function(value) {
          f.selection = [i, value];
          removeFromQueues();
          $schedule(thisGoroutine);
        };
        entries.push([comm[0].$recvQueue, queueEntry]);
        comm[0].$recvQueue.push(queueEntry);
        break;
      case 2: /* send */
        var queueEntry = function() {
          if (comm[0].$closed) {
            $throwRuntimeError("send on closed channel");
          }
          f.selection = [i];
          removeFromQueues();
          $schedule(thisGoroutine);
          return comm[1];
        };
        entries.push([comm[0].$sendQueue, queueEntry]);
        comm[0].$sendQueue.push(queueEntry);
        break;
      }
    })(i);
  }
  $block();
  return f;
};

var $jsObjectPtr, $jsErrorPtr;

var $needsExternalization = function(t) {
  switch (t.kind) {
    case $kindBool:
    case $kindInt:
    case $kindInt8:
    case $kindInt16:
    case $kindInt32:
    case $kindUint:
    case $kindUint8:
    case $kindUint16:
    case $kindUint32:
    case $kindUintptr:
    case $kindFloat32:
    case $kindFloat64:
      return false;
    default:
      return t !== $jsObjectPtr;
  }
};

var $externalize = function(v, t) {
  if (t === $jsObjectPtr) {
    return v;
  }
  switch (t.kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindFloat32:
  case $kindFloat64:
    return v;
  case $kindInt64:
  case $kindUint64:
    return $flatten64(v);
  case $kindArray:
    if ($needsExternalization(t.elem)) {
      return $mapArray(v, function(e) { return $externalize(e, t.elem); });
    }
    return v;
  case $kindFunc:
    return $externalizeFunction(v, t, false);
  case $kindInterface:
    if (v === $ifaceNil) {
      return null;
    }
    if (v.constructor === $jsObjectPtr) {
      return v.$val.object;
    }
    return $externalize(v.$val, v.constructor);
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var entry = v[keys[i]];
      m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);
    }
    return m;
  case $kindPtr:
    if (v === t.nil) {
      return null;
    }
    return $externalize(v.$get(), t.elem);
  case $kindSlice:
    if ($needsExternalization(t.elem)) {
      return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });
    }
    return $sliceToArray(v);
  case $kindString:
    if (v.search(/^[\x00-\x7F]*$/) !== -1) {
      return v;
    }
    var s = "", r;
    for (var i = 0; i < v.length; i += r[1]) {
      r = $decodeRune(v, i);
      var c = r[0];
      if (c > 0xFFFF) {
        var h = Math.floor((c - 0x10000) / 0x400) + 0xD800;
        var l = (c - 0x10000) % 0x400 + 0xDC00;
        s += String.fromCharCode(h, l);
        continue;
      }
      s += String.fromCharCode(c);
    }
    return s;
  case $kindStruct:
    var timePkg = $packages["time"];
    if (timePkg !== undefined && v.constructor === timePkg.Time.ptr) {
      var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
      return new Date($flatten64(milli));
    }

    var noJsObject = {};
    var searchJsObject = function(v, t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      switch (t.kind) {
      case $kindPtr:
        if (v === t.nil) {
          return noJsObject;
        }
        return searchJsObject(v.$get(), t.elem);
      case $kindStruct:
        var f = t.fields[0];
        return searchJsObject(v[f.prop], f.typ);
      case $kindInterface:
        return searchJsObject(v.$val, v.constructor);
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(v, t);
    if (o !== noJsObject) {
      return o;
    }

    o = {};
    for (var i = 0; i < t.fields.length; i++) {
      var f = t.fields[i];
      if (!f.exported) {
        continue;
      }
      o[f.name] = $externalize(v[f.prop], f.typ);
    }
    return o;
  }
  $throwRuntimeError("cannot externalize " + t.string);
};

var $externalizeFunction = function(v, t, passThis) {
  if (v === $throwNilPointerError) {
    return null;
  }
  if (v.$externalizeWrapper === undefined) {
    $checkForDeadlock = false;
    v.$externalizeWrapper = function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = [];
          for (var j = i; j < arguments.length; j++) {
            varargs.push($internalize(arguments[j], vt));
          }
          args.push(new (t.params[i])(varargs));
          break;
        }
        args.push($internalize(arguments[i], t.params[i]));
      }
      var canBlock = $curGoroutine.canBlock;
      $curGoroutine.canBlock = false;
      try {
        var result = v.apply(passThis ? this : undefined, args);
      } finally {
        $curGoroutine.canBlock = canBlock;
      }
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $externalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $externalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  }
  return v.$externalizeWrapper;
};

var $internalize = function(v, t, recv) {
  if (t === $jsObjectPtr) {
    return v;
  }
  if (t === $jsObjectPtr.elem) {
    $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
  }
  if (v && v.__internal_object__ !== undefined) {
    return $assertType(v.__internal_object__, t, false);
  }
  var timePkg = $packages["time"];
  if (timePkg !== undefined && t === timePkg.Time) {
    if (!(v !== null && v !== undefined && v.constructor === Date)) {
      $throwRuntimeError("cannot internalize time.Time from " + typeof v + ", must be Date");
    }
    return timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000));
  }
  switch (t.kind) {
  case $kindBool:
    return !!v;
  case $kindInt:
    return parseInt(v);
  case $kindInt8:
    return parseInt(v) << 24 >> 24;
  case $kindInt16:
    return parseInt(v) << 16 >> 16;
  case $kindInt32:
    return parseInt(v) >> 0;
  case $kindUint:
    return parseInt(v);
  case $kindUint8:
    return parseInt(v) << 24 >>> 24;
  case $kindUint16:
    return parseInt(v) << 16 >>> 16;
  case $kindUint32:
  case $kindUintptr:
    return parseInt(v) >>> 0;
  case $kindInt64:
  case $kindUint64:
    return new t(0, v);
  case $kindFloat32:
  case $kindFloat64:
    return parseFloat(v);
  case $kindArray:
    if (v.length !== t.len) {
      $throwRuntimeError("got array with wrong size from JavaScript native");
    }
    return $mapArray(v, function(e) { return $internalize(e, t.elem); });
  case $kindFunc:
    return function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = arguments[i];
          for (var j = 0; j < varargs.$length; j++) {
            args.push($externalize(varargs.$array[varargs.$offset + j], vt));
          }
          break;
        }
        args.push($externalize(arguments[i], t.params[i]));
      }
      var result = v.apply(recv, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $internalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $internalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  case $kindInterface:
    if (t.methods.length !== 0) {
      $throwRuntimeError("cannot internalize " + t.string);
    }
    if (v === null) {
      return $ifaceNil;
    }
    if (v === undefined) {
      return new $jsObjectPtr(undefined);
    }
    switch (v.constructor) {
    case Int8Array:
      return new ($sliceType($Int8))(v);
    case Int16Array:
      return new ($sliceType($Int16))(v);
    case Int32Array:
      return new ($sliceType($Int))(v);
    case Uint8Array:
      return new ($sliceType($Uint8))(v);
    case Uint16Array:
      return new ($sliceType($Uint16))(v);
    case Uint32Array:
      return new ($sliceType($Uint))(v);
    case Float32Array:
      return new ($sliceType($Float32))(v);
    case Float64Array:
      return new ($sliceType($Float64))(v);
    case Array:
      return $internalize(v, $sliceType($emptyInterface));
    case Boolean:
      return new $Bool(!!v);
    case Date:
      if (timePkg === undefined) {
        /* time package is not present, internalize as &js.Object{Date} so it can be externalized into original Date. */
        return new $jsObjectPtr(v);
      }
      return new timePkg.Time($internalize(v, timePkg.Time));
    case Function:
      var funcType = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], true);
      return new funcType($internalize(v, funcType));
    case Number:
      return new $Float64(parseFloat(v));
    case String:
      return new $String($internalize(v, $String));
    default:
      if ($global.Node && v instanceof $global.Node) {
        return new $jsObjectPtr(v);
      }
      var mapType = $mapType($String, $emptyInterface);
      return new mapType($internalize(v, mapType));
    }
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var k = $internalize(keys[i], t.key);
      m[t.key.keyFor(k)] = { k: k, v: $internalize(v[keys[i]], t.elem) };
    }
    return m;
  case $kindPtr:
    if (t.elem.kind === $kindStruct) {
      return $internalize(v, t.elem);
    }
  case $kindSlice:
    return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));
  case $kindString:
    v = String(v);
    if (v.search(/^[\x00-\x7F]*$/) !== -1) {
      return v;
    }
    var s = "";
    var i = 0;
    while (i < v.length) {
      var h = v.charCodeAt(i);
      if (0xD800 <= h && h <= 0xDBFF) {
        var l = v.charCodeAt(i + 1);
        var c = (h - 0xD800) * 0x400 + l - 0xDC00 + 0x10000;
        s += $encodeRune(c);
        i += 2;
        continue;
      }
      s += $encodeRune(h);
      i++;
    }
    return s;
  case $kindStruct:
    var noJsObject = {};
    var searchJsObject = function(t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      if (t === $jsObjectPtr.elem) {
        $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
      }
      switch (t.kind) {
      case $kindPtr:
        return searchJsObject(t.elem);
      case $kindStruct:
        var f = t.fields[0];
        var o = searchJsObject(f.typ);
        if (o !== noJsObject) {
          var n = new t.ptr();
          n[f.prop] = o;
          return n;
        }
        return noJsObject;
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(t);
    if (o !== noJsObject) {
      return o;
    }
  }
  $throwRuntimeError("cannot internalize " + t.string);
};

$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, $init, Object, Error, sliceType, ptrType, ptrType$1, MakeFunc, NewArrayBuffer, init;
	Object = $pkg.Object = $newType(0, $kindStruct, "js.Object", true, "github.com/gopherjs/gopherjs/js", true, function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = null;
			return;
		}
		this.object = object_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", true, "github.com/gopherjs/gopherjs/js", true, function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Object);
	ptrType$1 = $ptrType(Error);
	Object.ptr.prototype.Get = function(key) {
		var $ptr, key, o;
		o = this;
		return o.object[$externalize(key, $String)];
	};
	Object.prototype.Get = function(key) { return this.$val.Get(key); };
	Object.ptr.prototype.Set = function(key, value) {
		var $ptr, key, o, value;
		o = this;
		o.object[$externalize(key, $String)] = $externalize(value, $emptyInterface);
	};
	Object.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
	Object.ptr.prototype.Delete = function(key) {
		var $ptr, key, o;
		o = this;
		delete o.object[$externalize(key, $String)];
	};
	Object.prototype.Delete = function(key) { return this.$val.Delete(key); };
	Object.ptr.prototype.Length = function() {
		var $ptr, o;
		o = this;
		return $parseInt(o.object.length);
	};
	Object.prototype.Length = function() { return this.$val.Length(); };
	Object.ptr.prototype.Index = function(i) {
		var $ptr, i, o;
		o = this;
		return o.object[i];
	};
	Object.prototype.Index = function(i) { return this.$val.Index(i); };
	Object.ptr.prototype.SetIndex = function(i, value) {
		var $ptr, i, o, value;
		o = this;
		o.object[i] = $externalize(value, $emptyInterface);
	};
	Object.prototype.SetIndex = function(i, value) { return this.$val.SetIndex(i, value); };
	Object.ptr.prototype.Call = function(name, args) {
		var $ptr, args, name, o, obj;
		o = this;
		return (obj = o.object, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType)));
	};
	Object.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
	Object.ptr.prototype.Invoke = function(args) {
		var $ptr, args, o;
		o = this;
		return o.object.apply(undefined, $externalize(args, sliceType));
	};
	Object.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Object.ptr.prototype.New = function(args) {
		var $ptr, args, o;
		o = this;
		return new ($global.Function.prototype.bind.apply(o.object, [undefined].concat($externalize(args, sliceType))));
	};
	Object.prototype.New = function(args) { return this.$val.New(args); };
	Object.ptr.prototype.Bool = function() {
		var $ptr, o;
		o = this;
		return !!(o.object);
	};
	Object.prototype.Bool = function() { return this.$val.Bool(); };
	Object.ptr.prototype.String = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $String);
	};
	Object.prototype.String = function() { return this.$val.String(); };
	Object.ptr.prototype.Int = function() {
		var $ptr, o;
		o = this;
		return $parseInt(o.object) >> 0;
	};
	Object.prototype.Int = function() { return this.$val.Int(); };
	Object.ptr.prototype.Int64 = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $Int64);
	};
	Object.prototype.Int64 = function() { return this.$val.Int64(); };
	Object.ptr.prototype.Uint64 = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $Uint64);
	};
	Object.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Object.ptr.prototype.Float = function() {
		var $ptr, o;
		o = this;
		return $parseFloat(o.object);
	};
	Object.prototype.Float = function() { return this.$val.Float(); };
	Object.ptr.prototype.Interface = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $emptyInterface);
	};
	Object.prototype.Interface = function() { return this.$val.Interface(); };
	Object.ptr.prototype.Unsafe = function() {
		var $ptr, o;
		o = this;
		return o.object;
	};
	Object.prototype.Unsafe = function() { return this.$val.Unsafe(); };
	Error.ptr.prototype.Error = function() {
		var $ptr, err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Stack = function() {
		var $ptr, err;
		err = this;
		return $internalize(err.Object.stack, $String);
	};
	Error.prototype.Stack = function() { return this.$val.Stack(); };
	MakeFunc = function(fn) {
		var $ptr, fn;
		return $makeFunc(fn);
	};
	$pkg.MakeFunc = MakeFunc;
	NewArrayBuffer = function(b) {
		var $ptr, b, length, offset, slice;
		slice = b;
		offset = $parseInt(slice.$offset) >> 0;
		length = $parseInt(slice.$length) >> 0;
		return slice.$array.buffer.slice(offset, offset + length >> 0);
	};
	$pkg.NewArrayBuffer = NewArrayBuffer;
	init = function() {
		var $ptr, e;
		e = new Error.ptr(null);
		$unused(e);
	};
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [ptrType], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType], [ptrType], true)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", typ: $funcType([], [$Uintptr], false)}];
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Stack", name: "Stack", pkg: "", typ: $funcType([], [$String], false)}];
	Object.init("github.com/gopherjs/gopherjs/js", [{prop: "object", name: "object", exported: false, typ: ptrType, tag: ""}]);
	Error.init("", [{prop: "Object", name: "", exported: true, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime/internal/sys"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, $init, js, sys, Error, TypeAssertionError, errorString, ptrType$3, init, Caller, Goexit, SetFinalizer;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	sys = $packages["runtime/internal/sys"];
	Error = $pkg.Error = $newType(8, $kindInterface, "runtime.Error", true, "runtime", true, null);
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", true, "runtime", true, function(interfaceString_, concreteString_, assertedString_, missingMethod_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.interfaceString = "";
			this.concreteString = "";
			this.assertedString = "";
			this.missingMethod = "";
			return;
		}
		this.interfaceString = interfaceString_;
		this.concreteString = concreteString_;
		this.assertedString = assertedString_;
		this.missingMethod = missingMethod_;
	});
	errorString = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", true, "runtime", false, null);
	ptrType$3 = $ptrType(TypeAssertionError);
	init = function() {
		var $ptr, e, jsPkg;
		jsPkg = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
		$jsObjectPtr = jsPkg.Object.ptr;
		$jsErrorPtr = jsPkg.Error.ptr;
		$throwRuntimeError = (function(msg) {
			var $ptr, msg;
			$panic(new errorString(msg));
		});
		e = $ifaceNil;
		e = new TypeAssertionError.ptr("", "", "", "");
		$unused(e);
	};
	Caller = function(skip) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, file, info, line, ok, parts, pc, skip;
		pc = 0;
		file = "";
		line = 0;
		ok = false;
		info = new ($global.Error)().stack.split($externalize("\n", $String))[(skip + 2 >> 0)];
		if (info === undefined) {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = 0;
			_tmp$3 = false;
			pc = _tmp;
			file = _tmp$1;
			line = _tmp$2;
			ok = _tmp$3;
			return [pc, file, line, ok];
		}
		parts = info.substring(($parseInt(info.indexOf($externalize("(", $String))) >> 0) + 1 >> 0, $parseInt(info.indexOf($externalize(")", $String))) >> 0).split($externalize(":", $String));
		_tmp$4 = 0;
		_tmp$5 = $internalize(parts[0], $String);
		_tmp$6 = $parseInt(parts[1]) >> 0;
		_tmp$7 = true;
		pc = _tmp$4;
		file = _tmp$5;
		line = _tmp$6;
		ok = _tmp$7;
		return [pc, file, line, ok];
	};
	$pkg.Caller = Caller;
	Goexit = function() {
		var $ptr;
		$curGoroutine.exit = $externalize(true, $Bool);
		$throw(null);
	};
	$pkg.Goexit = Goexit;
	SetFinalizer = function(x, f) {
		var $ptr, f, x;
	};
	$pkg.SetFinalizer = SetFinalizer;
	TypeAssertionError.ptr.prototype.RuntimeError = function() {
		var $ptr;
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.ptr.prototype.Error = function() {
		var $ptr, e, inter;
		e = this;
		inter = e.interfaceString;
		if (inter === "") {
			inter = "interface";
		}
		if (e.concreteString === "") {
			return "interface conversion: " + inter + " is nil, not " + e.assertedString;
		}
		if (e.missingMethod === "") {
			return "interface conversion: " + inter + " is " + e.concreteString + ", not " + e.assertedString;
		}
		return "interface conversion: " + e.concreteString + " is not " + e.assertedString + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	errorString.prototype.RuntimeError = function() {
		var $ptr, e;
		e = this.$val;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "runtime error: " + e;
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	ptrType$3.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}]);
	TypeAssertionError.init("runtime", [{prop: "interfaceString", name: "interfaceString", exported: false, typ: $String, tag: ""}, {prop: "concreteString", name: "concreteString", exported: false, typ: $String, tag: ""}, {prop: "assertedString", name: "assertedString", exported: false, typ: $String, tag: ""}, {prop: "missingMethod", name: "missingMethod", exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sys.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, $init, errorString, ptrType, New;
	errorString = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", true, "errors", false, function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			return;
		}
		this.s = s_;
	});
	ptrType = $ptrType(errorString);
	New = function(text) {
		var $ptr, text;
		return new errorString.ptr(text);
	};
	$pkg.New = New;
	errorString.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.init("errors", [{prop: "s", name: "s", exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/race"] = (function() {
	var $pkg = {}, $init, Acquire, Release, ReleaseMerge, Disable, Enable, ReadRange, WriteRange;
	Acquire = function(addr) {
		var $ptr, addr;
	};
	$pkg.Acquire = Acquire;
	Release = function(addr) {
		var $ptr, addr;
	};
	$pkg.Release = Release;
	ReleaseMerge = function(addr) {
		var $ptr, addr;
	};
	$pkg.ReleaseMerge = ReleaseMerge;
	Disable = function() {
		var $ptr;
	};
	$pkg.Disable = Disable;
	Enable = function() {
		var $ptr;
	};
	$pkg.Enable = Enable;
	ReadRange = function(addr, len) {
		var $ptr, addr, len;
	};
	$pkg.ReadRange = ReadRange;
	WriteRange = function(addr, len) {
		var $ptr, addr, len;
	};
	$pkg.WriteRange = WriteRange;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, $init, js, Value, noCopy, ptrType, ptrType$1, CompareAndSwapInt32, CompareAndSwapUint64, AddInt32, AddUint64, LoadInt32, LoadUint32, LoadUint64, StoreInt32, StoreUint32, StoreUint64;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	Value = $pkg.Value = $newType(0, $kindStruct, "atomic.Value", true, "sync/atomic", true, function(noCopy_, v_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.noCopy = new noCopy.ptr();
			this.v = $ifaceNil;
			return;
		}
		this.noCopy = noCopy_;
		this.v = v_;
	});
	noCopy = $pkg.noCopy = $newType(0, $kindStruct, "atomic.noCopy", true, "sync/atomic", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	ptrType = $ptrType(Value);
	ptrType$1 = $ptrType(noCopy);
	CompareAndSwapInt32 = function(addr, old, new$1) {
		var $ptr, addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapInt32 = CompareAndSwapInt32;
	CompareAndSwapUint64 = function(addr, old, new$1) {
		var $ptr, addr, new$1, old, x;
		if ((x = addr.$get(), (x.$high === old.$high && x.$low === old.$low))) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapUint64 = CompareAndSwapUint64;
	AddInt32 = function(addr, delta) {
		var $ptr, addr, delta, new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	$pkg.AddInt32 = AddInt32;
	AddUint64 = function(addr, delta) {
		var $ptr, addr, delta, new$1, x;
		new$1 = (x = addr.$get(), new $Uint64(x.$high + delta.$high, x.$low + delta.$low));
		addr.$set(new$1);
		return new$1;
	};
	$pkg.AddUint64 = AddUint64;
	LoadInt32 = function(addr) {
		var $ptr, addr;
		return addr.$get();
	};
	$pkg.LoadInt32 = LoadInt32;
	LoadUint32 = function(addr) {
		var $ptr, addr;
		return addr.$get();
	};
	$pkg.LoadUint32 = LoadUint32;
	LoadUint64 = function(addr) {
		var $ptr, addr;
		return addr.$get();
	};
	$pkg.LoadUint64 = LoadUint64;
	StoreInt32 = function(addr, val) {
		var $ptr, addr, val;
		addr.$set(val);
	};
	$pkg.StoreInt32 = StoreInt32;
	StoreUint32 = function(addr, val) {
		var $ptr, addr, val;
		addr.$set(val);
	};
	$pkg.StoreUint32 = StoreUint32;
	StoreUint64 = function(addr, val) {
		var $ptr, addr, val;
		addr.$set(val);
	};
	$pkg.StoreUint64 = StoreUint64;
	Value.ptr.prototype.Load = function() {
		var $ptr, v, x;
		x = $ifaceNil;
		v = this;
		x = v.v;
		return x;
	};
	Value.prototype.Load = function() { return this.$val.Load(); };
	Value.ptr.prototype.Store = function(x) {
		var $ptr, v, x;
		v = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			$panic(new $String("sync/atomic: store of nil value into Value"));
		}
		if (!($interfaceIsEqual(v.v, $ifaceNil)) && !(x.constructor === v.v.constructor)) {
			$panic(new $String("sync/atomic: store of inconsistently typed value into Value"));
		}
		v.v = x;
	};
	Value.prototype.Store = function(x) { return this.$val.Store(x); };
	noCopy.ptr.prototype.Lock = function() {
		var $ptr;
	};
	noCopy.prototype.Lock = function() { return this.$val.Lock(); };
	ptrType.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Store", name: "Store", pkg: "", typ: $funcType([$emptyInterface], [], false)}];
	ptrType$1.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}];
	Value.init("sync/atomic", [{prop: "noCopy", name: "noCopy", exported: false, typ: noCopy, tag: ""}, {prop: "v", name: "v", exported: false, typ: $emptyInterface, tag: ""}]);
	noCopy.init("", []);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, $init, race, runtime, atomic, Pool, WaitGroup, Mutex, Locker, Once, poolLocal, notifyList, RWMutex, rlocker, ptrType, sliceType, ptrType$1, chanType, sliceType$1, structType, ptrType$3, ptrType$6, sliceType$4, ptrType$7, ptrType$8, funcType, arrayType$1, ptrType$10, ptrType$11, chanType$1, ptrType$14, funcType$1, ptrType$15, arrayType$2, semWaiters, runtime_SemacquireMutex, allPools, runtime_registerPoolCleanup, runtime_Semacquire, runtime_Semrelease, runtime_notifyListCheck, runtime_canSpin, throw$1, poolCleanup, init, indexLocal, init$1, runtime_doSpin;
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	atomic = $packages["sync/atomic"];
	Pool = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", true, "sync", true, function(local_, localSize_, store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.local = 0;
			this.localSize = 0;
			this.store = sliceType$4.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.local = local_;
		this.localSize = localSize_;
		this.store = store_;
		this.New = New_;
	});
	WaitGroup = $pkg.WaitGroup = $newType(0, $kindStruct, "sync.WaitGroup", true, "sync", true, function(counter_, ch_, state1_, sema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.counter = 0;
			this.ch = $chanNil;
			this.state1 = arrayType$1.zero();
			this.sema = 0;
			return;
		}
		this.counter = counter_;
		this.ch = ch_;
		this.state1 = state1_;
		this.sema = sema_;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", true, "sync", true, function(state_, sema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = 0;
			this.sema = 0;
			return;
		}
		this.state = state_;
		this.sema = sema_;
	});
	Locker = $pkg.Locker = $newType(8, $kindInterface, "sync.Locker", true, "sync", true, null);
	Once = $pkg.Once = $newType(0, $kindStruct, "sync.Once", true, "sync", true, function(m_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = new Mutex.ptr(0, 0);
			this.done = 0;
			return;
		}
		this.m = m_;
		this.done = done_;
	});
	poolLocal = $pkg.poolLocal = $newType(0, $kindStruct, "sync.poolLocal", true, "sync", false, function(private$0_, shared_, Mutex_, pad_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.private$0 = $ifaceNil;
			this.shared = sliceType$4.nil;
			this.Mutex = new Mutex.ptr(0, 0);
			this.pad = arrayType$2.zero();
			return;
		}
		this.private$0 = private$0_;
		this.shared = shared_;
		this.Mutex = Mutex_;
		this.pad = pad_;
	});
	notifyList = $pkg.notifyList = $newType(0, $kindStruct, "sync.notifyList", true, "sync", false, function(wait_, notify_, lock_, head_, tail_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wait = 0;
			this.notify = 0;
			this.lock = 0;
			this.head = 0;
			this.tail = 0;
			return;
		}
		this.wait = wait_;
		this.notify = notify_;
		this.lock = lock_;
		this.head = head_;
		this.tail = tail_;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "sync.RWMutex", true, "sync", true, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	rlocker = $pkg.rlocker = $newType(0, $kindStruct, "sync.rlocker", true, "sync", false, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	ptrType = $ptrType(Pool);
	sliceType = $sliceType(ptrType);
	ptrType$1 = $ptrType($Uint32);
	chanType = $chanType($Bool, false, false);
	sliceType$1 = $sliceType(chanType);
	structType = $structType("", []);
	ptrType$3 = $ptrType($Int32);
	ptrType$6 = $ptrType(poolLocal);
	sliceType$4 = $sliceType($emptyInterface);
	ptrType$7 = $ptrType(rlocker);
	ptrType$8 = $ptrType(RWMutex);
	funcType = $funcType([], [$emptyInterface], false);
	arrayType$1 = $arrayType($Uint8, 12);
	ptrType$10 = $ptrType($Uint64);
	ptrType$11 = $ptrType(WaitGroup);
	chanType$1 = $chanType(structType, false, false);
	ptrType$14 = $ptrType(Mutex);
	funcType$1 = $funcType([], [], false);
	ptrType$15 = $ptrType(Once);
	arrayType$2 = $arrayType($Uint8, 128);
	Pool.ptr.prototype.Get = function() {
		var $ptr, _r, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 4:
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		$s = -1; return x$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pool.ptr.prototype.Get }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var $ptr, p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	runtime_registerPoolCleanup = function(cleanup) {
		var $ptr, cleanup;
	};
	runtime_Semacquire = function(s) {
		var $ptr, _entry, _key, _r, ch, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; ch = $f.ch; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (s.$get() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.$get() === 0) { */ case 1:
			ch = new $Chan($Bool, 0);
			_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: $append((_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil), ch) };
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semacquire }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f.ch = ch; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_Semrelease = function(s) {
		var $ptr, _entry, _key, ch, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; ch = $f.ch; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil);
		if (w.$length === 0) {
			$s = -1; return;
		}
		ch = (0 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: w };
		if (w.$length === 0) {
			delete semWaiters[ptrType$1.keyFor(s)];
		}
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f.ch = ch; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_notifyListCheck = function(size) {
		var $ptr, size;
	};
	runtime_canSpin = function(i) {
		var $ptr, i;
		return false;
	};
	WaitGroup.ptr.prototype.Add = function(delta) {
		var $ptr, delta, wg;
		wg = this;
		wg.counter = wg.counter + (delta) >> 0;
		if (wg.counter < 0) {
			$panic(new $String("sync: negative WaitGroup counter"));
		}
		if (wg.counter > 0 && wg.ch === $chanNil) {
			wg.ch = new $Chan(structType, 0);
		}
		if ((wg.counter === 0) && !(wg.ch === $chanNil)) {
			$close(wg.ch);
			wg.ch = $chanNil;
		}
	};
	WaitGroup.prototype.Add = function(delta) { return this.$val.Add(delta); };
	WaitGroup.ptr.prototype.Wait = function() {
		var $ptr, _r, wg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; wg = $f.wg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wg = this;
		/* */ if (wg.counter > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (wg.counter > 0) { */ case 1:
			_r = $recv(wg.ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WaitGroup.ptr.prototype.Wait }; } $f.$ptr = $ptr; $f._r = _r; $f.wg = wg; $f.$s = $s; $f.$r = $r; return $f;
	};
	WaitGroup.prototype.Wait = function() { return this.$val.Wait(); };
	throw$1 = function() {
		$throwRuntimeError("native function not implemented: sync.throw");
	};
	Mutex.ptr.prototype.Lock = function() {
		var $ptr, awoke, iter, m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; awoke = $f.awoke; iter = $f.iter; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), 0, 1)) {
			if (false) {
				race.Acquire(m);
			}
			$s = -1; return;
		}
		awoke = false;
		iter = 0;
		/* while (true) { */ case 1:
			old = m.state;
			new$1 = old | 1;
			/* */ if (!(((old & 1) === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(((old & 1) === 0))) { */ case 3:
				if (runtime_canSpin(iter)) {
					if (!awoke && ((old & 2) === 0) && !(((old >> 2 >> 0) === 0)) && atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, old | 2)) {
						awoke = true;
					}
					runtime_doSpin();
					iter = iter + (1) >> 0;
					/* continue; */ $s = 1; continue;
				}
				new$1 = old + 4 >> 0;
			/* } */ case 4:
			if (awoke) {
				if ((new$1 & 2) === 0) {
					throw$1("sync: inconsistent mutex state");
				}
				new$1 = (new$1 & ~(2)) >> 0;
			}
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 5:
				if ((old & 1) === 0) {
					/* break; */ $s = 2; continue;
				}
				$r = runtime_SemacquireMutex((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m)))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				awoke = true;
				iter = 0;
			/* } */ case 6:
		/* } */ $s = 1; continue; case 2:
		if (false) {
			race.Acquire(m);
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.awoke = awoke; $f.iter = iter; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var $ptr, m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (false) {
			$unused(m.state);
			race.Release(m);
		}
		new$1 = atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), -1);
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			throw$1("sync: unlock of unlocked mutex");
		}
		old = new$1;
		/* while (true) { */ case 1:
			if (((old >> 2 >> 0) === 0) || !(((old & 3) === 0))) {
				$s = -1; return;
			}
			new$1 = ((old - 4 >> 0)) | 2;
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 3:
				$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
			old = m.state;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	Once.ptr.prototype.Do = function(f) {
		var $ptr, f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = this;
		if (atomic.LoadUint32((o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o)))) === 1) {
			$s = -1; return;
		}
		$r = o.m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(o.m, "Unlock"), []]);
		/* */ if (o.done === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (o.done === 0) { */ case 2:
			$deferred.push([atomic.StoreUint32, [(o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o))), 1]]);
			$r = f(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.$ptr = $ptr; $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	poolCleanup = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, i, i$1, j, l, p, x;
		_ref = allPools;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= allPools.$length) ? ($throwRuntimeError("index out of range"), undefined) : allPools.$array[allPools.$offset + i] = ptrType.nil);
			i$1 = 0;
			while (true) {
				if (!(i$1 < (p.localSize >> 0))) { break; }
				l = indexLocal(p.local, i$1);
				l.private$0 = $ifaceNil;
				_ref$1 = l.shared;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					j = _i$1;
					(x = l.shared, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j] = $ifaceNil));
					_i$1++;
				}
				l.shared = sliceType$4.nil;
				i$1 = i$1 + (1) >> 0;
			}
			p.local = 0;
			p.localSize = 0;
			_i++;
		}
		allPools = new sliceType([]);
	};
	init = function() {
		var $ptr;
		runtime_registerPoolCleanup(poolCleanup);
	};
	indexLocal = function(l, i) {
		var $ptr, i, l, x;
		return (x = l, (x.nilCheck, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i])));
	};
	init$1 = function() {
		var $ptr, n;
		n = new notifyList.ptr(0, 0, 0, 0, 0);
		runtime_notifyListCheck(20);
	};
	runtime_doSpin = function() {
		$throwRuntimeError("native function not implemented: sync.runtime_doSpin");
	};
	RWMutex.ptr.prototype.RLock = function() {
		var $ptr, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Disable();
		}
		/* */ if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$3(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$3(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { */ case 1:
			$r = runtime_Semacquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (false) {
			race.Enable();
			race.Acquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RLock }; } $f.$ptr = $ptr; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var $ptr, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.ReleaseMerge((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$3(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1);
		/* */ if (r < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 0) { */ case 1:
			if (((r + 1 >> 0) === 0) || ((r + 1 >> 0) === -1073741824)) {
				race.Enable();
				throw$1("sync: RUnlock of unlocked RWMutex");
			}
			/* */ if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$3(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$3(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { */ case 3:
				$r = runtime_Semrelease((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		/* } */ case 2:
		if (false) {
			race.Enable();
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RUnlock }; } $f.$ptr = $ptr; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	RWMutex.ptr.prototype.Lock = function() {
		var $ptr, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Disable();
		}
		$r = rw.w.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$3(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1073741824) + 1073741824 >> 0;
		/* */ if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$3(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$3(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { */ case 2:
			$r = runtime_Semacquire((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		if (false) {
			race.Enable();
			race.Acquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))));
			race.Acquire((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var $ptr, i, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; i = $f.i; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Release((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))));
			race.Release((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$3(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1073741824);
		if (r >= 1073741824) {
			race.Enable();
			throw$1("sync: Unlock of unlocked RWMutex");
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < (r >> 0))) { break; } */ if(!(i < (r >> 0))) { $s = 2; continue; }
			$r = runtime_Semrelease((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = rw.w.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (false) {
			race.Enable();
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.i = i; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLocker = function() {
		var $ptr, rw;
		rw = this;
		return $pointerOfStructConversion(rw, ptrType$7);
	};
	RWMutex.prototype.RLocker = function() { return this.$val.RLocker(); };
	rlocker.ptr.prototype.Lock = function() {
		var $ptr, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = $pointerOfStructConversion(r, ptrType$8).RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Lock = function() { return this.$val.Lock(); };
	rlocker.ptr.prototype.Unlock = function() {
		var $ptr, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = $pointerOfStructConversion(r, ptrType$8).RUnlock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Unlock = function() { return this.$val.Unlock(); };
	WaitGroup.ptr.prototype.Done = function() {
		var $ptr, wg;
		wg = this;
		wg.Add(-1);
	};
	WaitGroup.prototype.Done = function() { return this.$val.Done(); };
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "getSlow", name: "getSlow", pkg: "sync", typ: $funcType([], [$emptyInterface], false)}, {prop: "pin", name: "pin", pkg: "sync", typ: $funcType([], [ptrType$6], false)}, {prop: "pinSlow", name: "pinSlow", pkg: "sync", typ: $funcType([], [ptrType$6], false)}];
	ptrType$11.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Wait", name: "Wait", pkg: "", typ: $funcType([], [], false)}, {prop: "state", name: "state", pkg: "sync", typ: $funcType([], [ptrType$10], false)}, {prop: "Done", name: "Done", pkg: "", typ: $funcType([], [], false)}];
	ptrType$14.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$15.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$1], [], false)}];
	ptrType$8.methods = [{prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}, {prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLocker", name: "RLocker", pkg: "", typ: $funcType([], [Locker], false)}];
	ptrType$7.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	Pool.init("sync", [{prop: "local", name: "local", exported: false, typ: $UnsafePointer, tag: ""}, {prop: "localSize", name: "localSize", exported: false, typ: $Uintptr, tag: ""}, {prop: "store", name: "store", exported: false, typ: sliceType$4, tag: ""}, {prop: "New", name: "New", exported: true, typ: funcType, tag: ""}]);
	WaitGroup.init("sync", [{prop: "counter", name: "counter", exported: false, typ: $Int, tag: ""}, {prop: "ch", name: "ch", exported: false, typ: chanType$1, tag: ""}, {prop: "state1", name: "state1", exported: false, typ: arrayType$1, tag: ""}, {prop: "sema", name: "sema", exported: false, typ: $Uint32, tag: ""}]);
	Mutex.init("sync", [{prop: "state", name: "state", exported: false, typ: $Int32, tag: ""}, {prop: "sema", name: "sema", exported: false, typ: $Uint32, tag: ""}]);
	Locker.init([{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}]);
	Once.init("sync", [{prop: "m", name: "m", exported: false, typ: Mutex, tag: ""}, {prop: "done", name: "done", exported: false, typ: $Uint32, tag: ""}]);
	poolLocal.init("sync", [{prop: "private$0", name: "private", exported: false, typ: $emptyInterface, tag: ""}, {prop: "shared", name: "shared", exported: false, typ: sliceType$4, tag: ""}, {prop: "Mutex", name: "", exported: true, typ: Mutex, tag: ""}, {prop: "pad", name: "pad", exported: false, typ: arrayType$2, tag: ""}]);
	notifyList.init("sync", [{prop: "wait", name: "wait", exported: false, typ: $Uint32, tag: ""}, {prop: "notify", name: "notify", exported: false, typ: $Uint32, tag: ""}, {prop: "lock", name: "lock", exported: false, typ: $Uintptr, tag: ""}, {prop: "head", name: "head", exported: false, typ: $UnsafePointer, tag: ""}, {prop: "tail", name: "tail", exported: false, typ: $UnsafePointer, tag: ""}]);
	RWMutex.init("sync", [{prop: "w", name: "w", exported: false, typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", exported: false, typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", exported: false, typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", exported: false, typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", exported: false, typ: $Int32, tag: ""}]);
	rlocker.init("sync", [{prop: "w", name: "w", exported: false, typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", exported: false, typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", exported: false, typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", exported: false, typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", exported: false, typ: $Int32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = race.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		allPools = sliceType.nil;
		semWaiters = {};
		runtime_SemacquireMutex = runtime_Semacquire;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, $init, errors, sync, Reader, Writer, Closer, ReadCloser, ReadWriteCloser, ReaderFrom, WriterTo, ByteWriter, RuneScanner, stringWriter, LimitedReader, sliceType, ptrType$2, errWhence, errOffset, WriteString, ReadAtLeast, ReadFull, CopyN, Copy, copyBuffer, LimitReader;
	errors = $packages["errors"];
	sync = $packages["sync"];
	Reader = $pkg.Reader = $newType(8, $kindInterface, "io.Reader", true, "io", true, null);
	Writer = $pkg.Writer = $newType(8, $kindInterface, "io.Writer", true, "io", true, null);
	Closer = $pkg.Closer = $newType(8, $kindInterface, "io.Closer", true, "io", true, null);
	ReadCloser = $pkg.ReadCloser = $newType(8, $kindInterface, "io.ReadCloser", true, "io", true, null);
	ReadWriteCloser = $pkg.ReadWriteCloser = $newType(8, $kindInterface, "io.ReadWriteCloser", true, "io", true, null);
	ReaderFrom = $pkg.ReaderFrom = $newType(8, $kindInterface, "io.ReaderFrom", true, "io", true, null);
	WriterTo = $pkg.WriterTo = $newType(8, $kindInterface, "io.WriterTo", true, "io", true, null);
	ByteWriter = $pkg.ByteWriter = $newType(8, $kindInterface, "io.ByteWriter", true, "io", true, null);
	RuneScanner = $pkg.RuneScanner = $newType(8, $kindInterface, "io.RuneScanner", true, "io", true, null);
	stringWriter = $pkg.stringWriter = $newType(8, $kindInterface, "io.stringWriter", true, "io", false, null);
	LimitedReader = $pkg.LimitedReader = $newType(0, $kindStruct, "io.LimitedReader", true, "io", true, function(R_, N_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = $ifaceNil;
			this.N = new $Int64(0, 0);
			return;
		}
		this.R = R_;
		this.N = N_;
	});
	sliceType = $sliceType($Uint8);
	ptrType$2 = $ptrType(LimitedReader);
	WriteString = function(w, s) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, _tuple$2, err, n, ok, s, sw, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; n = $f.n; ok = $f.ok; s = $f.s; sw = $f.sw; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_tuple = $assertType(w, stringWriter, true);
		sw = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = sw.WriteString(s); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			n = _tuple$1[0];
			err = _tuple$1[1];
			$s = -1; return [n, err];
		/* } */ case 2:
		_r$1 = w.Write(new sliceType($stringToBytes(s))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$2 = _r$1;
		n = _tuple$2[0];
		err = _tuple$2[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.n = n; $f.ok = ok; $f.s = s; $f.sw = sw; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.WriteString = WriteString;
	ReadAtLeast = function(r, buf, min) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, buf, err, min, n, nn, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; buf = $f.buf; err = $f.err; min = $f.min; n = $f.n; nn = $f.nn; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		if (buf.$length < min) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrShortBuffer;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(n < min && $interfaceIsEqual(err, $ifaceNil))) { break; } */ if(!(n < min && $interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
			nn = 0;
			_r = r.Read($subslice(buf, n)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			nn = _tuple[0];
			err = _tuple[1];
			n = n + (nn) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (n >= min) {
			err = $ifaceNil;
		} else if (n > 0 && $interfaceIsEqual(err, $pkg.EOF)) {
			err = $pkg.ErrUnexpectedEOF;
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadAtLeast }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.min = min; $f.n = n; $f.nn = nn; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadAtLeast = ReadAtLeast;
	ReadFull = function(r, buf) {
		var $ptr, _r, _tuple, buf, err, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; err = $f.err; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = ReadAtLeast(r, buf, buf.$length); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadFull }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadFull = ReadFull;
	CopyN = function(dst, src, n) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, dst, err, n, src, written, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; dst = $f.dst; err = $f.err; n = $f.n; src = $f.src; written = $f.written; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		written = new $Int64(0, 0);
		err = $ifaceNil;
		_r = Copy(dst, LimitReader(src, n)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		written = _tuple[0];
		err = _tuple[1];
		if ((written.$high === n.$high && written.$low === n.$low)) {
			_tmp = n;
			_tmp$1 = $ifaceNil;
			written = _tmp;
			err = _tmp$1;
			$s = -1; return [written, err];
		}
		if ((written.$high < n.$high || (written.$high === n.$high && written.$low < n.$low)) && $interfaceIsEqual(err, $ifaceNil)) {
			err = $pkg.EOF;
		}
		$s = -1; return [written, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CopyN }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.dst = dst; $f.err = err; $f.n = n; $f.src = src; $f.written = written; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.CopyN = CopyN;
	Copy = function(dst, src) {
		var $ptr, _r, _tuple, dst, err, src, written, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; dst = $f.dst; err = $f.err; src = $f.src; written = $f.written; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		written = new $Int64(0, 0);
		err = $ifaceNil;
		_r = copyBuffer(dst, src, sliceType.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		written = _tuple[0];
		err = _tuple[1];
		$s = -1; return [written, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Copy }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.dst = dst; $f.err = err; $f.src = src; $f.written = written; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Copy = Copy;
	copyBuffer = function(dst, src, buf) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, buf, dst, er, err, ew, nr, nw, ok, ok$1, rt, src, written, wt, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; buf = $f.buf; dst = $f.dst; er = $f.er; err = $f.err; ew = $f.ew; nr = $f.nr; nw = $f.nw; ok = $f.ok; ok$1 = $f.ok$1; rt = $f.rt; src = $f.src; written = $f.written; wt = $f.wt; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		written = new $Int64(0, 0);
		err = $ifaceNil;
		_tuple = $assertType(src, WriterTo, true);
		wt = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = wt.WriteTo(dst); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			written = _tuple$1[0];
			err = _tuple$1[1];
			$s = -1; return [written, err];
		/* } */ case 2:
		_tuple$2 = $assertType(dst, ReaderFrom, true);
		rt = _tuple$2[0];
		ok$1 = _tuple$2[1];
		/* */ if (ok$1) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (ok$1) { */ case 4:
			_r$1 = rt.ReadFrom(src); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$3 = _r$1;
			written = _tuple$3[0];
			err = _tuple$3[1];
			$s = -1; return [written, err];
		/* } */ case 5:
		if (buf === sliceType.nil) {
			buf = $makeSlice(sliceType, 32768);
		}
		/* while (true) { */ case 7:
			_r$2 = src.Read(buf); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$4 = _r$2;
			nr = _tuple$4[0];
			er = _tuple$4[1];
			/* */ if (nr > 0) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (nr > 0) { */ case 10:
				_r$3 = dst.Write($subslice(buf, 0, nr)); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$5 = _r$3;
				nw = _tuple$5[0];
				ew = _tuple$5[1];
				if (nw > 0) {
					written = (x = new $Int64(0, nw), new $Int64(written.$high + x.$high, written.$low + x.$low));
				}
				if (!($interfaceIsEqual(ew, $ifaceNil))) {
					err = ew;
					/* break; */ $s = 8; continue;
				}
				if (!((nr === nw))) {
					err = $pkg.ErrShortWrite;
					/* break; */ $s = 8; continue;
				}
			/* } */ case 11:
			if (!($interfaceIsEqual(er, $ifaceNil))) {
				if (!($interfaceIsEqual(er, $pkg.EOF))) {
					err = er;
				}
				/* break; */ $s = 8; continue;
			}
		/* } */ $s = 7; continue; case 8:
		_tmp = written;
		_tmp$1 = err;
		written = _tmp;
		err = _tmp$1;
		$s = -1; return [written, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: copyBuffer }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.buf = buf; $f.dst = dst; $f.er = er; $f.err = err; $f.ew = ew; $f.nr = nr; $f.nw = nw; $f.ok = ok; $f.ok$1 = ok$1; $f.rt = rt; $f.src = src; $f.written = written; $f.wt = wt; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	LimitReader = function(r, n) {
		var $ptr, n, r;
		return new LimitedReader.ptr(r, n);
	};
	$pkg.LimitReader = LimitReader;
	LimitedReader.ptr.prototype.Read = function(p) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, err, l, n, p, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		l = this;
		if ((x = l.N, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			_tmp = 0;
			_tmp$1 = $pkg.EOF;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if ((x$1 = new $Int64(0, p.$length), x$2 = l.N, (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			p = $subslice(p, 0, $flatten64(l.N));
		}
		_r = l.R.Read(p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		l.N = (x$3 = l.N, x$4 = new $Int64(0, n), new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low));
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: LimitedReader.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	LimitedReader.prototype.Read = function(p) { return this.$val.Read(p); };
	ptrType$2.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}];
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	Writer.init([{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	Closer.init([{prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}]);
	ReadCloser.init([{prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	ReadWriteCloser.init([{prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	ReaderFrom.init([{prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([Reader], [$Int64, $error], false)}]);
	WriterTo.init([{prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([Writer], [$Int64, $error], false)}]);
	ByteWriter.init([{prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}]);
	RuneScanner.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}]);
	stringWriter.init([{prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}]);
	LimitedReader.init("", [{prop: "R", name: "R", exported: true, typ: Reader, tag: ""}, {prop: "N", name: "N", exported: true, typ: $Int64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrShortWrite = errors.New("short write");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, $init, errors, js, race, runtime, sync, mmapper, Errno, Sockaddr, _C_int, Timespec, Stat_t, _Socklen, sliceType, sliceType$1, ptrType$2, arrayType$1, sliceType$5, ptrType$12, arrayType$10, arrayType$13, structType, ptrType$20, ptrType$27, mapType, funcType, funcType$1, ptrType$31, arrayType$15, warningPrinted, lineBuffer, syscallModule, alreadyTriedToLoad, minusOne, envOnce, envLock, env, envs, freebsdConfArch, minRoutingSockaddrLen, mapper, errEAGAIN, errEINVAL, errENOENT, ioSync, ioSync$24ptr, errors$1, init, printWarning, printToConsole, use, indexByte, runtime_envs, syscall, Syscall, Syscall6, BytePtrFromString, readInt, readIntBE, readIntLE, ParseDirent, copyenv, Getenv, msanRead, msanWrite, rsaAlignOf, itoa, uitoa, ByteSliceFromString, ReadDirent, Sysctl, nametomib, direntIno, direntReclen, direntNamlen, errnoErr, Read, Write, sysctl, Close, Exit, Fchdir, Fchmod, Fchown, Fstat, Fsync, Ftruncate, Getdirentries, Lstat, Pread, Pwrite, read, Seek, write, mmap, munmap;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	mmapper = $pkg.mmapper = $newType(0, $kindStruct, "syscall.mmapper", true, "syscall", false, function(Mutex_, active_, mmap_, munmap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Mutex = new sync.Mutex.ptr(0, 0);
			this.active = false;
			this.mmap = $throwNilPointerError;
			this.munmap = $throwNilPointerError;
			return;
		}
		this.Mutex = Mutex_;
		this.active = active_;
		this.mmap = mmap_;
		this.munmap = munmap_;
	});
	Errno = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", true, "syscall", true, null);
	Sockaddr = $pkg.Sockaddr = $newType(8, $kindInterface, "syscall.Sockaddr", true, "syscall", true, null);
	_C_int = $pkg._C_int = $newType(4, $kindInt32, "syscall._C_int", true, "syscall", false, null);
	Timespec = $pkg.Timespec = $newType(0, $kindStruct, "syscall.Timespec", true, "syscall", true, function(Sec_, Nsec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Sec = new $Int64(0, 0);
			this.Nsec = new $Int64(0, 0);
			return;
		}
		this.Sec = Sec_;
		this.Nsec = Nsec_;
	});
	Stat_t = $pkg.Stat_t = $newType(0, $kindStruct, "syscall.Stat_t", true, "syscall", true, function(Dev_, Mode_, Nlink_, Ino_, Uid_, Gid_, Rdev_, Pad_cgo_0_, Atimespec_, Mtimespec_, Ctimespec_, Birthtimespec_, Size_, Blocks_, Blksize_, Flags_, Gen_, Lspare_, Qspare_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dev = 0;
			this.Mode = 0;
			this.Nlink = 0;
			this.Ino = new $Uint64(0, 0);
			this.Uid = 0;
			this.Gid = 0;
			this.Rdev = 0;
			this.Pad_cgo_0 = arrayType$1.zero();
			this.Atimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Mtimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Ctimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Birthtimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Size = new $Int64(0, 0);
			this.Blocks = new $Int64(0, 0);
			this.Blksize = 0;
			this.Flags = 0;
			this.Gen = 0;
			this.Lspare = 0;
			this.Qspare = arrayType$15.zero();
			return;
		}
		this.Dev = Dev_;
		this.Mode = Mode_;
		this.Nlink = Nlink_;
		this.Ino = Ino_;
		this.Uid = Uid_;
		this.Gid = Gid_;
		this.Rdev = Rdev_;
		this.Pad_cgo_0 = Pad_cgo_0_;
		this.Atimespec = Atimespec_;
		this.Mtimespec = Mtimespec_;
		this.Ctimespec = Ctimespec_;
		this.Birthtimespec = Birthtimespec_;
		this.Size = Size_;
		this.Blocks = Blocks_;
		this.Blksize = Blksize_;
		this.Flags = Flags_;
		this.Gen = Gen_;
		this.Lspare = Lspare_;
		this.Qspare = Qspare_;
	});
	_Socklen = $pkg._Socklen = $newType(4, $kindUint32, "syscall._Socklen", true, "syscall", false, null);
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($String);
	ptrType$2 = $ptrType($Uint8);
	arrayType$1 = $arrayType($Uint8, 4);
	sliceType$5 = $sliceType(_C_int);
	ptrType$12 = $ptrType($Uintptr);
	arrayType$10 = $arrayType($Uint8, 32);
	arrayType$13 = $arrayType(_C_int, 14);
	structType = $structType("syscall", [{prop: "addr", name: "addr", exported: false, typ: $Uintptr, tag: ""}, {prop: "len", name: "len", exported: false, typ: $Int, tag: ""}, {prop: "cap", name: "cap", exported: false, typ: $Int, tag: ""}]);
	ptrType$20 = $ptrType($Int64);
	ptrType$27 = $ptrType(mmapper);
	mapType = $mapType(ptrType$2, sliceType);
	funcType = $funcType([$Uintptr, $Uintptr, $Int, $Int, $Int, $Int64], [$Uintptr, $error], false);
	funcType$1 = $funcType([$Uintptr, $Uintptr], [$error], false);
	ptrType$31 = $ptrType(Timespec);
	arrayType$15 = $arrayType($Int64, 2);
	init = function() {
		var $ptr;
		$flushConsole = (function() {
			var $ptr;
			if (!((lineBuffer.$length === 0))) {
				$global.console.log($externalize($bytesToString(lineBuffer), $String));
				lineBuffer = sliceType.nil;
			}
		});
	};
	printWarning = function() {
		var $ptr;
		if (!warningPrinted) {
			$global.console.error($externalize("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md", $String));
		}
		warningPrinted = true;
	};
	printToConsole = function(b) {
		var $ptr, b, goPrintToConsole, i;
		goPrintToConsole = $global.goPrintToConsole;
		if (!(goPrintToConsole === undefined)) {
			goPrintToConsole(b);
			return;
		}
		lineBuffer = $appendSlice(lineBuffer, b);
		while (true) {
			i = indexByte(lineBuffer, 10);
			if (i === -1) {
				break;
			}
			$global.console.log($externalize($bytesToString($subslice(lineBuffer, 0, i)), $String));
			lineBuffer = $subslice(lineBuffer, (i + 1 >> 0));
		}
	};
	use = function(p) {
		var $ptr, p;
	};
	indexByte = function(s, c) {
		var $ptr, _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	runtime_envs = function() {
		var $ptr, envkeys, envs$1, i, jsEnv, key, process;
		process = $global.process;
		if (process === undefined) {
			return sliceType$1.nil;
		}
		jsEnv = process.env;
		envkeys = $global.Object.keys(jsEnv);
		envs$1 = $makeSlice(sliceType$1, $parseInt(envkeys.length));
		i = 0;
		while (true) {
			if (!(i < $parseInt(envkeys.length))) { break; }
			key = $internalize(envkeys[i], $String);
			((i < 0 || i >= envs$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : envs$1.$array[envs$1.$offset + i] = key + "=" + $internalize(jsEnv[$externalize(key, $String)], $String));
			i = i + (1) >> 0;
		}
		return envs$1;
	};
	syscall = function(name) {
		var $ptr, name, require, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			var $ptr;
			$recover();
		}), []]);
		if (syscallModule === null) {
			if (alreadyTriedToLoad) {
				return null;
			}
			alreadyTriedToLoad = true;
			require = $global.require;
			if (require === undefined) {
				$panic(new $String(""));
			}
			syscallModule = require($externalize("syscall", $String));
		}
		return syscallModule[$externalize(name, $String)];
		/* */ } catch(err) { $err = err; return null; } finally { $callDeferred($deferred, $err); }
	};
	Syscall = function(trap, a1, a2, a3) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, a1, a2, a3, array, err, f, r, r1, r2, slice, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0);
			_tmp$1 = (($parseInt(r[1]) >> 0) >>> 0);
			_tmp$2 = (($parseInt(r[2]) >> 0) >>> 0);
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if ((trap === 4) && ((a1 === 1) || (a1 === 2))) {
			array = a2;
			slice = $makeSlice(sliceType, $parseInt(array.length));
			slice.$array = array;
			printToConsole(slice);
			_tmp$3 = ($parseInt(array.length) >>> 0);
			_tmp$4 = 0;
			_tmp$5 = 0;
			r1 = _tmp$3;
			r2 = _tmp$4;
			err = _tmp$5;
			return [r1, r2, err];
		}
		if (trap === 1) {
			runtime.Goexit();
		}
		printWarning();
		_tmp$6 = (minusOne >>> 0);
		_tmp$7 = 0;
		_tmp$8 = 13;
		r1 = _tmp$6;
		r2 = _tmp$7;
		err = _tmp$8;
		return [r1, r2, err];
	};
	$pkg.Syscall = Syscall;
	Syscall6 = function(trap, a1, a2, a3, a4, a5, a6) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a1, a2, a3, a4, a5, a6, err, f, r, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall6");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3, a4, a5, a6);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0);
			_tmp$1 = (($parseInt(r[1]) >> 0) >>> 0);
			_tmp$2 = (($parseInt(r[2]) >> 0) >>> 0);
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if (!((trap === 202))) {
			printWarning();
		}
		_tmp$3 = (minusOne >>> 0);
		_tmp$4 = 0;
		_tmp$5 = 13;
		r1 = _tmp$3;
		r2 = _tmp$4;
		err = _tmp$5;
		return [r1, r2, err];
	};
	$pkg.Syscall6 = Syscall6;
	BytePtrFromString = function(s) {
		var $ptr, _i, _ref, array, b, i, s;
		array = new ($global.Uint8Array)(s.length + 1 >> 0);
		_ref = new sliceType($stringToBytes(s));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === 0) {
				return [ptrType$2.nil, new Errno(22)];
			}
			array[i] = b;
			_i++;
		}
		array[s.length] = 0;
		return [array, $ifaceNil];
	};
	$pkg.BytePtrFromString = BytePtrFromString;
	readInt = function(b, off, size) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, off, ok, size, u;
		u = new $Uint64(0, 0);
		ok = false;
		if (b.$length < ((off + size >>> 0) >> 0)) {
			_tmp = new $Uint64(0, 0);
			_tmp$1 = false;
			u = _tmp;
			ok = _tmp$1;
			return [u, ok];
		}
		if (false) {
			_tmp$2 = readIntBE($subslice(b, off), size);
			_tmp$3 = true;
			u = _tmp$2;
			ok = _tmp$3;
			return [u, ok];
		}
		_tmp$4 = readIntLE($subslice(b, off), size);
		_tmp$5 = true;
		u = _tmp$4;
		ok = _tmp$5;
		return [u, ok];
	};
	readIntBE = function(b, size) {
		var $ptr, _1, b, size, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_1 = size;
		if (_1 === (1)) {
			return new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]));
		} else if (_1 === (2)) {
			$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
			return (x = new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1])), x$1 = $shiftLeft64(new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])), 8), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		} else if (_1 === (4)) {
			$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
			return (x$2 = (x$3 = (x$4 = new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3])), x$5 = $shiftLeft64(new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2])), 8), new $Uint64(x$4.$high | x$5.$high, (x$4.$low | x$5.$low) >>> 0)), x$6 = $shiftLeft64(new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1])), 16), new $Uint64(x$3.$high | x$6.$high, (x$3.$low | x$6.$low) >>> 0)), x$7 = $shiftLeft64(new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])), 24), new $Uint64(x$2.$high | x$7.$high, (x$2.$low | x$7.$low) >>> 0));
		} else if (_1 === (8)) {
			$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
			return (x$8 = (x$9 = (x$10 = (x$11 = (x$12 = (x$13 = (x$14 = new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7])), x$15 = $shiftLeft64(new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6])), 8), new $Uint64(x$14.$high | x$15.$high, (x$14.$low | x$15.$low) >>> 0)), x$16 = $shiftLeft64(new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5])), 16), new $Uint64(x$13.$high | x$16.$high, (x$13.$low | x$16.$low) >>> 0)), x$17 = $shiftLeft64(new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4])), 24), new $Uint64(x$12.$high | x$17.$high, (x$12.$low | x$17.$low) >>> 0)), x$18 = $shiftLeft64(new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3])), 32), new $Uint64(x$11.$high | x$18.$high, (x$11.$low | x$18.$low) >>> 0)), x$19 = $shiftLeft64(new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2])), 40), new $Uint64(x$10.$high | x$19.$high, (x$10.$low | x$19.$low) >>> 0)), x$20 = $shiftLeft64(new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1])), 48), new $Uint64(x$9.$high | x$20.$high, (x$9.$low | x$20.$low) >>> 0)), x$21 = $shiftLeft64(new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])), 56), new $Uint64(x$8.$high | x$21.$high, (x$8.$low | x$21.$low) >>> 0));
		} else {
			$panic(new $String("syscall: readInt with unsupported size"));
		}
	};
	readIntLE = function(b, size) {
		var $ptr, _1, b, size, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_1 = size;
		if (_1 === (1)) {
			return new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]));
		} else if (_1 === (2)) {
			$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
			return (x = new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])), x$1 = $shiftLeft64(new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1])), 8), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		} else if (_1 === (4)) {
			$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
			return (x$2 = (x$3 = (x$4 = new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])), x$5 = $shiftLeft64(new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1])), 8), new $Uint64(x$4.$high | x$5.$high, (x$4.$low | x$5.$low) >>> 0)), x$6 = $shiftLeft64(new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2])), 16), new $Uint64(x$3.$high | x$6.$high, (x$3.$low | x$6.$low) >>> 0)), x$7 = $shiftLeft64(new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3])), 24), new $Uint64(x$2.$high | x$7.$high, (x$2.$low | x$7.$low) >>> 0));
		} else if (_1 === (8)) {
			$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
			return (x$8 = (x$9 = (x$10 = (x$11 = (x$12 = (x$13 = (x$14 = new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])), x$15 = $shiftLeft64(new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1])), 8), new $Uint64(x$14.$high | x$15.$high, (x$14.$low | x$15.$low) >>> 0)), x$16 = $shiftLeft64(new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2])), 16), new $Uint64(x$13.$high | x$16.$high, (x$13.$low | x$16.$low) >>> 0)), x$17 = $shiftLeft64(new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3])), 24), new $Uint64(x$12.$high | x$17.$high, (x$12.$low | x$17.$low) >>> 0)), x$18 = $shiftLeft64(new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4])), 32), new $Uint64(x$11.$high | x$18.$high, (x$11.$low | x$18.$low) >>> 0)), x$19 = $shiftLeft64(new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5])), 40), new $Uint64(x$10.$high | x$19.$high, (x$10.$low | x$19.$low) >>> 0)), x$20 = $shiftLeft64(new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6])), 48), new $Uint64(x$9.$high | x$20.$high, (x$9.$low | x$20.$low) >>> 0)), x$21 = $shiftLeft64(new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7])), 56), new $Uint64(x$8.$high | x$21.$high, (x$8.$low | x$21.$low) >>> 0));
		} else {
			$panic(new $String("syscall: readInt with unsupported size"));
		}
	};
	ParseDirent = function(buf, max, names) {
		var $ptr, _i, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, buf, c, consumed, count, i, ino, max, name, names, namlen, newnames, ok, origlen, rec, reclen, x, x$1, x$2;
		consumed = 0;
		count = 0;
		newnames = sliceType$1.nil;
		origlen = buf.$length;
		count = 0;
		while (true) {
			if (!(!((max === 0)) && buf.$length > 0)) { break; }
			_tuple = direntReclen(buf);
			reclen = _tuple[0];
			ok = _tuple[1];
			if (!ok || (x = new $Uint64(0, buf.$length), (reclen.$high > x.$high || (reclen.$high === x.$high && reclen.$low > x.$low)))) {
				_tmp = origlen;
				_tmp$1 = count;
				_tmp$2 = names;
				consumed = _tmp;
				count = _tmp$1;
				newnames = _tmp$2;
				return [consumed, count, newnames];
			}
			rec = $subslice(buf, 0, $flatten64(reclen));
			buf = $subslice(buf, $flatten64(reclen));
			_tuple$1 = direntIno(rec);
			ino = _tuple$1[0];
			ok = _tuple$1[1];
			if (!ok) {
				break;
			}
			if ((ino.$high === 0 && ino.$low === 0)) {
				continue;
			}
			_tuple$2 = direntNamlen(rec);
			namlen = _tuple$2[0];
			ok = _tuple$2[1];
			if (!ok || (x$1 = new $Uint64(0 + namlen.$high, 21 + namlen.$low), x$2 = new $Uint64(0, rec.$length), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
				break;
			}
			name = $subslice(rec, 21, $flatten64(new $Uint64(0 + namlen.$high, 21 + namlen.$low)));
			_ref = name;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (c === 0) {
					name = $subslice(name, 0, i);
					break;
				}
				_i++;
			}
			if ($bytesToString(name) === "." || $bytesToString(name) === "..") {
				continue;
			}
			max = max - (1) >> 0;
			count = count + (1) >> 0;
			names = $append(names, $bytesToString(name));
		}
		_tmp$3 = origlen - buf.$length >> 0;
		_tmp$4 = count;
		_tmp$5 = names;
		consumed = _tmp$3;
		count = _tmp$4;
		newnames = _tmp$5;
		return [consumed, count, newnames];
	};
	$pkg.ParseDirent = ParseDirent;
	copyenv = function() {
		var $ptr, _entry, _i, _key, _ref, _tuple, i, j, key, ok, s;
		env = {};
		_ref = envs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			j = 0;
			while (true) {
				if (!(j < s.length)) { break; }
				if (s.charCodeAt(j) === 61) {
					key = $substring(s, 0, j);
					_tuple = (_entry = env[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [0, false]);
					ok = _tuple[1];
					if (!ok) {
						_key = key; (env || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: i };
					} else {
						((i < 0 || i >= envs.$length) ? ($throwRuntimeError("index out of range"), undefined) : envs.$array[envs.$offset + i] = "");
					}
					break;
				}
				j = j + (1) >> 0;
			}
			_i++;
		}
	};
	Getenv = function(key) {
		var $ptr, _entry, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, found, i, i$1, key, ok, s, value, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; found = $f.found; i = $f.i; i$1 = $f.i$1; key = $f.key; ok = $f.ok; s = $f.s; value = $f.value; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		value = "";
		found = false;
		$r = envOnce.Do(copyenv); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (key.length === 0) {
			_tmp = "";
			_tmp$1 = false;
			value = _tmp;
			found = _tmp$1;
			$s = -1; return [value, found];
		}
		$r = envLock.RLock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(envLock, "RUnlock"), []]);
		_tuple = (_entry = env[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		i = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			_tmp$2 = "";
			_tmp$3 = false;
			value = _tmp$2;
			found = _tmp$3;
			$s = -1; return [value, found];
		}
		s = ((i < 0 || i >= envs.$length) ? ($throwRuntimeError("index out of range"), undefined) : envs.$array[envs.$offset + i]);
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			if (s.charCodeAt(i$1) === 61) {
				_tmp$4 = $substring(s, (i$1 + 1 >> 0));
				_tmp$5 = true;
				value = _tmp$4;
				found = _tmp$5;
				$s = -1; return [value, found];
			}
			i$1 = i$1 + (1) >> 0;
		}
		_tmp$6 = "";
		_tmp$7 = false;
		value = _tmp$6;
		found = _tmp$7;
		$s = -1; return [value, found];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [value, found]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Getenv }; } $f.$ptr = $ptr; $f._entry = _entry; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.found = found; $f.i = i; $f.i$1 = i$1; $f.key = key; $f.ok = ok; $f.s = s; $f.value = value; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.Getenv = Getenv;
	msanRead = function(addr, len) {
		var $ptr, addr, len;
	};
	msanWrite = function(addr, len) {
		var $ptr, addr, len;
	};
	rsaAlignOf = function(salen) {
		var $ptr, salen, salign;
		salign = 8;
		if (true) {
			salign = 4;
		} else if (false) {
			salign = 8;
		} else if (false) {
			if (freebsdConfArch === "amd64") {
				salign = 8;
			}
		}
		if (salen === 0) {
			return salign;
		}
		return (((salen + salign >> 0) - 1 >> 0)) & (~((salign - 1 >> 0)) >> 0);
	};
	itoa = function(val) {
		var $ptr, val;
		if (val < 0) {
			return "-" + uitoa((-val >>> 0));
		}
		return uitoa((val >>> 0));
	};
	uitoa = function(val) {
		var $ptr, _q, _r, buf, i, val;
		buf = arrayType$10.zero();
		i = 31;
		while (true) {
			if (!(val >= 10)) { break; }
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((_r = val % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			i = i - (1) >> 0;
			val = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((val + 48 >>> 0) << 24 >>> 24));
		return $bytesToString($subslice(new sliceType(buf), i));
	};
	ByteSliceFromString = function(s) {
		var $ptr, a, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === 0) {
				return [sliceType.nil, new Errno(22)];
			}
			i = i + (1) >> 0;
		}
		a = $makeSlice(sliceType, (s.length + 1 >> 0));
		$copyString(a, s);
		return [a, $ifaceNil];
	};
	$pkg.ByteSliceFromString = ByteSliceFromString;
	Timespec.ptr.prototype.Unix = function() {
		var $ptr, _tmp, _tmp$1, nsec, sec, ts;
		sec = new $Int64(0, 0);
		nsec = new $Int64(0, 0);
		ts = this;
		_tmp = ts.Sec;
		_tmp$1 = ts.Nsec;
		sec = _tmp;
		nsec = _tmp$1;
		return [sec, nsec];
	};
	Timespec.prototype.Unix = function() { return this.$val.Unix(); };
	Timespec.ptr.prototype.Nano = function() {
		var $ptr, ts, x, x$1;
		ts = this;
		return (x = $mul64(ts.Sec, new $Int64(0, 1000000000)), x$1 = ts.Nsec, new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Timespec.prototype.Nano = function() { return this.$val.Nano(); };
	ReadDirent = function(fd, buf) {
		var $ptr, _tuple, base, buf, err, fd, n;
		n = 0;
		err = $ifaceNil;
		base = new Uint8Array(8);
		_tuple = Getdirentries(fd, buf, base);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	$pkg.ReadDirent = ReadDirent;
	Sysctl = function(name) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, buf, err, mib, n, n$24ptr, name, value, x;
		value = "";
		err = $ifaceNil;
		_tuple = nametomib(name);
		mib = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = "";
			_tmp$1 = err;
			value = _tmp;
			err = _tmp$1;
			return [value, err];
		}
		n = 0;
		err = sysctl(mib, ptrType$2.nil, (n$24ptr || (n$24ptr = new ptrType$12(function() { return n; }, function($v) { n = $v; }))), ptrType$2.nil, 0);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = "";
			_tmp$3 = err;
			value = _tmp$2;
			err = _tmp$3;
			return [value, err];
		}
		if (n === 0) {
			_tmp$4 = "";
			_tmp$5 = $ifaceNil;
			value = _tmp$4;
			err = _tmp$5;
			return [value, err];
		}
		buf = $makeSlice(sliceType, n);
		err = sysctl(mib, $indexPtr(buf.$array, buf.$offset + 0, ptrType$2), (n$24ptr || (n$24ptr = new ptrType$12(function() { return n; }, function($v) { n = $v; }))), ptrType$2.nil, 0);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$6 = "";
			_tmp$7 = err;
			value = _tmp$6;
			err = _tmp$7;
			return [value, err];
		}
		if (n > 0 && ((x = n - 1 >>> 0, ((x < 0 || x >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + x])) === 0)) {
			n = n - (1) >>> 0;
		}
		_tmp$8 = $bytesToString($subslice(buf, 0, n));
		_tmp$9 = $ifaceNil;
		value = _tmp$8;
		err = _tmp$9;
		return [value, err];
	};
	$pkg.Sysctl = Sysctl;
	nametomib = function(name) {
		var $ptr, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, buf, bytes, err, mib, n, n$24ptr, name, p;
		mib = sliceType$5.nil;
		err = $ifaceNil;
		buf = arrayType$13.zero();
		n = 48;
		p = $sliceToArray(new sliceType(buf));
		_tuple = ByteSliceFromString(name);
		bytes = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = sliceType$5.nil;
			_tmp$1 = err;
			mib = _tmp;
			err = _tmp$1;
			return [mib, err];
		}
		err = sysctl(new sliceType$5([0, 3]), p, (n$24ptr || (n$24ptr = new ptrType$12(function() { return n; }, function($v) { n = $v; }))), $indexPtr(bytes.$array, bytes.$offset + 0, ptrType$2), (name.length >>> 0));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = sliceType$5.nil;
			_tmp$3 = err;
			mib = _tmp$2;
			err = _tmp$3;
			return [mib, err];
		}
		_tmp$4 = $subslice(new sliceType$5(buf), 0, (_q = n / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")));
		_tmp$5 = $ifaceNil;
		mib = _tmp$4;
		err = _tmp$5;
		return [mib, err];
	};
	direntIno = function(buf) {
		var $ptr, buf;
		return readInt(buf, 0, 8);
	};
	direntReclen = function(buf) {
		var $ptr, buf;
		return readInt(buf, 16, 2);
	};
	direntNamlen = function(buf) {
		var $ptr, buf;
		return readInt(buf, 18, 2);
	};
	mmapper.ptr.prototype.Mmap = function(fd, offset, length, prot, flags) {
		var $ptr, _key, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, addr, b, data, err, errno, fd, flags, length, m, offset, p, prot, sl, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; addr = $f.addr; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; fd = $f.fd; flags = $f.flags; length = $f.length; m = $f.m; offset = $f.offset; p = $f.p; prot = $f.prot; sl = $f.sl; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		sl = [sl];
		data = sliceType.nil;
		err = $ifaceNil;
		m = this;
		if (length <= 0) {
			_tmp = sliceType.nil;
			_tmp$1 = new Errno(22);
			data = _tmp;
			err = _tmp$1;
			$s = -1; return [data, err];
		}
		_r = m.mmap(0, (length >>> 0), prot, flags, fd, offset); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		addr = _tuple[0];
		errno = _tuple[1];
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			_tmp$2 = sliceType.nil;
			_tmp$3 = errno;
			data = _tmp$2;
			err = _tmp$3;
			$s = -1; return [data, err];
		}
		sl[0] = new structType.ptr(addr, length, length);
		b = sl[0];
		p = $indexPtr(b.$array, b.$offset + (b.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		_key = p; (m.active || $throwRuntimeError("assignment to entry in nil map"))[ptrType$2.keyFor(_key)] = { k: _key, v: b };
		_tmp$4 = b;
		_tmp$5 = $ifaceNil;
		data = _tmp$4;
		err = _tmp$5;
		$s = -1; return [data, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [data, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Mmap }; } $f.$ptr = $ptr; $f._key = _key; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.addr = addr; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.fd = fd; $f.flags = flags; $f.length = length; $f.m = m; $f.offset = offset; $f.p = p; $f.prot = prot; $f.sl = sl; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Mmap = function(fd, offset, length, prot, flags) { return this.$val.Mmap(fd, offset, length, prot, flags); };
	mmapper.ptr.prototype.Munmap = function(data) {
		var $ptr, _entry, _r, b, data, err, errno, m, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; m = $f.m; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = $ifaceNil;
		m = this;
		if ((data.$length === 0) || !((data.$length === data.$capacity))) {
			err = new Errno(22);
			$s = -1; return err;
		}
		p = $indexPtr(data.$array, data.$offset + (data.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		b = (_entry = m.active[ptrType$2.keyFor(p)], _entry !== undefined ? _entry.v : sliceType.nil);
		if (b === sliceType.nil || !($indexPtr(b.$array, b.$offset + 0, ptrType$2) === $indexPtr(data.$array, data.$offset + 0, ptrType$2))) {
			err = new Errno(22);
			$s = -1; return err;
		}
		_r = m.munmap($sliceToArray(b), (b.$length >>> 0)); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		errno = _r;
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			err = errno;
			$s = -1; return err;
		}
		delete m.active[ptrType$2.keyFor(p)];
		err = $ifaceNil;
		$s = -1; return err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Munmap }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.m = m; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Munmap = function(data) { return this.$val.Munmap(data); };
	Errno.prototype.Error = function() {
		var $ptr, e, s;
		e = this.$val;
		if (0 <= (e >> 0) && (e >> 0) < 106) {
			s = ((e < 0 || e >= errors$1.length) ? ($throwRuntimeError("index out of range"), undefined) : errors$1[e]);
			if (!(s === "")) {
				return s;
			}
		}
		return "errno " + itoa((e >> 0));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var $ptr, e;
		e = this.$val;
		return (e === 4) || (e === 24) || (e === 54) || (e === 53) || new Errno(e).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var $ptr, e;
		e = this.$val;
		return (e === 35) || (e === 35) || (e === 60);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	errnoErr = function(e) {
		var $ptr, _1, e;
		_1 = e;
		if (_1 === (0)) {
			return $ifaceNil;
		} else if (_1 === (35)) {
			return errEAGAIN;
		} else if (_1 === (22)) {
			return errEINVAL;
		} else if (_1 === (2)) {
			return errENOENT;
		}
		return new Errno(e);
	};
	Read = function(fd, p) {
		var $ptr, _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		_tuple = read(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		if (false) {
			if (n > 0) {
				race.WriteRange($sliceToArray(p), n);
			}
			if ($interfaceIsEqual(err, $ifaceNil)) {
				race.Acquire((ioSync$24ptr || (ioSync$24ptr = new ptrType$20(function() { return ioSync; }, function($v) { ioSync = $v; }))));
			}
		}
		if (false && n > 0) {
			msanWrite($sliceToArray(p), n);
		}
		return [n, err];
	};
	$pkg.Read = Read;
	Write = function(fd, p) {
		var $ptr, _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		if (false) {
			race.ReleaseMerge((ioSync$24ptr || (ioSync$24ptr = new ptrType$20(function() { return ioSync; }, function($v) { ioSync = $v; }))));
		}
		_tuple = write(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		if (false && n > 0) {
			race.ReadRange($sliceToArray(p), n);
		}
		if (false && n > 0) {
			msanRead($sliceToArray(p), n);
		}
		return [n, err];
	};
	$pkg.Write = Write;
	sysctl = function(mib, old, oldlen, new$1, newlen) {
		var $ptr, _p0, _tuple, e1, err, mib, new$1, newlen, old, oldlen;
		err = $ifaceNil;
		_p0 = 0;
		if (mib.$length > 0) {
			_p0 = $sliceToArray(mib);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(202, _p0, (mib.$length >>> 0), old, oldlen, new$1, newlen);
		e1 = _tuple[2];
		use(_p0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	Close = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(6, (fd >>> 0), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Close = Close;
	Exit = function(code) {
		var $ptr, code;
		Syscall(1, (code >>> 0), 0, 0);
		return;
	};
	$pkg.Exit = Exit;
	Fchdir = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(13, (fd >>> 0), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchdir = Fchdir;
	Fchmod = function(fd, mode) {
		var $ptr, _tuple, e1, err, fd, mode;
		err = $ifaceNil;
		_tuple = Syscall(124, (fd >>> 0), (mode >>> 0), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchmod = Fchmod;
	Fchown = function(fd, uid, gid) {
		var $ptr, _tuple, e1, err, fd, gid, uid;
		err = $ifaceNil;
		_tuple = Syscall(123, (fd >>> 0), (uid >>> 0), (gid >>> 0));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchown = Fchown;
	Fstat = function(fd, stat) {
		var $ptr, _array, _struct, _tuple, _view, e1, err, fd, stat;
		err = $ifaceNil;
		_array = new Uint8Array(144);
		_tuple = Syscall(339, (fd >>> 0), _array, 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fstat = Fstat;
	Fsync = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(95, (fd >>> 0), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fsync = Fsync;
	Ftruncate = function(fd, length) {
		var $ptr, _tuple, e1, err, fd, length;
		err = $ifaceNil;
		_tuple = Syscall(201, (fd >>> 0), (length.$low >>> 0), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Ftruncate = Ftruncate;
	Getdirentries = function(fd, buf, basep) {
		var $ptr, _p0, _tuple, basep, buf, e1, err, fd, n, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = $sliceToArray(buf);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(344, (fd >>> 0), _p0, (buf.$length >>> 0), basep, 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Getdirentries = Getdirentries;
	Lstat = function(path, stat) {
		var $ptr, _array, _p0, _struct, _tuple, _tuple$1, _view, e1, err, path, stat;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(340, _p0, _array, 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		e1 = _tuple$1[2];
		use(_p0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Lstat = Lstat;
	Pread = function(fd, p, offset) {
		var $ptr, _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(153, (fd >>> 0), _p0, (p.$length >>> 0), (offset.$low >>> 0), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pread = Pread;
	Pwrite = function(fd, p, offset) {
		var $ptr, _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(154, (fd >>> 0), _p0, (p.$length >>> 0), (offset.$low >>> 0), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pwrite = Pwrite;
	read = function(fd, p) {
		var $ptr, _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(3, (fd >>> 0), _p0, (p.$length >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	Seek = function(fd, offset, whence) {
		var $ptr, _tuple, e1, err, fd, newoffset, offset, r0, whence;
		newoffset = new $Int64(0, 0);
		err = $ifaceNil;
		_tuple = Syscall(199, (fd >>> 0), (offset.$low >>> 0), (whence >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		newoffset = new $Int64(0, r0.constructor === Number ? r0 : 1);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [newoffset, err];
	};
	$pkg.Seek = Seek;
	write = function(fd, p) {
		var $ptr, _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(4, (fd >>> 0), _p0, (p.$length >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	mmap = function(addr, length, prot, flag, fd, pos) {
		var $ptr, _tuple, addr, e1, err, fd, flag, length, pos, prot, r0, ret;
		ret = 0;
		err = $ifaceNil;
		_tuple = Syscall6(197, addr, length, (prot >>> 0), (flag >>> 0), (fd >>> 0), (pos.$low >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		ret = r0;
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [ret, err];
	};
	munmap = function(addr, length) {
		var $ptr, _tuple, addr, e1, err, length;
		err = $ifaceNil;
		_tuple = Syscall(73, addr, length, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	ptrType$27.methods = [{prop: "Mmap", name: "Mmap", pkg: "", typ: $funcType([$Int, $Int64, $Int, $Int, $Int], [sliceType, $error], false)}, {prop: "Munmap", name: "Munmap", pkg: "", typ: $funcType([sliceType], [$error], false)}];
	Errno.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$31.methods = [{prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64, $Int64], false)}, {prop: "Nano", name: "Nano", pkg: "", typ: $funcType([], [$Int64], false)}];
	mmapper.init("syscall", [{prop: "Mutex", name: "", exported: true, typ: sync.Mutex, tag: ""}, {prop: "active", name: "active", exported: false, typ: mapType, tag: ""}, {prop: "mmap", name: "mmap", exported: false, typ: funcType, tag: ""}, {prop: "munmap", name: "munmap", exported: false, typ: funcType$1, tag: ""}]);
	Sockaddr.init([{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}]);
	Timespec.init("", [{prop: "Sec", name: "Sec", exported: true, typ: $Int64, tag: ""}, {prop: "Nsec", name: "Nsec", exported: true, typ: $Int64, tag: ""}]);
	Stat_t.init("", [{prop: "Dev", name: "Dev", exported: true, typ: $Int32, tag: ""}, {prop: "Mode", name: "Mode", exported: true, typ: $Uint16, tag: ""}, {prop: "Nlink", name: "Nlink", exported: true, typ: $Uint16, tag: ""}, {prop: "Ino", name: "Ino", exported: true, typ: $Uint64, tag: ""}, {prop: "Uid", name: "Uid", exported: true, typ: $Uint32, tag: ""}, {prop: "Gid", name: "Gid", exported: true, typ: $Uint32, tag: ""}, {prop: "Rdev", name: "Rdev", exported: true, typ: $Int32, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", exported: true, typ: arrayType$1, tag: ""}, {prop: "Atimespec", name: "Atimespec", exported: true, typ: Timespec, tag: ""}, {prop: "Mtimespec", name: "Mtimespec", exported: true, typ: Timespec, tag: ""}, {prop: "Ctimespec", name: "Ctimespec", exported: true, typ: Timespec, tag: ""}, {prop: "Birthtimespec", name: "Birthtimespec", exported: true, typ: Timespec, tag: ""}, {prop: "Size", name: "Size", exported: true, typ: $Int64, tag: ""}, {prop: "Blocks", name: "Blocks", exported: true, typ: $Int64, tag: ""}, {prop: "Blksize", name: "Blksize", exported: true, typ: $Int32, tag: ""}, {prop: "Flags", name: "Flags", exported: true, typ: $Uint32, tag: ""}, {prop: "Gen", name: "Gen", exported: true, typ: $Uint32, tag: ""}, {prop: "Lspare", name: "Lspare", exported: true, typ: $Int32, tag: ""}, {prop: "Qspare", name: "Qspare", exported: true, typ: arrayType$15, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = race.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		lineBuffer = sliceType.nil;
		syscallModule = null;
		envOnce = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
		envLock = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
		env = false;
		freebsdConfArch = "";
		ioSync = new $Int64(0, 0);
		warningPrinted = false;
		alreadyTriedToLoad = false;
		minusOne = -1;
		envs = runtime_envs();
		$pkg.Stdin = 0;
		$pkg.Stdout = 1;
		$pkg.Stderr = 2;
		errEAGAIN = new Errno(35);
		errEINVAL = new Errno(22);
		errENOENT = new Errno(2);
		errors$1 = $toNativeArray($kindString, ["", "operation not permitted", "no such file or directory", "no such process", "interrupted system call", "input/output error", "device not configured", "argument list too long", "exec format error", "bad file descriptor", "no child processes", "resource deadlock avoided", "cannot allocate memory", "permission denied", "bad address", "block device required", "resource busy", "file exists", "cross-device link", "operation not supported by device", "not a directory", "is a directory", "invalid argument", "too many open files in system", "too many open files", "inappropriate ioctl for device", "text file busy", "file too large", "no space left on device", "illegal seek", "read-only file system", "too many links", "broken pipe", "numerical argument out of domain", "result too large", "resource temporarily unavailable", "operation now in progress", "operation already in progress", "socket operation on non-socket", "destination address required", "message too long", "protocol wrong type for socket", "protocol not available", "protocol not supported", "socket type not supported", "operation not supported", "protocol family not supported", "address family not supported by protocol family", "address already in use", "can't assign requested address", "network is down", "network is unreachable", "network dropped connection on reset", "software caused connection abort", "connection reset by peer", "no buffer space available", "socket is already connected", "socket is not connected", "can't send after socket shutdown", "too many references: can't splice", "operation timed out", "connection refused", "too many levels of symbolic links", "file name too long", "host is down", "no route to host", "directory not empty", "too many processes", "too many users", "disc quota exceeded", "stale NFS file handle", "too many levels of remote in path", "RPC struct is bad", "RPC version wrong", "RPC prog. not avail", "program version wrong", "bad procedure for program", "no locks available", "function not implemented", "inappropriate file type or format", "authentication error", "need authenticator", "device power is off", "device error", "value too large to be stored in data type", "bad executable (or shared library)", "bad CPU type in executable", "shared library version mismatch", "malformed Mach-o file", "operation canceled", "identifier removed", "no message of desired type", "illegal byte sequence", "attribute not found", "bad message", "EMULTIHOP (Reserved)", "no message available on STREAM", "ENOLINK (Reserved)", "no STREAM resources", "not a STREAM", "protocol error", "STREAM ioctl timeout", "operation not supported on socket", "policy not found", "state not recoverable", "previous owner died"]);
		mapper = new mmapper.ptr(new sync.Mutex.ptr(0, 0), {}, mmap, munmap);
		minRoutingSockaddrLen = rsaAlignOf(0);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
	var $pkg = {}, $init, Mutex, Once, ptrType, funcType, ptrType$3;
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "nosync.Mutex", true, "github.com/gopherjs/gopherjs/nosync", true, function(locked_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.locked = false;
			return;
		}
		this.locked = locked_;
	});
	Once = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", true, "github.com/gopherjs/gopherjs/nosync", true, function(doing_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.doing = false;
			this.done = false;
			return;
		}
		this.doing = doing_;
		this.done = done_;
	});
	ptrType = $ptrType(Mutex);
	funcType = $funcType([], [], false);
	ptrType$3 = $ptrType(Once);
	Mutex.ptr.prototype.Lock = function() {
		var $ptr, m;
		m = this;
		if (m.locked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		m.locked = true;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var $ptr, m;
		m = this;
		if (!m.locked) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		m.locked = false;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	Once.ptr.prototype.Do = function(f) {
		var $ptr, f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = [o];
		o[0] = this;
		if (o[0].done) {
			$s = -1; return;
		}
		if (o[0].doing) {
			$panic(new $String("nosync: Do called within f"));
		}
		o[0].doing = true;
		$deferred.push([(function(o) { return function() {
			var $ptr;
			o[0].doing = false;
			o[0].done = true;
		}; })(o), []]);
		$r = f(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.$ptr = $ptr; $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	ptrType.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$3.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType], [], false)}];
	Mutex.init("github.com/gopherjs/gopherjs/nosync", [{prop: "locked", name: "locked", exported: false, typ: $Bool, tag: ""}]);
	Once.init("github.com/gopherjs/gopherjs/nosync", [{prop: "doing", name: "doing", exported: false, typ: $Bool, tag: ""}, {prop: "done", name: "done", exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, $init, errors, js, nosync, runtime, syscall, runtimeTimer, ParseError, Timer, Time, Month, Weekday, Duration, Location, zone, zoneTrans, sliceType, sliceType$1, ptrType, sliceType$2, arrayType, sliceType$3, arrayType$1, arrayType$2, ptrType$1, chanType, funcType, arrayType$4, funcType$1, ptrType$2, ptrType$3, ptrType$4, chanType$1, ptrType$6, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, months, days, daysBefore, utcLoc, utcLoc$24ptr, localLoc, localLoc$24ptr, localOnce, zoneinfo, badData, _tuple, _r, init, initLocal, runtimeNano, now, startTimer, stopTimer, indexByte, startsWithLowerCase, nextStdChunk, match, lookup, appendInt, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, when, NewTimer, sendTime, After, AfterFunc, goFunc, absWeekday, absClock, fmtFrac, fmtInt, Until, absDate, daysIn, Now, Unix, isLeap, norm, Date, div, FixedZone;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	runtime = $packages["runtime"];
	syscall = $packages["syscall"];
	runtimeTimer = $pkg.runtimeTimer = $newType(0, $kindStruct, "time.runtimeTimer", true, "time", false, function(i_, when_, period_, f_, arg_, timeout_, active_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.i = 0;
			this.when = new $Int64(0, 0);
			this.period = new $Int64(0, 0);
			this.f = $throwNilPointerError;
			this.arg = $ifaceNil;
			this.timeout = null;
			this.active = false;
			return;
		}
		this.i = i_;
		this.when = when_;
		this.period = period_;
		this.f = f_;
		this.arg = arg_;
		this.timeout = timeout_;
		this.active = active_;
	});
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", true, "time", true, function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Layout = "";
			this.Value = "";
			this.LayoutElem = "";
			this.ValueElem = "";
			this.Message = "";
			return;
		}
		this.Layout = Layout_;
		this.Value = Value_;
		this.LayoutElem = LayoutElem_;
		this.ValueElem = ValueElem_;
		this.Message = Message_;
	});
	Timer = $pkg.Timer = $newType(0, $kindStruct, "time.Timer", true, "time", true, function(C_, r_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.C = $chanNil;
			this.r = new runtimeTimer.ptr(0, new $Int64(0, 0), new $Int64(0, 0), $throwNilPointerError, $ifaceNil, null, false);
			return;
		}
		this.C = C_;
		this.r = r_;
	});
	Time = $pkg.Time = $newType(0, $kindStruct, "time.Time", true, "time", true, function(sec_, nsec_, loc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sec = new $Int64(0, 0);
			this.nsec = 0;
			this.loc = ptrType$1.nil;
			return;
		}
		this.sec = sec_;
		this.nsec = nsec_;
		this.loc = loc_;
	});
	Month = $pkg.Month = $newType(4, $kindInt, "time.Month", true, "time", true, null);
	Weekday = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", true, "time", true, null);
	Duration = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", true, "time", true, null);
	Location = $pkg.Location = $newType(0, $kindStruct, "time.Location", true, "time", true, function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.zone = sliceType.nil;
			this.tx = sliceType$1.nil;
			this.cacheStart = new $Int64(0, 0);
			this.cacheEnd = new $Int64(0, 0);
			this.cacheZone = ptrType.nil;
			return;
		}
		this.name = name_;
		this.zone = zone_;
		this.tx = tx_;
		this.cacheStart = cacheStart_;
		this.cacheEnd = cacheEnd_;
		this.cacheZone = cacheZone_;
	});
	zone = $pkg.zone = $newType(0, $kindStruct, "time.zone", true, "time", false, function(name_, offset_, isDST_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.offset = 0;
			this.isDST = false;
			return;
		}
		this.name = name_;
		this.offset = offset_;
		this.isDST = isDST_;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", true, "time", false, function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.when = new $Int64(0, 0);
			this.index = 0;
			this.isstd = false;
			this.isutc = false;
			return;
		}
		this.when = when_;
		this.index = index_;
		this.isstd = isstd_;
		this.isutc = isutc_;
	});
	sliceType = $sliceType(zone);
	sliceType$1 = $sliceType(zoneTrans);
	ptrType = $ptrType(zone);
	sliceType$2 = $sliceType($String);
	arrayType = $arrayType($Uint8, 20);
	sliceType$3 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 9);
	arrayType$2 = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(Location);
	chanType = $chanType(Time, false, false);
	funcType = $funcType([], [], false);
	arrayType$4 = $arrayType($Uint8, 32);
	funcType$1 = $funcType([$emptyInterface, $Uintptr], [], false);
	ptrType$2 = $ptrType(js.Object);
	ptrType$3 = $ptrType(ParseError);
	ptrType$4 = $ptrType(Timer);
	chanType$1 = $chanType(Time, false, true);
	ptrType$6 = $ptrType(Time);
	init = function() {
		var $ptr;
		$unused(Unix(new $Int64(0, 0), new $Int64(0, 0)));
	};
	initLocal = function() {
		var $ptr, d, i, j, s;
		d = new ($global.Date)();
		s = $internalize(d, $String);
		i = indexByte(s, 40);
		j = indexByte(s, 41);
		if ((i === -1) || (j === -1)) {
			localLoc.name = "UTC";
			return;
		}
		localLoc.name = $substring(s, (i + 1 >> 0), j);
		localLoc.zone = new sliceType([new zone.ptr(localLoc.name, $imul(($parseInt(d.getTimezoneOffset()) >> 0), -60), false)]);
	};
	runtimeNano = function() {
		var $ptr;
		return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
	};
	now = function() {
		var $ptr, _tmp, _tmp$1, n, nsec, sec, x;
		sec = new $Int64(0, 0);
		nsec = 0;
		n = runtimeNano();
		_tmp = $div64(n, new $Int64(0, 1000000000), false);
		_tmp$1 = ((x = $div64(n, new $Int64(0, 1000000000), true), x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
		sec = _tmp;
		nsec = _tmp$1;
		return [sec, nsec];
	};
	startTimer = function(t) {
		var $ptr, diff, t, x, x$1;
		t.active = true;
		diff = $div64(((x = t.when, x$1 = runtimeNano(), new $Int64(x.$high - x$1.$high, x.$low - x$1.$low))), new $Int64(0, 1000000), false);
		if ((diff.$high > 0 || (diff.$high === 0 && diff.$low > 2147483647))) {
			return;
		}
		if ((diff.$high < 0 || (diff.$high === 0 && diff.$low < 0))) {
			diff = new $Int64(0, 0);
		}
		t.timeout = $setTimeout((function() {
			var $ptr, x$2, x$3, x$4;
			t.active = false;
			if (!((x$2 = t.period, (x$2.$high === 0 && x$2.$low === 0)))) {
				t.when = (x$3 = t.when, x$4 = t.period, new $Int64(x$3.$high + x$4.$high, x$3.$low + x$4.$low));
				startTimer(t);
			}
			$go(t.f, [t.arg, 0]);
		}), $externalize(new $Int64(diff.$high + 0, diff.$low + 1), $Int64));
	};
	stopTimer = function(t) {
		var $ptr, t, wasActive;
		$global.clearTimeout(t.timeout);
		wasActive = t.active;
		t.active = false;
		return wasActive;
	};
	indexByte = function(s, c) {
		var $ptr, c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	startsWithLowerCase = function(str) {
		var $ptr, c, str;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$81, _tmp$82, _tmp$83, _tmp$84, _tmp$85, _tmp$86, _tmp$9, c, ch, i, j, layout, prefix, std, std$1, suffix, x;
		prefix = "";
		std = 0;
		suffix = "";
		i = 0;
		while (true) {
			if (!(i < layout.length)) { break; }
			c = (layout.charCodeAt(i) >> 0);
			_1 = c;
			if (_1 === (74)) {
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "January") {
						_tmp = $substring(layout, 0, i);
						_tmp$1 = 257;
						_tmp$2 = $substring(layout, (i + 7 >> 0));
						prefix = _tmp;
						std = _tmp$1;
						suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
						_tmp$3 = $substring(layout, 0, i);
						_tmp$4 = 258;
						_tmp$5 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$3;
						std = _tmp$4;
						suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (77)) {
				if (layout.length >= (i + 3 >> 0)) {
					if ($substring(layout, i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = $substring(layout, 0, i);
							_tmp$7 = 261;
							_tmp$8 = $substring(layout, (i + 6 >> 0));
							prefix = _tmp$6;
							std = _tmp$7;
							suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
							_tmp$9 = $substring(layout, 0, i);
							_tmp$10 = 262;
							_tmp$11 = $substring(layout, (i + 3 >> 0));
							prefix = _tmp$9;
							std = _tmp$10;
							suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if ($substring(layout, i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = $substring(layout, 0, i);
						_tmp$13 = 21;
						_tmp$14 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$12;
						std = _tmp$13;
						suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (48)) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = $substring(layout, 0, i);
					_tmp$16 = (x = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x < 0 || x >= std0x.length) ? ($throwRuntimeError("index out of range"), undefined) : std0x[x]));
					_tmp$17 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$15;
					std = _tmp$16;
					suffix = _tmp$17;
					return [prefix, std, suffix];
				}
			} else if (_1 === (49)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$18 = $substring(layout, 0, i);
					_tmp$19 = 522;
					_tmp$20 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$18;
					std = _tmp$19;
					suffix = _tmp$20;
					return [prefix, std, suffix];
				}
				_tmp$21 = $substring(layout, 0, i);
				_tmp$22 = 259;
				_tmp$23 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$21;
				std = _tmp$22;
				suffix = _tmp$23;
				return [prefix, std, suffix];
			} else if (_1 === (50)) {
				if (layout.length >= (i + 4 >> 0) && $substring(layout, i, (i + 4 >> 0)) === "2006") {
					_tmp$24 = $substring(layout, 0, i);
					_tmp$25 = 273;
					_tmp$26 = $substring(layout, (i + 4 >> 0));
					prefix = _tmp$24;
					std = _tmp$25;
					suffix = _tmp$26;
					return [prefix, std, suffix];
				}
				_tmp$27 = $substring(layout, 0, i);
				_tmp$28 = 263;
				_tmp$29 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$27;
				std = _tmp$28;
				suffix = _tmp$29;
				return [prefix, std, suffix];
			} else if (_1 === (95)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					if (layout.length >= (i + 5 >> 0) && $substring(layout, (i + 1 >> 0), (i + 5 >> 0)) === "2006") {
						_tmp$30 = $substring(layout, 0, (i + 1 >> 0));
						_tmp$31 = 273;
						_tmp$32 = $substring(layout, (i + 5 >> 0));
						prefix = _tmp$30;
						std = _tmp$31;
						suffix = _tmp$32;
						return [prefix, std, suffix];
					}
					_tmp$33 = $substring(layout, 0, i);
					_tmp$34 = 264;
					_tmp$35 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$33;
					std = _tmp$34;
					suffix = _tmp$35;
					return [prefix, std, suffix];
				}
			} else if (_1 === (51)) {
				_tmp$36 = $substring(layout, 0, i);
				_tmp$37 = 523;
				_tmp$38 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$36;
				std = _tmp$37;
				suffix = _tmp$38;
				return [prefix, std, suffix];
			} else if (_1 === (52)) {
				_tmp$39 = $substring(layout, 0, i);
				_tmp$40 = 525;
				_tmp$41 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$39;
				std = _tmp$40;
				suffix = _tmp$41;
				return [prefix, std, suffix];
			} else if (_1 === (53)) {
				_tmp$42 = $substring(layout, 0, i);
				_tmp$43 = 527;
				_tmp$44 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$42;
				std = _tmp$43;
				suffix = _tmp$44;
				return [prefix, std, suffix];
			} else if (_1 === (80)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$45 = $substring(layout, 0, i);
					_tmp$46 = 531;
					_tmp$47 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$45;
					std = _tmp$46;
					suffix = _tmp$47;
					return [prefix, std, suffix];
				}
			} else if (_1 === (112)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$48 = $substring(layout, 0, i);
					_tmp$49 = 532;
					_tmp$50 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$48;
					std = _tmp$49;
					suffix = _tmp$50;
					return [prefix, std, suffix];
				}
			} else if (_1 === (45)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "-070000") {
					_tmp$51 = $substring(layout, 0, i);
					_tmp$52 = 28;
					_tmp$53 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$51;
					std = _tmp$52;
					suffix = _tmp$53;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$54 = $substring(layout, 0, i);
					_tmp$55 = 31;
					_tmp$56 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$54;
					std = _tmp$55;
					suffix = _tmp$56;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "-0700") {
					_tmp$57 = $substring(layout, 0, i);
					_tmp$58 = 27;
					_tmp$59 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$57;
					std = _tmp$58;
					suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "-07:00") {
					_tmp$60 = $substring(layout, 0, i);
					_tmp$61 = 30;
					_tmp$62 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$60;
					std = _tmp$61;
					suffix = _tmp$62;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "-07") {
					_tmp$63 = $substring(layout, 0, i);
					_tmp$64 = 29;
					_tmp$65 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$63;
					std = _tmp$64;
					suffix = _tmp$65;
					return [prefix, std, suffix];
				}
			} else if (_1 === (90)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "Z070000") {
					_tmp$66 = $substring(layout, 0, i);
					_tmp$67 = 23;
					_tmp$68 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$66;
					std = _tmp$67;
					suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$69 = $substring(layout, 0, i);
					_tmp$70 = 26;
					_tmp$71 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$69;
					std = _tmp$70;
					suffix = _tmp$71;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "Z0700") {
					_tmp$72 = $substring(layout, 0, i);
					_tmp$73 = 22;
					_tmp$74 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$72;
					std = _tmp$73;
					suffix = _tmp$74;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$75 = $substring(layout, 0, i);
					_tmp$76 = 25;
					_tmp$77 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$75;
					std = _tmp$76;
					suffix = _tmp$77;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Z07") {
					_tmp$78 = $substring(layout, 0, i);
					_tmp$79 = 24;
					_tmp$80 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$78;
					std = _tmp$79;
					suffix = _tmp$80;
					return [prefix, std, suffix];
				}
			} else if (_1 === (46)) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (true) {
						if (!(j < layout.length && (layout.charCodeAt(j) === ch))) { break; }
						j = j + (1) >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 32;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 33;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tmp$81 = $substring(layout, 0, i);
						_tmp$82 = std$1;
						_tmp$83 = $substring(layout, j);
						prefix = _tmp$81;
						std = _tmp$82;
						suffix = _tmp$83;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + (1) >> 0;
		}
		_tmp$84 = layout;
		_tmp$85 = 0;
		_tmp$86 = "";
		prefix = _tmp$84;
		std = _tmp$85;
		suffix = _tmp$86;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var $ptr, c1, c2, i, s1, s2;
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | (32)) >>> 0;
				c2 = (c2 | (32)) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var $ptr, _i, _ref, i, tab, v, val;
		_ref = tab;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (val.length >= v.length && match($substring(val, 0, v.length), v)) {
				return [i, $substring(val, v.length), $ifaceNil];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendInt = function(b, x, width) {
		var $ptr, _q, b, buf, i, q, u, w, width, x;
		u = (x >>> 0);
		if (x < 0) {
			b = $append(b, 45);
			u = (-x >>> 0);
		}
		buf = arrayType.zero();
		i = 20;
		while (true) {
			if (!(u >= 10)) { break; }
			i = i - (1) >> 0;
			q = (_q = u / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((48 + u >>> 0) - (q * 10 >>> 0) >>> 0) << 24 >>> 24));
			u = q;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((48 + u >>> 0) << 24 >>> 24));
		w = 20 - i >> 0;
		while (true) {
			if (!(w < width)) { break; }
			b = $append(b, 48);
			w = w + (1) >> 0;
		}
		return $appendSlice(b, $subslice(new sliceType$3(buf), i));
	};
	atoi = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple$1, err, neg, q, rem, s, x;
		x = 0;
		err = $ifaceNil;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = $substring(s, 1);
		}
		_tuple$1 = leadingInt(s);
		q = _tuple$1[0];
		rem = _tuple$1[1];
		err = _tuple$1[2];
		x = ((q.$low + ((q.$high >> 31) * 4294967296)) >> 0);
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
			_tmp = 0;
			_tmp$1 = atoiError;
			x = _tmp;
			err = _tmp$1;
			return [x, err];
		}
		if (neg) {
			x = -x;
		}
		_tmp$2 = x;
		_tmp$3 = $ifaceNil;
		x = _tmp$2;
		err = _tmp$3;
		return [x, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var $ptr, _q, _r$1, b, buf, n, nanosec, start, trim, u, x;
		u = nanosec;
		buf = arrayType$1.zero();
		start = 9;
		while (true) {
			if (!(start > 0)) { break; }
			start = start - (1) >> 0;
			((start < 0 || start >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[start] = (((_r$1 = u % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (true) {
				if (!(n > 0 && ((x = n - 1 >> 0, ((x < 0 || x >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[x])) === 48))) { break; }
				n = n - (1) >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, 46);
		return $appendSlice(b, $subslice(new sliceType$3(buf), 0, n));
	};
	Time.ptr.prototype.String = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).Format("2006-01-02 15:04:05.999999999 -0700 MST"); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.ptr.prototype.Format = function(layout) {
		var $ptr, _r$1, b, buf, layout, max, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; b = $f.b; buf = $f.buf; layout = $f.layout; max = $f.max; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		b = sliceType$3.nil;
		max = layout.length + 10 >> 0;
		if (max < 64) {
			buf = arrayType$2.zero();
			b = $subslice(new sliceType$3(buf), 0, 0);
		} else {
			b = $makeSlice(sliceType$3, 0, max);
		}
		_r$1 = $clone(t, Time).AppendFormat(b, layout); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		b = _r$1;
		$s = -1; return $bytesToString(b);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Format }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.b = b; $f.buf = buf; $f.layout = layout; $f.max = max; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	Time.ptr.prototype.AppendFormat = function(b, layout) {
		var $ptr, _1, _q, _q$1, _q$2, _q$3, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple$1, _tuple$2, _tuple$3, _tuple$4, abs, absoffset, b, day, hour, hr, hr$1, layout, m, min, month, name, offset, prefix, s, sec, std, suffix, t, y, year, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; abs = $f.abs; absoffset = $f.absoffset; b = $f.b; day = $f.day; hour = $f.hour; hr = $f.hr; hr$1 = $f.hr$1; layout = $f.layout; m = $f.m; min = $f.min; month = $f.month; name = $f.name; offset = $f.offset; prefix = $f.prefix; s = $f.s; sec = $f.sec; std = $f.std; suffix = $f.suffix; t = $f.t; y = $f.y; year = $f.year; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).locabs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		name = _tuple$1[0];
		offset = _tuple$1[1];
		abs = _tuple$1[2];
		year = -1;
		month = 0;
		day = 0;
		hour = -1;
		min = 0;
		sec = 0;
		while (true) {
			if (!(!(layout === ""))) { break; }
			_tuple$2 = nextStdChunk(layout);
			prefix = _tuple$2[0];
			std = _tuple$2[1];
			suffix = _tuple$2[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, prefix);
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$3 = absDate(abs, true);
				year = _tuple$3[0];
				month = _tuple$3[1];
				day = _tuple$3[2];
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$4 = absClock(abs);
				hour = _tuple$4[0];
				min = _tuple$4[1];
				sec = _tuple$4[2];
			}
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (274)) {
					y = year;
					if (y < 0) {
						y = -y;
					}
					b = appendInt(b, (_r$2 = y % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")), 2);
				} else if (_1 === (273)) {
					b = appendInt(b, year, 4);
				} else if (_1 === (258)) {
					b = $appendSlice(b, $substring(new Month(month).String(), 0, 3));
				} else if (_1 === (257)) {
					m = new Month(month).String();
					b = $appendSlice(b, m);
				} else if (_1 === (259)) {
					b = appendInt(b, (month >> 0), 0);
				} else if (_1 === (260)) {
					b = appendInt(b, (month >> 0), 2);
				} else if (_1 === (262)) {
					b = $appendSlice(b, $substring(new Weekday(absWeekday(abs)).String(), 0, 3));
				} else if (_1 === (261)) {
					s = new Weekday(absWeekday(abs)).String();
					b = $appendSlice(b, s);
				} else if (_1 === (263)) {
					b = appendInt(b, day, 0);
				} else if (_1 === (264)) {
					if (day < 10) {
						b = $append(b, 32);
					}
					b = appendInt(b, day, 0);
				} else if (_1 === (265)) {
					b = appendInt(b, day, 2);
				} else if (_1 === (522)) {
					b = appendInt(b, hour, 2);
				} else if (_1 === (523)) {
					hr = (_r$3 = hour % 12, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
					if (hr === 0) {
						hr = 12;
					}
					b = appendInt(b, hr, 0);
				} else if (_1 === (524)) {
					hr$1 = (_r$4 = hour % 12, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
					if (hr$1 === 0) {
						hr$1 = 12;
					}
					b = appendInt(b, hr$1, 2);
				} else if (_1 === (525)) {
					b = appendInt(b, min, 0);
				} else if (_1 === (526)) {
					b = appendInt(b, min, 2);
				} else if (_1 === (527)) {
					b = appendInt(b, sec, 0);
				} else if (_1 === (528)) {
					b = appendInt(b, sec, 2);
				} else if (_1 === (531)) {
					if (hour >= 12) {
						b = $appendSlice(b, "PM");
					} else {
						b = $appendSlice(b, "AM");
					}
				} else if (_1 === (532)) {
					if (hour >= 12) {
						b = $appendSlice(b, "pm");
					} else {
						b = $appendSlice(b, "am");
					}
				} else if ((_1 === (22)) || (_1 === (25)) || (_1 === (23)) || (_1 === (24)) || (_1 === (26)) || (_1 === (27)) || (_1 === (30)) || (_1 === (28)) || (_1 === (29)) || (_1 === (31))) {
					if ((offset === 0) && ((std === 22) || (std === 25) || (std === 23) || (std === 24) || (std === 26))) {
						b = $append(b, 90);
						break;
					}
					zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
					absoffset = offset;
					if (zone$1 < 0) {
						b = $append(b, 45);
						zone$1 = -zone$1;
						absoffset = -absoffset;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					if ((std === 25) || (std === 30) || (std === 26) || (std === 31)) {
						b = $append(b, 58);
					}
					if (!((std === 29)) && !((std === 24))) {
						b = appendInt(b, (_r$5 = zone$1 % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")), 2);
					}
					if ((std === 23) || (std === 28) || (std === 31) || (std === 26)) {
						if ((std === 31) || (std === 26)) {
							b = $append(b, 58);
						}
						b = appendInt(b, (_r$6 = absoffset % 60, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")), 2);
					}
				} else if (_1 === (21)) {
					if (!(name === "")) {
						b = $appendSlice(b, name);
						break;
					}
					zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
					if (zone$2 < 0) {
						b = $append(b, 45);
						zone$2 = -zone$2;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					b = appendInt(b, (_r$7 = zone$2 % 60, _r$7 === _r$7 ? _r$7 : $throwRuntimeError("integer divide by zero")), 2);
				} else if ((_1 === (32)) || (_1 === (33))) {
					b = formatNano(b, ($clone(t, Time).Nanosecond() >>> 0), std >> 16 >> 0, (std & 65535) === 33);
				}
			}
		}
		$s = -1; return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AppendFormat }; } $f.$ptr = $ptr; $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.abs = abs; $f.absoffset = absoffset; $f.b = b; $f.day = day; $f.hour = hour; $f.hr = hr; $f.hr$1 = hr$1; $f.layout = layout; $f.m = m; $f.min = min; $f.month = month; $f.name = name; $f.offset = offset; $f.prefix = prefix; $f.s = s; $f.sec = sec; $f.std = std; $f.suffix = suffix; $f.t = t; $f.y = y; $f.year = year; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AppendFormat = function(b, layout) { return this.$val.AppendFormat(b, layout); };
	quote = function(s) {
		var $ptr, s;
		return "\"" + s + "\"";
	};
	ParseError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var $ptr, c, i, s;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var $ptr, fixed, s;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), $substring(s, 1), $ifaceNil];
		}
		return [($imul(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), 10)) + ((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0) >> 0, $substring(s, 2), $ifaceNil];
	};
	cutspace = function(s) {
		var $ptr, s;
		while (true) {
			if (!(s.length > 0 && (s.charCodeAt(0) === 32))) { break; }
			s = $substring(s, 1);
		}
		return s;
	};
	skip = function(value, prefix) {
		var $ptr, prefix, value;
		while (true) {
			if (!(prefix.length > 0)) { break; }
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = $substring(prefix, 1);
			value = $substring(value, 1);
		}
		return [value, $ifaceNil];
	};
	Parse = function(layout, value) {
		var $ptr, _r$1, layout, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; layout = $f.layout; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$1 = parse(layout, value, $pkg.UTC, $pkg.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.layout = layout; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parse = function(layout, value, defaultLocation, local) {
		var $ptr, _1, _2, _3, _4, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, day, defaultLocation, err, hour, hour$1, hr, i, layout, local, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x, x$1, x$2, x$3, x$4, x$5, year, z, zoneName, zoneOffset, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$34 = $f._tmp$34; _tmp$35 = $f._tmp$35; _tmp$36 = $f._tmp$36; _tmp$37 = $f._tmp$37; _tmp$38 = $f._tmp$38; _tmp$39 = $f._tmp$39; _tmp$4 = $f._tmp$4; _tmp$40 = $f._tmp$40; _tmp$41 = $f._tmp$41; _tmp$42 = $f._tmp$42; _tmp$43 = $f._tmp$43; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$17 = $f._tuple$17; _tuple$18 = $f._tuple$18; _tuple$19 = $f._tuple$19; _tuple$2 = $f._tuple$2; _tuple$20 = $f._tuple$20; _tuple$21 = $f._tuple$21; _tuple$22 = $f._tuple$22; _tuple$23 = $f._tuple$23; _tuple$24 = $f._tuple$24; _tuple$25 = $f._tuple$25; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; alayout = $f.alayout; amSet = $f.amSet; avalue = $f.avalue; day = $f.day; defaultLocation = $f.defaultLocation; err = $f.err; hour = $f.hour; hour$1 = $f.hour$1; hr = $f.hr; i = $f.i; layout = $f.layout; local = $f.local; min = $f.min; min$1 = $f.min$1; mm = $f.mm; month = $f.month; n = $f.n; n$1 = $f.n$1; name = $f.name; ndigit = $f.ndigit; nsec = $f.nsec; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; pmSet = $f.pmSet; prefix = $f.prefix; rangeErrString = $f.rangeErrString; sec = $f.sec; seconds = $f.seconds; sign = $f.sign; ss = $f.ss; std = $f.std; stdstr = $f.stdstr; suffix = $f.suffix; t = $f.t; t$1 = $f.t$1; value = $f.value; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; year = $f.year; z = $f.z; zoneName = $f.zoneName; zoneOffset = $f.zoneOffset; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = layout;
		_tmp$1 = value;
		alayout = _tmp;
		avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = 1;
		day = 1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ptrType$1.nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = $ifaceNil;
			_tuple$1 = nextStdChunk(layout);
			prefix = _tuple$1[0];
			std = _tuple$1[1];
			suffix = _tuple$1[2];
			stdstr = $substring(layout, prefix.length, (layout.length - suffix.length >> 0));
			_tuple$2 = skip(value, prefix);
			value = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					$s = -1; return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + value)];
				}
				break;
			}
			layout = suffix;
			p = "";
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (274)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$2 = $substring(value, 0, 2);
					_tmp$3 = $substring(value, 2);
					p = _tmp$2;
					value = _tmp$3;
					_tuple$3 = atoi(p);
					year = _tuple$3[0];
					err = _tuple$3[1];
					if (year >= 69) {
						year = year + (1900) >> 0;
					} else {
						year = year + (2000) >> 0;
					}
				} else if (_1 === (273)) {
					if (value.length < 4 || !isDigit(value, 0)) {
						err = errBad;
						break;
					}
					_tmp$4 = $substring(value, 0, 4);
					_tmp$5 = $substring(value, 4);
					p = _tmp$4;
					value = _tmp$5;
					_tuple$4 = atoi(p);
					year = _tuple$4[0];
					err = _tuple$4[1];
				} else if (_1 === (258)) {
					_tuple$5 = lookup(shortMonthNames, value);
					month = _tuple$5[0];
					value = _tuple$5[1];
					err = _tuple$5[2];
				} else if (_1 === (257)) {
					_tuple$6 = lookup(longMonthNames, value);
					month = _tuple$6[0];
					value = _tuple$6[1];
					err = _tuple$6[2];
				} else if ((_1 === (259)) || (_1 === (260))) {
					_tuple$7 = getnum(value, std === 260);
					month = _tuple$7[0];
					value = _tuple$7[1];
					err = _tuple$7[2];
					if (month <= 0 || 12 < month) {
						rangeErrString = "month";
					}
				} else if (_1 === (262)) {
					_tuple$8 = lookup(shortDayNames, value);
					value = _tuple$8[1];
					err = _tuple$8[2];
				} else if (_1 === (261)) {
					_tuple$9 = lookup(longDayNames, value);
					value = _tuple$9[1];
					err = _tuple$9[2];
				} else if ((_1 === (263)) || (_1 === (264)) || (_1 === (265))) {
					if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
						value = $substring(value, 1);
					}
					_tuple$10 = getnum(value, std === 265);
					day = _tuple$10[0];
					value = _tuple$10[1];
					err = _tuple$10[2];
					if (day < 0) {
						rangeErrString = "day";
					}
				} else if (_1 === (522)) {
					_tuple$11 = getnum(value, false);
					hour = _tuple$11[0];
					value = _tuple$11[1];
					err = _tuple$11[2];
					if (hour < 0 || 24 <= hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (523)) || (_1 === (524))) {
					_tuple$12 = getnum(value, std === 524);
					hour = _tuple$12[0];
					value = _tuple$12[1];
					err = _tuple$12[2];
					if (hour < 0 || 12 < hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (525)) || (_1 === (526))) {
					_tuple$13 = getnum(value, std === 526);
					min = _tuple$13[0];
					value = _tuple$13[1];
					err = _tuple$13[2];
					if (min < 0 || 60 <= min) {
						rangeErrString = "minute";
					}
				} else if ((_1 === (527)) || (_1 === (528))) {
					_tuple$14 = getnum(value, std === 528);
					sec = _tuple$14[0];
					value = _tuple$14[1];
					err = _tuple$14[2];
					if (sec < 0 || 60 <= sec) {
						rangeErrString = "second";
						break;
					}
					if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
						_tuple$15 = nextStdChunk(layout);
						std = _tuple$15[1];
						std = std & (65535);
						if ((std === 32) || (std === 33)) {
							break;
						}
						n = 2;
						while (true) {
							if (!(n < value.length && isDigit(value, n))) { break; }
							n = n + (1) >> 0;
						}
						_tuple$16 = parseNanoseconds(value, n);
						nsec = _tuple$16[0];
						rangeErrString = _tuple$16[1];
						err = _tuple$16[2];
						value = $substring(value, n);
					}
				} else if (_1 === (531)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$6 = $substring(value, 0, 2);
					_tmp$7 = $substring(value, 2);
					p = _tmp$6;
					value = _tmp$7;
					_2 = p;
					if (_2 === ("PM")) {
						pmSet = true;
					} else if (_2 === ("AM")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if (_1 === (532)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$8 = $substring(value, 0, 2);
					_tmp$9 = $substring(value, 2);
					p = _tmp$8;
					value = _tmp$9;
					_3 = p;
					if (_3 === ("pm")) {
						pmSet = true;
					} else if (_3 === ("am")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if ((_1 === (22)) || (_1 === (25)) || (_1 === (23)) || (_1 === (24)) || (_1 === (26)) || (_1 === (27)) || (_1 === (29)) || (_1 === (30)) || (_1 === (28)) || (_1 === (31))) {
					if (((std === 22) || (std === 24) || (std === 25)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
						value = $substring(value, 1);
						z = $pkg.UTC;
						break;
					}
					_tmp$10 = "";
					_tmp$11 = "";
					_tmp$12 = "";
					_tmp$13 = "";
					sign = _tmp$10;
					hour$1 = _tmp$11;
					min$1 = _tmp$12;
					seconds = _tmp$13;
					if ((std === 25) || (std === 30)) {
						if (value.length < 6) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58))) {
							err = errBad;
							break;
						}
						_tmp$14 = $substring(value, 0, 1);
						_tmp$15 = $substring(value, 1, 3);
						_tmp$16 = $substring(value, 4, 6);
						_tmp$17 = "00";
						_tmp$18 = $substring(value, 6);
						sign = _tmp$14;
						hour$1 = _tmp$15;
						min$1 = _tmp$16;
						seconds = _tmp$17;
						value = _tmp$18;
					} else if ((std === 29) || (std === 24)) {
						if (value.length < 3) {
							err = errBad;
							break;
						}
						_tmp$19 = $substring(value, 0, 1);
						_tmp$20 = $substring(value, 1, 3);
						_tmp$21 = "00";
						_tmp$22 = "00";
						_tmp$23 = $substring(value, 3);
						sign = _tmp$19;
						hour$1 = _tmp$20;
						min$1 = _tmp$21;
						seconds = _tmp$22;
						value = _tmp$23;
					} else if ((std === 26) || (std === 31)) {
						if (value.length < 9) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
							err = errBad;
							break;
						}
						_tmp$24 = $substring(value, 0, 1);
						_tmp$25 = $substring(value, 1, 3);
						_tmp$26 = $substring(value, 4, 6);
						_tmp$27 = $substring(value, 7, 9);
						_tmp$28 = $substring(value, 9);
						sign = _tmp$24;
						hour$1 = _tmp$25;
						min$1 = _tmp$26;
						seconds = _tmp$27;
						value = _tmp$28;
					} else if ((std === 23) || (std === 28)) {
						if (value.length < 7) {
							err = errBad;
							break;
						}
						_tmp$29 = $substring(value, 0, 1);
						_tmp$30 = $substring(value, 1, 3);
						_tmp$31 = $substring(value, 3, 5);
						_tmp$32 = $substring(value, 5, 7);
						_tmp$33 = $substring(value, 7);
						sign = _tmp$29;
						hour$1 = _tmp$30;
						min$1 = _tmp$31;
						seconds = _tmp$32;
						value = _tmp$33;
					} else {
						if (value.length < 5) {
							err = errBad;
							break;
						}
						_tmp$34 = $substring(value, 0, 1);
						_tmp$35 = $substring(value, 1, 3);
						_tmp$36 = $substring(value, 3, 5);
						_tmp$37 = "00";
						_tmp$38 = $substring(value, 5);
						sign = _tmp$34;
						hour$1 = _tmp$35;
						min$1 = _tmp$36;
						seconds = _tmp$37;
						value = _tmp$38;
					}
					_tmp$39 = 0;
					_tmp$40 = 0;
					_tmp$41 = 0;
					hr = _tmp$39;
					mm = _tmp$40;
					ss = _tmp$41;
					_tuple$17 = atoi(hour$1);
					hr = _tuple$17[0];
					err = _tuple$17[1];
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$18 = atoi(min$1);
						mm = _tuple$18[0];
						err = _tuple$18[1];
					}
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$19 = atoi(seconds);
						ss = _tuple$19[0];
						err = _tuple$19[1];
					}
					zoneOffset = ($imul(((($imul(hr, 60)) + mm >> 0)), 60)) + ss >> 0;
					_4 = sign.charCodeAt(0);
					if (_4 === (43)) {
					} else if (_4 === (45)) {
						zoneOffset = -zoneOffset;
					} else {
						err = errBad;
					}
				} else if (_1 === (21)) {
					if (value.length >= 3 && $substring(value, 0, 3) === "UTC") {
						z = $pkg.UTC;
						value = $substring(value, 3);
						break;
					}
					_tuple$20 = parseTimeZone(value);
					n$1 = _tuple$20[0];
					ok = _tuple$20[1];
					if (!ok) {
						err = errBad;
						break;
					}
					_tmp$42 = $substring(value, 0, n$1);
					_tmp$43 = $substring(value, n$1);
					zoneName = _tmp$42;
					value = _tmp$43;
				} else if (_1 === (32)) {
					ndigit = 1 + ((std >> 16 >> 0)) >> 0;
					if (value.length < ndigit) {
						err = errBad;
						break;
					}
					_tuple$21 = parseNanoseconds(value, ndigit);
					nsec = _tuple$21[0];
					rangeErrString = _tuple$21[1];
					err = _tuple$21[2];
					value = $substring(value, ndigit);
				} else if (_1 === (33)) {
					if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
						break;
					}
					i = 0;
					while (true) {
						if (!(i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57)) { break; }
						i = i + (1) >> 0;
					}
					_tuple$22 = parseNanoseconds(value, 1 + i >> 0);
					nsec = _tuple$22[0];
					rangeErrString = _tuple$22[1];
					err = _tuple$22[2];
					value = $substring(value, (1 + i >> 0));
				}
			}
			if (!(rangeErrString === "")) {
				$s = -1; return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + (12) >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		if (day < 1 || day > daysIn((month >> 0), year)) {
			$s = -1; return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, "", value, ": day out of range")];
		}
		/* */ if (!(z === ptrType$1.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(z === ptrType$1.nil)) { */ case 1:
			_r$1 = Date(year, (month >> 0), day, hour, min, sec, nsec, z); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return [_r$1, $ifaceNil];
		/* } */ case 2:
		/* */ if (!((zoneOffset === -1))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((zoneOffset === -1))) { */ case 4:
			_r$2 = Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			t = $clone(_r$2, Time);
			t.sec = (x = t.sec, x$1 = new $Int64(0, zoneOffset), new $Int64(x.$high - x$1.$high, x.$low - x$1.$low));
			_r$3 = local.lookup((x$2 = t.sec, new $Int64(x$2.$high + -15, x$2.$low + 2288912640))); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$23 = _r$3;
			name = _tuple$23[0];
			offset = _tuple$23[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.setLoc(local);
				$s = -1; return [t, $ifaceNil];
			}
			t.setLoc(FixedZone(zoneName, zoneOffset));
			$s = -1; return [t, $ifaceNil];
		/* } */ case 5:
		/* */ if (!(zoneName === "")) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!(zoneName === "")) { */ case 8:
			_r$4 = Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			t$1 = $clone(_r$4, Time);
			_r$5 = local.lookupName(zoneName, (x$3 = t$1.sec, new $Int64(x$3.$high + -15, x$3.$low + 2288912640))); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$24 = _r$5;
			offset$1 = _tuple$24[0];
			ok$1 = _tuple$24[2];
			if (ok$1) {
				t$1.sec = (x$4 = t$1.sec, x$5 = new $Int64(0, offset$1), new $Int64(x$4.$high - x$5.$high, x$4.$low - x$5.$low));
				t$1.setLoc(local);
				$s = -1; return [t$1, $ifaceNil];
			}
			if (zoneName.length > 3 && $substring(zoneName, 0, 3) === "GMT") {
				_tuple$25 = atoi($substring(zoneName, 3));
				offset$1 = _tuple$25[0];
				offset$1 = $imul(offset$1, (3600));
			}
			t$1.setLoc(FixedZone(zoneName, offset$1));
			$s = -1; return [t$1, $ifaceNil];
		/* } */ case 9:
		_r$6 = Date(year, (month >> 0), day, hour, min, sec, nsec, defaultLocation); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return [_r$6, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parse }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$34 = _tmp$34; $f._tmp$35 = _tmp$35; $f._tmp$36 = _tmp$36; $f._tmp$37 = _tmp$37; $f._tmp$38 = _tmp$38; $f._tmp$39 = _tmp$39; $f._tmp$4 = _tmp$4; $f._tmp$40 = _tmp$40; $f._tmp$41 = _tmp$41; $f._tmp$42 = _tmp$42; $f._tmp$43 = _tmp$43; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$17 = _tuple$17; $f._tuple$18 = _tuple$18; $f._tuple$19 = _tuple$19; $f._tuple$2 = _tuple$2; $f._tuple$20 = _tuple$20; $f._tuple$21 = _tuple$21; $f._tuple$22 = _tuple$22; $f._tuple$23 = _tuple$23; $f._tuple$24 = _tuple$24; $f._tuple$25 = _tuple$25; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.alayout = alayout; $f.amSet = amSet; $f.avalue = avalue; $f.day = day; $f.defaultLocation = defaultLocation; $f.err = err; $f.hour = hour; $f.hour$1 = hour$1; $f.hr = hr; $f.i = i; $f.layout = layout; $f.local = local; $f.min = min; $f.min$1 = min$1; $f.mm = mm; $f.month = month; $f.n = n; $f.n$1 = n$1; $f.name = name; $f.ndigit = ndigit; $f.nsec = nsec; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.pmSet = pmSet; $f.prefix = prefix; $f.rangeErrString = rangeErrString; $f.sec = sec; $f.seconds = seconds; $f.sign = sign; $f.ss = ss; $f.std = std; $f.stdstr = stdstr; $f.suffix = suffix; $f.t = t; $f.t$1 = t$1; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.year = year; $f.z = z; $f.zoneName = zoneName; $f.zoneOffset = zoneOffset; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseTimeZone = function(value) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length, nUpper, ok, value;
		length = 0;
		ok = false;
		if (value.length < 3) {
			_tmp = 0;
			_tmp$1 = false;
			length = _tmp;
			ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && ($substring(value, 0, 4) === "ChST" || $substring(value, 0, 4) === "MeST")) {
			_tmp$2 = 4;
			_tmp$3 = true;
			length = _tmp$2;
			ok = _tmp$3;
			return [length, ok];
		}
		if ($substring(value, 0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length;
			_tmp$5 = true;
			length = _tmp$4;
			ok = _tmp$5;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (true) {
			if (!(nUpper < 6)) { break; }
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + (1) >> 0;
		}
		_1 = nUpper;
		if ((_1 === (0)) || (_1 === (1)) || (_1 === (2)) || (_1 === (6))) {
			_tmp$6 = 0;
			_tmp$7 = false;
			length = _tmp$6;
			ok = _tmp$7;
			return [length, ok];
		} else if (_1 === (5)) {
			if (value.charCodeAt(4) === 84) {
				_tmp$8 = 5;
				_tmp$9 = true;
				length = _tmp$8;
				ok = _tmp$9;
				return [length, ok];
			}
		} else if (_1 === (4)) {
			if ((value.charCodeAt(3) === 84) || $substring(value, 0, 4) === "WITA") {
				_tmp$10 = 4;
				_tmp$11 = true;
				length = _tmp$10;
				ok = _tmp$11;
				return [length, ok];
			}
		} else if (_1 === (3)) {
			_tmp$12 = 3;
			_tmp$13 = true;
			length = _tmp$12;
			ok = _tmp$13;
			return [length, ok];
		}
		_tmp$14 = 0;
		_tmp$15 = false;
		length = _tmp$14;
		ok = _tmp$15;
		return [length, ok];
	};
	parseGMT = function(value) {
		var $ptr, _tuple$1, err, rem, sign, value, x;
		value = $substring(value, 3);
		if (value.length === 0) {
			return 3;
		}
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 3;
		}
		_tuple$1 = leadingInt($substring(value, 1));
		x = _tuple$1[0];
		rem = _tuple$1[1];
		err = _tuple$1[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 3;
		}
		if (sign === 45) {
			x = new $Int64(-x.$high, -x.$low);
		}
		if ((x.$high === 0 && x.$low === 0) || (x.$high < -1 || (x.$high === -1 && x.$low < 4294967282)) || (0 < x.$high || (0 === x.$high && 12 < x.$low))) {
			return 3;
		}
		return (3 + value.length >> 0) - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var $ptr, _tuple$1, err, i, nbytes, ns, rangeErrString, scaleDigits, value;
		ns = 0;
		rangeErrString = "";
		err = $ifaceNil;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		_tuple$1 = atoi($substring(value, 1, nbytes));
		ns = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (true) {
			if (!(i < scaleDigits)) { break; }
			ns = $imul(ns, (10));
			i = i + (1) >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, c, err, i, rem, s, x, x$1, x$2, x$3;
		x = new $Int64(0, 0);
		rem = "";
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x.$high > 214748364 || (x.$high === 214748364 && x.$low > 3435973836))) {
				_tmp = new $Int64(0, 0);
				_tmp$1 = "";
				_tmp$2 = errLeadingInt;
				x = _tmp;
				rem = _tmp$1;
				err = _tmp$2;
				return [x, rem, err];
			}
			x = (x$1 = (x$2 = $mul64(x, new $Int64(0, 10)), x$3 = new $Int64(0, c), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), new $Int64(x$1.$high - 0, x$1.$low - 48));
			if ((x.$high < 0 || (x.$high === 0 && x.$low < 0))) {
				_tmp$3 = new $Int64(0, 0);
				_tmp$4 = "";
				_tmp$5 = errLeadingInt;
				x = _tmp$3;
				rem = _tmp$4;
				err = _tmp$5;
				return [x, rem, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$6 = x;
		_tmp$7 = $substring(s, i);
		_tmp$8 = $ifaceNil;
		x = _tmp$6;
		rem = _tmp$7;
		err = _tmp$8;
		return [x, rem, err];
	};
	when = function(d) {
		var $ptr, d, t, x, x$1;
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return runtimeNano();
		}
		t = (x = runtimeNano(), x$1 = new $Int64(d.$high, d.$low), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		if ((t.$high < 0 || (t.$high === 0 && t.$low < 0))) {
			t = new $Int64(2147483647, 4294967295);
		}
		return t;
	};
	Timer.ptr.prototype.Stop = function() {
		var $ptr, t;
		t = this;
		if (t.r.f === $throwNilPointerError) {
			$panic(new $String("time: Stop called on uninitialized Timer"));
		}
		return stopTimer(t.r);
	};
	Timer.prototype.Stop = function() { return this.$val.Stop(); };
	NewTimer = function(d) {
		var $ptr, c, d, t;
		c = new $Chan(Time, 1);
		t = new Timer.ptr(c, new runtimeTimer.ptr(0, when(d), new $Int64(0, 0), sendTime, new chanType(c), null, false));
		startTimer(t.r);
		return t;
	};
	$pkg.NewTimer = NewTimer;
	Timer.ptr.prototype.Reset = function(d) {
		var $ptr, active, d, t, w;
		t = this;
		if (t.r.f === $throwNilPointerError) {
			$panic(new $String("time: Reset called on uninitialized Timer"));
		}
		w = when(d);
		active = stopTimer(t.r);
		t.r.when = w;
		startTimer(t.r);
		return active;
	};
	Timer.prototype.Reset = function(d) { return this.$val.Reset(d); };
	sendTime = function(c, seq) {
		var $ptr, _selection, c, seq, $r;
		/* */ var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _selection = $f._selection; c = $f.c; seq = $f.seq; $r = $f.$r; }
		_selection = $select([[$assertType(c, chanType), $clone(Now(), Time)], []]);
		if (_selection[0] === 0) {
		} else if (_selection[0] === 1) {
		}
		/* */ if ($f === undefined) { $f = { $blk: sendTime }; } $f.$ptr = $ptr; $f._selection = _selection; $f.c = c; $f.seq = seq; $f.$r = $r; return $f;
	};
	After = function(d) {
		var $ptr, d;
		return NewTimer(d).C;
	};
	$pkg.After = After;
	AfterFunc = function(d, f) {
		var $ptr, d, f, t;
		t = new Timer.ptr($chanNil, new runtimeTimer.ptr(0, when(d), new $Int64(0, 0), goFunc, new funcType(f), null, false));
		startTimer(t.r);
		return t;
	};
	$pkg.AfterFunc = AfterFunc;
	goFunc = function(arg, seq) {
		var $ptr, arg, seq;
		$go($assertType(arg, funcType), []);
	};
	Time.ptr.prototype.setLoc = function(loc) {
		var $ptr, loc, t;
		t = this;
		if (loc === utcLoc) {
			loc = ptrType$1.nil;
		}
		t.loc = loc;
	};
	Time.prototype.setLoc = function(loc) { return this.$val.setLoc(loc); };
	Time.ptr.prototype.After = function(u) {
		var $ptr, t, u, x, x$1, x$2, x$3;
		t = this;
		return (x = t.sec, x$1 = u.sec, (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low > x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec > u.nsec;
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.ptr.prototype.Before = function(u) {
		var $ptr, t, u, x, x$1, x$2, x$3;
		t = this;
		return (x = t.sec, x$1 = u.sec, (x.$high < x$1.$high || (x.$high === x$1.$high && x.$low < x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec < u.nsec;
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.ptr.prototype.Equal = function(u) {
		var $ptr, t, u, x, x$1;
		t = this;
		return (x = t.sec, x$1 = u.sec, (x.$high === x$1.$high && x.$low === x$1.$low)) && (t.nsec === u.nsec);
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var $ptr, buf, m, n, x;
		m = this.$val;
		if (1 <= m && m <= 12) {
			return (x = m - 1 >> 0, ((x < 0 || x >= months.length) ? ($throwRuntimeError("index out of range"), undefined) : months[x]));
		}
		buf = $makeSlice(sliceType$3, 20);
		n = fmtInt(buf, new $Uint64(0, m));
		return "%!Month(" + $bytesToString($subslice(buf, n)) + ")";
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var $ptr, d;
		d = this.$val;
		return ((d < 0 || d >= days.length) ? ($throwRuntimeError("index out of range"), undefined) : days[d]);
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.ptr.prototype.IsZero = function() {
		var $ptr, t, x;
		t = this;
		return (x = t.sec, (x.$high === 0 && x.$low === 0)) && (t.nsec === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.ptr.prototype.abs = function() {
		var $ptr, _r$1, _r$2, _tuple$1, l, offset, sec, t, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; l = $f.l; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		l = t.loc;
		/* */ if (l === ptrType$1.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$1.nil || l === localLoc) { */ case 1:
			_r$1 = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			l = _r$1;
		/* } */ case 2:
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 6:
				sec = (x$3 = new $Int64(0, l.cacheZone.offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
				$s = 8; continue;
			/* } else { */ case 7:
				_r$2 = l.lookup(sec); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				offset = _tuple$1[1];
				sec = (x$4 = new $Int64(0, offset), new $Int64(sec.$high + x$4.$high, sec.$low + x$4.$low));
			/* } */ case 8:
		/* } */ case 5:
		$s = -1; return (x$5 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$5.$high, x$5.$low));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.abs }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.l = l; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.ptr.prototype.locabs = function() {
		var $ptr, _r$1, _r$2, _tuple$1, abs, l, name, offset, sec, t, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; abs = $f.abs; l = $f.l; name = $f.name; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		abs = new $Uint64(0, 0);
		t = this;
		l = t.loc;
		/* */ if (l === ptrType$1.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$1.nil || l === localLoc) { */ case 1:
			_r$1 = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			l = _r$1;
		/* } */ case 2:
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 7:
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$2 = l.lookup(sec); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				name = _tuple$1[0];
				offset = _tuple$1[1];
			/* } */ case 9:
			sec = (x$3 = new $Int64(0, offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
			$s = 6; continue;
		/* } else { */ case 5:
			name = "UTC";
		/* } */ case 6:
		abs = (x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low));
		$s = -1; return [name, offset, abs];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.locabs }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.abs = abs; $f.l = l; $f.name = name; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.ptr.prototype.Date = function() {
		var $ptr, _r$1, _tuple$1, day, month, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; day = $f.day; month = $f.month; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		t = this;
		_r$1 = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		$s = -1; return [year, month, day];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.day = day; $f.month = month; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.ptr.prototype.Year = function() {
		var $ptr, _r$1, _tuple$1, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		$s = -1; return year;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Year }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.ptr.prototype.Month = function() {
		var $ptr, _r$1, _tuple$1, month, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; month = $f.month; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		month = _tuple$1[1];
		$s = -1; return month;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Month }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.month = month; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.ptr.prototype.Day = function() {
		var $ptr, _r$1, _tuple$1, day, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; day = $f.day; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		day = _tuple$1[2];
		$s = -1; return day;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Day }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.day = day; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.ptr.prototype.Weekday = function() {
		var $ptr, _r$1, _r$2, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absWeekday(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Weekday }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var $ptr, _q, abs, sec;
		sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
		return ((_q = (sec.$low >> 0) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
	};
	Time.ptr.prototype.ISOWeek = function() {
		var $ptr, _q, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple$1, day, dec31wday, jan1wday, month, t, wday, week, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple$1 = $f._tuple$1; day = $f.day; dec31wday = $f.dec31wday; jan1wday = $f.jan1wday; month = $f.month; t = $f.t; wday = $f.wday; week = $f.week; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		week = 0;
		t = this;
		_r$1 = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		yday = _tuple$1[3];
		_r$3 = $clone(t, Time).Weekday(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		wday = (_r$2 = ((_r$3 + 6 >> 0) >> 0) % 7, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
		week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		jan1wday = (_r$4 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
		if (1 <= jan1wday && jan1wday <= 3) {
			week = week + (1) >> 0;
		}
		if (week === 0) {
			year = year - (1) >> 0;
			week = 52;
			if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
				week = week + (1) >> 0;
			}
		}
		if ((month === 12) && day >= 29 && wday < 3) {
			dec31wday = (_r$5 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero"));
			if (0 <= dec31wday && dec31wday <= 2) {
				year = year + (1) >> 0;
				week = 1;
			}
		}
		$s = -1; return [year, week];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.ISOWeek }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple$1 = _tuple$1; $f.day = day; $f.dec31wday = dec31wday; $f.jan1wday = jan1wday; $f.month = month; $f.t = t; $f.wday = wday; $f.week = week; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.ptr.prototype.Clock = function() {
		var $ptr, _r$1, _r$2, _tuple$1, hour, min, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; hour = $f.hour; min = $f.min; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		hour = 0;
		min = 0;
		sec = 0;
		t = this;
		_r$1 = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absClock(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		hour = _tuple$1[0];
		min = _tuple$1[1];
		sec = _tuple$1[2];
		$s = -1; return [hour, min, sec];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Clock }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.hour = hour; $f.min = min; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var $ptr, _q, _q$1, abs, hour, min, sec;
		hour = 0;
		min = 0;
		sec = 0;
		sec = ($div64(abs, new $Uint64(0, 86400), true).$low >> 0);
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(hour, 3600))) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(min, 60))) >> 0;
		return [hour, min, sec];
	};
	Time.ptr.prototype.Hour = function() {
		var $ptr, _q, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return (_q = ($div64(_r$1, new $Uint64(0, 86400), true).$low >> 0) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Hour }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.ptr.prototype.Minute = function() {
		var $ptr, _q, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return (_q = ($div64(_r$1, new $Uint64(0, 3600), true).$low >> 0) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Minute }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.ptr.prototype.Second = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return ($div64(_r$1, new $Uint64(0, 60), true).$low >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Second }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.ptr.prototype.Nanosecond = function() {
		var $ptr, t;
		t = this;
		return (t.nsec >> 0);
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.ptr.prototype.YearDay = function() {
		var $ptr, _r$1, _tuple$1, t, yday, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; t = $f.t; yday = $f.yday; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		yday = _tuple$1[3];
		$s = -1; return yday + 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.YearDay }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.t = t; $f.yday = yday; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var $ptr, _tuple$1, _tuple$2, buf, d, neg, prec, u, w;
		d = this;
		buf = arrayType$4.zero();
		w = 32;
		u = new $Uint64(d.$high, d.$low);
		neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
			prec = 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
			w = w - (1) >> 0;
			if ((u.$high === 0 && u.$low === 0)) {
				return "0s";
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
				prec = 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 110);
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
				prec = 3;
				w = w - (1) >> 0;
				$copyString($subslice(new sliceType$3(buf), w), "\xC2\xB5");
			} else {
				prec = 6;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
			}
			_tuple$1 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, prec);
			w = _tuple$1[0];
			u = _tuple$1[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
		} else {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
			_tuple$2 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, 9);
			w = _tuple$2[0];
			u = _tuple$2[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, (new $Uint64(0, 60)), false);
			if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
				w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 104);
					w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
		}
		return $bytesToString($subslice(new sliceType$3(buf), w));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var $ptr, _tmp, _tmp$1, buf, digit, i, nv, nw, prec, print, v, w;
		nw = 0;
		nv = new $Uint64(0, 0);
		w = buf.$length;
		print = false;
		i = 0;
		while (true) {
			if (!(i < prec)) { break; }
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.$high === 0 && digit.$low === 0));
			if (print) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = ((digit.$low << 24 >>> 24) + 48 << 24 >>> 24));
			}
			v = $div64(v, (new $Uint64(0, 10)), false);
			i = i + (1) >> 0;
		}
		if (print) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
		}
		_tmp = w;
		_tmp$1 = v;
		nw = _tmp;
		nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var $ptr, buf, v, w;
		w = buf.$length;
		if ((v.$high === 0 && v.$low === 0)) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
		} else {
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = (($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24) + 48 << 24 >>> 24));
				v = $div64(v, (new $Uint64(0, 10)), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var $ptr, d;
		d = this;
		return new $Int64(d.$high, d.$low);
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Seconds = function() {
		var $ptr, d, nsec, sec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return $flatten64(sec) + $flatten64(nsec) / 1e+09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var $ptr, d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return $flatten64(min) + $flatten64(nsec) / 6e+10;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var $ptr, d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return $flatten64(hour) + $flatten64(nsec) / 3.6e+12;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Time.ptr.prototype.Add = function(d) {
		var $ptr, d, nsec, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		t = this;
		t.sec = (x = t.sec, x$1 = (x$2 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$2.$high, x$2.$low)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		nsec = t.nsec + ((x$3 = $div64(d, new Duration(0, 1000000000), true), x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0) >> 0;
		if (nsec >= 1000000000) {
			t.sec = (x$4 = t.sec, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
			nsec = nsec - (1000000000) >> 0;
		} else if (nsec < 0) {
			t.sec = (x$6 = t.sec, x$7 = new $Int64(0, 1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low));
			nsec = nsec + (1000000000) >> 0;
		}
		t.nsec = nsec;
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.ptr.prototype.Sub = function(u) {
		var $ptr, d, t, u, x, x$1, x$2, x$3, x$4;
		t = this;
		d = (x = $mul64((x$1 = (x$2 = t.sec, x$3 = u.sec, new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low)), new Duration(x$1.$high, x$1.$low)), new Duration(0, 1000000000)), x$4 = new Duration(0, (t.nsec - u.nsec >> 0)), new Duration(x.$high + x$4.$high, x.$low + x$4.$low));
		if ($clone($clone(u, Time).Add(d), Time).Equal($clone(t, Time))) {
			return d;
		} else if ($clone(t, Time).Before($clone(u, Time))) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Until = function(t) {
		var $ptr, t;
		return $clone(t, Time).Sub($clone(Now(), Time));
	};
	$pkg.Until = Until;
	Time.ptr.prototype.AddDate = function(years, months$1, days$1) {
		var $ptr, _r$1, _r$2, _r$3, _tuple$1, _tuple$2, day, days$1, hour, min, month, months$1, sec, t, year, years, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; day = $f.day; days$1 = $f.days$1; hour = $f.hour; min = $f.min; month = $f.month; months$1 = $f.months$1; sec = $f.sec; t = $f.t; year = $f.year; years = $f.years; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		_r$2 = $clone(t, Time).Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		hour = _tuple$2[0];
		min = _tuple$2[1];
		sec = _tuple$2[2];
		_r$3 = Date(year + years >> 0, month + (months$1 >> 0) >> 0, day + days$1 >> 0, hour, min, sec, (t.nsec >> 0), $clone(t, Time).Location()); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AddDate }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.day = day; $f.days$1 = days$1; $f.hour = hour; $f.min = min; $f.month = month; $f.months$1 = months$1; $f.sec = sec; $f.t = t; $f.year = year; $f.years = years; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AddDate = function(years, months$1, days$1) { return this.$val.AddDate(years, months$1, days$1); };
	Time.ptr.prototype.date = function(full) {
		var $ptr, _r$1, _r$2, _tuple$1, day, full, month, t, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; day = $f.day; full = $f.full; month = $f.month; t = $f.t; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		t = this;
		_r$1 = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absDate(_r$1, full); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		yday = _tuple$1[3];
		$s = -1; return [year, month, day, yday];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.day = day; $f.full = full; $f.month = month; $f.t = t; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var $ptr, _q, abs, begin, d, day, end, full, month, n, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday, year;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x.$high, d.$low - x.$low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$1 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$1.$high, n.$low - x$1.$low));
		y = (x$2 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$2.$high, y.$low + x$2.$low));
		d = (x$3 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$3.$high, d.$low - x$3.$low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$4 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$4.$high, y.$low + x$4.$low));
		d = (x$5 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$5.$high, d.$low - x$5.$low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$6 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$6.$high, n.$low - x$6.$low));
		y = (x$7 = n, new $Uint64(y.$high + x$7.$high, y.$low + x$7.$low));
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$8.$high, d.$low - x$8.$low));
		year = ((x$9 = (x$10 = new $Int64(y.$high, y.$low), new $Int64(x$10.$high + -69, x$10.$low + 4075721025)), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0);
		yday = (d.$low >> 0);
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - (1) >> 0;
			} else if ((day === 59)) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = ((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
		end = ((x$11 = month + 1 >> 0, ((x$11 < 0 || x$11 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$11])) >> 0);
		begin = 0;
		if (day >= end) {
			month = month + (1) >> 0;
			begin = end;
		} else {
			begin = (((month < 0 || month >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[month]) >> 0);
		}
		month = month + (1) >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	daysIn = function(m, year) {
		var $ptr, m, x, year;
		if ((m === 2) && isLeap(year)) {
			return 29;
		}
		return ((((m < 0 || m >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[m]) - (x = m - 1 >> 0, ((x < 0 || x >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x])) >> 0) >> 0);
	};
	Now = function() {
		var $ptr, _tuple$1, nsec, sec;
		_tuple$1 = now();
		sec = _tuple$1[0];
		nsec = _tuple$1[1];
		return new Time.ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), nsec, $pkg.Local);
	};
	$pkg.Now = Now;
	Time.ptr.prototype.UTC = function() {
		var $ptr, t;
		t = this;
		t.setLoc(utcLoc);
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.ptr.prototype.Local = function() {
		var $ptr, t;
		t = this;
		t.setLoc($pkg.Local);
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.ptr.prototype.In = function(loc) {
		var $ptr, loc, t;
		t = this;
		if (loc === ptrType$1.nil) {
			$panic(new $String("time: missing Location in call to Time.In"));
		}
		t.setLoc(loc);
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.ptr.prototype.Location = function() {
		var $ptr, l, t;
		t = this;
		l = t.loc;
		if (l === ptrType$1.nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.ptr.prototype.Zone = function() {
		var $ptr, _r$1, _tuple$1, name, offset, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; name = $f.name; offset = $f.offset; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		t = this;
		_r$1 = t.loc.lookup((x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640))); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		name = _tuple$1[0];
		offset = _tuple$1[1];
		$s = -1; return [name, offset];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Zone }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.name = name; $f.offset = offset; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.ptr.prototype.Unix = function() {
		var $ptr, t, x;
		t = this;
		return (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.ptr.prototype.UnixNano = function() {
		var $ptr, t, x, x$1, x$2;
		t = this;
		return (x = $mul64(((x$1 = t.sec, new $Int64(x$1.$high + -15, x$1.$low + 2288912640))), new $Int64(0, 1000000000)), x$2 = new $Int64(0, t.nsec), new $Int64(x.$high + x$2.$high, x.$low + x$2.$low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.ptr.prototype.MarshalBinary = function() {
		var $ptr, _q, _r$1, _r$2, _tuple$1, enc, offset, offsetMin, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; enc = $f.enc; offset = $f.offset; offsetMin = $f.offsetMin; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		offsetMin = 0;
		/* */ if ($clone(t, Time).Location() === $pkg.UTC) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(t, Time).Location() === $pkg.UTC) { */ case 1:
			offsetMin = -1;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = $clone(t, Time).Zone(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			offset = _tuple$1[1];
			if (!(((_r$2 = offset % 60, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0))) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = (offset << 16 >> 16);
		/* } */ case 3:
		enc = new sliceType$3([1, ($shiftRightInt64(t.sec, 56).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 48).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 40).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 32).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 24).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 16).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 8).$low << 24 >>> 24), (t.sec.$low << 24 >>> 24), ((t.nsec >> 24 >> 0) << 24 >>> 24), ((t.nsec >> 16 >> 0) << 24 >>> 24), ((t.nsec >> 8 >> 0) << 24 >>> 24), (t.nsec << 24 >>> 24), ((offsetMin >> 8 << 16 >> 16) << 24 >>> 24), (offsetMin << 24 >>> 24)]);
		$s = -1; return [enc, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalBinary }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.enc = enc; $f.offset = offset; $f.offsetMin = offsetMin; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.ptr.prototype.UnmarshalBinary = function(data$1) {
		var $ptr, _r$1, _tuple$1, buf, data$1, localoff, offset, t, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; buf = $f.buf; data$1 = $f.data$1; localoff = $f.localoff; offset = $f.offset; t = $f.t; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		buf = data$1;
		if (buf.$length === 0) {
			$s = -1; return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!(((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 1))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.$length === 15))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		t.sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new $Int64(0, (7 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 7])), x$7 = $shiftLeft64(new $Int64(0, (6 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 6])), 8), new $Int64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64(new $Int64(0, (5 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 5])), 16), new $Int64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64(new $Int64(0, (4 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 4])), 24), new $Int64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64(new $Int64(0, (3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3])), 32), new $Int64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64(new $Int64(0, (2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2])), 40), new $Int64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64(new $Int64(0, (1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1])), 48), new $Int64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64(new $Int64(0, (0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0])), 56), new $Int64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		buf = $subslice(buf, 8);
		t.nsec = ((((3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]) >> 0) | (((2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]) >> 0) << 8 >> 0)) | (((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) >> 0) << 16 >> 0)) | (((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) >> 0) << 24 >> 0);
		buf = $subslice(buf, 4);
		offset = $imul(((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) << 16 >> 16) | (((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) << 16 >> 16) << 8 << 16 >> 16)) >> 0), 60);
		/* */ if (offset === -60) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (offset === -60) { */ case 1:
			t.setLoc(utcLoc);
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = $pkg.Local.lookup((x$14 = t.sec, new $Int64(x$14.$high + -15, x$14.$low + 2288912640))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			localoff = _tuple$1[1];
			if (offset === localoff) {
				t.setLoc($pkg.Local);
			} else {
				t.setLoc(FixedZone("", offset));
			}
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalBinary }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.data$1 = data$1; $f.localoff = localoff; $f.offset = offset; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalBinary = function(data$1) { return this.$val.UnmarshalBinary(data$1); };
	Time.ptr.prototype.GobEncode = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).MarshalBinary(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobEncode }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.ptr.prototype.GobDecode = function(data$1) {
		var $ptr, _r$1, data$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; data$1 = $f.data$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = t.UnmarshalBinary(data$1); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobDecode }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.data$1 = data$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobDecode = function(data$1) { return this.$val.GobDecode(data$1); };
	Time.ptr.prototype.MarshalJSON = function() {
		var $ptr, _r$1, _r$2, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		y = _r$1;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 37);
		b = $append(b, 34);
		_r$2 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		b = _r$2;
		b = $append(b, 34);
		$s = -1; return [b, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalJSON }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.ptr.prototype.UnmarshalJSON = function(data$1) {
		var $ptr, _r$1, _tuple$1, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($bytesToString(data$1) === "null") {
			$s = -1; return $ifaceNil;
		}
		err = $ifaceNil;
		_r$1 = Parse("\"2006-01-02T15:04:05Z07:00\"", $bytesToString(data$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		Time.copy(t, _tuple$1[0]);
		err = _tuple$1[1];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalJSON }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalJSON = function(data$1) { return this.$val.UnmarshalJSON(data$1); };
	Time.ptr.prototype.MarshalText = function() {
		var $ptr, _r$1, _r$2, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		y = _r$1;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 35);
		_r$2 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return [_r$2, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalText }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.ptr.prototype.UnmarshalText = function(data$1) {
		var $ptr, _r$1, _tuple$1, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		err = $ifaceNil;
		_r$1 = Parse("2006-01-02T15:04:05Z07:00", $bytesToString(data$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		Time.copy(t, _tuple$1[0]);
		err = _tuple$1[1];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalText }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalText = function(data$1) { return this.$val.UnmarshalText(data$1); };
	Unix = function(sec, nsec) {
		var $ptr, n, nsec, sec, x, x$1, x$2, x$3;
		if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x = n, new $Int64(sec.$high + x.$high, sec.$low + x.$low));
			nsec = (x$1 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$1.$high, nsec.$low - x$1.$low));
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
				nsec = (x$2 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$2.$high, nsec.$low + x$2.$low));
				sec = (x$3 = new $Int64(0, 1), new $Int64(sec.$high - x$3.$high, sec.$low - x$3.$low));
			}
		}
		return new Time.ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), ((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0), $pkg.Local);
	};
	$pkg.Unix = Unix;
	isLeap = function(year) {
		var $ptr, _r$1, _r$2, _r$3, year;
		return ((_r$1 = year % 4, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$2 = year % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$3 = year % 400, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var $ptr, _q, _q$1, _tmp, _tmp$1, base, hi, lo, n, n$1, nhi, nlo;
		nhi = 0;
		nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + (($imul(n, base))) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - (($imul(n$1, base))) >> 0;
		}
		_tmp = hi;
		_tmp$1 = lo;
		nhi = _tmp;
		nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var $ptr, _r$1, _r$2, _r$3, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, abs, d, day, end, hour, loc, m, min, month, n, nsec, offset, sec, start, t, unix, utc, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; abs = $f.abs; d = $f.d; day = $f.day; end = $f.end; hour = $f.hour; loc = $f.loc; m = $f.m; min = $f.min; month = $f.month; n = $f.n; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; start = $f.start; t = $f.t; unix = $f.unix; utc = $f.utc; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (loc === ptrType$1.nil) {
			$panic(new $String("time: missing Location in call to Date"));
		}
		m = (month >> 0) - 1 >> 0;
		_tuple$1 = norm(year, m, 12);
		year = _tuple$1[0];
		m = _tuple$1[1];
		month = (m >> 0) + 1 >> 0;
		_tuple$2 = norm(sec, nsec, 1000000000);
		sec = _tuple$2[0];
		nsec = _tuple$2[1];
		_tuple$3 = norm(min, sec, 60);
		min = _tuple$3[0];
		sec = _tuple$3[1];
		_tuple$4 = norm(hour, min, 60);
		hour = _tuple$4[0];
		min = _tuple$4[1];
		_tuple$5 = norm(day, hour, 24);
		day = _tuple$5[0];
		hour = _tuple$5[1];
		y = (x = (x$1 = new $Int64(0, year), new $Int64(x$1.$high - -69, x$1.$low - 4075721025)), new $Uint64(x.$high, x.$low));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$2 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$2.$high, y.$low - x$2.$low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$5.$high, y.$low - x$5.$low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$6.$high, d.$low + x$6.$low));
		n = y;
		d = (x$7 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
		d = (x$8 = new $Uint64(0, (x$9 = month - 1 >> 0, ((x$9 < 0 || x$9 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$9]))), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
		if (isLeap(year) && month >= 3) {
			d = (x$10 = new $Uint64(0, 1), new $Uint64(d.$high + x$10.$high, d.$low + x$10.$low));
		}
		d = (x$11 = new $Uint64(0, (day - 1 >> 0)), new $Uint64(d.$high + x$11.$high, d.$low + x$11.$low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$12 = new $Uint64(0, ((($imul(hour, 3600)) + ($imul(min, 60)) >> 0) + sec >> 0)), new $Uint64(abs.$high + x$12.$high, abs.$low + x$12.$low));
		unix = (x$13 = new $Int64(abs.$high, abs.$low), new $Int64(x$13.$high + -2147483647, x$13.$low + 3844486912));
		_r$1 = loc.lookup(unix); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$6 = _r$1;
		offset = _tuple$6[1];
		start = _tuple$6[3];
		end = _tuple$6[4];
		/* */ if (!((offset === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((offset === 0))) { */ case 2:
				utc = (x$14 = new $Int64(0, offset), new $Int64(unix.$high - x$14.$high, unix.$low - x$14.$low));
				/* */ if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { $s = 5; continue; }
				/* */ if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { */ case 5:
					_r$2 = loc.lookup(new $Int64(start.$high - 0, start.$low - 1)); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$7 = _r$2;
					offset = _tuple$7[1];
					$s = 7; continue;
				/* } else if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { */ case 6:
					_r$3 = loc.lookup(end); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$8 = _r$3;
					offset = _tuple$8[1];
				/* } */ case 7:
			case 4:
			unix = (x$15 = new $Int64(0, offset), new $Int64(unix.$high - x$15.$high, unix.$low - x$15.$low));
		/* } */ case 3:
		t = new Time.ptr(new $Int64(unix.$high + 14, unix.$low + 2006054656), (nsec >> 0), ptrType$1.nil);
		t.setLoc(loc);
		$s = -1; return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f.abs = abs; $f.d = d; $f.day = day; $f.end = end; $f.hour = hour; $f.loc = loc; $f.m = m; $f.min = min; $f.month = month; $f.n = n; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.start = start; $f.t = t; $f.unix = unix; $f.utc = utc; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Date = Date;
	Time.ptr.prototype.Truncate = function(d) {
		var $ptr, _tuple$1, d, r, t;
		t = this;
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div($clone(t, Time), d);
		r = _tuple$1[1];
		return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.ptr.prototype.Round = function(d) {
		var $ptr, _tuple$1, d, r, t, x;
		t = this;
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div($clone(t, Time), d);
		r = _tuple$1[1];
		if ((x = new Duration(r.$high + r.$high, r.$low + r.$low), (x.$high < d.$high || (x.$high === d.$high && x.$low < d.$low)))) {
			return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
		}
		return $clone(t, Time).Add(new Duration(d.$high - r.$high, d.$low - r.$low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var $ptr, _q, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, d0, d1, d1$1, neg, nsec, qmod2, r, sec, t, tmp, u0, u0x, u1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		qmod2 = 0;
		r = new Duration(0, 0);
		neg = false;
		nsec = t.nsec;
		if ((x = t.sec, (x.$high < 0 || (x.$high === 0 && x.$low < 0)))) {
			neg = true;
			t.sec = (x$1 = t.sec, new $Int64(-x$1.$high, -x$1.$low));
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + (1000000000) >> 0;
				t.sec = (x$2 = t.sec, x$3 = new $Int64(0, 1), new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low));
			}
		}
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$4 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$4.$high === 0 && x$4.$low === 0))) {
			qmod2 = ((_q = nsec / ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) & 1;
			r = new Duration(0, (_r$1 = nsec % ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")));
		} else if ((x$5 = $div64(d, new Duration(0, 1000000000), true), (x$5.$high === 0 && x$5.$low === 0))) {
			d1 = (x$6 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$6.$high, x$6.$low));
			qmod2 = ((x$7 = $div64(t.sec, d1, false), x$7.$low + ((x$7.$high >> 31) * 4294967296)) >> 0) & 1;
			r = (x$8 = $mul64((x$9 = $div64(t.sec, d1, true), new Duration(x$9.$high, x$9.$low)), new Duration(0, 1000000000)), x$10 = new Duration(0, nsec), new Duration(x$8.$high + x$10.$high, x$8.$low + x$10.$low));
		} else {
			sec = (x$11 = t.sec, new $Uint64(x$11.$high, x$11.$low));
			tmp = $mul64(($shiftRightUint64(sec, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64((new $Uint64(sec.$high & 0, (sec.$low & 4294967295) >>> 0)), new $Uint64(0, 1000000000));
			_tmp = u0;
			_tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low);
			u0x = _tmp;
			u0 = _tmp$1;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$12 = new $Uint64(0, 1), new $Uint64(u1.$high + x$12.$high, u1.$low + x$12.$low));
			}
			_tmp$2 = u0;
			_tmp$3 = (x$13 = new $Uint64(0, nsec), new $Uint64(u0.$high + x$13.$high, u0.$low + x$13.$low));
			u0x = _tmp$2;
			u0 = _tmp$3;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$14 = new $Uint64(0, 1), new $Uint64(u1.$high + x$14.$high, u1.$low + x$14.$low));
			}
			d1$1 = new $Uint64(d.$high, d.$low);
			while (true) {
				if (!(!((x$15 = $shiftRightUint64(d1$1, 63), (x$15.$high === 0 && x$15.$low === 1))))) { break; }
				d1$1 = $shiftLeft64(d1$1, (1));
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
					qmod2 = 1;
					_tmp$4 = u0;
					_tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low);
					u0x = _tmp$4;
					u0 = _tmp$5;
					if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
						u1 = (x$16 = new $Uint64(0, 1), new $Uint64(u1.$high - x$16.$high, u1.$low - x$16.$low));
					}
					u1 = (x$17 = d1$1, new $Uint64(u1.$high - x$17.$high, u1.$low - x$17.$low));
				}
				if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$18 = new $Uint64(d.$high, d.$low), (d0.$high === x$18.$high && d0.$low === x$18.$low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, (1));
				d0 = (x$19 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$19.$high, (d0.$low | x$19.$low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, (1));
			}
			r = new Duration(u0.$high, u0.$low);
		}
		if (neg && !((r.$high === 0 && r.$low === 0))) {
			qmod2 = (qmod2 ^ (1)) >> 0;
			r = new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		return [qmod2, r];
	};
	Location.ptr.prototype.get = function() {
		var $ptr, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		if (l === ptrType$1.nil) {
			$s = -1; return utcLoc;
		}
		/* */ if (l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === localLoc) { */ case 1:
			$r = localOnce.Do(initLocal); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return l;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.get }; } $f.$ptr = $ptr; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.ptr.prototype.String = function() {
		var $ptr, _r$1, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1.name;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = function(name, offset) {
		var $ptr, l, name, offset, x;
		l = new Location.ptr(name, new sliceType([new zone.ptr(name, offset, false)]), new sliceType$1([new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);
		l.cacheZone = (x = l.zone, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		return l;
	};
	$pkg.FixedZone = FixedZone;
	Location.ptr.prototype.lookup = function(sec) {
		var $ptr, _q, _r$1, end, hi, isDST, l, lim, lo, m, name, offset, sec, start, tx, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, zone$1, zone$2, zone$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; end = $f.end; hi = $f.hi; isDST = $f.isDST; l = $f.l; lim = $f.lim; lo = $f.lo; m = $f.m; name = $f.name; offset = $f.offset; sec = $f.sec; start = $f.start; tx = $f.tx; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; zone$1 = $f.zone$1; zone$2 = $f.zone$2; zone$3 = $f.zone$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		isDST = false;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		l = _r$1;
		if (l.zone.$length === 0) {
			name = "UTC";
			offset = 0;
			isDST = false;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			$s = -1; return [name, offset, isDST, start, end];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			isDST = zone$1.isDST;
			start = l.cacheStart;
			end = l.cacheEnd;
			$s = -1; return [name, offset, isDST, start, end];
		}
		if ((l.tx.$length === 0) || (x$2 = (x$3 = l.tx, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).when, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
			zone$2 = (x$4 = l.zone, x$5 = l.lookupFirstZone(), ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5]));
			name = zone$2.name;
			offset = zone$2.offset;
			isDST = zone$2.isDST;
			start = new $Int64(-2147483648, 0);
			if (l.tx.$length > 0) {
				end = (x$6 = l.tx, (0 >= x$6.$length ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			$s = -1; return [name, offset, isDST, start, end];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.$length;
		while (true) {
			if (!((hi - lo >> 0) > 1)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + m]).when;
			if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$7 = l.zone, x$8 = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).index, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8]));
		name = zone$3.name;
		offset = zone$3.offset;
		isDST = zone$3.isDST;
		start = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).when;
		$s = -1; return [name, offset, isDST, start, end];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookup }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.end = end; $f.hi = hi; $f.isDST = isDST; $f.l = l; $f.lim = lim; $f.lo = lo; $f.m = m; $f.name = name; $f.offset = offset; $f.sec = sec; $f.start = start; $f.tx = tx; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.zone$3 = zone$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.ptr.prototype.lookupFirstZone = function() {
		var $ptr, _i, _ref, l, x, x$1, x$2, x$3, x$4, x$5, zi, zi$1;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.$length > 0 && (x = l.zone, x$1 = (x$2 = l.tx, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])).index, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).isDST) {
			zi = ((x$3 = l.tx, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).index >> 0) - 1 >> 0;
			while (true) {
				if (!(zi >= 0)) { break; }
				if (!(x$4 = l.zone, ((zi < 0 || zi >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + zi])).isDST) {
					return zi;
				}
				zi = zi - (1) >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			zi$1 = _i;
			if (!(x$5 = l.zone, ((zi$1 < 0 || zi$1 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.ptr.prototype.firstZoneUsed = function() {
		var $ptr, _i, _ref, l, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			tx = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	Location.ptr.prototype.lookupName = function(name, unix) {
		var $ptr, _i, _i$1, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple$1, i, i$1, isDST, isDST$1, l, nam, name, offset, offset$1, ok, unix, x, x$1, x$2, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple$1 = $f._tuple$1; i = $f.i; i$1 = $f.i$1; isDST = $f.isDST; isDST$1 = $f.isDST$1; l = $f.l; nam = $f.nam; name = $f.name; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; unix = $f.unix; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		offset = 0;
		isDST = false;
		ok = false;
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		l = _r$1;
		_ref = l.zone;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			zone$1 = (x = l.zone, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			/* */ if (zone$1.name === name) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (zone$1.name === name) { */ case 4:
				_r$2 = l.lookup((x$1 = new $Int64(0, zone$1.offset), new $Int64(unix.$high - x$1.$high, unix.$low - x$1.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				nam = _tuple$1[0];
				offset$1 = _tuple$1[1];
				isDST$1 = _tuple$1[2];
				if (nam === zone$1.name) {
					_tmp = offset$1;
					_tmp$1 = isDST$1;
					_tmp$2 = true;
					offset = _tmp;
					isDST = _tmp$1;
					ok = _tmp$2;
					$s = -1; return [offset, isDST, ok];
				}
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		_ref$1 = l.zone;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			zone$2 = (x$2 = l.zone, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			if (zone$2.name === name) {
				_tmp$3 = zone$2.offset;
				_tmp$4 = zone$2.isDST;
				_tmp$5 = true;
				offset = _tmp$3;
				isDST = _tmp$4;
				ok = _tmp$5;
				$s = -1; return [offset, isDST, ok];
			}
			_i$1++;
		}
		$s = -1; return [offset, isDST, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookupName }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple$1 = _tuple$1; $f.i = i; $f.i$1 = i$1; $f.isDST = isDST; $f.isDST$1 = isDST$1; $f.l = l; $f.nam = nam; $f.name = name; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.unix = unix; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "Stop", name: "Stop", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([Duration], [$Bool], false)}];
	Time.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "AppendFormat", name: "AppendFormat", pkg: "", typ: $funcType([sliceType$3, $String], [sliceType$3], false)}, {prop: "After", name: "After", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "abs", name: "abs", pkg: "time", typ: $funcType([], [$Uint64], false)}, {prop: "locabs", name: "locabs", pkg: "time", typ: $funcType([], [$String, $Int, $Uint64], false)}, {prop: "Date", name: "Date", pkg: "", typ: $funcType([], [$Int, Month, $Int], false)}, {prop: "Year", name: "Year", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", typ: $funcType([], [Month], false)}, {prop: "Day", name: "Day", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Weekday", name: "Weekday", pkg: "", typ: $funcType([], [Weekday], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Clock", name: "Clock", pkg: "", typ: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Hour", name: "Hour", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Minute", name: "Minute", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Second", name: "Second", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Time], [Duration], false)}, {prop: "AddDate", name: "AddDate", pkg: "", typ: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "date", name: "date", pkg: "time", typ: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "UTC", name: "UTC", pkg: "", typ: $funcType([], [Time], false)}, {prop: "Local", name: "Local", pkg: "", typ: $funcType([], [Time], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([ptrType$1], [Time], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Zone", name: "Zone", pkg: "", typ: $funcType([], [$String, $Int], false)}, {prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Time], false)}];
	ptrType$6.methods = [{prop: "setLoc", name: "setLoc", pkg: "time", typ: $funcType([ptrType$1], [], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$3], [$error], false)}];
	Month.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Weekday.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Duration.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Hours", name: "Hours", pkg: "", typ: $funcType([], [$Float64], false)}];
	ptrType$1.methods = [{prop: "get", name: "get", pkg: "time", typ: $funcType([], [ptrType$1], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "lookup", name: "lookup", pkg: "time", typ: $funcType([$Int64], [$String, $Int, $Bool, $Int64, $Int64], false)}, {prop: "lookupFirstZone", name: "lookupFirstZone", pkg: "time", typ: $funcType([], [$Int], false)}, {prop: "firstZoneUsed", name: "firstZoneUsed", pkg: "time", typ: $funcType([], [$Bool], false)}, {prop: "lookupName", name: "lookupName", pkg: "time", typ: $funcType([$String, $Int64], [$Int, $Bool, $Bool], false)}];
	runtimeTimer.init("time", [{prop: "i", name: "i", exported: false, typ: $Int32, tag: ""}, {prop: "when", name: "when", exported: false, typ: $Int64, tag: ""}, {prop: "period", name: "period", exported: false, typ: $Int64, tag: ""}, {prop: "f", name: "f", exported: false, typ: funcType$1, tag: ""}, {prop: "arg", name: "arg", exported: false, typ: $emptyInterface, tag: ""}, {prop: "timeout", name: "timeout", exported: false, typ: ptrType$2, tag: ""}, {prop: "active", name: "active", exported: false, typ: $Bool, tag: ""}]);
	ParseError.init("", [{prop: "Layout", name: "Layout", exported: true, typ: $String, tag: ""}, {prop: "Value", name: "Value", exported: true, typ: $String, tag: ""}, {prop: "LayoutElem", name: "LayoutElem", exported: true, typ: $String, tag: ""}, {prop: "ValueElem", name: "ValueElem", exported: true, typ: $String, tag: ""}, {prop: "Message", name: "Message", exported: true, typ: $String, tag: ""}]);
	Timer.init("time", [{prop: "C", name: "C", exported: true, typ: chanType$1, tag: ""}, {prop: "r", name: "r", exported: false, typ: runtimeTimer, tag: ""}]);
	Time.init("time", [{prop: "sec", name: "sec", exported: false, typ: $Int64, tag: ""}, {prop: "nsec", name: "nsec", exported: false, typ: $Int32, tag: ""}, {prop: "loc", name: "loc", exported: false, typ: ptrType$1, tag: ""}]);
	Location.init("time", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "zone", name: "zone", exported: false, typ: sliceType, tag: ""}, {prop: "tx", name: "tx", exported: false, typ: sliceType$1, tag: ""}, {prop: "cacheStart", name: "cacheStart", exported: false, typ: $Int64, tag: ""}, {prop: "cacheEnd", name: "cacheEnd", exported: false, typ: $Int64, tag: ""}, {prop: "cacheZone", name: "cacheZone", exported: false, typ: ptrType, tag: ""}]);
	zone.init("time", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "offset", name: "offset", exported: false, typ: $Int, tag: ""}, {prop: "isDST", name: "isDST", exported: false, typ: $Bool, tag: ""}]);
	zoneTrans.init("time", [{prop: "when", name: "when", exported: false, typ: $Int64, tag: ""}, {prop: "index", name: "index", exported: false, typ: $Uint8, tag: ""}, {prop: "isstd", name: "isstd", exported: false, typ: $Bool, tag: ""}, {prop: "isutc", name: "isutc", exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		localLoc = new Location.ptr("", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		localOnce = new nosync.Once.ptr(false, false);
		std0x = $toNativeArray($kindInt, [260, 265, 524, 526, 528, 274]);
		longDayNames = new sliceType$2(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new sliceType$2(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new sliceType$2(["---", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new sliceType$2(["---", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		months = $toNativeArray($kindString, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		days = $toNativeArray($kindString, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		daysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		utcLoc = new Location.ptr("UTC", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		_r = syscall.Getenv("ZONEINFO"); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		zoneinfo = _tuple[0];
		badData = errors.New("malformed time zone information");
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, $init, errors, js, io, runtime, sync, atomic, syscall, time, PathError, SyscallError, LinkError, file, dirInfo, File, FileInfo, FileMode, fileStat, sliceType, ptrType, sliceType$1, ptrType$1, sliceType$2, ptrType$2, ptrType$3, ptrType$4, arrayType, ptrType$12, funcType$1, ptrType$14, arrayType$3, arrayType$5, ptrType$15, errFinished, lstat, useSyscallwd, supportsCloseOnExec, runtime_args, init, runtime_beforeExit, NewSyscallError, IsNotExist, underlyingError, isNotExist, fixCount, sigpipe, syscallMode, NewFile, epipecheck, init$1, useSyscallwdDarwin, basename, init$2, Exit, fillFileStatFromSys, timespecToTime, Lstat, init$3;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	PathError = $pkg.PathError = $newType(0, $kindStruct, "os.PathError", true, "os", true, function(Op_, Path_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Path = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Path = Path_;
		this.Err = Err_;
	});
	SyscallError = $pkg.SyscallError = $newType(0, $kindStruct, "os.SyscallError", true, "os", true, function(Syscall_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Syscall = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Syscall = Syscall_;
		this.Err = Err_;
	});
	LinkError = $pkg.LinkError = $newType(0, $kindStruct, "os.LinkError", true, "os", true, function(Op_, Old_, New_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Old = "";
			this.New = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Old = Old_;
		this.New = New_;
		this.Err = Err_;
	});
	file = $pkg.file = $newType(0, $kindStruct, "os.file", true, "os", false, function(fd_, name_, dirinfo_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fd = 0;
			this.name = "";
			this.dirinfo = ptrType$1.nil;
			return;
		}
		this.fd = fd_;
		this.name = name_;
		this.dirinfo = dirinfo_;
	});
	dirInfo = $pkg.dirInfo = $newType(0, $kindStruct, "os.dirInfo", true, "os", false, function(buf_, nbuf_, bufp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType$2.nil;
			this.nbuf = 0;
			this.bufp = 0;
			return;
		}
		this.buf = buf_;
		this.nbuf = nbuf_;
		this.bufp = bufp_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "os.File", true, "os", true, function(file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$12.nil;
			return;
		}
		this.file = file_;
	});
	FileInfo = $pkg.FileInfo = $newType(8, $kindInterface, "os.FileInfo", true, "os", true, null);
	FileMode = $pkg.FileMode = $newType(4, $kindUint32, "os.FileMode", true, "os", true, null);
	fileStat = $pkg.fileStat = $newType(0, $kindStruct, "os.fileStat", true, "os", false, function(name_, size_, mode_, modTime_, sys_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.size = new $Int64(0, 0);
			this.mode = 0;
			this.modTime = new time.Time.ptr(new $Int64(0, 0), 0, ptrType$14.nil);
			this.sys = new syscall.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, arrayType.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, arrayType$3.zero());
			return;
		}
		this.name = name_;
		this.size = size_;
		this.mode = mode_;
		this.modTime = modTime_;
		this.sys = sys_;
	});
	sliceType = $sliceType($String);
	ptrType = $ptrType(File);
	sliceType$1 = $sliceType(FileInfo);
	ptrType$1 = $ptrType(dirInfo);
	sliceType$2 = $sliceType($Uint8);
	ptrType$2 = $ptrType(PathError);
	ptrType$3 = $ptrType(LinkError);
	ptrType$4 = $ptrType(SyscallError);
	arrayType = $arrayType($Uint8, 4);
	ptrType$12 = $ptrType(file);
	funcType$1 = $funcType([ptrType$12], [$error], false);
	ptrType$14 = $ptrType(time.Location);
	arrayType$3 = $arrayType($Int64, 2);
	arrayType$5 = $arrayType($Uint8, 32);
	ptrType$15 = $ptrType(fileStat);
	runtime_args = function() {
		var $ptr;
		return $pkg.Args;
	};
	init = function() {
		var $ptr, argv, i, process;
		process = $global.process;
		if (!(process === undefined)) {
			argv = process.argv;
			$pkg.Args = $makeSlice(sliceType, ($parseInt(argv.length) - 1 >> 0));
			i = 0;
			while (true) {
				if (!(i < ($parseInt(argv.length) - 1 >> 0))) { break; }
				((i < 0 || i >= $pkg.Args.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(argv[(i + 1 >> 0)], $String));
				i = i + (1) >> 0;
			}
		}
		if ($pkg.Args.$length === 0) {
			$pkg.Args = new sliceType(["?"]);
		}
	};
	runtime_beforeExit = function() {
		var $ptr;
	};
	File.ptr.prototype.Readdir = function(n) {
		var $ptr, _r, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType.nil) {
			$s = -1; return [sliceType$1.nil, $pkg.ErrInvalid];
		}
		_r = f.readdir(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdir }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.ptr.prototype.Readdirnames = function(n) {
		var $ptr, _tmp, _tmp$1, _tuple, err, f, n, names;
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType.nil) {
			_tmp = sliceType.nil;
			_tmp$1 = $pkg.ErrInvalid;
			names = _tmp;
			err = _tmp$1;
			return [names, err];
		}
		_tuple = f.readdirnames(n);
		names = _tuple[0];
		err = _tuple[1];
		return [names, err];
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	File.ptr.prototype.readdir = function(n) {
		var $ptr, _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, dirname, err, f, fi, filename, fip, lerr, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dirname = $f.dirname; err = $f.err; f = $f.f; fi = $f.fi; filename = $f.filename; fip = $f.fip; lerr = $f.lerr; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fi = sliceType$1.nil;
		err = $ifaceNil;
		f = this;
		dirname = f.file.name;
		if (dirname === "") {
			dirname = ".";
		}
		_tuple = f.Readdirnames(n);
		names = _tuple[0];
		err = _tuple[1];
		fi = $makeSlice(sliceType$1, 0, names.$length);
		_ref = names;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			filename = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = lstat(dirname + "/" + filename); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			fip = _tuple$1[0];
			lerr = _tuple$1[1];
			if (IsNotExist(lerr)) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			if (!($interfaceIsEqual(lerr, $ifaceNil))) {
				_tmp = fi;
				_tmp$1 = lerr;
				fi = _tmp;
				err = _tmp$1;
				$s = -1; return [fi, err];
			}
			fi = $append(fi, fip);
			_i++;
		/* } */ $s = 1; continue; case 2:
		if ((fi.$length === 0) && $interfaceIsEqual(err, $ifaceNil) && n > 0) {
			err = io.EOF;
		}
		_tmp$2 = fi;
		_tmp$3 = err;
		fi = _tmp$2;
		err = _tmp$3;
		$s = -1; return [fi, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdir }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dirname = dirname; $f.err = err; $f.f = f; $f.fi = fi; $f.filename = filename; $f.fip = fip; $f.lerr = lerr; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readdir = function(n) { return this.$val.readdir(n); };
	File.ptr.prototype.readdirnames = function(n) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, d, err, errno, f, n, names, nb, nc, size;
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f.file.dirinfo === ptrType$1.nil) {
			f.file.dirinfo = new dirInfo.ptr(sliceType$2.nil, 0, 0);
			f.file.dirinfo.buf = $makeSlice(sliceType$2, 4096);
		}
		d = f.file.dirinfo;
		size = n;
		if (size <= 0) {
			size = 100;
			n = -1;
		}
		names = $makeSlice(sliceType, 0, size);
		while (true) {
			if (!(!((n === 0)))) { break; }
			if (d.bufp >= d.nbuf) {
				d.bufp = 0;
				errno = $ifaceNil;
				_tuple$1 = syscall.ReadDirent(f.file.fd, d.buf);
				_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
				d.nbuf = _tuple[0];
				errno = _tuple[1];
				if (!($interfaceIsEqual(errno, $ifaceNil))) {
					_tmp = names;
					_tmp$1 = NewSyscallError("readdirent", errno);
					names = _tmp;
					err = _tmp$1;
					return [names, err];
				}
				if (d.nbuf <= 0) {
					break;
				}
			}
			_tmp$2 = 0;
			_tmp$3 = 0;
			nb = _tmp$2;
			nc = _tmp$3;
			_tuple$2 = syscall.ParseDirent($subslice(d.buf, d.bufp, d.nbuf), n, names);
			nb = _tuple$2[0];
			nc = _tuple$2[1];
			names = _tuple$2[2];
			d.bufp = d.bufp + (nb) >> 0;
			n = n - (nc) >> 0;
		}
		if (n >= 0 && (names.$length === 0)) {
			_tmp$4 = names;
			_tmp$5 = io.EOF;
			names = _tmp$4;
			err = _tmp$5;
			return [names, err];
		}
		_tmp$6 = names;
		_tmp$7 = $ifaceNil;
		names = _tmp$6;
		err = _tmp$7;
		return [names, err];
	};
	File.prototype.readdirnames = function(n) { return this.$val.readdirnames(n); };
	PathError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Op + " " + e.Path + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PathError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	SyscallError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Syscall + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SyscallError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyscallError.prototype.Error = function() { return this.$val.Error(); };
	NewSyscallError = function(syscall$1, err) {
		var $ptr, err, syscall$1;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return $ifaceNil;
		}
		return new SyscallError.ptr(syscall$1, err);
	};
	$pkg.NewSyscallError = NewSyscallError;
	IsNotExist = function(err) {
		var $ptr, err;
		return isNotExist(err);
	};
	$pkg.IsNotExist = IsNotExist;
	underlyingError = function(err) {
		var $ptr, _ref, err, err$1, err$2, err$3;
		_ref = err;
		if ($assertType(_ref, ptrType$2, true)[1]) {
			err$1 = _ref.$val;
			return err$1.Err;
		} else if ($assertType(_ref, ptrType$3, true)[1]) {
			err$2 = _ref.$val;
			return err$2.Err;
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			err$3 = _ref.$val;
			return err$3.Err;
		}
		return err;
	};
	isNotExist = function(err) {
		var $ptr, err;
		err = underlyingError(err);
		return $interfaceIsEqual(err, new syscall.Errno(2)) || $interfaceIsEqual(err, $pkg.ErrNotExist);
	};
	File.ptr.prototype.Name = function() {
		var $ptr, f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	LinkError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Op + " " + e.Old + " " + e.New + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LinkError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	LinkError.prototype.Error = function() { return this.$val.Error(); };
	File.ptr.prototype.Read = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, err$1, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("read");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		_tuple = f.read(b);
		n = _tuple[0];
		e = _tuple[1];
		if ((n === 0) && b.$length > 0 && $interfaceIsEqual(e, $ifaceNil)) {
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("read", f.file.name, e);
		}
		_tmp$4 = n;
		_tmp$5 = err;
		n = _tmp$4;
		err = _tmp$5;
		return [n, err];
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.ptr.prototype.ReadAt = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, m, n, off, x;
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("read");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		while (true) {
			if (!(b.$length > 0)) { break; }
			_tuple = f.pread(b, off);
			m = _tuple[0];
			e = _tuple[1];
			if ((m === 0) && $interfaceIsEqual(e, $ifaceNil)) {
				_tmp$2 = n;
				_tmp$3 = io.EOF;
				n = _tmp$2;
				err = _tmp$3;
				return [n, err];
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("read", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		}
		return [n, err];
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.ptr.prototype.Write = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		_tuple = f.write(b);
		n = _tuple[0];
		e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.$length))) {
			err = io.ErrShortWrite;
		}
		epipecheck(f, e);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("write", f.file.name, e);
		}
		_tmp$2 = n;
		_tmp$3 = err;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.ptr.prototype.WriteAt = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tuple, b, e, err, err$1, f, m, n, off, x;
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		while (true) {
			if (!(b.$length > 0)) { break; }
			_tuple = f.pwrite(b, off);
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("write", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		}
		return [n, err];
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.ptr.prototype.Seek = function(offset, whence) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err, err$1, f, offset, r, ret, whence;
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("seek");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = err$1;
			ret = _tmp;
			err = _tmp$1;
			return [ret, err];
		}
		_tuple = f.seek(offset, whence);
		r = _tuple[0];
		e = _tuple[1];
		if ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ptrType$1.nil) && !((r.$high === 0 && r.$low === 0))) {
			e = new syscall.Errno(21);
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = new PathError.ptr("seek", f.file.name, e);
			ret = _tmp$2;
			err = _tmp$3;
			return [ret, err];
		}
		_tmp$4 = r;
		_tmp$5 = $ifaceNil;
		ret = _tmp$4;
		err = _tmp$5;
		return [ret, err];
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	File.ptr.prototype.WriteString = function(s) {
		var $ptr, _tuple, err, f, n, s;
		n = 0;
		err = $ifaceNil;
		f = this;
		_tuple = f.Write(new sliceType$2($stringToBytes(s)));
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	File.ptr.prototype.Chdir = function() {
		var $ptr, e, err, f;
		f = this;
		err = f.checkValid("chdir");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		e = syscall.Fchdir(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chdir", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	fixCount = function(n, err) {
		var $ptr, err, n;
		if (n < 0) {
			n = 0;
		}
		return [n, err];
	};
	File.ptr.prototype.checkValid = function(op) {
		var $ptr, f, op;
		f = this;
		if (f === ptrType.nil) {
			return $pkg.ErrInvalid;
		}
		if (f.file.fd === -1) {
			return new PathError.ptr(op, f.file.name, $pkg.ErrClosed);
		}
		return $ifaceNil;
	};
	File.prototype.checkValid = function(op) { return this.$val.checkValid(op); };
	sigpipe = function() {
		$throwRuntimeError("native function not implemented: os.sigpipe");
	};
	syscallMode = function(i) {
		var $ptr, i, o;
		o = 0;
		o = (o | ((new FileMode(i).Perm() >>> 0))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | (2048)) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | (1024)) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | (512)) >>> 0;
		}
		return o;
	};
	File.ptr.prototype.Chmod = function(mode) {
		var $ptr, e, err, f, mode;
		f = this;
		err = f.checkValid("chmod");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		e = syscall.Fchmod(f.file.fd, syscallMode(mode));
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chmod", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	File.ptr.prototype.Chown = function(uid, gid) {
		var $ptr, e, err, f, gid, uid;
		f = this;
		err = f.checkValid("chown");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		e = syscall.Fchown(f.file.fd, uid, gid);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chown", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.ptr.prototype.Truncate = function(size) {
		var $ptr, e, err, f, size;
		f = this;
		err = f.checkValid("truncate");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		e = syscall.Ftruncate(f.file.fd, size);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("truncate", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.ptr.prototype.Sync = function() {
		var $ptr, e, err, f;
		f = this;
		err = f.checkValid("sync");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		e = syscall.Fsync(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("sync", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.ptr.prototype.Fd = function() {
		var $ptr, f;
		f = this;
		if (f === ptrType.nil) {
			return 4294967295;
		}
		return (f.file.fd >>> 0);
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	NewFile = function(fd, name) {
		var $ptr, f, fd, fdi, name;
		fdi = (fd >> 0);
		if (fdi < 0) {
			return ptrType.nil;
		}
		f = new File.ptr(new file.ptr(fdi, name, ptrType$1.nil));
		runtime.SetFinalizer(f.file, new funcType$1($methodExpr(ptrType$12, "close")));
		return f;
	};
	$pkg.NewFile = NewFile;
	epipecheck = function(file$1, e) {
		var $ptr, e, file$1;
		if ($interfaceIsEqual(e, new syscall.Errno(32)) && ((file$1.file.fd === 1) || (file$1.file.fd === 2))) {
			sigpipe();
		}
	};
	File.ptr.prototype.Close = function() {
		var $ptr, f;
		f = this;
		if (f === ptrType.nil) {
			return $pkg.ErrInvalid;
		}
		return f.file.close();
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	file.ptr.prototype.close = function() {
		var $ptr, e, err, file$1;
		file$1 = this;
		if (file$1 === ptrType$12.nil || (file$1.fd === -1)) {
			return new syscall.Errno(22);
		}
		err = $ifaceNil;
		e = syscall.Close(file$1.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("close", file$1.name, e);
		}
		file$1.fd = -1;
		runtime.SetFinalizer(file$1, $ifaceNil);
		return err;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.read = function(b) {
		var $ptr, _tuple, _tuple$1, b, err, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (true && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Read(f.file.fd, b);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.ptr.prototype.pread = function(b, off) {
		var $ptr, _tuple, _tuple$1, b, err, f, n, off;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (true && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Pread(f.file.fd, b, off);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.ptr.prototype.write = function(b) {
		var $ptr, _tmp, _tmp$1, _tuple, _tuple$1, b, bcap, err, err$1, f, m, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		while (true) {
			bcap = b;
			if (true && bcap.$length > 1073741824) {
				bcap = $subslice(bcap, 0, 1073741824);
			}
			_tuple$1 = syscall.Write(f.file.fd, bcap);
			_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
			m = _tuple[0];
			err$1 = _tuple[1];
			n = n + (m) >> 0;
			if (0 < m && m < bcap.$length || $interfaceIsEqual(err$1, new syscall.Errno(4))) {
				b = $subslice(b, m);
				continue;
			}
			if (true && !((bcap.$length === b.$length)) && $interfaceIsEqual(err$1, $ifaceNil)) {
				b = $subslice(b, m);
				continue;
			}
			_tmp = n;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.ptr.prototype.pwrite = function(b, off) {
		var $ptr, _tuple, _tuple$1, b, err, f, n, off;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (true && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Pwrite(f.file.fd, b, off);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	File.ptr.prototype.seek = function(offset, whence) {
		var $ptr, _tuple, err, f, offset, ret, whence;
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		_tuple = syscall.Seek(f.file.fd, offset, whence);
		ret = _tuple[0];
		err = _tuple[1];
		return [ret, err];
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	init$1 = function() {
		var $ptr;
		useSyscallwd = useSyscallwdDarwin;
	};
	useSyscallwdDarwin = function(err) {
		var $ptr, err;
		return !($interfaceIsEqual(err, new syscall.Errno(45)));
	};
	basename = function(name) {
		var $ptr, i, name;
		i = name.length - 1 >> 0;
		while (true) {
			if (!(i > 0 && (name.charCodeAt(i) === 47))) { break; }
			name = $substring(name, 0, i);
			i = i - (1) >> 0;
		}
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (name.charCodeAt(i) === 47) {
				name = $substring(name, (i + 1 >> 0));
				break;
			}
			i = i - (1) >> 0;
		}
		return name;
	};
	init$2 = function() {
		var $ptr;
		if (false) {
			return;
		}
		$pkg.Args = runtime_args();
	};
	Exit = function(code) {
		var $ptr, code;
		if (code === 0) {
			runtime_beforeExit();
		}
		syscall.Exit(code);
	};
	$pkg.Exit = Exit;
	fillFileStatFromSys = function(fs, name) {
		var $ptr, _1, fs, name;
		fs.name = basename(name);
		fs.size = fs.sys.Size;
		time.Time.copy(fs.modTime, timespecToTime($clone(fs.sys.Mtimespec, syscall.Timespec)));
		fs.mode = (((fs.sys.Mode & 511) >>> 0) >>> 0);
		_1 = (fs.sys.Mode & 61440) >>> 0;
		if ((_1 === (24576)) || (_1 === (57344))) {
			fs.mode = (fs.mode | (67108864)) >>> 0;
		} else if (_1 === (8192)) {
			fs.mode = (fs.mode | (69206016)) >>> 0;
		} else if (_1 === (16384)) {
			fs.mode = (fs.mode | (2147483648)) >>> 0;
		} else if (_1 === (4096)) {
			fs.mode = (fs.mode | (33554432)) >>> 0;
		} else if (_1 === (40960)) {
			fs.mode = (fs.mode | (134217728)) >>> 0;
		} else if (_1 === (32768)) {
		} else if (_1 === (49152)) {
			fs.mode = (fs.mode | (16777216)) >>> 0;
		}
		if (!((((fs.sys.Mode & 1024) >>> 0) === 0))) {
			fs.mode = (fs.mode | (4194304)) >>> 0;
		}
		if (!((((fs.sys.Mode & 2048) >>> 0) === 0))) {
			fs.mode = (fs.mode | (8388608)) >>> 0;
		}
		if (!((((fs.sys.Mode & 512) >>> 0) === 0))) {
			fs.mode = (fs.mode | (1048576)) >>> 0;
		}
	};
	timespecToTime = function(ts) {
		var $ptr, ts;
		return time.Unix(ts.Sec, ts.Nsec);
	};
	File.ptr.prototype.Stat = function() {
		var $ptr, err, f, fs;
		f = this;
		if (f === ptrType.nil) {
			return [$ifaceNil, $pkg.ErrInvalid];
		}
		fs = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Int64(0, 0), 0, ptrType$14.nil), new syscall.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, arrayType.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, arrayType$3.zero()));
		err = syscall.Fstat(f.file.fd, fs.sys);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("stat", f.file.name, err)];
		}
		fillFileStatFromSys(fs, f.file.name);
		return [fs, $ifaceNil];
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	Lstat = function(name) {
		var $ptr, err, fs, name;
		fs = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Int64(0, 0), 0, ptrType$14.nil), new syscall.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, arrayType.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, arrayType$3.zero()));
		err = syscall.Lstat(name, fs.sys);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("lstat", name, err)];
		}
		fillFileStatFromSys(fs, name);
		return [fs, $ifaceNil];
	};
	$pkg.Lstat = Lstat;
	init$3 = function() {
		var $ptr, _i, _ref, _rune, _tuple, err, i, osver;
		_tuple = syscall.Sysctl("kern.osrelease");
		osver = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return;
		}
		i = 0;
		_ref = osver;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			if (!((osver.charCodeAt(i) === 46))) {
				_i += _rune[1];
				continue;
			}
			_i += _rune[1];
		}
		if (i > 2 || (i === 2) && osver.charCodeAt(0) >= 49 && osver.charCodeAt(1) >= 49) {
			supportsCloseOnExec = true;
		}
	};
	FileMode.prototype.String = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, _rune, _rune$1, buf, c, c$1, i, i$1, m, w, y, y$1;
		m = this.$val;
		buf = arrayType$5.zero();
		w = 0;
		_ref = "dalTLDpSugct";
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = ((31 - i >> 0) >>> 0), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = (c << 24 >>> 24));
				w = w + (1) >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			w = w + (1) >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.length)) { break; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = ((8 - i$1 >> 0) >>> 0), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = (c$1 << 24 >>> 24));
			} else {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			}
			w = w + (1) >> 0;
			_i$1 += _rune$1[1];
		}
		return $bytesToString($subslice(new sliceType$2(buf), 0, w));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var $ptr, m;
		m = this.$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var $ptr, m;
		m = this.$val;
		return ((m & 2399141888) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var $ptr, m;
		m = this.$val;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	fileStat.ptr.prototype.Name = function() {
		var $ptr, fs;
		fs = this;
		return fs.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.ptr.prototype.IsDir = function() {
		var $ptr, fs;
		fs = this;
		return new FileMode(fs.Mode()).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	fileStat.ptr.prototype.Size = function() {
		var $ptr, fs;
		fs = this;
		return fs.size;
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.ptr.prototype.Mode = function() {
		var $ptr, fs;
		fs = this;
		return fs.mode;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.ptr.prototype.ModTime = function() {
		var $ptr, fs;
		fs = this;
		return fs.modTime;
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.ptr.prototype.Sys = function() {
		var $ptr, fs;
		fs = this;
		return fs.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	ptrType$2.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$12.methods = [{prop: "close", name: "close", pkg: "os", typ: $funcType([], [$error], false)}];
	ptrType.methods = [{prop: "Readdir", name: "Readdir", pkg: "", typ: $funcType([$Int], [sliceType$1, $error], false)}, {prop: "Readdirnames", name: "Readdirnames", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "readdir", name: "readdir", pkg: "os", typ: $funcType([$Int], [sliceType$1, $error], false)}, {prop: "readdirnames", name: "readdirnames", pkg: "os", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "WriteAt", name: "WriteAt", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "checkValid", name: "checkValid", pkg: "os", typ: $funcType([$String], [$error], false)}, {prop: "Chmod", name: "Chmod", pkg: "", typ: $funcType([FileMode], [$error], false)}, {prop: "Chown", name: "Chown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Fd", name: "Fd", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "read", name: "read", pkg: "os", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "pread", name: "pread", pkg: "os", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "write", name: "write", pkg: "os", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "pwrite", name: "pwrite", pkg: "os", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "seek", name: "seek", pkg: "os", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([], [FileInfo, $error], false)}];
	FileMode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsRegular", name: "IsRegular", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([], [FileMode], false)}];
	ptrType$15.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	PathError.init("", [{prop: "Op", name: "Op", exported: true, typ: $String, tag: ""}, {prop: "Path", name: "Path", exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", exported: true, typ: $error, tag: ""}]);
	SyscallError.init("", [{prop: "Syscall", name: "Syscall", exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", exported: true, typ: $error, tag: ""}]);
	LinkError.init("", [{prop: "Op", name: "Op", exported: true, typ: $String, tag: ""}, {prop: "Old", name: "Old", exported: true, typ: $String, tag: ""}, {prop: "New", name: "New", exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", exported: true, typ: $error, tag: ""}]);
	file.init("os", [{prop: "fd", name: "fd", exported: false, typ: $Int, tag: ""}, {prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "dirinfo", name: "dirinfo", exported: false, typ: ptrType$1, tag: ""}]);
	dirInfo.init("os", [{prop: "buf", name: "buf", exported: false, typ: sliceType$2, tag: ""}, {prop: "nbuf", name: "nbuf", exported: false, typ: $Int, tag: ""}, {prop: "bufp", name: "bufp", exported: false, typ: $Int, tag: ""}]);
	File.init("os", [{prop: "file", name: "", exported: false, typ: ptrType$12, tag: ""}]);
	FileInfo.init([{prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}]);
	fileStat.init("os", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "size", name: "size", exported: false, typ: $Int64, tag: ""}, {prop: "mode", name: "mode", exported: false, typ: FileMode, tag: ""}, {prop: "modTime", name: "modTime", exported: false, typ: time.Time, tag: ""}, {prop: "sys", name: "sys", exported: false, typ: syscall.Stat_t, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Args = sliceType.nil;
		supportsCloseOnExec = false;
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		$pkg.ErrClosed = errors.New("file already closed");
		errFinished = errors.New("os: process already finished");
		useSyscallwd = (function(param) {
			var $ptr, param;
			return true;
		});
		lstat = Lstat;
		$pkg.Stdin = NewFile((syscall.Stdin >>> 0), "/dev/stdin");
		$pkg.Stdout = NewFile((syscall.Stdout >>> 0), "/dev/stdout");
		$pkg.Stderr = NewFile((syscall.Stderr >>> 0), "/dev/stderr");
		init();
		init$1();
		init$2();
		init$3();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
	(function() {
var last = Date.now();
var clog = console.log;
var cerr = console.error;

var log = "";

function documentlog(err, args) {
    var now = Date.now();
    var body = document.getElementsByTagName("body")[0]
    var row = '<pre style="margin: 5px 0 0 5em; border-left: 1px solid #CCC; padding-left: 5px;">';
    
    var delta = (now - last);
    if (delta > 0) {
        row += '<span style="position:absolute; left:5px; width: 4.5em; text-align: right; color: red;">+' + delta + 'ms</span>';
    }
    last = now;
    
    if (err) {
        row += '<span style="color:red;">'
    }
    for (var i = 0; i < args.length; i++) {
        if (i > 0) {
            row += " ";
        }
        if (typeof args[i] === "string") {
            row += args[i];
        } else if (args[i].$array) {
            row += JSON.stringify(args[i].$array);
        } else if (args[i].$val && args[i].Object) {
            row += JSON.stringify(args[i].Object);
        } else {
            row += args[i];
        }
    }
    if (err) {
        row += '</span>'
    }
    row += "&nbsp;</pre>";

    if (body != null) {
        if (log != null) {
            body.innerHTML += log;
            log = null;
        }
        body.innerHTML += row;
    } else {
        log += row;
    }
}

function dlog() {
    documentlog(false, arguments);
    clog.apply(null, arguments);
}

function derr() {
    documentlog(true, arguments);
    cerr.apply(null, arguments);
}

if (typeof window !== 'undefined') {
    window.console.log = dlog;
    window.console.error = derr;
}

	}).call($global);
$packages["bitbucket.org/mikehouston/webconsole"] = (function() {
	var $pkg = {}, $init, js, os, init, Enable;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	os = $packages["os"];
	init = function() {
		var $ptr, process;
		process = $global.process;
		if (!(process === undefined)) {
			return;
		}
	};
	Enable = function() {
		var $ptr;
	};
	$pkg.Enable = Enable;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, $init, js, arrayType, arrayType$1, arrayType$2, structType, arrayType$3, math, zero, posInf, negInf, nan, buf, pow10tab, Exp, Inf, Log, NaN, init, Float32bits, Float32frombits, Float64bits, Float64frombits, init$1;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	arrayType = $arrayType($Uint32, 2);
	arrayType$1 = $arrayType($Float32, 2);
	arrayType$2 = $arrayType($Float64, 1);
	structType = $structType("math", [{prop: "uint32array", name: "uint32array", exported: false, typ: arrayType, tag: ""}, {prop: "float32array", name: "float32array", exported: false, typ: arrayType$1, tag: ""}, {prop: "float64array", name: "float64array", exported: false, typ: arrayType$2, tag: ""}]);
	arrayType$3 = $arrayType($Float64, 70);
	Exp = function(x) {
		var $ptr, x;
		return $parseFloat(math.exp(x));
	};
	$pkg.Exp = Exp;
	Inf = function(sign) {
		var $ptr, sign;
		if (sign >= 0) {
			return posInf;
		} else {
			return negInf;
		}
	};
	$pkg.Inf = Inf;
	Log = function(x) {
		var $ptr, x;
		if (!((x === x))) {
			return nan;
		}
		return $parseFloat(math.log(x));
	};
	$pkg.Log = Log;
	NaN = function() {
		var $ptr;
		return nan;
	};
	$pkg.NaN = NaN;
	init = function() {
		var $ptr, ab;
		ab = new ($global.ArrayBuffer)(8);
		buf.uint32array = new ($global.Uint32Array)(ab);
		buf.float32array = new ($global.Float32Array)(ab);
		buf.float64array = new ($global.Float64Array)(ab);
	};
	Float32bits = function(f) {
		var $ptr, f;
		buf.float32array[0] = f;
		return buf.uint32array[0];
	};
	$pkg.Float32bits = Float32bits;
	Float32frombits = function(b) {
		var $ptr, b;
		buf.uint32array[0] = b;
		return buf.float32array[0];
	};
	$pkg.Float32frombits = Float32frombits;
	Float64bits = function(f) {
		var $ptr, f, x, x$1;
		buf.float64array[0] = f;
		return (x = $shiftLeft64(new $Uint64(0, buf.uint32array[1]), 32), x$1 = new $Uint64(0, buf.uint32array[0]), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	$pkg.Float64bits = Float64bits;
	Float64frombits = function(b) {
		var $ptr, b;
		buf.uint32array[0] = (b.$low >>> 0);
		buf.uint32array[1] = ($shiftRightUint64(b, 32).$low >>> 0);
		return buf.float64array[0];
	};
	$pkg.Float64frombits = Float64frombits;
	init$1 = function() {
		var $ptr, _q, i, m, x;
		pow10tab[0] = 1;
		pow10tab[1] = 10;
		i = 2;
		while (true) {
			if (!(i < 70)) { break; }
			m = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= pow10tab.length) ? ($throwRuntimeError("index out of range"), undefined) : pow10tab[i] = ((m < 0 || m >= pow10tab.length) ? ($throwRuntimeError("index out of range"), undefined) : pow10tab[m]) * (x = i - m >> 0, ((x < 0 || x >= pow10tab.length) ? ($throwRuntimeError("index out of range"), undefined) : pow10tab[x])));
			i = i + (1) >> 0;
		}
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buf = new structType.ptr(arrayType.zero(), arrayType$1.zero(), arrayType$2.zero());
		pow10tab = arrayType$3.zero();
		math = $global.Math;
		zero = 0;
		posInf = 1 / zero;
		negInf = -1 / zero;
		nan = 0 / zero;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, $init, acceptRange, first, acceptRanges, FullRune, DecodeRune, DecodeRuneInString, DecodeLastRuneInString, RuneLen, EncodeRune, RuneCount, RuneCountInString, RuneStart, ValidRune;
	acceptRange = $pkg.acceptRange = $newType(0, $kindStruct, "utf8.acceptRange", true, "unicode/utf8", false, function(lo_, hi_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lo = 0;
			this.hi = 0;
			return;
		}
		this.lo = lo_;
		this.hi = hi_;
	});
	FullRune = function(p) {
		var $ptr, accept, c, n, p, x, x$1, x$2;
		n = p.$length;
		if (n === 0) {
			return false;
		}
		x$1 = (x = (0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]), ((x < 0 || x >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[x]));
		if (n >= (((x$1 & 7) >>> 0) >> 0)) {
			return true;
		}
		accept = $clone((x$2 = x$1 >>> 4 << 24 >>> 24, ((x$2 < 0 || x$2 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$2])), acceptRange);
		if (n > 1) {
			c = (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]);
			if (c < accept.lo || accept.hi < c) {
				return true;
			} else if (n > 2 && ((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]) < 128 || 191 < (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]))) {
				return true;
			}
		}
		return false;
	};
	$pkg.FullRune = FullRune;
	DecodeRune = function(p) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, b1, b2, b3, mask, n, p, p0, r, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = p.$length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		p0 = (0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]);
		x = ((p0 < 0 || p0 >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[p0]);
		if (x >= 240) {
			mask = ((x >> 0) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = ((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]) >> 0) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
		if (n < (sz >> 0)) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		b1 = (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]);
		if (b1 < accept.lo || accept.hi < b1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = ((((p0 & 31) >>> 0) >> 0) << 6 >> 0) | (((b1 & 63) >>> 0) >> 0);
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		b2 = (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]);
		if (b2 < 128 || 191 < b2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = (((((p0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((b1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((b2 & 63) >>> 0) >> 0);
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		b3 = (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]);
		if (b3 < 128 || 191 < b3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = ((((((p0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((b1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((b2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((b3 & 63) >>> 0) >> 0);
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRune = DecodeRune;
	DecodeRuneInString = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, mask, n, r, s, s0, s1, s2, s3, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = s.length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		s0 = s.charCodeAt(0);
		x = ((s0 < 0 || s0 >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[s0]);
		if (x >= 240) {
			mask = ((x >> 0) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = (((s.charCodeAt(0) >> 0) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
		if (n < (sz >> 0)) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		s1 = s.charCodeAt(1);
		if (s1 < accept.lo || accept.hi < s1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = ((((s0 & 31) >>> 0) >> 0) << 6 >> 0) | (((s1 & 63) >>> 0) >> 0);
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		s2 = s.charCodeAt(2);
		if (s2 < 128 || 191 < s2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = (((((s0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((s1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((s2 & 63) >>> 0) >> 0);
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		s3 = s.charCodeAt(3);
		if (s3 < 128 || 191 < s3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = ((((((s0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((s1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((s2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((s3 & 63) >>> 0) >> 0);
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRuneInString = DecodeRuneInString;
	DecodeLastRuneInString = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, r, s, size, start;
		r = 0;
		size = 0;
		end = s.length;
		if (end === 0) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (s.charCodeAt(start) >> 0);
		if (r < 128) {
			_tmp$2 = r;
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(s.charCodeAt(start))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRuneInString($substring(s, start, end));
		r = _tuple[0];
		size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r;
		_tmp$7 = size;
		r = _tmp$6;
		size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRuneInString = DecodeLastRuneInString;
	RuneLen = function(r) {
		var $ptr, r;
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	$pkg.RuneLen = RuneLen;
	EncodeRune = function(p, r) {
		var $ptr, i, p, r;
		i = (r >>> 0);
		if (i <= 127) {
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = (r << 24 >>> 24));
			return 1;
		} else if (i <= 2047) {
			$unused((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((192 | ((r >> 6 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 2;
		} else if ((i > 1114111) || (55296 <= i && i <= 57343)) {
			r = 65533;
			$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 3;
		} else if (i <= 65535) {
			$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 3;
		} else {
			$unused((3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((240 | ((r >> 18 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | ((((r >> 12 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 4;
		}
	};
	$pkg.EncodeRune = EncodeRune;
	RuneCount = function(p) {
		var $ptr, accept, c, c$1, c$2, c$3, i, n, np, p, size, x, x$1, x$2, x$3, x$4;
		np = p.$length;
		n = 0;
		i = 0;
		while (true) {
			if (!(i < np)) { break; }
			n = n + (1) >> 0;
			c = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
			if (c < 128) {
				i = i + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				continue;
			}
			size = (((x & 7) >>> 0) >> 0);
			if ((i + size >> 0) > np) {
				i = i + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c$1 = (x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$2]));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$3]));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = (x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$4]));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
		}
		return n;
	};
	$pkg.RuneCount = RuneCount;
	RuneCountInString = function(s) {
		var $ptr, accept, c, c$1, c$2, c$3, i, n, ns, s, size, x, x$1;
		n = 0;
		ns = s.length;
		i = 0;
		while (true) {
			if (!(i < ns)) { break; }
			c = s.charCodeAt(i);
			if (c < 128) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			size = (((x & 7) >>> 0) >> 0);
			if ((i + size >> 0) > ns) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c$1 = s.charCodeAt((i + 1 >> 0));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = s.charCodeAt((i + 2 >> 0));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = s.charCodeAt((i + 3 >> 0));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
			n = n + (1) >> 0;
		}
		n = n;
		return n;
	};
	$pkg.RuneCountInString = RuneCountInString;
	RuneStart = function(b) {
		var $ptr, b;
		return !((((b & 192) >>> 0) === 128));
	};
	$pkg.RuneStart = RuneStart;
	ValidRune = function(r) {
		var $ptr, r;
		if (0 <= r && r < 55296) {
			return true;
		} else if (57343 < r && r <= 1114111) {
			return true;
		}
		return false;
	};
	$pkg.ValidRune = ValidRune;
	acceptRange.init("unicode/utf8", [{prop: "lo", name: "lo", exported: false, typ: $Uint8, tag: ""}, {prop: "hi", name: "hi", exported: false, typ: $Uint8, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = $toNativeArray($kindUint
		acceptRanges = $toNativeArray($kindStruct, [new acceptRange.ptr(128, 191), new acceptRange.ptr(160, 191), new acceptRange.ptr(128, 159), new acceptRange.ptr(144, 191), new acceptRange.ptr(128, 143)]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, $init, errors, math, utf8, NumError, decimal, leftCheat, extFloat, floatInfo, decimalSlice, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, arrayType, ptrType, sliceType$6, arrayType$1, arrayType$2, ptrType$1, arrayType$3, arrayType$4, ptrType$2, ptrType$3, ptrType$4, optimize, powtab, float64pow10, float32pow10, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float32info$24ptr, float64info, float64info$24ptr, isPrint16, isNotPrint16, isPrint32, isNotPrint32, isGraphic, shifts, equalIgnoreCase, special, readFloat, atof64exact, atof32exact, atof32, atof64, ParseFloat, syntaxError, rangeError, ParseUint, ParseInt, Atoi, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, min, max, FormatUint, FormatInt, Itoa, AppendInt, AppendUint, formatBits, quoteWith, appendQuotedWith, appendQuotedRuneWith, appendEscapedRune, Quote, AppendQuote, AppendQuoteToASCII, AppendQuoteRune, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint, isInGraphicList;
	errors = $packages["errors"];
	math = $packages["math"];
	utf8 = $packages["unicode/utf8"];
	NumError = $pkg.NumError = $newType(0, $kindStruct, "strconv.NumError", true, "strconv", true, function(Func_, Num_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Func = "";
			this.Num = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Func = Func_;
		this.Num = Num_;
		this.Err = Err_;
	});
	decimal = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", true, "strconv", false, function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = arrayType.zero();
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			this.trunc = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
		this.trunc = trunc_;
	});
	leftCheat = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", true, "strconv", false, function(delta_, cutoff_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.delta = 0;
			this.cutoff = "";
			return;
		}
		this.delta = delta_;
		this.cutoff = cutoff_;
	});
	extFloat = $pkg.extFloat = $newType(0, $kindStruct, "strconv.extFloat", true, "strconv", false, function(mant_, exp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mant = new $Uint64(0, 0);
			this.exp = 0;
			this.neg = false;
			return;
		}
		this.mant = mant_;
		this.exp = exp_;
		this.neg = neg_;
	});
	floatInfo = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", true, "strconv", false, function(mantbits_, expbits_, bias_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mantbits = 0;
			this.expbits = 0;
			this.bias = 0;
			return;
		}
		this.mantbits = mantbits_;
		this.expbits = expbits_;
		this.bias = bias_;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", true, "strconv", false, function(d_, nd_, dp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = sliceType$6.nil;
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
	});
	sliceType = $sliceType($Int);
	sliceType$1 = $sliceType($Float64);
	sliceType$2 = $sliceType($Float32);
	sliceType$3 = $sliceType(leftCheat);
	sliceType$4 = $sliceType($Uint16);
	sliceType$5 = $sliceType($Uint32);
	arrayType = $arrayType($Uint8, 800);
	ptrType = $ptrType(NumError);
	sliceType$6 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 24);
	arrayType$2 = $arrayType($Uint8, 32);
	ptrType$1 = $ptrType(floatInfo);
	arrayType$3 = $arrayType($Uint8, 65);
	arrayType$4 = $arrayType($Uint8, 4);
	ptrType$2 = $ptrType(decimal);
	ptrType$3 = $ptrType(decimalSlice);
	ptrType$4 = $ptrType(extFloat);
	equalIgnoreCase = function(s1, s2) {
		var $ptr, c1, c2, i, s1, s2;
		if (!((s1.length === s2.length))) {
			return false;
		}
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			if (65 <= c1 && c1 <= 90) {
				c1 = c1 + (32) << 24 >>> 24;
			}
			c2 = s2.charCodeAt(i);
			if (65 <= c2 && c2 <= 90) {
				c2 = c2 + (32) << 24 >>> 24;
			}
			if (!((c1 === c2))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	special = function(s) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, f, ok, s;
		f = 0;
		ok = false;
		if (s.length === 0) {
			return [f, ok];
		}
		_1 = s.charCodeAt(0);
		if (_1 === (43)) {
			if (equalIgnoreCase(s, "+inf") || equalIgnoreCase(s, "+infinity")) {
				_tmp = math.Inf(1);
				_tmp$1 = true;
				f = _tmp;
				ok = _tmp$1;
				return [f, ok];
			}
		} else if (_1 === (45)) {
			if (equalIgnoreCase(s, "-inf") || equalIgnoreCase(s, "-infinity")) {
				_tmp$2 = math.Inf(-1);
				_tmp$3 = true;
				f = _tmp$2;
				ok = _tmp$3;
				return [f, ok];
			}
		} else if ((_1 === (110)) || (_1 === (78))) {
			if (equalIgnoreCase(s, "nan")) {
				_tmp$4 = math.NaN();
				_tmp$5 = true;
				f = _tmp$4;
				ok = _tmp$5;
				return [f, ok];
			}
		} else if ((_1 === (105)) || (_1 === (73))) {
			if (equalIgnoreCase(s, "inf") || equalIgnoreCase(s, "infinity")) {
				_tmp$6 = math.Inf(1);
				_tmp$7 = true;
				f = _tmp$6;
				ok = _tmp$7;
				return [f, ok];
			}
		} else {
			return [f, ok];
		}
		return [f, ok];
	};
	decimal.ptr.prototype.set = function(s) {
		var $ptr, b, e, esign, i, ok, s, sawdigits, sawdot, x, x$1;
		ok = false;
		b = this;
		i = 0;
		b.neg = false;
		b.trunc = false;
		if (i >= s.length) {
			return ok;
		}
		if ((s.charCodeAt(i) === 43)) {
			i = i + (1) >> 0;
		} else if ((s.charCodeAt(i) === 45)) {
			b.neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		while (true) {
			if (!(i < s.length)) { break; }
			if ((s.charCodeAt(i) === 46)) {
				if (sawdot) {
					return ok;
				}
				sawdot = true;
				b.dp = b.nd;
				i = i + (1) >> 0;
				continue;
			} else if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				sawdigits = true;
				if ((s.charCodeAt(i) === 48) && (b.nd === 0)) {
					b.dp = b.dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				if (b.nd < 800) {
					(x = b.d, x$1 = b.nd, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1] = s.charCodeAt(i)));
					b.nd = b.nd + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					b.trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return ok;
		}
		if (!sawdot) {
			b.dp = b.nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return ok;
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return ok;
			}
			e = 0;
			while (true) {
				if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
				if (e < 10000) {
					e = (($imul(e, 10)) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			b.dp = b.dp + (($imul(e, esign))) >> 0;
		}
		if (!((i === s.length))) {
			return ok;
		}
		ok = true;
		return ok;
	};
	decimal.prototype.set = function(s) { return this.$val.set(s); };
	readFloat = function(s) {
		var $ptr, _1, c, dp, e, esign, exp, i, mantissa, nd, ndMant, neg, ok, s, sawdigits, sawdot, trunc, x;
		mantissa = new $Uint64(0, 0);
		exp = 0;
		neg = false;
		trunc = false;
		ok = false;
		i = 0;
		if (i >= s.length) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if ((s.charCodeAt(i) === 43)) {
			i = i + (1) >> 0;
		} else if ((s.charCodeAt(i) === 45)) {
			neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		nd = 0;
		ndMant = 0;
		dp = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			_1 = true;
			if (_1 === ((c === 46))) {
				if (sawdot) {
					return [mantissa, exp, neg, trunc, ok];
				}
				sawdot = true;
				dp = nd;
				i = i + (1) >> 0;
				continue;
			} else if (_1 === (48 <= c && c <= 57)) {
				sawdigits = true;
				if ((c === 48) && (nd === 0)) {
					dp = dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				nd = nd + (1) >> 0;
				if (ndMant < 19) {
					mantissa = $mul64(mantissa, (new $Uint64(0, 10)));
					mantissa = (x = new $Uint64(0, (c - 48 << 24 >>> 24)), new $Uint64(mantissa.$high + x.$high, mantissa.$low + x.$low));
					ndMant = ndMant + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (!sawdot) {
			dp = nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return [mantissa, exp, neg, trunc, ok];
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return [mantissa, exp, neg, trunc, ok];
			}
			e = 0;
			while (true) {
				if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
				if (e < 10000) {
					e = (($imul(e, 10)) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			dp = dp + (($imul(e, esign))) >> 0;
		}
		if (!((i === s.length))) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (!((mantissa.$high === 0 && mantissa.$low === 0))) {
			exp = dp - ndMant >> 0;
		}
		ok = true;
		return [mantissa, exp, neg, trunc, ok];
	};
	decimal.ptr.prototype.floatBits = function(flt) {
		var $ptr, _tmp, _tmp$1, b, bits, d, exp, flt, mant, n, n$1, n$2, overflow, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, y$1, y$2, y$3, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		b = new $Uint64(0, 0);
		overflow = false;
		d = this;
		exp = 0;
		mant = new $Uint64(0, 0);
		/* */ if (d.nd === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.nd === 0) { */ case 1:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 2:
		/* */ if (d.dp > 310) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (d.dp > 310) { */ case 4:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 5:
		/* */ if (d.dp < -330) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (d.dp < -330) { */ case 7:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 8:
		exp = 0;
		while (true) {
			if (!(d.dp > 0)) { break; }
			n = 0;
			if (d.dp >= powtab.$length) {
				n = 27;
			} else {
				n = (x = d.dp, ((x < 0 || x >= powtab.$length) ? ($throwRuntimeError("index out of range"), undefined) : powtab.$array[powtab.$offset + x]));
			}
			d.Shift(-n);
			exp = exp + (n) >> 0;
		}
		while (true) {
			if (!(d.dp < 0 || (d.dp === 0) && d.d[0] < 53)) { break; }
			n$1 = 0;
			if (-d.dp >= powtab.$length) {
				n$1 = 27;
			} else {
				n$1 = (x$1 = -d.dp, ((x$1 < 0 || x$1 >= powtab.$length) ? ($throwRuntimeError("index out of range"), undefined) : powtab.$array[powtab.$offset + x$1]));
			}
			d.Shift(n$1);
			exp = exp - (n$1) >> 0;
		}
		exp = exp - (1) >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n$2 = (flt.bias + 1 >> 0) - exp >> 0;
			d.Shift(-n$2);
			exp = exp + (n$2) >> 0;
		}
		/* */ if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { */ case 9:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 10:
		d.Shift(((1 + flt.mantbits >>> 0) >> 0));
		mant = d.RoundedInteger();
		/* */ if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { */ case 11:
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
			/* */ if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { */ case 13:
				/* goto overflow */ $s = 6; continue;
			/* } */ case 14:
		/* } */ case 12:
		if ((x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$4.$high, (mant.$low & x$4.$low) >>> 0)), (x$3.$high === 0 && x$3.$low === 0))) {
			exp = flt.bias;
		}
		/* goto out */ $s = 3; continue;
		/* overflow: */ case 6:
		mant = new $Uint64(0, 0);
		exp = (((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
		overflow = true;
		/* out: */ case 3:
		bits = (x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$6.$high - 0, x$6.$low - 1)), new $Uint64(mant.$high & x$5.$high, (mant.$low & x$5.$low) >>> 0));
		bits = (x$7 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$3 = flt.expbits, y$3 < 32 ? (1 << y$3) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$7.$high, (bits.$low | x$7.$low) >>> 0));
		if (d.neg) {
			bits = (x$8 = $shiftLeft64($shiftLeft64(new $Uint64(0, 1), flt.mantbits), flt.expbits), new $Uint64(bits.$high | x$8.$high, (bits.$low | x$8.$low) >>> 0));
		}
		_tmp = bits;
		_tmp$1 = overflow;
		b = _tmp;
		overflow = _tmp$1;
		$s = -1; return [b, overflow];
		/* */ } return; }
	};
	decimal.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	atof64exact = function(mantissa, exp, neg) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float64info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if ((exp === 0)) {
			_tmp = f;
			_tmp$1 = true;
			f = _tmp;
			ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 37) {
			if (exp > 22) {
				f = f * ((x$1 = exp - 22 >> 0, ((x$1 < 0 || x$1 >= float64pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float64pow10.$array[float64pow10.$offset + x$1])));
				exp = 22;
			}
			if (f > 1e+15 || f < -1e+15) {
				return [f, ok];
			}
			_tmp$2 = f * ((exp < 0 || exp >= float64pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float64pow10.$array[float64pow10.$offset + exp]);
			_tmp$3 = true;
			f = _tmp$2;
			ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -22) {
			_tmp$4 = f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float64pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float64pow10.$array[float64pow10.$offset + x$2]));
			_tmp$5 = true;
			f = _tmp$4;
			ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32exact = function(mantissa, exp, neg) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float32info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if ((exp === 0)) {
			_tmp = f;
			_tmp$1 = true;
			f = _tmp;
			ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 17) {
			if (exp > 10) {
				f = $fround(f * ((x$1 = exp - 10 >> 0, ((x$1 < 0 || x$1 >= float32pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float32pow10.$array[float32pow10.$offset + x$1]))));
				exp = 10;
			}
			if (f > 1e+07 || f < -1e+07) {
				return [f, ok];
			}
			_tmp$2 = $fround(f * ((exp < 0 || exp >= float32pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float32pow10.$array[float32pow10.$offset + exp]));
			_tmp$3 = true;
			f = _tmp$2;
			ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -10) {
			_tmp$4 = $fround(f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float32pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float32pow10.$array[float32pow10.$offset + x$2])));
			_tmp$5 = true;
			f = _tmp$4;
			ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32 = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err, exp, ext, f, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;
		f = 0;
		err = $ifaceNil;
		_tuple = special(s);
		val = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			_tmp = $fround(val);
			_tmp$1 = $ifaceNil;
			f = _tmp;
			err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s);
			mantissa = _tuple$1[0];
			exp = _tuple$1[1];
			neg = _tuple$1[2];
			trunc = _tuple$1[3];
			ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof32exact(mantissa, exp, neg);
					f$1 = _tuple$2[0];
					ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1;
						_tmp$3 = $ifaceNil;
						f = _tmp$2;
						err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.ptr(new $Uint64(0, 0), 0, false);
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float32info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float32info);
					b = _tuple$3[0];
					ovf = _tuple$3[1];
					f = math.Float32frombits((b.$low >>> 0));
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f;
					_tmp$5 = err;
					f = _tmp$4;
					err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		if (!d.set(s)) {
			_tmp$6 = 0;
			_tmp$7 = syntaxError("ParseFloat", s);
			f = _tmp$6;
			err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float32info);
		b$1 = _tuple$4[0];
		ovf$1 = _tuple$4[1];
		f = math.Float32frombits((b$1.$low >>> 0));
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f;
		_tmp$9 = err;
		f = _tmp$8;
		err = _tmp$9;
		return [f, err];
	};
	atof64 = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err, exp, ext, f, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;
		f = 0;
		err = $ifaceNil;
		_tuple = special(s);
		val = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			_tmp = val;
			_tmp$1 = $ifaceNil;
			f = _tmp;
			err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s);
			mantissa = _tuple$1[0];
			exp = _tuple$1[1];
			neg = _tuple$1[2];
			trunc = _tuple$1[3];
			ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof64exact(mantissa, exp, neg);
					f$1 = _tuple$2[0];
					ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1;
						_tmp$3 = $ifaceNil;
						f = _tmp$2;
						err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.ptr(new $Uint64(0, 0), 0, false);
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float64info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float64info);
					b = _tuple$3[0];
					ovf = _tuple$3[1];
					f = math.Float64frombits(b);
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f;
					_tmp$5 = err;
					f = _tmp$4;
					err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		if (!d.set(s)) {
			_tmp$6 = 0;
			_tmp$7 = syntaxError("ParseFloat", s);
			f = _tmp$6;
			err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float64info);
		b$1 = _tuple$4[0];
		ovf$1 = _tuple$4[1];
		f = math.Float64frombits(b$1);
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f;
		_tmp$9 = err;
		f = _tmp$8;
		err = _tmp$9;
		return [f, err];
	};
	ParseFloat = function(s, bitSize) {
		var $ptr, _tuple, bitSize, err, f, s;
		if (bitSize === 32) {
			_tuple = atof32(s);
			f = _tuple[0];
			err = _tuple[1];
			return [f, err];
		}
		return atof64(s);
	};
	$pkg.ParseFloat = ParseFloat;
	NumError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NumError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	NumError.prototype.Error = function() { return this.$val.Error(); };
	syntaxError = function(fn, str) {
		var $ptr, fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrSyntax);
	};
	rangeError = function(fn, str) {
		var $ptr, fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrRange);
	};
	ParseUint = function(s, base, bitSize) {
		var $ptr, _1, _tmp, _tmp$1, base, bitSize, cutoff, d, err, i, maxVal, n, n1, s, v, x, x$1, x$2, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		n = new $Uint64(0, 0);
		err = $ifaceNil;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		cutoff = _tmp;
		maxVal = _tmp$1;
		if (bitSize === 0) {
			bitSize = 32;
		}
		i = 0;
			/* */ if (s.length < 1) { $s = 2; continue; }
			/* */ if (2 <= base && base <= 36) { $s = 3; continue; }
			/* */ if ((base === 0)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (s.length < 1) { */ case 2:
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 7; continue;
				$s = 6; continue;
			/* } else if (2 <= base && base <= 36) { */ case 3:
				$s = 6; continue;
			/* } else if ((base === 0)) { */ case 4:
					/* */ if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { $s = 9; continue; }
					/* */ if ((s.charCodeAt(0) === 48)) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { */ case 9:
						/* */ if (s.length < 3) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (s.length < 3) { */ case 13:
							err = $pkg.ErrSyntax;
							/* goto Error */ $s = 7; continue;
						/* } */ case 14:
						base = 16;
						i = 2;
						$s = 12; continue;
					/* } else if ((s.charCodeAt(0) === 48)) { */ case 10:
						base = 8;
						i = 1;
						$s = 12; continue;
					/* } else { */ case 11:
						base = 10;
					/* } */ case 12:
				case 8:
				$s = 6; continue;
			/* } else { */ case 5:
				err = errors.New("invalid base " + Itoa(base));
				/* goto Error */ $s = 7; continue;
			/* } */ case 6:
		case 1:
		_1 = base;
		if (_1 === (10)) {
			cutoff = new $Uint64(429496729, 2576980378);
		} else if (_1 === (16)) {
			cutoff = new $Uint64(268435456, 0);
		} else {
			cutoff = (x = $div64(new $Uint64(4294967295, 4294967295), new $Uint64(0, base), false), new $Uint64(x.$high + 0, x.$low + 1));
		}
		maxVal = (x$1 = $shiftLeft64(new $Uint64(0, 1), (bitSize >>> 0)), new $Uint64(x$1.$high - 0, x$1.$low - 1));
		/* while (true) { */ case 15:
			/* if (!(i < s.length)) { break; } */ if(!(i < s.length)) { $s = 16; continue; }
			v = 0;
			d = s.charCodeAt(i);
				/* */ if (48 <= d && d <= 57) { $s = 18; continue; }
				/* */ if (97 <= d && d <= 122) { $s = 19; continue; }
				/* */ if (65 <= d && d <= 90) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (48 <= d && d <= 57) { */ case 18:
					v = d - 48 << 24 >>> 24;
					$s = 22; continue;
				/* } else if (97 <= d && d <= 122) { */ case 19:
					v = (d - 97 << 24 >>> 24) + 10 << 24 >>> 24;
					$s = 22; continue;
				/* } else if (65 <= d && d <= 90) { */ case 20:
					v = (d - 65 << 24 >>> 24) + 10 << 24 >>> 24;
					$s = 22; continue;
				/* } else { */ case 21:
					n = new $Uint64(0, 0);
					err = $pkg.ErrSyntax;
					/* goto Error */ $s = 7; continue;
				/* } */ case 22:
			case 17:
			/* */ if (v >= (base << 24 >>> 24)) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (v >= (base << 24 >>> 24)) { */ case 23:
				n = new $Uint64(0, 0);
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 7; continue;
			/* } */ case 24:
			/* */ if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { */ case 25:
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 7; continue;
			/* } */ case 26:
			n = $mul64(n, (new $Uint64(0, base)));
			n1 = (x$2 = new $Uint64(0, v), new $Uint64(n.$high + x$2.$high, n.$low + x$2.$low));
			/* */ if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { */ case 27:
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 7; continue;
			/* } */ case 28:
			n = n1;
			i = i + (1) >> 0;
		/* } */ $s = 15; continue; case 16:
		$s = -1; return [n, $ifaceNil];
		/* Error: */ case 7:
		$s = -1; return [n, new NumError.ptr("ParseUint", s, err)];
		$s = -1; return [new $Uint64(0, 0), $ifaceNil];
		/* */ } return; }
	};
	$pkg.ParseUint = ParseUint;
	ParseInt = function(s, base, bitSize) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, base, bitSize, cutoff, err, i, n, neg, s, s0, un, x, x$1;
		i = new $Int64(0, 0);
		err = $ifaceNil;
		if (bitSize === 0) {
			bitSize = 32;
		}
		if (s.length === 0) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = syntaxError("ParseInt", s);
			i = _tmp;
			err = _tmp$1;
			return [i, err];
		}
		s0 = s;
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = $substring(s, 1);
		} else if (s.charCodeAt(0) === 45) {
			neg = true;
			s = $substring(s, 1);
		}
		un = new $Uint64(0, 0);
		_tuple = ParseUint(s, base, bitSize);
		un = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual($assertType(err, ptrType).Err, $pkg.ErrRange))) {
			$assertType(err, ptrType).Func = "ParseInt";
			$assertType(err, ptrType).Num = s0;
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = err;
			i = _tmp$2;
			err = _tmp$3;
			return [i, err];
		}
		cutoff = $shiftLeft64(new $Uint64(0, 1), ((bitSize - 1 >> 0) >>> 0));
		if (!neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low >= cutoff.$low))) {
			_tmp$4 = (x = new $Uint64(cutoff.$high - 0, cutoff.$low - 1), new $Int64(x.$high, x.$low));
			_tmp$5 = rangeError("ParseInt", s0);
			i = _tmp$4;
			err = _tmp$5;
			return [i, err];
		}
		if (neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low > cutoff.$low))) {
			_tmp$6 = (x$1 = new $Int64(cutoff.$high, cutoff.$low), new $Int64(-x$1.$high, -x$1.$low));
			_tmp$7 = rangeError("ParseInt", s0);
			i = _tmp$6;
			err = _tmp$7;
			return [i, err];
		}
		n = new $Int64(un.$high, un.$low);
		if (neg) {
			n = new $Int64(-n.$high, -n.$low);
		}
		_tmp$8 = n;
		_tmp$9 = $ifaceNil;
		i = _tmp$8;
		err = _tmp$9;
		return [i, err];
	};
	$pkg.ParseInt = ParseInt;
	Atoi = function(s) {
		var $ptr, _tuple, _tuple$1, err, i64, nerr, ok, s;
		_tuple = ParseInt(s, 10, 0);
		i64 = _tuple[0];
		err = _tuple[1];
		_tuple$1 = $assertType(err, ptrType, true);
		nerr = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok) {
			nerr.Func = "Atoi";
		}
		return [((i64.$low + ((i64.$high >> 31) * 4294967296)) >> 0), err];
	};
	$pkg.Atoi = Atoi;
	decimal.ptr.prototype.String = function() {
		var $ptr, a, buf, n, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = $makeSlice(sliceType$6, n);
		w = 0;
		if ((a.nd === 0)) {
			return "0";
		} else if (a.dp <= 0) {
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
			w = w + (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.dp))) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return $bytesToString($subslice(buf, 0, w));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var $ptr, _i, _ref, dst, i;
		_ref = dst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + i] = 48);
			_i++;
		}
		return dst.$length;
	};
	trim = function(a) {
		var $ptr, a, x, x$1;
		while (true) {
			if (!(a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) === 48))) { break; }
			a.nd = a.nd - (1) >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.ptr.prototype.Assign = function(v) {
		var $ptr, a, buf, n, v, v1, x, x$1, x$2;
		a = this;
		buf = arrayType$1.zero();
		n = 0;
		while (true) {
			if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
			((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24));
			n = n + (1) >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - (1) >> 0;
		while (true) {
			if (!(n >= 0)) { break; }
			(x$1 = a.d, x$2 = a.nd, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2] = ((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n])));
			a.nd = a.nd + (1) >> 0;
			n = n - (1) >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var $ptr, a, c, c$1, dig, dig$1, k, mask, n, r, w, x, x$1, x$2, x$3, y, y$1, y$2, y$3, y$4;
		r = 0;
		w = 0;
		n = 0;
		while (true) {
			if (!(((y = k, y < 32 ? (n >>> y) : 0) >>> 0) === 0)) { break; }
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (true) {
					if (!(((y$1 = k, y$1 < 32 ? (n >>> y$1) : 0) >>> 0) === 0)) { break; }
					n = n * 10 >>> 0;
					r = r + (1) >> 0;
				}
				break;
			}
			c = ((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0);
			n = ((n * 10 >>> 0) + c >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		mask = (((y$2 = k, y$2 < 32 ? (1 << y$2) : 0) >>> 0)) - 1 >>> 0;
		while (true) {
			if (!(r < a.nd)) { break; }
			c$1 = ((x$1 = a.d, ((r < 0 || r >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[r])) >>> 0);
			dig = (y$3 = k, y$3 < 32 ? (n >>> y$3) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = ((dig + 48 >>> 0) << 24 >>> 24)));
			w = w + (1) >> 0;
			n = ((n * 10 >>> 0) + c$1 >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			dig$1 = (y$4 = k, y$4 < 32 ? (n >>> y$4) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			if (w < 800) {
				(x$3 = a.d, ((w < 0 || w >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[w] = ((dig$1 + 48 >>> 0) << 24 >>> 24)));
				w = w + (1) >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = n * 10 >>> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var $ptr, b, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (i >= b.$length) {
				return true;
			}
			if (!((((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) < s.charCodeAt(i);
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var $ptr, _q, _q$1, a, delta, k, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;
		delta = ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).delta;
		if (prefixIsLessThan($subslice(new sliceType$6(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
			delta = delta - (1) >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - (1) >> 0;
		while (true) {
			if (!(r >= 0)) { break; }
			n = n + (((y = k, y < 32 ? (((((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0) - 48 >>> 0)) << y) : 0) >>> 0)) >>> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - (10 * quo >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$1 = a.d, ((w < 0 || w >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[w] = ((rem + 48 >>> 0) << 24 >>> 24)));
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - (10 * quo$1 >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = ((rem$1 + 48 >>> 0) << 24 >>> 24)));
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.ptr.prototype.Shift = function(k) {
		var $ptr, a, k;
		a = this;
		if ((a.nd === 0)) {
		} else if (k > 0) {
			while (true) {
				if (!(k > 28)) { break; }
				leftShift(a, 28);
				k = k - (28) >> 0;
			}
			leftShift(a, (k >>> 0));
		} else if (k < 0) {
			while (true) {
				if (!(k < -28)) { break; }
				rightShift(a, 28);
				k = k + (28) >> 0;
			}
			rightShift(a, (-k >>> 0));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var $ptr, _r, a, nd, x, x$1, x$2, x$3;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if (((x = a.d, ((nd < 0 || nd >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[nd])) >= 53;
	};
	decimal.ptr.prototype.Round = function(nd) {
		var $ptr, a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.ptr.prototype.RoundDown = function(nd) {
		var $ptr, a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.ptr.prototype.RoundUp = function(nd) {
		var $ptr, a, c, i, nd, x, x$1, x$2;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			c = (x = a.d, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]));
			if (c < 57) {
				(x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = ((x$1 = a.d, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i])) + (1) << 24 >>> 24)));
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - (1) >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + (1) >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.ptr.prototype.RoundedInteger = function() {
		var $ptr, a, i, n, x, x$1, x$2, x$3;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (true) {
			if (!(i < a.dp && i < a.nd)) { break; }
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])) - 48 << 24 >>> 24)), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		while (true) {
			if (!(i < a.dp)) { break; }
			n = $mul64(n, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	extFloat.ptr.prototype.floatBits = function(flt) {
		var $ptr, bits, exp, f, flt, mant, n, overflow, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2;
		bits = new $Uint64(0, 0);
		overflow = false;
		f = this;
		f.Normalize();
		exp = f.exp + 63 >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n = (flt.bias + 1 >> 0) - exp >> 0;
			f.mant = $shiftRightUint64(f.mant, ((n >>> 0)));
			exp = exp + (n) >> 0;
		}
		mant = $shiftRightUint64(f.mant, ((63 - flt.mantbits >>> 0)));
		if (!((x = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, 1), ((62 - flt.mantbits >>> 0))), new $Uint64(x$1.$high & x$2.$high, (x$1.$low & x$2.$low) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			mant = (x$3 = new $Uint64(0, 1), new $Uint64(mant.$high + x$3.$high, mant.$low + x$3.$low));
		}
		if ((x$4 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$4.$high && mant.$low === x$4.$low))) {
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
		}
		if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) {
			mant = new $Uint64(0, 0);
			exp = (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
			overflow = true;
		} else if ((x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$6.$high, (mant.$low & x$6.$low) >>> 0)), (x$5.$high === 0 && x$5.$low === 0))) {
			exp = flt.bias;
		}
		bits = (x$7 = (x$8 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$8.$high - 0, x$8.$low - 1)), new $Uint64(mant.$high & x$7.$high, (mant.$low & x$7.$low) >>> 0));
		bits = (x$9 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$9.$high, (bits.$low | x$9.$low) >>> 0));
		if (f.neg) {
			bits = (x$10 = $shiftLeft64(new $Uint64(0, 1), ((flt.mantbits + flt.expbits >>> 0))), new $Uint64(bits.$high | x$10.$high, (bits.$low | x$10.$low) >>> 0));
		}
		return [bits, overflow];
	};
	extFloat.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	extFloat.ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var $ptr, _tmp, _tmp$1, exp, expBiased, f, flt, lower, mant, neg, upper, x, x$1, x$2, x$3, x$4;
		lower = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		upper = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		f = this;
		f.mant = mant;
		f.exp = exp - (flt.mantbits >> 0) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, (-f.exp >>> 0))), (-f.exp >>> 0)), (mant.$high === x.$high && mant.$low === x.$low))) {
			f.mant = $shiftRightUint64(f.mant, ((-f.exp >>> 0)));
			f.exp = 0;
			_tmp = $clone(f, extFloat);
			_tmp$1 = $clone(f, extFloat);
			extFloat.copy(lower, _tmp);
			extFloat.copy(upper, _tmp$1);
			return [lower, upper];
		}
		expBiased = exp - flt.bias >> 0;
		extFloat.copy(upper, new extFloat.ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.$high + 0, x$1.$low + 1)), f.exp - 1 >> 0, f.neg));
		if (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) || (expBiased === 1)) {
			extFloat.copy(lower, new extFloat.ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.$high - 0, x$3.$low - 1)), f.exp - 1 >> 0, f.neg));
		} else {
			extFloat.copy(lower, new extFloat.ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.$high - 0, x$4.$low - 1)), f.exp - 2 >> 0, f.neg));
		}
		return [lower, upper];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.ptr.prototype.Normalize = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, exp, f, mant, shift, x, x$1, x$2, x$3, x$4, x$5;
		shift = 0;
		f = this;
		_tmp = f.mant;
		_tmp$1 = f.exp;
		mant = _tmp;
		exp = _tmp$1;
		if ((mant.$high === 0 && mant.$low === 0)) {
			shift = 0;
			return shift;
		}
		if ((x = $shiftRightUint64(mant, 32), (x.$high === 0 && x.$low === 0))) {
			mant = $shiftLeft64(mant, (32));
			exp = exp - (32) >> 0;
		}
		if ((x$1 = $shiftRightUint64(mant, 48), (x$1.$high === 0 && x$1.$low === 0))) {
			mant = $shiftLeft64(mant, (16));
			exp = exp - (16) >> 0;
		}
		if ((x$2 = $shiftRightUint64(mant, 56), (x$2.$high === 0 && x$2.$low === 0))) {
			mant = $shiftLeft64(mant, (8));
			exp = exp - (8) >> 0;
		}
		if ((x$3 = $shiftRightUint64(mant, 60), (x$3.$high === 0 && x$3.$low === 0))) {
			mant = $shiftLeft64(mant, (4));
			exp = exp - (4) >> 0;
		}
		if ((x$4 = $shiftRightUint64(mant, 62), (x$4.$high === 0 && x$4.$low === 0))) {
			mant = $shiftLeft64(mant, (2));
			exp = exp - (2) >> 0;
		}
		if ((x$5 = $shiftRightUint64(mant, 63), (x$5.$high === 0 && x$5.$low === 0))) {
			mant = $shiftLeft64(mant, (1));
			exp = exp - (1) >> 0;
		}
		shift = ((f.exp - exp >> 0) >>> 0);
		_tmp$2 = mant;
		_tmp$3 = exp;
		f.mant = _tmp$2;
		f.exp = _tmp$3;
		return shift;
	};
	extFloat.prototype.Normalize = function() { return this.$val.Normalize(); };
	extFloat.ptr.prototype.Multiply = function(g) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, cross1, cross2, f, fhi, flo, g, ghi, glo, rem, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		_tmp = $shiftRightUint64(f.mant, 32);
		_tmp$1 = new $Uint64(0, (f.mant.$low >>> 0));
		fhi = _tmp;
		flo = _tmp$1;
		_tmp$2 = $shiftRightUint64(g.mant, 32);
		_tmp$3 = new $Uint64(0, (g.mant.$low >>> 0));
		ghi = _tmp$2;
		glo = _tmp$3;
		cross1 = $mul64(fhi, glo);
		cross2 = $mul64(flo, ghi);
		f.mant = (x = (x$1 = $mul64(fhi, ghi), x$2 = $shiftRightUint64(cross1, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), x$3 = $shiftRightUint64(cross2, 32), new $Uint64(x.$high + x$3.$high, x.$low + x$3.$low));
		rem = (x$4 = (x$5 = new $Uint64(0, (cross1.$low >>> 0)), x$6 = new $Uint64(0, (cross2.$low >>> 0)), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $shiftRightUint64(($mul64(flo, glo)), 32), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));
		rem = (x$8 = new $Uint64(0, 2147483648), new $Uint64(rem.$high + x$8.$high, rem.$low + x$8.$low));
		f.mant = (x$9 = f.mant, x$10 = ($shiftRightUint64(rem, 32)), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };
	extFloat.ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
		var $ptr, _q, _r, adjExp, denormalExp, errors$1, exp10, extrabits, f, flt, halfway, i, mant_extra, mantissa, neg, ok, shift, trunc, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y;
		ok = false;
		f = this;
		errors$1 = 0;
		if (trunc) {
			errors$1 = errors$1 + (4) >> 0;
		}
		f.mant = mantissa;
		f.exp = 0;
		f.neg = neg;
		i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (exp10 < -348 || i >= 87) {
			ok = false;
			return ok;
		}
		adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (adjExp < 19 && (x = (x$1 = 19 - adjExp >> 0, ((x$1 < 0 || x$1 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$1])), (mantissa.$high < x.$high || (mantissa.$high === x.$high && mantissa.$low < x.$low)))) {
			f.mant = $mul64(f.mant, (((adjExp < 0 || adjExp >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[adjExp])));
			f.Normalize();
		} else {
			f.Normalize();
			f.Multiply($clone(((adjExp < 0 || adjExp >= smallPowersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : smallPowersOfTen[adjExp]), extFloat));
			errors$1 = errors$1 + (4) >> 0;
		}
		f.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		if (errors$1 > 0) {
			errors$1 = errors$1 + (1) >> 0;
		}
		errors$1 = errors$1 + (4) >> 0;
		shift = f.Normalize();
		errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
		denormalExp = flt.bias - 63 >> 0;
		extrabits = 0;
		if (f.exp <= denormalExp) {
			extrabits = ((63 - flt.mantbits >>> 0) + 1 >>> 0) + ((denormalExp - f.exp >> 0) >>> 0) >>> 0;
		} else {
			extrabits = 63 - flt.mantbits >>> 0;
		}
		halfway = $shiftLeft64(new $Uint64(0, 1), ((extrabits - 1 >>> 0)));
		mant_extra = (x$2 = f.mant, x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), extrabits), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		if ((x$5 = (x$6 = new $Int64(halfway.$high, halfway.$low), x$7 = new $Int64(0, errors$1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low)), x$8 = new $Int64(mant_extra.$high, mant_extra.$low), (x$5.$high < x$8.$high || (x$5.$high === x$8.$high && x$5.$low < x$8.$low))) && (x$9 = new $Int64(mant_extra.$high, mant_extra.$low), x$10 = (x$11 = new $Int64(halfway.$high, halfway.$low), x$12 = new $Int64(0, errors$1), new $Int64(x$11.$high + x$12.$high, x$11.$low + x$12.$low)), (x$9.$high < x$10.$high || (x$9.$high === x$10.$high && x$9.$low < x$10.$low)))) {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
	extFloat.ptr.prototype.frexp10 = function() {
		var $ptr, _q, _q$1, _tmp, _tmp$1, approxExp10, exp, exp10, f, i, index;
		exp10 = 0;
		index = 0;
		f = this;
		approxExp10 = (_q = ($imul(((-46 - f.exp >> 0)), 28)) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + ((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]).exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + (1) >> 0;
			} else if (exp > -32) {
				i = i - (1) >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		_tmp = -((-348 + ($imul(i, 8)) >> 0));
		_tmp$1 = i;
		exp10 = _tmp;
		index = _tmp$1;
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var $ptr, _tuple, a, b, c, exp10, i;
		exp10 = 0;
		_tuple = c.frexp10();
		exp10 = _tuple[0];
		i = _tuple[1];
		a.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		b.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		return exp10;
	};
	extFloat.ptr.prototype.FixedDecimal = function(d, n) {
		var $CE$B5, $ptr, _q, _q$1, _tmp, _tmp$1, _tuple, buf, d, digit, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, n, nd, needed, ok, pos, pow, pow10, rest, shift, v, v1, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			$panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10();
		exp10 = _tuple[0];
		shift = (-f.exp >>> 0);
		integer = ($shiftRightUint64(f.mant, shift).$low >>> 0);
		fraction = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		$CE$B5 = new $Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new $Uint64(0, 1);
		_tmp = 0;
		_tmp$1 = new $Uint64(0, 1);
		i = _tmp;
		pow = _tmp$1;
		while (true) {
			if (!(i < 20)) { break; }
			if ((x$3 = new $Uint64(0, integer), (pow.$high > x$3.$high || (pow.$high === x$3.$high && pow.$low > x$3.$low)))) {
				integerDigits = i;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = (x$4 = integerDigits - needed >> 0, ((x$4 < 0 || x$4 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$4]));
			integer = (_q = integer / ((pow10.$low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rest = rest - (($imul(integer, (pow10.$low >>> 0)) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = arrayType$2.zero();
		pos = 32;
		v = integer;
		while (true) {
			if (!(v > 0)) { break; }
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			v = v - (($imul(10, v1) >>> 0)) >>> 0;
			pos = pos - (1) >> 0;
			((pos < 0 || pos >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[pos] = ((v + 48 >>> 0) << 24 >>> 24));
			v = v1;
		}
		i$1 = pos;
		while (true) {
			if (!(i$1 < 32)) { break; }
			(x$5 = d.d, x$6 = i$1 - pos >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = ((i$1 < 0 || i$1 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i$1])));
			i$1 = i$1 + (1) >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.$high === 0 && pow10.$low === 1))) {
				$panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (true) {
				if (!(needed > 0)) { break; }
				fraction = $mul64(fraction, (new $Uint64(0, 10)));
				$CE$B5 = $mul64($CE$B5, (new $Uint64(0, 10)));
				if ((x$7 = $mul64(new $Uint64(0, 2), $CE$B5), x$8 = $shiftLeft64(new $Uint64(0, 1), shift), (x$7.$high > x$8.$high || (x$7.$high === x$8.$high && x$7.$low > x$8.$low)))) {
					return false;
				}
				digit = $shiftRightUint64(fraction, shift);
				(x$9 = d.d, ((nd < 0 || nd >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + nd] = (new $Uint64(digit.$high + 0, digit.$low + 48).$low << 24 >>> 24)));
				fraction = (x$10 = $shiftLeft64(digit, shift), new $Uint64(fraction.$high - x$10.$high, fraction.$low - x$10.$low));
				nd = nd + (1) >> 0;
				needed = needed - (1) >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$11 = $shiftLeft64(new $Uint64(0, rest), shift), new $Uint64(x$11.$high | fraction.$high, (x$11.$low | fraction.$low) >>> 0)), pow10, shift, $CE$B5);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			if (!(((x$12 = d.d, ((i$2 < 0 || i$2 >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + i$2])) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, $CE$B5) {
		var $CE$B5, $ptr, d, den, i, num, shift, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $shiftLeft64(den, shift), (num.$high > x.$high || (num.$high === x.$high && num.$low > x.$low)))) {
			$panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = $mul64(new $Uint64(0, 2), $CE$B5), x$2 = $shiftLeft64(den, shift), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			$panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high + $CE$B5.$high, num.$low + $CE$B5.$low))), x$4 = $shiftLeft64(den, shift), (x$3.$high < x$4.$high || (x$3.$high === x$4.$high && x$3.$low < x$4.$low)))) {
			return true;
		}
		if ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high - $CE$B5.$high, num.$low - $CE$B5.$low))), x$6 = $shiftLeft64(den, shift), (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)))) {
			i = d.nd - 1 >> 0;
			while (true) {
				if (!(i >= 0)) { break; }
				if ((x$7 = d.d, ((i < 0 || i >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i])) === 57) {
					d.nd = d.nd - (1) >> 0;
				} else {
					break;
				}
				i = i - (1) >> 0;
			}
			if (i < 0) {
				(x$8 = d.d, (0 >= x$8.$length ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + 0] = 49));
				d.nd = 1;
				d.dp = d.dp + (1) >> 0;
			} else {
				(x$10 = d.d, ((i < 0 || i >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + i] = ((x$9 = d.d, ((i < 0 || i >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + i])) + (1) << 24 >>> 24)));
			}
			return true;
		}
		return false;
	};
	extFloat.ptr.prototype.ShortestDecimal = function(d, lower, upper) {
		var $ptr, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, allowance, buf, currentDiff, d, digit, digit$1, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, lower, multiplier, n, nd, pow, pow$1, shift, targetDiff, upper, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && $equal(lower, f, extFloat) && $equal(lower, upper, extFloat)) {
			buf = arrayType$1.zero();
			n = 23;
			v = f.mant;
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				v1 = $div64(v, new $Uint64(0, 10), false);
				v = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x$1.$high, v.$low - x$1.$low));
				((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24));
				n = n - (1) >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (true) {
				if (!(i < nd)) { break; }
				(x$3 = d.d, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i] = (x$2 = (n + 1 >> 0) + i >> 0, ((x$2 < 0 || x$2 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[x$2]))));
				i = i + (1) >> 0;
			}
			_tmp = nd;
			_tmp$1 = nd;
			d.nd = _tmp;
			d.dp = _tmp$1;
			while (true) {
				if (!(d.nd > 0 && ((x$4 = d.d, x$5 = d.nd - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) === 48))) { break; }
				d.nd = d.nd - (1) >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = $shiftLeft64(f.mant, (((f.exp - upper.exp >> 0) >>> 0)));
			f.exp = upper.exp;
		}
		if (lower.exp > upper.exp) {
			lower.mant = $shiftLeft64(lower.mant, (((lower.exp - upper.exp >> 0) >>> 0)));
			lower.exp = upper.exp;
		}
		exp10 = frexp10Many(lower, f, upper);
		upper.mant = (x$6 = upper.mant, x$7 = new $Uint64(0, 1), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
		lower.mant = (x$8 = lower.mant, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));
		shift = (-upper.exp >>> 0);
		integer = ($shiftRightUint64(upper.mant, shift).$low >>> 0);
		fraction = (x$10 = upper.mant, x$11 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$10.$high - x$11.$high, x$10.$low - x$11.$low));
		allowance = (x$12 = upper.mant, x$13 = lower.mant, new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
		targetDiff = (x$14 = upper.mant, x$15 = f.mant, new $Uint64(x$14.$high - x$15.$high, x$14.$low - x$15.$low));
		integerDigits = 0;
		_tmp$2 = 0;
		_tmp$3 = new $Uint64(0, 1);
		i$1 = _tmp$2;
		pow = _tmp$3;
		while (true) {
			if (!(i$1 < 20)) { break; }
			if ((x$16 = new $Uint64(0, integer), (pow.$high > x$16.$high || (pow.$high === x$16.$high && pow.$low > x$16.$low)))) {
				integerDigits = i$1;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (true) {
			if (!(i$2 < integerDigits)) { break; }
			pow$1 = (x$17 = (integerDigits - i$2 >> 0) - 1 >> 0, ((x$17 < 0 || x$17 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$17]));
			digit = (_q = integer / (pow$1.$low >>> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			(x$18 = d.d, ((i$2 < 0 || i$2 >= x$18.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$18.$array[x$18.$offset + i$2] = ((digit + 48 >>> 0) << 24 >>> 24)));
			integer = integer - (($imul(digit, (pow$1.$low >>> 0)) >>> 0)) >>> 0;
			currentDiff = (x$19 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$19.$high + fraction.$high, x$19.$low + fraction.$low));
			if ((currentDiff.$high < allowance.$high || (currentDiff.$high === allowance.$high && currentDiff.$low < allowance.$low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));
			}
			i$2 = i$2 + (1) >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new $Uint64(0, 1);
		while (true) {
			fraction = $mul64(fraction, (new $Uint64(0, 10)));
			multiplier = $mul64(multiplier, (new $Uint64(0, 10)));
			digit$1 = ($shiftRightUint64(fraction, shift).$low >> 0);
			(x$20 = d.d, x$21 = d.nd, ((x$21 < 0 || x$21 >= x$20.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$20.$array[x$20.$offset + x$21] = ((digit$1 + 48 >> 0) << 24 >>> 24)));
			d.nd = d.nd + (1) >> 0;
			fraction = (x$22 = $shiftLeft64(new $Uint64(0, digit$1), shift), new $Uint64(fraction.$high - x$22.$high, fraction.$low - x$22.$low));
			if ((x$23 = $mul64(allowance, multiplier), (fraction.$high < x$23.$high || (fraction.$high === x$23.$high && fraction.$low < x$23.$low)))) {
				return adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.$val.ShortestDecimal(d, lower, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var $ptr, _index, currentDiff, d, maxDiff, targetDiff, ulpBinary, ulpDecimal, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.$high < x.$high || (ulpDecimal.$high === x.$high && ulpDecimal.$low < x.$low)))) {
			return false;
		}
		while (true) {
			if (!((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.$high + x$3.$high, currentDiff.$low + x$3.$low)), new $Uint64(x$2.$high + ulpBinary.$high, x$2.$low + ulpBinary.$low)), (x$1.$high < targetDiff.$high || (x$1.$high === targetDiff.$high && x$1.$low < targetDiff.$low))))) { break; }
			_index = d.nd - 1 >> 0;
			(x$5 = d.d, ((_index < 0 || _index >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + _index] = ((x$4 = d.d, ((_index < 0 || _index >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + _index])) - (1) << 24 >>> 24)));
			currentDiff = (x$6 = ulpDecimal, new $Uint64(currentDiff.$high + x$6.$high, currentDiff.$low + x$6.$low));
		}
		if ((x$7 = new $Uint64(currentDiff.$high + ulpDecimal.$high, currentDiff.$low + ulpDecimal.$low), x$8 = (x$9 = (x$10 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.$high + x$10.$high, targetDiff.$low + x$10.$low)), new $Uint64(x$9.$high + ulpBinary.$high, x$9.$low + ulpBinary.$low)), (x$7.$high < x$8.$high || (x$7.$high === x$8.$high && x$7.$low <= x$8.$low)))) {
			return false;
		}
		if ((currentDiff.$high < ulpBinary.$high || (currentDiff.$high === ulpBinary.$high && currentDiff.$low < ulpBinary.$low)) || (x$11 = new $Uint64(maxDiff.$high - ulpBinary.$high, maxDiff.$low - ulpBinary.$low), (currentDiff.$high > x$11.$high || (currentDiff.$high === x$11.$high && currentDiff.$low > x$11.$low)))) {
			return false;
		}
		if ((d.nd === 1) && ((x$12 = d.d, (0 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 0])) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	AppendFloat = function(dst, f, fmt, prec, bitSize) {
		var $ptr, bitSize, dst, f, fmt, prec;
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	$pkg.AppendFloat = AppendFloat;
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var $ptr, _1, _2, _3, _4, _tuple, bitSize, bits, buf, buf$1, digits, digs, dst, exp, f, f$1, flt, fmt, lower, mant, neg, ok, prec, s, shortest, upper, val, x, x$1, x$2, x$3, y, y$1;
		bits = new $Uint64(0, 0);
		flt = ptrType$1.nil;
		_1 = bitSize;
		if (_1 === (32)) {
			bits = new $Uint64(0, math.Float32bits($fround(val)));
			flt = float32info;
		} else if (_1 === (64)) {
			bits = math.Float64bits(val);
			flt = float64info;
		} else {
			$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
		exp = ($shiftRightUint64(bits, flt.mantbits).$low >> 0) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits.$high & x$1.$high, (bits.$low & x$1.$low) >>> 0));
		_2 = exp;
		if (_2 === ((((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0))) {
			s = "";
			if (!((mant.$high === 0 && mant.$low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, s);
		} else if (_2 === (0)) {
			exp = exp + (1) >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.ptr(new $Uint64(0, 0), 0, false);
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt);
			lower = $clone(_tuple[0], extFloat);
			upper = $clone(_tuple[1], extFloat);
			buf = arrayType$2.zero();
			digs.d = new sliceType$6(buf);
			ok = f.ShortestDecimal(digs, lower, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_3 = fmt;
			if ((_3 === (101)) || (_3 === (69))) {
				prec = max(digs.nd - 1 >> 0, 0);
			} else if (_3 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_3 === (103)) || (_3 === (71))) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_4 = fmt;
			if ((_4 === (101)) || (_4 === (69))) {
				digits = digits + (1) >> 0;
			} else if ((_4 === (103)) || (_4 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = arrayType$1.zero();
				digs.d = new sliceType$6(buf$1);
				f$1 = new extFloat.ptr(mant, exp - (flt.mantbits >> 0) >> 0, neg);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var $ptr, _1, _2, d, digs, dst, exp, flt, fmt, mant, neg, prec, shortest;
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		d.Assign(mant);
		d.Shift(exp - (flt.mantbits >> 0) >> 0);
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
			_1 = fmt;
			if ((_1 === (101)) || (_1 === (69))) {
				prec = digs.nd - 1 >> 0;
			} else if (_1 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_1 === (103)) || (_1 === (71))) {
				prec = digs.nd;
			}
		} else {
			_2 = fmt;
			if ((_2 === (101)) || (_2 === (69))) {
				d.Round(prec + 1 >> 0);
			} else if (_2 === (102)) {
				d.Round(d.dp + prec >> 0);
			} else if ((_2 === (103)) || (_2 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var $ptr, _1, digs, dst, eprec, exp, fmt, neg, prec, shortest;
		_1 = fmt;
		if ((_1 === (101)) || (_1 === (69))) {
			return fmtE(dst, neg, $clone(digs, decimalSlice), prec, fmt);
		} else if (_1 === (102)) {
			return fmtF(dst, neg, $clone(digs, decimalSlice), prec);
		} else if ((_1 === (103)) || (_1 === (71))) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, $clone(digs, decimalSlice), prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, $clone(digs, decimalSlice), max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var $ptr, d, exp, explo, flt, i, inclusive, l, lower, m, mant, mantlo, minexp, okdown, okup, u, upper, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		if ((mant.$high === 0 && mant.$low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && ($imul(332, ((d.dp - d.nd >> 0)))) >= ($imul(100, ((exp - (flt.mantbits >> 0) >> 0))))) {
			return;
		}
		upper = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		upper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));
		upper.Shift((exp - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
			explo = exp;
		} else {
			mantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));
			explo = exp - 1 >> 0;
		}
		lower = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		lower.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));
		lower.Shift((explo - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		inclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));
		i = 0;
		while (true) {
			if (!(i < d.nd)) { break; }
			l = 48;
			if (i < lower.nd) {
				l = (x$5 = lower.d, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i]));
			}
			m = (x$6 = d.d, ((i < 0 || i >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[i]));
			u = 48;
			if (i < upper.nd) {
				u = (x$7 = upper.d, ((i < 0 || i >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[i]));
			}
			okdown = !((l === m)) || inclusive && ((i + 1 >> 0) === lower.nd);
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(i + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(i + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(i + 1 >> 0);
				return;
			}
			i = i + (1) >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var $ptr, _q, _q$1, _q$2, _r, _r$1, _r$2, ch, d, dst, exp, fmt, i, m, neg, prec, x;
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = min(d.nd, prec + 1 >> 0);
			if (i < m) {
				dst = $appendSlice(dst, $subslice(d.d, i, m));
				i = m;
			}
			while (true) {
				if (!(i <= prec)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		if (exp < 10) {
			dst = $append(dst, 48, (exp << 24 >>> 24) + 48 << 24 >>> 24);
		} else if (exp < 100) {
			dst = $append(dst, ((_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24, ((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24);
		} else {
			dst = $append(dst, ((_q$1 = exp / 100, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24, (_r$1 = ((_q$2 = exp / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24, ((_r$2 = exp % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var $ptr, ch, d, dst, i, j, m, neg, prec, x;
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			m = min(d.nd, d.dp);
			dst = $appendSlice(dst, $subslice(d.d, 0, m));
			while (true) {
				if (!(m < d.dp)) { break; }
				dst = $append(dst, 48);
				m = m + (1) >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				ch = 48;
				j = d.dp + i >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x = d.d, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
				}
				dst = $append(dst, ch);
				i = i + (1) >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var $ptr, _tuple, _tuple$1, dst, exp, flt, mant, neg;
		if (neg) {
			dst = $append(dst, 45);
		}
		_tuple = formatBits(dst, mant, 10, false, true);
		dst = _tuple[0];
		dst = $append(dst, 112);
		exp = exp - ((flt.mantbits >> 0)) >> 0;
		if (exp >= 0) {
			dst = $append(dst, 43);
		}
		_tuple$1 = formatBits(dst, new $Uint64(0, exp), 10, exp < 0, true);
		dst = _tuple$1[0];
		return dst;
	};
	min = function(a, b) {
		var $ptr, a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	max = function(a, b) {
		var $ptr, a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatUint = function(i, base) {
		var $ptr, _tuple, base, i, s;
		_tuple = formatBits(sliceType$6.nil, i, base, false, false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatUint = FormatUint;
	FormatInt = function(i, base) {
		var $ptr, _tuple, base, i, s;
		_tuple = formatBits(sliceType$6.nil, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatInt = FormatInt;
	Itoa = function(i) {
		var $ptr, i;
		return FormatInt(new $Int64(0, i), 10);
	};
	$pkg.Itoa = Itoa;
	AppendInt = function(dst, i, base) {
		var $ptr, _tuple, base, dst, i;
		_tuple = formatBits(dst, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), true);
		dst = _tuple[0];
		return dst;
	};
	$pkg.AppendInt = AppendInt;
	AppendUint = function(dst, i, base) {
		var $ptr, _tuple, base, dst, i;
		_tuple = formatBits(dst, i, base, false, true);
		dst = _tuple[0];
		return dst;
	};
	$pkg.AppendUint = AppendUint;
	formatBits = function(dst, u, base, neg, append_) {
		var $ptr, _q, _q$1, a, append_, b, b$1, base, d, dst, i, j, m, neg, q, q$1, q$2, qs, s, s$1, u, us, us$1, x, x$1;
		d = sliceType$6.nil;
		s = "";
		if (base < 2 || base > 36) {
			$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = arrayType$3.zero();
		i = 65;
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if (base === 10) {
			if (true) {
				while (true) {
					if (!((u.$high > 0 || (u.$high === 0 && u.$low > 4294967295)))) { break; }
					q = $div64(u, new $Uint64(0, 1000000000), false);
					us = ((x = $mul64(q, new $Uint64(0, 1000000000)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0);
					j = 9;
					while (true) {
						if (!(j > 0)) { break; }
						i = i - (1) >> 0;
						qs = (_q = us / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
						((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = (((us - ($imul(qs, 10) >>> 0) >>> 0) + 48 >>> 0) << 24 >>> 24));
						us = qs;
						j = j - (1) >> 0;
					}
					u = q;
				}
			}
			us$1 = (u.$low >>> 0);
			while (true) {
				if (!(us$1 >= 10)) { break; }
				i = i - (1) >> 0;
				q$1 = (_q$1 = us$1 / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = (((us$1 - ($imul(q$1, 10) >>> 0) >>> 0) + 48 >>> 0) << 24 >>> 24));
				us$1 = q$1;
			}
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = ((us$1 + 48 >>> 0) << 24 >>> 24));
		} else {
			s$1 = ((base < 0 || base >= shifts.length) ? ($throwRuntimeError("index out of range"), undefined) : shifts[base]);
			if (s$1 > 0) {
				b = new $Uint64(0, base);
				m = (b.$low >>> 0) - 1 >>> 0;
				while (true) {
					if (!((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low)))) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((u.$low >>> 0) & m) >>> 0)));
					u = $shiftRightUint64(u, (s$1));
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((u.$low >>> 0)));
			} else {
				b$1 = new $Uint64(0, base);
				while (true) {
					if (!((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low)))) { break; }
					i = i - (1) >> 0;
					q$2 = $div64(u, b$1, false);
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((x$1 = $mul64(q$2, b$1), new $Uint64(u.$high - x$1.$high, u.$low - x$1.$low)).$low >>> 0)));
					u = q$2;
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((u.$low >>> 0)));
			}
		}
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = 45);
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new sliceType$6(a), i));
			return [d, s];
		}
		s = $bytesToString($subslice(new sliceType$6(a), i));
		return [d, s];
	};
	quoteWith = function(s, quote, ASCIIonly, graphicOnly) {
		var $ptr, ASCIIonly, _q, graphicOnly, quote, s;
		return $bytesToString(appendQuotedWith($makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), s, quote, ASCIIonly, graphicOnly));
	};
	appendQuotedWith = function(buf, s, quote, ASCIIonly, graphicOnly) {
		var $ptr, ASCIIonly, _tuple, buf, graphicOnly, quote, r, s, width;
		buf = $append(buf, quote);
		width = 0;
		while (true) {
			if (!(s.length > 0)) { break; }
			r = (s.charCodeAt(0) >> 0);
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = $substring(s, width);
				continue;
			}
			buf = appendEscapedRune(buf, r, width, quote, ASCIIonly, graphicOnly);
			s = $substring(s, width);
		}
		buf = $append(buf, quote);
		return buf;
	};
	appendQuotedRuneWith = function(buf, r, quote, ASCIIonly, graphicOnly) {
		var $ptr, ASCIIonly, buf, graphicOnly, quote, r;
		buf = $append(buf, quote);
		if (!utf8.ValidRune(r)) {
			r = 65533;
		}
		buf = appendEscapedRune(buf, r, utf8.RuneLen(r), quote, ASCIIonly, graphicOnly);
		buf = $append(buf, quote);
		return buf;
	};
	appendEscapedRune = function(buf, r, width, quote, ASCIIonly, graphicOnly) {
		var $ptr, ASCIIonly, _1, buf, graphicOnly, n, quote, r, runeTmp, s, s$1, width;
		runeTmp = arrayType$4.zero();
		if ((r === (quote >> 0)) || (r === 92)) {
			buf = $append(buf, 92);
			buf = $append(buf, (r << 24 >>> 24));
			return buf;
		}
		if (ASCIIonly) {
			if (r < 128 && IsPrint(r)) {
				buf = $append(buf, (r << 24 >>> 24));
				return buf;
			}
		} else if (IsPrint(r) || graphicOnly && isInGraphicList(r)) {
			n = utf8.EncodeRune(new sliceType$6(runeTmp), r);
			buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n));
			return buf;
		}
		_1 = r;
		if (_1 === (7)) {
			buf = $appendSlice(buf, "\\a");
		} else if (_1 === (8)) {
			buf = $appendSlice(buf, "\\b");
		} else if (_1 === (12)) {
			buf = $appendSlice(buf, "\\f");
		} else if (_1 === (10)) {
			buf = $appendSlice(buf, "\\n");
		} else if (_1 === (13)) {
			buf = $appendSlice(buf, "\\r");
		} else if (_1 === (9)) {
			buf = $appendSlice(buf, "\\t");
		} else if (_1 === (11)) {
			buf = $appendSlice(buf, "\\v");
		} else {
			if (r < 32) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt(((r << 24 >>> 24) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt((((r << 24 >>> 24) & 15) >>> 0)));
			} else if (r > 1114111) {
				r = 65533;
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s >>> 0), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else if (r < 65536) {
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s >>> 0), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else {
				buf = $appendSlice(buf, "\\U");
				s$1 = 28;
				while (true) {
					if (!(s$1 >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
					s$1 = s$1 - (4) >> 0;
				}
			}
		}
		return buf;
	};
	Quote = function(s) {
		var $ptr, s;
		return quoteWith(s, 34, false, false);
	};
	$pkg.Quote = Quote;
	AppendQuote = function(dst, s) {
		var $ptr, dst, s;
		return appendQuotedWith(dst, s, 34, false, false);
	};
	$pkg.AppendQuote = AppendQuote;
	AppendQuoteToASCII = function(dst, s) {
		var $ptr, dst, s;
		return appendQuotedWith(dst, s, 34, true, false);
	};
	$pkg.AppendQuoteToASCII = AppendQuoteToASCII;
	AppendQuoteRune = function(dst, r) {
		var $ptr, dst, r;
		return appendQuotedRuneWith(dst, r, 39, false, false);
	};
	$pkg.AppendQuoteRune = AppendQuoteRune;
	AppendQuoteRuneToASCII = function(dst, r) {
		var $ptr, dst, r;
		return appendQuotedRuneWith(dst, r, 39, true, false);
	};
	$pkg.AppendQuoteRuneToASCII = AppendQuoteRuneToASCII;
	CanBackquote = function(s) {
		var $ptr, _tuple, r, s, wid;
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			wid = _tuple[1];
			s = $substring(s, wid);
			if (wid > 1) {
				if (r === 65279) {
					return false;
				}
				continue;
			}
			if (r === 65533) {
				return false;
			}
			if ((r < 32 && !((r === 9))) || (r === 96) || (r === 127)) {
				return false;
			}
		}
		return true;
	};
	$pkg.CanBackquote = CanBackquote;
	unhex = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, c, ok, v;
		v = 0;
		ok = false;
		c = (b >> 0);
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0;
			_tmp$1 = true;
			v = _tmp;
			ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0;
			_tmp$3 = true;
			v = _tmp$2;
			ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0;
			_tmp$5 = true;
			v = _tmp$4;
			ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = function(s, quote) {
		var $ptr, _1, _2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err, j, j$1, multibyte, n, ok, quote, r, s, size, tail, v, v$1, value, x, x$1;
		value = 0;
		multibyte = false;
		tail = "";
		err = $ifaceNil;
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			size = _tuple[1];
			_tmp = r;
			_tmp$1 = true;
			_tmp$2 = $substring(s, size);
			_tmp$3 = $ifaceNil;
			value = _tmp;
			multibyte = _tmp$1;
			tail = _tmp$2;
			err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = (s.charCodeAt(0) >> 0);
			_tmp$5 = false;
			_tmp$6 = $substring(s, 1);
			_tmp$7 = $ifaceNil;
			value = _tmp$4;
			multibyte = _tmp$5;
			tail = _tmp$6;
			err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = $substring(s, 2);
		switch (0) { default:
			_1 = c$1;
			if (_1 === (97)) {
				value = 7;
			} else if (_1 === (98)) {
				value = 8;
			} else if (_1 === (102)) {
				value = 12;
			} else if (_1 === (110)) {
				value = 10;
			} else if (_1 === (114)) {
				value = 13;
			} else if (_1 === (116)) {
				value = 9;
			} else if (_1 === (118)) {
				value = 11;
			} else if ((_1 === (120)) || (_1 === (117)) || (_1 === (85))) {
				n = 0;
				_2 = c$1;
				if (_2 === (120)) {
					n = 2;
				} else if (_2 === (117)) {
					n = 4;
				} else if (_2 === (85)) {
					n = 8;
				}
				v = 0;
				if (s.length < n) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j = 0;
				while (true) {
					if (!(j < n)) { break; }
					_tuple$1 = unhex(s.charCodeAt(j));
					x = _tuple$1[0];
					ok = _tuple$1[1];
					if (!ok) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v = (v << 4 >> 0) | x;
					j = j + (1) >> 0;
				}
				s = $substring(s, n);
				if (c$1 === 120) {
					value = v;
					break;
				}
				if (v > 1114111) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v;
				multibyte = true;
			} else if ((_1 === (48)) || (_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55))) {
				v$1 = (c$1 >> 0) - 48 >> 0;
				if (s.length < 2) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j$1 = 0;
				while (true) {
					if (!(j$1 < 2)) { break; }
					x$1 = (s.charCodeAt(j$1) >> 0) - 48 >> 0;
					if (x$1 < 0 || x$1 > 7) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v$1 = ((v$1 << 3 >> 0)) | x$1;
					j$1 = j$1 + (1) >> 0;
				}
				s = $substring(s, 2);
				if (v$1 > 255) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v$1;
			} else if (_1 === (92)) {
				value = 92;
			} else if ((_1 === (39)) || (_1 === (34))) {
				if (!((c$1 === quote))) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = (c$1 >> 0);
			} else {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
		}
		tail = s;
		return [value, multibyte, tail, err];
	};
	$pkg.UnquoteChar = UnquoteChar;
	Unquote = function(s) {
		var $ptr, _1, _q, _tuple, _tuple$1, buf, buf$1, c, err, i, multibyte, n, n$1, quote, r, runeTmp, s, size, ss;
		n = s.length;
		if (n < 2) {
			return ["", $pkg.ErrSyntax];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			return ["", $pkg.ErrSyntax];
		}
		s = $substring(s, 1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				return ["", $pkg.ErrSyntax];
			}
			if (contains(s, 13)) {
				buf = $makeSlice(sliceType$6, 0, (s.length - 1 >> 0));
				i = 0;
				while (true) {
					if (!(i < s.length)) { break; }
					if (!((s.charCodeAt(i) === 13))) {
						buf = $append(buf, s.charCodeAt(i));
					}
					i = i + (1) >> 0;
				}
				return [$bytesToString(buf), $ifaceNil];
			}
			return [s, $ifaceNil];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			return ["", $pkg.ErrSyntax];
		}
		if (contains(s, 10)) {
			return ["", $pkg.ErrSyntax];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_1 = quote;
			if (_1 === (34)) {
				return [s, $ifaceNil];
			} else if (_1 === (39)) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				size = _tuple[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					return [s, $ifaceNil];
				}
			}
		}
		runeTmp = arrayType$4.zero();
		buf$1 = $makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple$1 = UnquoteChar(s, quote);
			c = _tuple$1[0];
			multibyte = _tuple$1[1];
			ss = _tuple$1[2];
			err = _tuple$1[3];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return ["", err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf$1 = $append(buf$1, (c << 24 >>> 24));
			} else {
				n$1 = utf8.EncodeRune(new sliceType$6(runeTmp), c);
				buf$1 = $appendSlice(buf$1, $subslice(new sliceType$6(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				return ["", $pkg.ErrSyntax];
			}
		}
		return [$bytesToString(buf$1), $ifaceNil];
	};
	$pkg.Unquote = Unquote;
	contains = function(s, c) {
		var $ptr, c, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === c) {
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	bsearch16 = function(a, x) {
		var $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, r, rr, rr$1, x, x$1, x$2, x$3;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = (r << 16 >>> 16);
			_tmp$1 = isPrint16;
			_tmp$2 = isNotPrint16;
			rr = _tmp;
			isPrint = _tmp$1;
			isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.$length || rr < (x = (i & ~1) >> 0, ((x < 0 || x >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
		}
		_tmp$3 = (r >>> 0);
		_tmp$4 = isPrint32;
		_tmp$5 = isNotPrint32;
		rr$1 = _tmp$3;
		isPrint$1 = _tmp$4;
		isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = (i$1 & ~1) >> 0, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - (65536) >> 0;
		j$1 = bsearch16(isNotPrint$1, (r << 16 >>> 16));
		return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === (r << 16 >>> 16)));
	};
	$pkg.IsPrint = IsPrint;
	isInGraphicList = function(r) {
		var $ptr, i, r, rr;
		if (r > 65535) {
			return false;
		}
		rr = (r << 16 >>> 16);
		i = bsearch16(isGraphic, rr);
		return i < isGraphic.$length && (rr === ((i < 0 || i >= isGraphic.$length) ? ($throwRuntimeError("index out of range"), undefined) : isGraphic.$array[isGraphic.$offset + i]));
	};
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "set", name: "set", pkg: "strconv", typ: $funcType([$String], [$Bool], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Assign", name: "Assign", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundDown", name: "RoundDown", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundUp", name: "RoundUp", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundedInteger", name: "RoundedInteger", pkg: "", typ: $funcType([], [$Uint64], false)}];
	ptrType$4.methods = [{prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "AssignComputeBounds", name: "AssignComputeBounds", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, ptrType$1], [extFloat, extFloat], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([extFloat], [], false)}, {prop: "AssignDecimal", name: "AssignDecimal", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, $Bool, ptrType$1], [$Bool], false)}, {prop: "frexp10", name: "frexp10", pkg: "strconv", typ: $funcType([], [$Int, $Int], false)}, {prop: "FixedDecimal", name: "FixedDecimal", pkg: "", typ: $funcType([ptrType$3, $Int], [$Bool], false)}, {prop: "ShortestDecimal", name: "ShortestDecimal", pkg: "", typ: $funcType([ptrType$3, ptrType$4, ptrType$4], [$Bool], false)}];
	NumError.init("", [{prop: "Func", name: "Func", exported: true, typ: $String, tag: ""}, {prop: "Num", name: "Num", exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", exported: true, typ: $error, tag: ""}]);
	decimal.init("strconv", [{prop: "d", name: "d", exported: false, typ: arrayType, tag: ""}, {prop: "nd", name: "nd", exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", exported: false, typ: $Bool, tag: ""}, {prop: "trunc", name: "trunc", exported: false, typ: $Bool, tag: ""}]);
	leftCheat.init("strconv", [{prop: "delta", name: "delta", exported: false, typ: $Int, tag: ""}, {prop: "cutoff", name: "cutoff", exported: false, typ: $String, tag: ""}]);
	extFloat.init("strconv", [{prop: "mant", name: "mant", exported: false, typ: $Uint64, tag: ""}, {prop: "exp", name: "exp", exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", exported: false, typ: $Bool, tag: ""}]);
	floatInfo.init("strconv", [{prop: "mantbits", name: "mantbits", exported: false, typ: $Uint, tag: ""}, {prop: "expbits", name: "expbits", exported: false, typ: $Uint, tag: ""}, {prop: "bias", name: "bias", exported: false, typ: $Int, tag: ""}]);
	decimalSlice.init("strconv", [{prop: "d", name: "d", exported: false, typ: sliceType$6, tag: ""}, {prop: "nd", name: "nd", exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		optimize = true;
		powtab = new sliceType([1, 3, 6, 9, 13, 16, 19, 23, 26]);
		float64pow10 = new sliceType$1([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+11, 1e+12, 1e+13, 1e+14, 1e+15, 1e+16, 1e+17, 1e+18, 1e+19, 1e+20, 1e+21, 1e+22]);
		float32pow10 = new sliceType$2([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10]);
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new sliceType$3([new leftCheat.ptr(0, ""), new leftCheat.ptr(1, "5"), new leftCheat.ptr(1, "25"), new leftCheat.ptr(1, "125"), new leftCheat.ptr(2, "625"), new leftCheat.ptr(2, "3125"), new leftCheat.ptr(2, "15625"), new leftCheat.ptr(3, "78125"), new leftCheat.ptr(3, "390625"), new leftCheat.ptr(3, "1953125"), new leftCheat.ptr(4, "9765625"), new leftCheat.ptr(4, "48828125"), new leftCheat.ptr(4, "244140625"), new leftCheat.ptr(4, "1220703125"), new leftCheat.ptr(5, "6103515625"), new leftCheat.ptr(5, "30517578125"), new leftCheat.ptr(5, "152587890625"), new leftCheat.ptr(6, "762939453125"), new leftCheat.ptr(6, "3814697265625"), new leftCheat.ptr(6, "19073486328125"), new leftCheat.ptr(7, "95367431640625"), new leftCheat.ptr(7, "476837158203125"), new leftCheat.ptr(7, "2384185791015625"), new leftCheat.ptr(7, "11920928955078125"), new leftCheat.ptr(8, "59604644775390625"), new leftCheat.ptr(8, "298023223876953125"), new leftCheat.ptr(8, "1490116119384765625"), new leftCheat.ptr(9, "7450580596923828125"), new leftCheat.ptr(9, "37252902984619140625"), new leftCheat.ptr(9, "186264514923095703125"), new leftCheat.ptr(10, "931322574615478515625"), new leftCheat.ptr(10, "4656612873077392578125"), new leftCheat.ptr(10, "23283064365386962890625"), new leftCheat.ptr(10, "116415321826934814453125"), new leftCheat.ptr(11, "582076609134674072265625"), new leftCheat.ptr(11, "2910383045673370361328125"), new leftCheat.ptr(11, "14551915228366851806640625"), new leftCheat.ptr(12, "72759576141834259033203125"), new leftCheat.ptr(12, "363797880709171295166015625"), new leftCheat.ptr(12, "1818989403545856475830078125"), new leftCheat.ptr(13, "9094947017729282379150390625"), new leftCheat.ptr(13, "45474735088646411895751953125"), new leftCheat.ptr(13, "227373675443232059478759765625"), new leftCheat.ptr(13, "1136868377216160297393798828125"), new leftCheat.ptr(14, "5684341886080801486968994140625"), new leftCheat.ptr(14, "28421709430404007434844970703125"), new leftCheat.ptr(14, "142108547152020037174224853515625"), new leftCheat.ptr(15, "710542735760100185871124267578125"), new leftCheat.ptr(15, "3552713678800500929355621337890625"), new leftCheat.ptr(15, "17763568394002504646778106689453125"), new leftCheat.ptr(16, "88817841970012523233890533447265625"), new leftCheat.ptr(16, "444089209850062616169452667236328125"), new leftCheat.ptr(16, "2220446049250313080847263336181640625"), new leftCheat.ptr(16, "11102230246251565404236316680908203125"), new leftCheat.ptr(17, "55511151231257827021181583404541015625"), new leftCheat.ptr(17, "277555756156289135105907917022705078125"), new leftCheat.ptr(17, "1387778780781445675529539585113525390625"), new leftCheat.ptr(18, "6938893903907228377647697925567626953125"), new leftCheat.ptr(18, "34694469519536141888238489627838134765625"), new leftCheat.ptr(18, "173472347597680709441192448139190673828125"), new leftCheat.ptr(19, "867361737988403547205962240695953369140625")]);
		smallPowersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(2147483648, 0), -63, false), new extFloat.ptr(new $Uint64(2684354560, 0), -60, false), new extFloat.ptr(new $Uint64(3355443200, 0), -57, false), new extFloat.ptr(new $Uint64(4194304000, 0), -54, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3276800000, 0), -47, false), new extFloat.ptr(new $Uint64(4096000000, 0), -44, false), new extFloat.ptr(new $Uint64(2560000000, 0), -40, false)]);
		powersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);
		uint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.ptr(23, 8, -127);
		float64info = new floatInfo.ptr(52, 11, -1023);
		isPrint16 = new sliceType$4([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2142, 2208, 2237, 2260, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2555, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2809, 2809, 2817, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3162, 3168, 3171, 3174, 3183, 3192, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3329, 3386, 3389, 3407, 3412, 3427, 3430, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5109, 5112, 5117, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6846, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7304, 7360, 7367, 7376, 7417, 7424, 7669, 7675, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8382, 8400, 8432, 8448, 8587, 8592, 9254, 9280, 9290, 9312, 11123, 11126, 11157, 11160, 11193, 11197, 11217, 11244, 11247, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11844, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12589, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40917, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42935, 42999, 43051, 43056, 43065, 43072, 43127, 43136, 43205, 43214, 43225, 43232, 43261, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43877, 43888, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new sliceType$4([173, 907, 909, 930, 1328, 1376, 1416, 1424, 1757, 2111, 2229, 2274, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3141, 3145, 3159, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7415, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 9215, 11209, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 42927, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new sliceType$5([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65947, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66352, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67808, 67829, 67835, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68028, 68047, 68050, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 68736, 68786, 68800, 68850, 68858, 68863, 69216, 69246, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 69968, 70006, 70016, 70093, 70096, 70132, 70144, 70206, 70272, 70313, 70320, 70378, 70384, 70393, 70400, 70412, 70415, 70416, 70419, 70457, 70460, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70656, 70749, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71133, 71168, 71236, 71248, 71257, 71264, 71276, 71296, 71351, 71360, 71369, 71424, 71449, 71453, 71467, 71472, 71487, 71840, 71922, 71935, 71935, 72384, 72440, 72704, 72773, 72784, 72812, 72816, 72847, 72850, 72886, 73728, 74649, 74752, 74868, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93952, 94020, 94032, 94078, 94095, 94111, 94176, 94176, 94208, 100332, 100352, 101106, 110592, 110593, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119272, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 121483, 121499, 121519, 122880, 122904, 122907, 122922, 124928, 125124, 125127, 125142, 125184, 125258, 125264, 125273, 125278, 125279, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127244, 127248, 127339, 127344, 127404, 127462, 127490, 127504, 127547, 127552, 127560, 127568, 127569, 127744, 128722, 128736, 128748, 128752, 128758, 128768, 128883, 128896, 128980, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 129296, 129319, 129328, 129328, 129331, 129355, 129360, 129374, 129408, 129425, 129472, 129472, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 194560, 195101, 917760, 917999]);
		isNotPrint32 = new sliceType$4([12, 39, 59, 62, 399, 926, 2057, 2102, 2134, 2291, 2564, 2580, 2584, 4285, 4405, 4576, 4626, 4743, 4745, 4750, 4766, 4868, 4905, 4913, 4916, 5210, 5212, 7177, 7223, 7336, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 55968, 57351, 57378, 57381, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 61743, 63775, 63807]);
		isGraphic = new sliceType$4([160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288]);
		shifts = $toNativeArray($kindUint, [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, $init, errors, js, math, runtime, strconv, sync, uncommonType, funcType, name, nameData, mapIter, Type, Kind, tflag, rtype, typeAlg, method, ChanDir, arrayType, chanType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, nameOff, typeOff, textOff, StructField, StructTag, fieldScan, Value, flag, ValueError, sliceType$1, ptrType$1, sliceType$2, sliceType$3, mapType$1, structType$1, sliceType$5, ptrType$3, funcType$1, sliceType$6, ptrType$4, ptrType$5, sliceType$7, sliceType$8, ptrType$6, ptrType$7, structType$8, sliceType$9, sliceType$10, sliceType$11, sliceType$12, ptrType$8, ptrType$9, sliceType$14, sliceType$15, ptrType$10, sliceType$16, ptrType$16, sliceType$18, ptrType$17, funcType$3, funcType$4, funcType$5, arrayType$12, ptrType$18, initialized, uncommonTypeMap, nameMap, nameOffList, typeOffList, callHelper, jsObjectPtr, selectHelper, kindNames, methodCache, uint8Type, init, jsType, reflectType, setKindType, newName, newNameOff, newTypeOff, internalStr, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, FuncOf, SliceOf, Zero, unsafe_New, makeInt, typedmemmove, makemap, keyFor, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapiternext, maplen, cvtDirect, Copy, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, chanrecv, chansend, Swapper, PtrTo, implements$1, directlyAssignable, haveIdenticalType, haveIdenticalUnderlyingType, toType, ifaceIndir, overflowFloat32, typesMustMatch, MakeMap, New, convertOp, makeFloat, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	math = $packages["math"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", true, "reflect", false, function(pkgPath_, mcount_, _$2_, moff_, _$4_, _methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pkgPath = 0;
			this.mcount = 0;
			this._$2 = 0;
			this.moff = 0;
			this._$4 = 0;
			this._methods = sliceType$3.nil;
			return;
		}
		this.pkgPath = pkgPath_;
		this.mcount = mcount_;
		this._$2 = _$2_;
		this.moff = moff_;
		this._$4 = _$4_;
		this._methods = _methods_;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", true, "reflect", false, function(rtype_, inCount_, outCount_, _in_, _out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.inCount = 0;
			this.outCount = 0;
			this._in = sliceType$2.nil;
			this._out = sliceType$2.nil;
			return;
		}
		this.rtype = rtype_;
		this.inCount = inCount_;
		this.outCount = outCount_;
		this._in = _in_;
		this._out = _out_;
	});
	name = $pkg.name = $newType(0, $kindStruct, "reflect.name", true, "reflect", false, function(bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bytes = ptrType$5.nil;
			return;
		}
		this.bytes = bytes_;
	});
	nameData = $pkg.nameData = $newType(0, $kindStruct, "reflect.nameData", true, "reflect", false, function(name_, tag_, pkgPath_, exported_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.tag = "";
			this.pkgPath = "";
			this.exported = false;
			return;
		}
		this.name = name_;
		this.tag = tag_;
		this.pkgPath = pkgPath_;
		this.exported = exported_;
	});
	mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflect.mapIter", true, "reflect", false, function(t_, m_, keys_, i_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = $ifaceNil;
			this.m = null;
			this.keys = null;
			this.i = 0;
			return;
		}
		this.t = t_;
		this.m = m_;
		this.keys = keys_;
		this.i = i_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", true, "reflect", true, null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", true, "reflect", true, null);
	tflag = $pkg.tflag = $newType(1, $kindUint8, "reflect.tflag", true, "reflect", false, null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", true, "reflect", false, function(size_, ptrdata_, hash_, tflag_, align_, fieldAlign_, kind_, alg_, gcdata_, str_, ptrToThis_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.ptrdata = 0;
			this.hash = 0;
			this.tflag = 0;
			this.align = 0;
			this.fieldAlign = 0;
			this.kind = 0;
			this.alg = ptrType$4.nil;
			this.gcdata = ptrType$5.nil;
			this.str = 0;
			this.ptrToThis = 0;
			return;
		}
		this.size = size_;
		this.ptrdata = ptrdata_;
		this.hash = hash_;
		this.tflag = tflag_;
		this.align = align_;
		this.fieldAlign = fieldAlign_;
		this.kind = kind_;
		this.alg = alg_;
		this.gcdata = gcdata_;
		this.str = str_;
		this.ptrToThis = ptrToThis_;
	});
	typeAlg = $pkg.typeAlg = $newType(0, $kindStruct, "reflect.typeAlg", true, "reflect", false, function(hash_, equal_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.hash = $throwNilPointerError;
			this.equal = $throwNilPointerError;
			return;
		}
		this.hash = hash_;
		this.equal = equal_;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflect.method", true, "reflect", false, function(name_, mtyp_, ifn_, tfn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.mtyp = 0;
			this.ifn = 0;
			this.tfn = 0;
			return;
		}
		this.name = name_;
		this.mtyp = mtyp_;
		this.ifn = ifn_;
		this.tfn = tfn_;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", true, "reflect", true, null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", true, "reflect", false, function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.slice = ptrType$1.nil;
			this.len = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.slice = slice_;
		this.len = len_;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", true, "reflect", false, function(rtype_, elem_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.dir = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.dir = dir_;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", true, "reflect", false, function(name_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.typ = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", true, "reflect", false, function(rtype_, pkgPath_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$5.nil);
			this.methods = sliceType$7.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.methods = methods_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", true, "reflect", false, function(rtype_, key_, elem_, bucket_, hmap_, keysize_, indirectkey_, valuesize_, indirectvalue_, bucketsize_, reflexivekey_, needkeyupdate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.key = ptrType$1.nil;
			this.elem = ptrType$1.nil;
			this.bucket = ptrType$1.nil;
			this.hmap = ptrType$1.nil;
			this.keysize = 0;
			this.indirectkey = 0;
			this.valuesize = 0;
			this.indirectvalue = 0;
			this.bucketsize = 0;
			this.reflexivekey = false;
			this.needkeyupdate = false;
			return;
		}
		this.rtype = rtype_;
		this.key = key_;
		this.elem = elem_;
		this.bucket = bucket_;
		this.hmap = hmap_;
		this.keysize = keysize_;
		this.indirectkey = indirectkey_;
		this.valuesize = valuesize_;
		this.indirectvalue = indirectvalue_;
		this.bucketsize = bucketsize_;
		this.reflexivekey = reflexivekey_;
		this.needkeyupdate = needkeyupdate_;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", true, "reflect", false, function(name_, typ_, offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = new name.ptr(ptrType$5.nil);
			this.typ = ptrType$1.nil;
			this.offset = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
		this.offset = offset_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", true, "reflect", false, function(rtype_, pkgPath_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$5.nil);
			this.fields = sliceType$8.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.fields = fields_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", true, "reflect", true, function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Func = new Value.ptr(ptrType$1.nil, 0, 0);
			this.Index = 0;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Func = Func_;
		this.Index = Index_;
	});
	nameOff = $pkg.nameOff = $newType(4, $kindInt32, "reflect.nameOff", true, "reflect", false, null);
	typeOff = $pkg.typeOff = $newType(4, $kindInt32, "reflect.typeOff", true, "reflect", false, null);
	textOff = $pkg.textOff = $newType(4, $kindInt32, "reflect.textOff", true, "reflect", false, null);
	StructField = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", true, "reflect", true, function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Tag = "";
			this.Offset = 0;
			this.Index = sliceType$14.nil;
			this.Anonymous = false;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Tag = Tag_;
		this.Offset = Offset_;
		this.Index = Index_;
		this.Anonymous = Anonymous_;
	});
	StructTag = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", true, "reflect", true, null);
	fieldScan = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", true, "reflect", false, function(typ_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$10.nil;
			this.index = sliceType$14.nil;
			return;
		}
		this.typ = typ_;
		this.index = index_;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", true, "reflect", true, function(typ_, ptr_, flag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$1.nil;
			this.ptr = 0;
			this.flag = 0;
			return;
		}
		this.typ = typ_;
		this.ptr = ptr_;
		this.flag = flag_;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", true, "reflect", false, null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", true, "reflect", true, function(Method_, Kind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Kind = 0;
			return;
		}
		this.Method = Method_;
		this.Kind = Kind_;
	});
	sliceType$1 = $sliceType(name);
	ptrType$1 = $ptrType(rtype);
	sliceType$2 = $sliceType(ptrType$1);
	sliceType$3 = $sliceType(method);
	mapType$1 = $mapType(ptrType$1, sliceType$3);
	structType$1 = $structType("reflect", [{prop: "RWMutex", name: "", exported: true, typ: sync.RWMutex, tag: ""}, {prop: "m", name: "m", exported: false, typ: mapType$1, tag: ""}]);
	sliceType$5 = $sliceType($emptyInterface);
	ptrType$3 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$5], [ptrType$3], true);
	sliceType$6 = $sliceType($String);
	ptrType$4 = $ptrType(typeAlg);
	ptrType$5 = $ptrType($Uint8);
	sliceType$7 = $sliceType(imethod);
	sliceType$8 = $sliceType(structField);
	ptrType$6 = $ptrType(uncommonType);
	ptrType$7 = $ptrType(nameData);
	structType$8 = $structType("reflect", [{prop: "str", name: "str", exported: false, typ: $String, tag: ""}]);
	sliceType$9 = $sliceType(ptrType$3);
	sliceType$10 = $sliceType(Value);
	sliceType$11 = $sliceType(Type);
	sliceType$12 = $sliceType(sliceType$9);
	ptrType$8 = $ptrType(interfaceType);
	ptrType$9 = $ptrType(imethod);
	sliceType$14 = $sliceType($Int);
	sliceType$15 = $sliceType(fieldScan);
	ptrType$10 = $ptrType(structType);
	sliceType$16 = $sliceType($Uint8);
	ptrType$16 = $ptrType($UnsafePointer);
	sliceType$18 = $sliceType($Int32);
	ptrType$17 = $ptrType(funcType);
	funcType$3 = $funcType([$String], [$Bool], false);
	funcType$4 = $funcType([$UnsafePointer, $Uintptr], [$Uintptr], false);
	funcType$5 = $funcType([$UnsafePointer, $UnsafePointer], [$Bool], false);
	arrayType$12 = $arrayType($Uintptr, 2);
	ptrType$18 = $ptrType(ValueError);
	init = function() {
		var $ptr, used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; used = $f.used; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		used = (function(i) {
			var $ptr, i;
		});
		$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$1 = new uncommonType.ptr(0, 0, 0, 0, 0, sliceType$3.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$2 = new method.ptr(0, 0, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$3 = new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$4 = new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$5 = new funcType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), 0, 0, sliceType$2.nil, sliceType$2.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), new name.ptr(ptrType$5.nil), sliceType$7.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$7 = new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$8 = new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$9 = new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$10 = new structType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), new name.ptr(ptrType$5.nil), sliceType$8.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$11 = new imethod.ptr(0, 0), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$12 = new structField.ptr(new name.ptr(ptrType$5.nil), ptrType$1.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.$ptr = $ptr; $f.used = used; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	jsType = function(typ) {
		var $ptr, typ;
		return typ.jsType;
	};
	reflectType = function(typ) {
		var $ptr, _1, _i, _i$1, _i$2, _i$3, _i$4, _key, _ref, _ref$1, _ref$2, _ref$3, _ref$4, dir, f, fields, i, i$1, i$2, i$3, i$4, imethods, in$1, m, m$1, methodSet, methods, out, outCount, params, reflectFields, reflectMethods, results, rt, typ, ut;
		if (typ.reflectType === undefined) {
			rt = new rtype.ptr((($parseInt(typ.size) >> 0) >>> 0), 0, 0, 0, 0, 0, (($parseInt(typ.kind) >> 0) << 24 >>> 24), ptrType$4.nil, ptrType$5.nil, newNameOff($clone(newName(internalStr(typ.string), "", "", !!(typ.exported)), name)), 0);
			rt.jsType = typ;
			typ.reflectType = rt;
			methodSet = $methodSet(typ);
			if (!(($parseInt(methodSet.length) === 0)) || !!(typ.named)) {
				rt.tflag = (rt.tflag | (1)) >>> 0;
				if (!!(typ.named)) {
					rt.tflag = (rt.tflag | (4)) >>> 0;
				}
				reflectMethods = $makeSlice(sliceType$3, $parseInt(methodSet.length));
				_ref = reflectMethods;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					m = methodSet[i];
					method.copy(((i < 0 || i >= reflectMethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectMethods.$array[reflectMethods.$offset + i]), new method.ptr(newNameOff($clone(newName(internalStr(m.name), "", "", internalStr(m.pkg) === ""), name)), newTypeOff(reflectType(m.typ)), 0, 0));
					_i++;
				}
				ut = new uncommonType.ptr(newNameOff($clone(newName(internalStr(typ.pkg), "", "", false), name)), ($parseInt(methodSet.length) << 16 >>> 16), 0, 0, 0, reflectMethods);
				_key = rt; (uncommonTypeMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: ut };
				ut.jsType = typ;
			}
			_1 = rt.Kind();
			if (_1 === (17)) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), reflectType(typ.elem), ptrType$1.nil, (($parseInt(typ.len) >> 0) >>> 0)));
			} else if (_1 === (18)) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), reflectType(typ.elem), (dir >>> 0)));
			} else if (_1 === (19)) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$2, $parseInt(params.length));
				_ref$1 = in$1;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					i$1 = _i$1;
					((i$1 < 0 || i$1 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i$1] = reflectType(params[i$1]));
					_i$1++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$2, $parseInt(results.length));
				_ref$2 = out;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$2 = _i$2;
					((i$2 < 0 || i$2 >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i$2] = reflectType(results[i$2]));
					_i$2++;
				}
				outCount = ($parseInt(results.length) << 16 >>> 16);
				if (!!(typ.variadic)) {
					outCount = (outCount | (32768)) >>> 0;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), ($parseInt(params.length) << 16 >>> 16), outCount, in$1, out));
			} else if (_1 === (20)) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$7, $parseInt(methods.length));
				_ref$3 = imethods;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$3.$length)) { break; }
					i$3 = _i$3;
					m$1 = methods[i$3];
					imethod.copy(((i$3 < 0 || i$3 >= imethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : imethods.$array[imethods.$offset + i$3]), new imethod.ptr(newNameOff($clone(newName(internalStr(m$1.name), "", "", internalStr(m$1.pkg) === ""), name)), newTypeOff(reflectType(m$1.typ))));
					_i$3++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), new name.ptr(ptrType$5.nil), imethods));
			} else if (_1 === (21)) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false));
			} else if (_1 === (22)) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (23)) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (25)) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$8, $parseInt(fields.length));
				_ref$4 = reflectFields;
				_i$4 = 0;
				while (true) {
					if (!(_i$4 < _ref$4.$length)) { break; }
					i$4 = _i$4;
					f = fields[i$4];
					structField.copy(((i$4 < 0 || i$4 >= reflectFields.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectFields.$array[reflectFields.$offset + i$4]), new structField.ptr($clone(newName(internalStr(f.name), internalStr(f.tag), "", !!(f.exported)), name), reflectType(f.typ), (i$4 >>> 0)));
					_i$4++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkgPath), "", "", false), name), reflectFields));
			}
		}
		return typ.reflectType;
	};
	setKindType = function(rt, kindType) {
		var $ptr, kindType, rt;
		rt.kindType = kindType;
		kindType.rtype = rt;
	};
	uncommonType.ptr.prototype.methods = function() {
		var $ptr, t;
		t = this;
		return t._methods;
	};
	uncommonType.prototype.methods = function() { return this.$val.methods(); };
	rtype.ptr.prototype.uncommon = function() {
		var $ptr, _entry, t;
		t = this;
		return (_entry = uncommonTypeMap[ptrType$1.keyFor(t)], _entry !== undefined ? _entry.v : ptrType$6.nil);
	};
	rtype.prototype.uncommon = function() { return this.$val.uncommon(); };
	funcType.ptr.prototype.in$ = function() {
		var $ptr, t;
		t = this;
		return t._in;
	};
	funcType.prototype.in$ = function() { return this.$val.in$(); };
	funcType.ptr.prototype.out = function() {
		var $ptr, t;
		t = this;
		return t._out;
	};
	funcType.prototype.out = function() { return this.$val.out(); };
	name.ptr.prototype.name = function() {
		var $ptr, _entry, n, s;
		s = "";
		n = this;
		s = (_entry = nameMap[ptrType$5.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$7.nil).name;
		return s;
	};
	name.prototype.name = function() { return this.$val.name(); };
	name.ptr.prototype.tag = function() {
		var $ptr, _entry, n, s;
		s = "";
		n = this;
		s = (_entry = nameMap[ptrType$5.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$7.nil).tag;
		return s;
	};
	name.prototype.tag = function() { return this.$val.tag(); };
	name.ptr.prototype.pkgPath = function() {
		var $ptr, _entry, n;
		n = this;
		return (_entry = nameMap[ptrType$5.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$7.nil).pkgPath;
	};
	name.prototype.pkgPath = function() { return this.$val.pkgPath(); };
	name.ptr.prototype.isExported = function() {
		var $ptr, _entry, n;
		n = this;
		return (_entry = nameMap[ptrType$5.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$7.nil).exported;
	};
	name.prototype.isExported = function() { return this.$val.isExported(); };
	newName = function(n, tag, pkgPath, exported) {
		var $ptr, _key, b, exported, n, pkgPath, tag;
		b = $newDataPointer(0, ptrType$5);
		_key = b; (nameMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$5.keyFor(_key)] = { k: _key, v: new nameData.ptr(n, tag, pkgPath, exported) };
		return new name.ptr(b);
	};
	rtype.ptr.prototype.nameOff = function(off) {
		var $ptr, off, t, x;
		t = this;
		return (x = (off >> 0), ((x < 0 || x >= nameOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : nameOffList.$array[nameOffList.$offset + x]));
	};
	rtype.prototype.nameOff = function(off) { return this.$val.nameOff(off); };
	newNameOff = function(n) {
		var $ptr, i, n;
		i = nameOffList.$length;
		nameOffList = $append(nameOffList, n);
		return (i >> 0);
	};
	rtype.ptr.prototype.typeOff = function(off) {
		var $ptr, off, t, x;
		t = this;
		return (x = (off >> 0), ((x < 0 || x >= typeOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : typeOffList.$array[typeOffList.$offset + x]));
	};
	rtype.prototype.typeOff = function(off) { return this.$val.typeOff(off); };
	newTypeOff = function(t) {
		var $ptr, i, t;
		i = typeOffList.$length;
		typeOffList = $append(typeOffList, t);
		return (i >> 0);
	};
	internalStr = function(strObj) {
		var $ptr, c, strObj;
		c = new structType$8.ptr("");
		c.str = strObj;
		return c.str;
	};
	isWrapped = function(typ) {
		var $ptr, typ;
		return !!(jsType(typ).wrapped);
	};
	copyStruct = function(dst, src, typ) {
		var $ptr, dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; _v$1 = $f._v$1; fl = $f.fl; rt = $f.rt; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rt = _r;
		_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
		_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 25; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3 === 22; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return new Value.ptr(rt, v, (fl | (_r$4 >>> 0)) >>> 0);
		/* } */ case 3:
		_r$5 = t.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(rt, $newDataPointer(v, jsType(rt.ptrTo())), (((fl | (_r$5 >>> 0)) >>> 0) | 128) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeValue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f._v$1 = _v$1; $f.fl = fl; $f.rt = rt; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	MakeSlice = function(typ, len, cap) {
		var $ptr, _r, _r$1, cap, len, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; len = $f.len; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		typ = [typ];
		_r = typ[0].Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 23))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 23))) { */ case 1:
			$panic(new $String("reflect.MakeSlice of non-slice type"));
		/* } */ case 2:
		if (len < 0) {
			$panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			$panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			$panic(new $String("reflect.MakeSlice: len > cap"));
		}
		_r$1 = makeValue(typ[0], $makeSlice(jsType(typ[0]), len, cap, (function(typ) { return function $b() {
			var $ptr, _r$1, _r$2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$1 = typ[0].Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = jsType(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2.zero();
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.$s = $s; $f.$r = $r; return $f;
		}; })(typ)), 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeSlice }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.len = len; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeSlice = MakeSlice;
	TypeOf = function(i) {
		var $ptr, i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	$pkg.TypeOf = TypeOf;
	ValueOf = function(i) {
		var $ptr, _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(i, $ifaceNil)) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ValueOf }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ValueOf = ValueOf;
	FuncOf = function(in$1, out, variadic) {
		var $ptr, _i, _i$1, _r, _ref, _ref$1, _v, _v$1, i, i$1, in$1, jsIn, jsOut, out, v, v$1, variadic, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; _v$1 = $f._v$1; i = $f.i; i$1 = $f.i$1; in$1 = $f.in$1; jsIn = $f.jsIn; jsOut = $f.jsOut; out = $f.out; v = $f.v; v$1 = $f.v$1; variadic = $f.variadic; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!(variadic)) { _v = false; $s = 3; continue s; }
		if (in$1.$length === 0) { _v$1 = true; $s = 4; continue s; }
		_r = (x = in$1.$length - 1 >> 0, ((x < 0 || x >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x])).Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v$1 = !((_r === 23)); case 4:
		_v = _v$1; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect.FuncOf: last arg of variadic func must be slice"));
		/* } */ case 2:
		jsIn = $makeSlice(sliceType$9, in$1.$length);
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= jsIn.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsIn.$array[jsIn.$offset + i] = jsType(v));
			_i++;
		}
		jsOut = $makeSlice(sliceType$9, out.$length);
		_ref$1 = out;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			((i$1 < 0 || i$1 >= jsOut.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsOut.$array[jsOut.$offset + i$1] = jsType(v$1));
			_i$1++;
		}
		$s = -1; return reflectType($funcType($externalize(jsIn, sliceType$9), $externalize(jsOut, sliceType$9), $externalize(variadic, $Bool)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncOf }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f._v$1 = _v$1; $f.i = i; $f.i$1 = i$1; $f.in$1 = in$1; $f.jsIn = jsIn; $f.jsOut = jsOut; $f.out = out; $f.v = v; $f.v$1 = v$1; $f.variadic = variadic; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FuncOf = FuncOf;
	rtype.ptr.prototype.ptrTo = function() {
		var $ptr, t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = function(t) {
		var $ptr, t;
		return reflectType($sliceType(jsType(t)));
	};
	$pkg.SliceOf = SliceOf;
	Zero = function(typ) {
		var $ptr, _r, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeValue(typ, jsType(typ).zero(), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Zero }; } $f.$ptr = $ptr; $f._r = _r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Zero = Zero;
	unsafe_New = function(typ) {
		var $ptr, _1, typ;
		_1 = typ.Kind();
		if (_1 === (25)) {
			return new (jsType(typ).ptr)();
		} else if (_1 === (17)) {
			return jsType(typ).zero();
		} else {
			return $newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo()));
		}
	};
	makeInt = function(f, bits, t) {
		var $ptr, _1, _r, bits, f, ptr, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; bits = $f.bits; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.Kind();
		if (_1 === (3)) {
			ptr.$set((bits.$low << 24 >> 24));
		} else if (_1 === (4)) {
			ptr.$set((bits.$low << 16 >> 16));
		} else if ((_1 === (2)) || (_1 === (5))) {
			ptr.$set((bits.$low >> 0));
		} else if (_1 === (6)) {
			ptr.$set(new $Int64(bits.$high, bits.$low));
		} else if (_1 === (8)) {
			ptr.$set((bits.$low << 24 >>> 24));
		} else if (_1 === (9)) {
			ptr.$set((bits.$low << 16 >>> 16));
		} else if ((_1 === (7)) || (_1 === (10)) || (_1 === (12))) {
			ptr.$set((bits.$low >>> 0));
		} else if (_1 === (11)) {
			ptr.$set(bits);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeInt }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.bits = bits; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	typedmemmove = function(t, dst, src) {
		var $ptr, dst, src, t;
		dst.$set(src.$get());
	};
	makemap = function(t) {
		var $ptr, m, t;
		m = 0;
		m = new ($global.Object)();
		return m;
	};
	keyFor = function(t, key) {
		var $ptr, k, key, kv, t;
		kv = key;
		if (!(kv.$get === undefined)) {
			kv = kv.$get();
		}
		k = $internalize(jsType(t.Key()).keyFor(kv), $String);
		return [kv, k];
	};
	mapaccess = function(t, m, key) {
		var $ptr, _tuple, entry, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		entry = m[$externalize(k, $String)];
		if (entry === undefined) {
			return 0;
		}
		return $newDataPointer(entry.v, jsType(PtrTo(t.Elem())));
	};
	mapassign = function(t, m, key, val) {
		var $ptr, _r, _tuple, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; entry = $f.entry; et = $f.et; jsVal = $f.jsVal; k = $f.k; key = $f.key; kv = $f.kv; m = $f.m; newVal = $f.newVal; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = keyFor(t, key);
		kv = _tuple[0];
		k = _tuple[1];
		jsVal = val.$get();
		et = t.Elem();
		_r = et.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 25) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 25) { */ case 1:
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		/* } */ case 2:
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m[$externalize(k, $String)] = entry;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapassign }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.entry = entry; $f.et = et; $f.jsVal = jsVal; $f.k = k; $f.key = key; $f.kv = kv; $f.m = m; $f.newVal = newVal; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapdelete = function(t, m, key) {
		var $ptr, _tuple, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		delete m[$externalize(k, $String)];
	};
	mapiterinit = function(t, m) {
		var $ptr, m, t;
		return new mapIter.ptr(t, m, $keys(m), 0);
	};
	mapiterkey = function(it) {
		var $ptr, _r, _r$1, _r$2, it, iter, k, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; iter = $f.iter; k = $f.k; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		iter = it;
		k = iter.keys[iter.i];
		_r = iter.t.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return $newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, _r$2);
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapiterkey }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.iter = iter; $f.k = k; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapiternext = function(it) {
		var $ptr, it, iter;
		iter = it;
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		var $ptr, m;
		return $parseInt($keys(m).length);
	};
	cvtDirect = function(v, typ) {
		var $ptr, _1, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, k, slice, srcVal, typ, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; k = $f.k; slice = $f.slice; srcVal = $f.srcVal; typ = $f.typ; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		srcVal = $clone(v, Value).object();
		/* */ if (srcVal === jsType(v.typ).nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (srcVal === jsType(v.typ).nil) { */ case 1:
			_r = makeValue(typ, jsType(typ).nil, v.flag); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		val = null;
			_r$1 = typ.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			k = _r$1;
			_1 = k;
			/* */ if (_1 === (23)) { $s = 6; continue; }
			/* */ if (_1 === (22)) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (23)) { */ case 6:
				slice = new (jsType(typ))(srcVal.$array);
				slice.$offset = srcVal.$offset;
				slice.$length = srcVal.$length;
				slice.$capacity = srcVal.$capacity;
				val = $newDataPointer(slice, jsType(PtrTo(typ)));
				$s = 11; continue;
			/* } else if (_1 === (22)) { */ case 7:
				_r$2 = typ.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 25) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_r$3 === 25) { */ case 12:
					_r$4 = typ.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if ($interfaceIsEqual(_r$4, v.typ.Elem())) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if ($interfaceIsEqual(_r$4, v.typ.Elem())) { */ case 16:
						val = srcVal;
						/* break; */ $s = 4; continue;
					/* } */ case 17:
					val = new (jsType(typ))();
					_arg = val;
					_arg$1 = srcVal;
					_r$5 = typ.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg$2 = _r$5;
					$r = copyStruct(_arg, _arg$1, _arg$2); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 4; continue;
				/* } */ case 13:
				val = new (jsType(typ))(srcVal.$get, srcVal.$set);
				$s = 11; continue;
			/* } else if (_1 === (25)) { */ case 8:
				val = new (jsType(typ).ptr)();
				copyStruct(val, srcVal, typ);
				$s = 11; continue;
			/* } else if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24))) { */ case 9:
				val = v.ptr;
				$s = 11; continue;
			/* } else { */ case 10:
				$panic(new ValueError.ptr("reflect.Convert", k));
			/* } */ case 11:
		case 4:
		_r$6 = typ.common(); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = typ.Kind(); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$6, val, (((v.flag & 224) >>> 0) | (_r$7 >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtDirect }; } $f.$ptr = $ptr; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.k = k; $f.slice = slice; $f.srcVal = srcVal; $f.typ = typ; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Copy = function(dst, src) {
		var $ptr, dk, dst, dstVal, sk, src, srcVal, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; dk = $f.dk; dst = $f.dst; dstVal = $f.dstVal; sk = $f.sk; src = $f.src; srcVal = $f.srcVal; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dk = new flag(dst.flag).kind();
		if (!((dk === 17)) && !((dk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", dk));
		}
		if (dk === 17) {
			new flag(dst.flag).mustBeAssignable();
		}
		new flag(dst.flag).mustBeExported();
		sk = new flag(src.flag).kind();
		if (!((sk === 17)) && !((sk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", sk));
		}
		new flag(src.flag).mustBeExported();
		$r = typesMustMatch("reflect.Copy", dst.typ.Elem(), src.typ.Elem()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		dstVal = $clone(dst, Value).object();
		if (dk === 17) {
			dstVal = new (jsType(SliceOf(dst.typ.Elem())))(dstVal);
		}
		srcVal = $clone(src, Value).object();
		if (sk === 17) {
			srcVal = new (jsType(SliceOf(src.typ.Elem())))(srcVal);
		}
		$s = -1; return $parseInt($copySlice(dstVal, srcVal)) >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Copy }; } $f.$ptr = $ptr; $f.dk = dk; $f.dst = dst; $f.dstVal = dstVal; $f.sk = sk; $f.src = src; $f.srcVal = srcVal; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Copy = Copy;
	methodReceiver = function(op, v, i) {
		var $ptr, _$38, fn, i, m, m$1, op, prop, rcvr, t, tt, ut, v, x, x$1;
		_$38 = ptrType$1.nil;
		t = ptrType$1.nil;
		fn = 0;
		prop = "";
		if (v.typ.Kind() === 20) {
			tt = v.typ.kindType;
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if (!$clone(tt.rtype.nameOff(m.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = tt.rtype.typeOff(m.typ);
			prop = $clone(tt.rtype.nameOff(m.name), name).name();
		} else {
			ut = v.typ.uncommon();
			if (ut === ptrType$6.nil || (i >>> 0) >= (ut.mcount >>> 0)) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = $clone((x$1 = ut.methods(), ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])), method);
			if (!$clone(v.typ.nameOff(m$1.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = v.typ.typeOff(m$1.mtyp);
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		}
		rcvr = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = rcvr[$externalize(prop, $String)];
		return [_$38, t, fn];
	};
	valueInterface = function(v, safe) {
		var $ptr, _r, safe, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; safe = $f.safe; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 96) >>> 0) === 0))) {
			$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Interface", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		if (isWrapped(v.typ)) {
			$s = -1; return new (jsType(v.typ))($clone(v, Value).object());
		}
		$s = -1; return $clone(v, Value).object();
		/* */ } return; } if ($f === undefined) { $f = { $blk: valueInterface }; } $f.$ptr = $ptr; $f._r = _r; $f.safe = safe; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ifaceE2I = function(t, src, dst) {
		var $ptr, dst, src, t;
		dst.$set(src);
	};
	methodName = function() {
		var $ptr;
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var $ptr, _r, _tuple, fn, fv, op, rcvr, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; fn = $f.fn; fv = $f.fv; op = $f.op; rcvr = $f.rcvr; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fn = [fn];
		rcvr = [rcvr];
		if (((v.flag & 512) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_tuple = methodReceiver(op, $clone(v, Value), (v.flag >> 0) >> 10 >> 0);
		fn[0] = _tuple[2];
		rcvr[0] = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr[0] = new (jsType(v.typ))(rcvr[0]);
		}
		fv = js.MakeFunc((function(fn, rcvr) { return function(this$1, arguments$1) {
			var $ptr, arguments$1, this$1;
			return new $jsObjectPtr(fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$9)));
		}; })(fn, rcvr));
		_r = $clone(v, Value).Type().common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r, fv, (((v.flag & 96) >>> 0) | 19) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeMethodValue }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.fn = fn; $f.fv = fv; $f.op = op; $f.rcvr = rcvr; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.ptr.prototype.pointers = function() {
		var $ptr, _1, t;
		t = this;
		_1 = t.Kind();
		if ((_1 === (22)) || (_1 === (21)) || (_1 === (18)) || (_1 === (19)) || (_1 === (25)) || (_1 === (17))) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.Comparable = function() {
		var $ptr, _1, _r, _r$1, _r$2, i, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; i = $f.i; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
			_1 = t.Kind();
			/* */ if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { $s = 2; continue; }
			/* */ if (_1 === (17)) { $s = 3; continue; }
			/* */ if (_1 === (25)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { */ case 2:
				$s = -1; return false;
			/* } else if (_1 === (17)) { */ case 3:
				_r = t.Elem().Comparable(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (25)) { */ case 4:
				i = 0;
				/* while (true) { */ case 7:
					/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 8; continue; }
					_r$1 = t.Field(i); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = _r$1.Type.Comparable(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (!_r$2) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!_r$2) { */ case 9:
						$s = -1; return false;
					/* } */ case 10:
					i = i + (1) >> 0;
				/* } */ $s = 7; continue; case 8:
			/* } */ case 5:
		case 1:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Comparable }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.i = i; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	rtype.ptr.prototype.Method = function(i) {
		var $ptr, _i, _i$1, _r, _r$1, _ref, _ref$1, arg, fl, fn, ft, i, in$1, m, methods, mt, mtyp, out, p, pname, prop, ret, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; arg = $f.arg; fl = $f.fl; fn = $f.fn; ft = $f.ft; i = $f.i; in$1 = $f.in$1; m = $f.m; methods = $f.methods; mt = $f.mt; mtyp = $f.mtyp; out = $f.out; p = $f.p; pname = $f.pname; prop = $f.prop; ret = $f.ret; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prop = [prop];
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			Method.copy(m, tt.Method(i));
			$s = -1; return m;
		}
		_r = t.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		methods = _r;
		if (i < 0 || i >= methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = $clone(((i < 0 || i >= methods.$length) ? ($throwRuntimeError("index out of range"), undefined) : methods.$array[methods.$offset + i]), method);
		pname = $clone(t.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		fl = 19;
		mtyp = t.typeOff(p.mtyp);
		ft = mtyp.kindType;
		in$1 = $makeSlice(sliceType$11, 0, (1 + ft.in$().$length >> 0));
		in$1 = $append(in$1, t);
		_ref = ft.in$();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			in$1 = $append(in$1, arg);
			_i++;
		}
		out = $makeSlice(sliceType$11, 0, ft.out().$length);
		_ref$1 = ft.out();
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			ret = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			out = $append(out, ret);
			_i$1++;
		}
		_r$1 = FuncOf(in$1, out, ft.rtype.IsVariadic()); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		mt = _r$1;
		m.Type = mt;
		prop[0] = $internalize($methodSet(t.jsType)[i].prop, $String);
		fn = js.MakeFunc((function(prop) { return function(this$1, arguments$1) {
			var $ptr, arguments$1, rcvr, this$1;
			rcvr = (0 >= arguments$1.$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1.$array[arguments$1.$offset + 0]);
			return new $jsObjectPtr(rcvr[$externalize(prop[0], $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$9)));
		}; })(prop));
		m.Func = new Value.ptr($assertType(mt, ptrType$1), fn, fl);
		m.Index = i;
		Method.copy(m, m);
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Method }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.arg = arg; $f.fl = fl; $f.fn = fn; $f.ft = ft; $f.i = i; $f.in$1 = in$1; $f.m = m; $f.methods = methods; $f.mt = mt; $f.mtyp = mtyp; $f.out = out; $f.p = p; $f.pname = pname; $f.prop = prop; $f.ret = ret; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.object = function() {
		var $ptr, _1, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				switch (0) { default:
					_1 = v.typ.Kind();
					if ((_1 === (11)) || (_1 === (6))) {
						val = new (jsType(v.typ))(val.$high, val.$low);
					} else if ((_1 === (15)) || (_1 === (16))) {
						val = new (jsType(v.typ))(val.$real, val.$imag);
					} else if (_1 === (23)) {
						if (val === val.constructor.nil) {
							val = jsType(v.typ).nil;
							break;
						}
						newVal = new (jsType(v.typ))(val.$array);
						newVal.$offset = val.$offset;
						newVal.$length = val.$length;
						newVal.$capacity = val.$capacity;
						val = newVal;
					}
				}
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.call = function(op, in$1) {
		var $ptr, _1, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; arg = $f.arg; argsArray = $f.argsArray; elem = $f.elem; fn = $f.fn; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; in$1 = $f.in$1; isSlice = $f.isSlice; m = $f.m; n = $f.n; nin = $f.nin; nout = $f.nout; op = $f.op; origIn = $f.origIn; rcvr = $f.rcvr; results = $f.results; ret = $f.ret; slice = $f.slice; t = $f.t; targ = $f.targ; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; xt = $f.xt; xt$1 = $f.xt$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		t = ptrType$1.nil;
		fn = 0;
		rcvr = null;
		if (!((((v.flag & 512) >>> 0) === 0))) {
			_tuple = methodReceiver(op, $clone(v, Value), (v.flag >> 0) >> 10 >> 0);
			t = _tuple[1];
			fn = _tuple[2];
			rcvr = $clone(v, Value).object();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
		} else {
			t = v.typ;
			fn = $clone(v, Value).object();
			rcvr = undefined;
		}
		if (fn === 0) {
			$panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.NumIn();
		if (isSlice) {
			if (!t.IsVariadic()) {
				$panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.$length > n) {
				$panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.IsVariadic()) {
				n = n - (1) >> 0;
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.IsVariadic() && in$1.$length > n) {
				$panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if ($clone(x, Value).Kind() === 0) {
				$panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_tmp = $clone(((i < 0 || i >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i]), Value).Type();
			_tmp$1 = t.In(i);
			xt = _tmp;
			targ = _tmp$1;
			_r = xt.AssignableTo(targ); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				_r$1 = xt.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = targ.String(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$panic(new $String("reflect: " + op + " using " + _r$1 + " as type " + _r$2));
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!isSlice && t.IsVariadic()) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!isSlice && t.IsVariadic()) { */ case 8:
			m = in$1.$length - n >> 0;
			_r$3 = MakeSlice(t.In(n), m, m); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			slice = _r$3;
			_r$4 = t.In(n).Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			elem = _r$4;
			i$1 = 0;
			/* while (true) { */ case 12:
				/* if (!(i$1 < m)) { break; } */ if(!(i$1 < m)) { $s = 13; continue; }
				x$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x$1]));
				xt$1 = $clone(x$2, Value).Type();
				_r$5 = xt$1.AssignableTo(elem); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (!_r$5) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (!_r$5) { */ case 14:
					_r$6 = xt$1.String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = elem.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$panic(new $String("reflect: cannot use " + _r$6 + " as type " + _r$7 + " in " + op));
				/* } */ case 15:
				_r$8 = $clone(slice, Value).Index(i$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$r = $clone(_r$8, Value).Set($clone(x$2, Value)); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 12; continue; case 13:
			origIn = in$1;
			in$1 = $makeSlice(sliceType$10, (n + 1 >> 0));
			$copySlice($subslice(in$1, 0, n), origIn);
			((n < 0 || n >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + n] = slice);
		/* } */ case 9:
		nin = in$1.$length;
		if (!((nin === t.NumIn()))) {
			$panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.NumOut();
		argsArray = new ($global.Array)(t.NumIn());
		_ref$1 = in$1;
		_i$1 = 0;
		/* while (true) { */ case 21:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 22; continue; }
			i$2 = _i$1;
			arg = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			_arg = t.In(i$2);
			_r$9 = t.In(i$2).common(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_arg$1 = _r$9;
			_arg$2 = 0;
			_r$10 = $clone(arg, Value).assignTo("reflect.Value.Call", _arg$1, _arg$2); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = $clone(_r$10, Value).object(); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_arg$3 = _r$11;
			_r$12 = unwrapJsObject(_arg, _arg$3); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			argsArray[i$2] = _r$12;
			_i$1++;
		/* } */ $s = 21; continue; case 22:
		_r$13 = callHelper(new sliceType$5([new $jsObjectPtr(fn), new $jsObjectPtr(rcvr), new $jsObjectPtr(argsArray)])); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		results = _r$13;
			_1 = nout;
			/* */ if (_1 === (0)) { $s = 29; continue; }
			/* */ if (_1 === (1)) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (_1 === (0)) { */ case 29:
				$s = -1; return sliceType$10.nil;
			/* } else if (_1 === (1)) { */ case 30:
				_r$14 = makeValue(t.Out(0), wrapJsObject(t.Out(0), results), 0); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				$s = -1; return new sliceType$10([$clone(_r$14, Value)]);
			/* } else { */ case 31:
				ret = $makeSlice(sliceType$10, nout);
				_ref$2 = ret;
				_i$2 = 0;
				/* while (true) { */ case 34:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 35; continue; }
					i$3 = _i$2;
					_r$15 = makeValue(t.Out(i$3), wrapJsObject(t.Out(i$3), results[i$3]), 0); /* */ $s = 36; case 36: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					((i$3 < 0 || i$3 >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + i$3] = _r$15);
					_i$2++;
				/* } */ $s = 34; continue; case 35:
				$s = -1; return ret;
			/* } */ case 32:
		case 28:
		$s = -1; return sliceType$10.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.call }; } $f.$ptr = $ptr; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.arg = arg; $f.argsArray = argsArray; $f.elem = elem; $f.fn = fn; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.in$1 = in$1; $f.isSlice = isSlice; $f.m = m; $f.n = n; $f.nin = nin; $f.nout = nout; $f.op = op; $f.origIn = origIn; $f.rcvr = rcvr; $f.results = results; $f.ret = ret; $f.slice = slice; $f.t = t; $f.targ = targ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.xt = xt; $f.xt$1 = xt$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.ptr.prototype.Cap = function() {
		var $ptr, _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (17)) {
			return v.typ.Len();
		} else if ((_1 === (18)) || (_1 === (23))) {
			return $parseInt($clone(v, Value).object().$capacity) >> 0;
		}
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	wrapJsObject = function(typ, val) {
		var $ptr, typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return new (jsType(jsObjectPtr))(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var $ptr, typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return val.object;
		}
		return val;
	};
	Value.ptr.prototype.Elem = function() {
		var $ptr, _1, _r, fl, k, tt, typ, v, val, val$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; fl = $f.fl; k = $f.k; tt = $f.tt; typ = $f.typ; v = $f.v; val = $f.val; val$1 = $f.val$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (20)) { $s = 2; continue; }
			/* */ if (_1 === (22)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (20)) { */ case 2:
				val = $clone(v, Value).object();
				if (val === $ifaceNil) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				typ = reflectType(val.constructor);
				_r = makeValue(typ, val.$val, (v.flag & 96) >>> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (22)) { */ case 3:
				if ($clone(v, Value).IsNil()) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				val$1 = $clone(v, Value).object();
				tt = v.typ.kindType;
				fl = (((((v.flag & 96) >>> 0) | 128) >>> 0) | 256) >>> 0;
				fl = (fl | ((tt.elem.Kind() >>> 0))) >>> 0;
				$s = -1; return new Value.ptr(tt.elem, wrapJsObject(tt.elem, val$1), fl);
			/* } else { */ case 4:
				$panic(new ValueError.ptr("reflect.Value.Elem", k));
			/* } */ case 5:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Elem }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.fl = fl; $f.k = k; $f.tt = tt; $f.typ = typ; $f.v = v; $f.val = val; $f.val$1 = val$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.Field = function(i) {
		var $ptr, _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; field = $f.field; fl = $f.fl; i = $f.i; jsTag = $f.jsTag; o = $f.o; prop = $f.prop; s = $f.s; tag = $f.tag; tt = $f.tt; typ = $f.typ; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsTag = [jsTag];
		prop = [prop];
		s = [s];
		typ = [typ];
		v = this;
		if (!((new flag(v.flag).kind() === 25))) {
			$panic(new ValueError.ptr("reflect.Value.Field", new flag(v.flag).kind()));
		}
		tt = v.typ.kindType;
		if ((i >>> 0) >= (tt.fields.$length >>> 0)) {
			$panic(new $String("reflect: Field index out of range"));
		}
		prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		typ[0] = field.typ;
		fl = (((v.flag & 416) >>> 0) | (typ[0].Kind() >>> 0)) >>> 0;
		if (!$clone(field.name, name).isExported()) {
			if ($clone(field.name, name).name() === "") {
				fl = (fl | (64)) >>> 0;
			} else {
				fl = (fl | (32)) >>> 0;
			}
		}
		tag = $clone((x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).name, name).tag();
		/* */ if (!(tag === "") && !((i === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tag === "") && !((i === 0))) { */ case 1:
			jsTag[0] = getJsTag(tag);
			/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(jsTag[0] === "")) { */ case 3:
				/* while (true) { */ case 5:
					o = [o];
					_r = $clone(v, Value).Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (v.typ === jsObjectPtr) { */ case 8:
						o[0] = $clone(v, Value).object().object;
						$s = -1; return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							var $ptr;
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var $ptr, x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ)), fl);
					/* } */ case 9:
					/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (v.typ.Kind() === 22) { */ case 10:
						_r$1 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						v = _r$1;
					/* } */ case 11:
				/* } */ $s = 5; continue; case 6:
			/* } */ case 4:
		/* } */ case 2:
		s[0] = v.ptr;
		/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
			$s = -1; return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				var $ptr;
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var $ptr, x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ)), fl);
		/* } */ case 14:
		_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.field = field; $f.fl = fl; $f.i = i; $f.jsTag = jsTag; $f.o = o; $f.prop = prop; $f.s = s; $f.tag = tag; $f.tt = tt; $f.typ = typ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	getJsTag = function(tag) {
		var $ptr, _tuple, i, name$1, qvalue, tag, value;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = $substring(tag, 0, i);
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = $substring(tag, 0, (i + 1 >> 0));
			tag = $substring(tag, (i + 1 >> 0));
			if (name$1 === "js") {
				_tuple = strconv.Unquote(qvalue);
				value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	Value.ptr.prototype.Index = function(i) {
		var $ptr, _1, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; a = $f.a; a$1 = $f.a$1; c = $f.c; fl = $f.fl; fl$1 = $f.fl$1; fl$2 = $f.fl$2; i = $f.i; k = $f.k; s = $f.s; str = $f.str; tt = $f.tt; tt$1 = $f.tt$1; typ = $f.typ; typ$1 = $f.typ$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		a$1 = [a$1];
		c = [c];
		i = [i];
		typ = [typ];
		typ$1 = [typ$1];
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				tt = v.typ.kindType;
				if (i[0] < 0 || i[0] > (tt.len >> 0)) {
					$panic(new $String("reflect: array index out of range"));
				}
				typ[0] = tt.elem;
				fl = (v.flag & 480) >>> 0;
				fl = (fl | ((typ[0].Kind() >>> 0))) >>> 0;
				a[0] = v.ptr;
				/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 7:
					$s = -1; return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						var $ptr;
						return wrapJsObject(typ[0], a[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var $ptr, x;
						a[0][i[0]] = unwrapJsObject(typ[0], x);
					}; })(a, a$1, c, i, typ, typ$1)), fl);
				/* } */ case 8:
				_r = makeValue(typ[0], wrapJsObject(typ[0], a[0][i[0]]), fl); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (23)) { */ case 3:
				s = $clone(v, Value).object();
				if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
					$panic(new $String("reflect: slice index out of range"));
				}
				tt$1 = v.typ.kindType;
				typ$1[0] = tt$1.elem;
				fl$1 = (384 | ((v.flag & 96) >>> 0)) >>> 0;
				fl$1 = (fl$1 | ((typ$1[0].Kind() >>> 0))) >>> 0;
				i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
				a$1[0] = s.$array;
				/* */ if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 10:
					$s = -1; return new Value.ptr(typ$1[0], new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						var $ptr;
						return wrapJsObject(typ$1[0], a$1[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var $ptr, x;
						a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
					}; })(a, a$1, c, i, typ, typ$1)), fl$1);
				/* } */ case 11:
				_r$1 = makeValue(typ$1[0], wrapJsObject(typ$1[0], a$1[0][i[0]]), fl$1); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } else if (_1 === (24)) { */ case 4:
				str = v.ptr.$get();
				if (i[0] < 0 || i[0] >= str.length) {
					$panic(new $String("reflect: string index out of range"));
				}
				fl$2 = (((v.flag & 96) >>> 0) | 8) >>> 0;
				c[0] = str.charCodeAt(i[0]);
				$s = -1; return new Value.ptr(uint8Type, (c.$ptr || (c.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c))), (fl$2 | 128) >>> 0);
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Index", k));
			/* } */ case 6:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Index }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.a$1 = a$1; $f.c = c; $f.fl = fl; $f.fl$1 = fl$1; $f.fl$2 = fl$2; $f.i = i; $f.k = k; $f.s = s; $f.str = str; $f.tt = tt; $f.tt$1 = tt$1; $f.typ = typ; $f.typ$1 = typ$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.InterfaceData = function() {
		var $ptr, v;
		v = this;
		$panic(errors.New("InterfaceData is not supported by GopherJS"));
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsNil = function() {
		var $ptr, _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (22)) || (_1 === (23))) {
			return $clone(v, Value).object() === jsType(v.typ).nil;
		} else if (_1 === (18)) {
			return $clone(v, Value).object() === $chanNil;
		} else if (_1 === (19)) {
			return $clone(v, Value).object() === $throwNilPointerError;
		} else if (_1 === (21)) {
			return $clone(v, Value).object() === false;
		} else if (_1 === (20)) {
			return $clone(v, Value).object() === $ifaceNil;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var $ptr, _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (17)) || (_1 === (24))) {
			return $parseInt($clone(v, Value).object().length);
		} else if (_1 === (23)) {
			return $parseInt($clone(v, Value).object().$length) >> 0;
		} else if (_1 === (18)) {
			return $parseInt($clone(v, Value).object().$buffer.length) >> 0;
		} else if (_1 === (21)) {
			return $parseInt($keys($clone(v, Value).object()).length);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var $ptr, _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (18)) || (_1 === (21)) || (_1 === (22)) || (_1 === (26))) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object();
		} else if (_1 === (19)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return 1;
		} else if (_1 === (23)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var $ptr, _1, _r, _r$1, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		/* */ if (!((((v.flag & 128) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((v.flag & 128) >>> 0) === 0))) { */ case 2:
				_1 = v.typ.Kind();
				/* */ if (_1 === (17)) { $s = 5; continue; }
				/* */ if (_1 === (20)) { $s = 6; continue; }
				/* */ if (_1 === (25)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (17)) { */ case 5:
					jsType(v.typ).copy(v.ptr, x.ptr);
					$s = 9; continue;
				/* } else if (_1 === (20)) { */ case 6:
					_r$1 = valueInterface($clone(x, Value), false); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					v.ptr.$set(_r$1);
					$s = 9; continue;
				/* } else if (_1 === (25)) { */ case 7:
					copyStruct(v.ptr, x.ptr, v.typ);
					$s = 9; continue;
				/* } else { */ case 8:
					v.ptr.$set($clone(x, Value).object());
				/* } */ case 9:
			case 4:
			$s = -1; return;
		/* } */ case 3:
		v.ptr = x.ptr;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.SetBytes = function(x) {
		var $ptr, _r, _r$1, _v, slice, typedSlice, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; slice = $f.slice; typedSlice = $f.typedSlice; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		/* } */ case 2:
		slice = x;
		if (!(v.typ.Name() === "")) { _v = true; $s = 6; continue s; }
		_r$1 = v.typ.Elem().Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = !(_r$1 === ""); case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			typedSlice = new (jsType(v.typ))(slice.$array);
			typedSlice.$offset = slice.$offset;
			typedSlice.$length = slice.$length;
			typedSlice.$capacity = slice.$capacity;
			slice = typedSlice;
		/* } */ case 5:
		v.ptr.$set(slice);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.slice = slice; $f.typedSlice = typedSlice; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var $ptr, n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var $ptr, n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var $ptr, _1, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; i = $f.i; j = $f.j; kind = $f.kind; s = $f.s; str = $f.str; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
			kind = new flag(v.flag).kind();
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				if (((v.flag & 256) >>> 0) === 0) {
					$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
				}
				tt = v.typ.kindType;
				cap = (tt.len >> 0);
				typ = SliceOf(tt.elem);
				s = new (jsType(typ))($clone(v, Value).object());
				$s = 6; continue;
			/* } else if (_1 === (23)) { */ case 3:
				typ = v.typ;
				s = $clone(v, Value).object();
				cap = $parseInt(s.$capacity) >> 0;
				$s = 6; continue;
			/* } else if (_1 === (24)) { */ case 4:
				str = v.ptr.$get();
				if (i < 0 || j < i || j > str.length) {
					$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
				}
				_r = ValueOf(new $String($substring(str, i, j))); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Slice", kind));
			/* } */ case 6:
		case 1:
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		_r$1 = makeValue(typ, $subslice(s, i, j), (v.flag & 96) >>> 0); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.i = i; $f.j = j; $f.kind = kind; $f.s = s; $f.str = str; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var $ptr, _1, _r, cap, i, j, k, kind, s, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; cap = $f.cap; i = $f.i; j = $f.j; k = $f.k; kind = $f.kind; s = $f.s; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_1 = kind;
		if (_1 === (17)) {
			if (((v.flag & 256) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = v.typ.kindType;
			cap = (tt.len >> 0);
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))($clone(v, Value).object());
		} else if (_1 === (23)) {
			typ = v.typ;
			s = $clone(v, Value).object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		_r = makeValue(typ, $subslice(s, i, j, k), (v.flag & 96) >>> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice3 }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.cap = cap; $f.i = i; $f.j = j; $f.k = k; $f.kind = kind; $f.s = s; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var $ptr, v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close($clone(v, Value).object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	chanrecv = function(t, ch, nb, val) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; ch = $f.ch; comms = $f.comms; nb = $f.nb; received = $f.received; recvRes = $f.recvRes; selectRes = $f.selectRes; selected = $f.selected; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		received = false;
		comms = new sliceType$12([new sliceType$9([ch])]);
		if (nb) {
			comms = $append(comms, new sliceType$9([]));
		}
		_r = selectHelper(new sliceType$5([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			_tmp = false;
			_tmp$1 = false;
			selected = _tmp;
			received = _tmp$1;
			$s = -1; return [selected, received];
		}
		recvRes = selectRes[1];
		val.$set(recvRes[0]);
		_tmp$2 = true;
		_tmp$3 = !!(recvRes[1]);
		selected = _tmp$2;
		received = _tmp$3;
		$s = -1; return [selected, received];
		/* */ } return; } if ($f === undefined) { $f = { $blk: chanrecv }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.received = received; $f.recvRes = recvRes; $f.selectRes = selectRes; $f.selected = selected; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	chansend = function(t, ch, val, nb) {
		var $ptr, _r, ch, comms, nb, selectRes, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ch = $f.ch; comms = $f.comms; nb = $f.nb; selectRes = $f.selectRes; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		comms = new sliceType$12([new sliceType$9([ch, val.$get()])]);
		if (nb) {
			comms = $append(comms, new sliceType$9([]));
		}
		_r = selectHelper(new sliceType$5([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			$s = -1; return false;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: chansend }; } $f.$ptr = $ptr; $f._r = _r; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.selectRes = selectRes; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Swapper = function(slice) {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, slice, tmp, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; slice = $f.slice; tmp = $f.tmp; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		tmp = [tmp];
		v = [v];
		_r = ValueOf(slice); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		v[0] = _r;
		if (!(($clone(v[0], Value).Kind() === 23))) {
			$panic(new ValueError.ptr("Swapper", $clone(v[0], Value).Kind()));
		}
			_1 = $clone(v[0], Value).Len();
			if (_1 === (0)) {
				$s = -1; return (function(tmp, v) { return function(i, j) {
					var $ptr, i, j;
					$panic(new $String("reflect: slice index out of range"));
				}; })(tmp, v);
			} else if (_1 === (1)) {
				$s = -1; return (function(tmp, v) { return function(i, j) {
					var $ptr, i, j;
					if (!((i === 0)) || !((j === 0))) {
						$panic(new $String("reflect: slice index out of range"));
					}
				}; })(tmp, v);
			}
		case 2:
		_r$1 = $clone(v[0], Value).Type().Elem(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = New(_r$1); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = $clone(_r$2, Value).Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		tmp[0] = _r$3;
		$s = -1; return (function(tmp, v) { return function $b(i, j) {
			var $ptr, _r$4, _r$5, i, j, v1, v2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _r$5 = $f._r$5; i = $f.i; j = $f.j; v1 = $f.v1; v2 = $f.v2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$4 = $clone(v[0], Value).Index(i); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			v1 = _r$4;
			_r$5 = $clone(v[0], Value).Index(j); /* */ $s = 2; case 2: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			v2 = _r$5;
			$r = $clone(tmp[0], Value).Set($clone(v1, Value)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = $clone(v1, Value).Set($clone(v2, Value)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = $clone(v2, Value).Set($clone(tmp[0], Value)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.i = i; $f.j = j; $f.v1 = v1; $f.v2 = v2; $f.$s = $s; $f.$r = $r; return $f;
		}; })(tmp, v);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Swapper }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.slice = slice; $f.tmp = tmp; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Swapper = Swapper;
	Kind.prototype.String = function() {
		var $ptr, k;
		k = this.$val;
		if ((k >> 0) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : kindNames.$array[kindNames.$offset + k]);
		}
		return "kind" + strconv.Itoa((k >> 0));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	rtype.ptr.prototype.String = function() {
		var $ptr, s, t;
		t = this;
		s = $clone(t.nameOff(t.str), name).name();
		if (!((((t.tflag & 2) >>> 0) === 0))) {
			return $substring(s, 1);
		}
		return s;
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var $ptr, t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Bits = function() {
		var $ptr, k, t;
		t = this;
		if (t === ptrType$1.nil) {
			$panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return $imul((t.size >> 0), 8);
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.ptr.prototype.Align = function() {
		var $ptr, t;
		t = this;
		return (t.align >> 0);
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.ptr.prototype.FieldAlign = function() {
		var $ptr, t;
		t = this;
		return (t.fieldAlign >> 0);
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.ptr.prototype.Kind = function() {
		var $ptr, t;
		t = this;
		return (((t.kind & 31) >>> 0) >>> 0);
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.common = function() {
		var $ptr, t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	rtype.ptr.prototype.exportedMethods = function() {
		var $ptr, _entry, _i, _i$1, _key, _ref, _ref$1, _tuple, allExported, allm, found, m, m$1, methods, name$1, name$2, t, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; allExported = $f.allExported; allm = $f.allm; found = $f.found; m = $f.m; m$1 = $f.m$1; methods = $f.methods; name$1 = $f.name$1; name$2 = $f.name$2; t = $f.t; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		$r = methodCache.RWMutex.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple = (_entry = methodCache.m[ptrType$1.keyFor(t)], _entry !== undefined ? [_entry.v, true] : [sliceType$3.nil, false]);
		methods = _tuple[0];
		found = _tuple[1];
		$r = methodCache.RWMutex.RUnlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (found) {
			$s = -1; return methods;
		}
		ut = t.uncommon();
		if (ut === ptrType$6.nil) {
			$s = -1; return sliceType$3.nil;
		}
		allm = ut.methods();
		allExported = true;
		_ref = allm;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			m = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), method);
			name$1 = $clone(t.nameOff(m.name), name);
			if (!$clone(name$1, name).isExported()) {
				allExported = false;
				break;
			}
			_i++;
		}
		if (allExported) {
			methods = allm;
		} else {
			methods = $makeSlice(sliceType$3, 0, allm.$length);
			_ref$1 = allm;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				m$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), method);
				name$2 = $clone(t.nameOff(m$1.name), name);
				if ($clone(name$2, name).isExported()) {
					methods = $append(methods, m$1);
				}
				_i$1++;
			}
			methods = $subslice(methods, 0, methods.$length, methods.$length);
		}
		$r = methodCache.RWMutex.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (methodCache.m === false) {
			methodCache.m = {};
		}
		_key = t; (methodCache.m || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: methods };
		$r = methodCache.RWMutex.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return methods;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.exportedMethods }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.allExported = allExported; $f.allm = allm; $f.found = found; $f.m = m; $f.m$1 = m$1; $f.methods = methods; $f.name$1 = name$1; $f.name$2 = name$2; $f.t = t; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.NumMethod = function() {
		var $ptr, _r, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			$s = -1; return tt.NumMethod();
		}
		if (((t.tflag & 1) >>> 0) === 0) {
			$s = -1; return 0;
		}
		_r = t.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r.$length;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.NumMethod }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.MethodByName = function(name$1) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, i, m, name$1, ok, p, pname, t, tt, ut, utmethods, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; i = $f.i; m = $f.m; name$1 = $f.name$1; ok = $f.ok; p = $f.p; pname = $f.pname; t = $f.t; tt = $f.tt; ut = $f.ut; utmethods = $f.utmethods; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			_tuple = tt.MethodByName(name$1);
			Method.copy(m, _tuple[0]);
			ok = _tuple[1];
			$s = -1; return [m, ok];
		}
		ut = t.uncommon();
		if (ut === ptrType$6.nil) {
			_tmp = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
			_tmp$1 = false;
			Method.copy(m, _tmp);
			ok = _tmp$1;
			$s = -1; return [m, ok];
		}
		utmethods = ut.methods();
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < (ut.mcount >> 0))) { break; } */ if(!(i < (ut.mcount >> 0))) { $s = 2; continue; }
			p = $clone(((i < 0 || i >= utmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : utmethods.$array[utmethods.$offset + i]), method);
			pname = $clone(t.nameOff(p.name), name);
			/* */ if ($clone(pname, name).isExported() && $clone(pname, name).name() === name$1) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($clone(pname, name).isExported() && $clone(pname, name).name() === name$1) { */ case 3:
				_r = t.Method(i); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tmp$2 = $clone(_r, Method);
				_tmp$3 = true;
				Method.copy(m, _tmp$2);
				ok = _tmp$3;
				$s = -1; return [m, ok];
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_tmp$4 = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		_tmp$5 = false;
		Method.copy(m, _tmp$4);
		ok = _tmp$5;
		$s = -1; return [m, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.MethodByName }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.i = i; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.p = p; $f.pname = pname; $f.t = t; $f.tt = tt; $f.ut = ut; $f.utmethods = utmethods; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	rtype.ptr.prototype.PkgPath = function() {
		var $ptr, t, ut;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		ut = t.uncommon();
		if (ut === ptrType$6.nil) {
			return "";
		}
		return $clone(t.nameOff(ut.pkgPath), name).name();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.Name = function() {
		var $ptr, i, s, t;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		s = t.String();
		i = s.length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (s.charCodeAt(i) === 46) {
				break;
			}
			i = i - (1) >> 0;
		}
		return $substring(s, (i + 1 >> 0));
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.ChanDir = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: ChanDir of non-chan type"));
		}
		tt = t.kindType;
		return (tt.dir >> 0);
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = t.kindType;
		return !((((tt.outCount & 32768) >>> 0) === 0));
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Elem = function() {
		var $ptr, _1, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_1 = t.Kind();
		if (_1 === (17)) {
			tt = t.kindType;
			return toType(tt.elem);
		} else if (_1 === (18)) {
			tt$1 = t.kindType;
			return toType(tt$1.elem);
		} else if (_1 === (21)) {
			tt$2 = t.kindType;
			return toType(tt$2.elem);
		} else if (_1 === (22)) {
			tt$3 = t.kindType;
			return toType(tt$3.elem);
		} else if (_1 === (23)) {
			tt$4 = t.kindType;
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.Field = function(i) {
		var $ptr, _r, i, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _r, index, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; index = $f.index; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByIndex of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByIndex(index); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.index = index; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.ptr.prototype.FieldByName = function(name$1) {
		var $ptr, _r, name$1, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name$1 = $f.name$1; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByName of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._r = _r; $f.name$1 = name$1; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	rtype.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _r, match, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; match = $f.match; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByNameFunc of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.match = match; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.ptr.prototype.In = function(i) {
		var $ptr, i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type"));
		}
		tt = t.kindType;
		return toType((x = tt.in$(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Key = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type"));
		}
		tt = t.kindType;
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.Len = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type"));
		}
		tt = t.kindType;
		return (tt.len >> 0);
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumField = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = t.kindType;
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.NumIn = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = t.kindType;
		return (tt.inCount >> 0);
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = t.kindType;
		return tt.out().$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var $ptr, i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type"));
		}
		tt = t.kindType;
		return toType((x = tt.out(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var $ptr, _1, d;
		d = this.$val;
		_1 = d;
		if (_1 === (2)) {
			return "chan<-";
		} else if (_1 === (1)) {
			return "<-chan";
		} else if (_1 === (3)) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa((d >> 0));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.ptr.prototype.Method = function(i) {
		var $ptr, i, m, p, pname, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (i < 0 || i >= t.methods.$length) {
			return m;
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		pname = $clone(t.rtype.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		if (!$clone(pname, name).isExported()) {
			m.PkgPath = $clone(pname, name).pkgPath();
			if (m.PkgPath === "") {
				m.PkgPath = $clone(t.pkgPath, name).name();
			}
		}
		m.Type = toType(t.rtype.typeOff(p.typ));
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var $ptr, t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.ptr.prototype.MethodByName = function(name$1) {
		var $ptr, _i, _ref, _tmp, _tmp$1, i, m, name$1, ok, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t === ptrType$8.nil) {
			return [m, ok];
		}
		p = ptrType$9.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if ($clone(t.rtype.nameOff(p.name), name).name() === name$1) {
				_tmp = $clone(t.Method(i), Method);
				_tmp$1 = true;
				Method.copy(m, _tmp);
				ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	StructTag.prototype.Get = function(key) {
		var $ptr, _tuple, key, tag, v;
		tag = this.$val;
		_tuple = new StructTag(tag).Lookup(key);
		v = _tuple[0];
		return v;
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	StructTag.prototype.Lookup = function(key) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, i, key, name$1, ok, qvalue, tag, value, value$1;
		value = "";
		ok = false;
		tag = this.$val;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && tag.charCodeAt(i) > 32 && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)) && !((tag.charCodeAt(i) === 127)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i === 0) || (i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = $substring(tag, 0, i);
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = $substring(tag, 0, (i + 1 >> 0));
			tag = $substring(tag, (i + 1 >> 0));
			if (key === name$1) {
				_tuple = strconv.Unquote(qvalue);
				value$1 = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					break;
				}
				_tmp = value$1;
				_tmp$1 = true;
				value = _tmp;
				ok = _tmp$1;
				return [value, ok];
			}
		}
		_tmp$2 = "";
		_tmp$3 = false;
		value = _tmp$2;
		ok = _tmp$3;
		return [value, ok];
	};
	$ptrType(StructTag).prototype.Lookup = function(key) { return new StructTag(this.$get()).Lookup(key); };
	structType.ptr.prototype.Field = function(i) {
		var $ptr, _r, _r$1, _r$2, f, i, name$1, p, t, t$1, tag, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; i = $f.i; name$1 = $f.name$1; p = $f.p; t = $f.t; t$1 = $f.t$1; tag = $f.tag; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$14.nil, false);
		t = this;
		if (i < 0 || i >= t.fields.$length) {
			$panic(new $String("reflect: Field index out of bounds"));
		}
		p = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		f.Type = toType(p.typ);
		name$1 = $clone(p.name, name).name();
		/* */ if (!(name$1 === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(name$1 === "")) { */ case 1:
			f.Name = name$1;
			$s = 3; continue;
		/* } else { */ case 2:
			t$1 = f.Type;
			_r = t$1.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === 22) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r === 22) { */ case 4:
				_r$1 = t$1.Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				t$1 = _r$1;
			/* } */ case 5:
			_r$2 = t$1.Name(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			f.Name = _r$2;
			f.Anonymous = true;
		/* } */ case 3:
		if (!$clone(p.name, name).isExported()) {
			f.PkgPath = $clone(p.name, name).pkgPath();
			if (f.PkgPath === "") {
				f.PkgPath = $clone(t.pkgPath, name).name();
			}
		}
		tag = $clone(p.name, name).tag();
		if (!(tag === "")) {
			f.Tag = tag;
		}
		f.Offset = p.offset;
		f.Index = new sliceType$14([i]);
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.i = i; $f.name$1 = name$1; $f.p = p; $f.t = t; $f.t$1 = t$1; $f.tag = tag; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _v = $f._v; f = $f.f; ft = $f.ft; i = $f.i; index = $f.index; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$14.nil, false);
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				ft = f.Type;
				_r = ft.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				if (!(_r === 22)) { _v = false; $s = 7; continue s; }
				_r$1 = ft.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 25; case 7:
				/* */ if (_v) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_v) { */ case 5:
					_r$3 = ft.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ft = _r$3;
				/* } */ case 6:
				f.Type = ft;
			/* } */ case 4:
			_r$4 = f.Type.Field(x); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			StructField.copy(f, _r$4);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._v = _v; $f.f = f; $f.ft = ft; $f.i = i; $f.index = index; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _r, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, name$1, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; count = $f.count; current = $f.current; f = $f.f; fname = $f.fname; i = $f.i; index = $f.index; match = $f.match; name$1 = $f.name$1; next = $f.next; nextCount = $f.nextCount; ntyp = $f.ntyp; ok = $f.ok; result = $f.result; scan = $f.scan; styp = $f.styp; t = $f.t; t$1 = $f.t$1; visited = $f.visited; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$14.nil, false);
		ok = false;
		t = this;
		current = new sliceType$15([]);
		next = new sliceType$15([new fieldScan.ptr(t, sliceType$14.nil)]);
		nextCount = false;
		visited = $makeMap(ptrType$10.keyFor, []);
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next;
			_tmp$1 = $subslice(current, 0, 0);
			current = _tmp;
			next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				scan = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), fieldScan);
				t$1 = scan.typ;
				/* */ if ((_entry = visited[ptrType$10.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((_entry = visited[ptrType$10.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { */ case 5:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				_key = t$1; (visited || $throwRuntimeError("assignment to entry in nil map"))[ptrType$10.keyFor(_key)] = { k: _key, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				/* while (true) { */ case 7:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }
					i = _i$1;
					f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
					fname = "";
					ntyp = ptrType$1.nil;
					name$1 = $clone(f.name, name).name();
					/* */ if (!(name$1 === "")) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!(name$1 === "")) { */ case 9:
						fname = name$1;
						$s = 11; continue;
					/* } else { */ case 10:
						ntyp = f.typ;
						/* */ if (ntyp.Kind() === 22) { $s = 12; continue; }
						/* */ $s = 13; continue;
						/* if (ntyp.Kind() === 22) { */ case 12:
							_r = ntyp.Elem().common(); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							ntyp = _r;
						/* } */ case 13:
						fname = ntyp.Name();
					/* } */ case 11:
					_r$1 = match(fname); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (_r$1) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (_r$1) { */ case 15:
						if ((_entry$1 = count[ptrType$10.keyFor(t$1)], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$14.nil, false);
							_tmp$3 = false;
							StructField.copy(result, _tmp$2);
							ok = _tmp$3;
							$s = -1; return [result, ok];
						}
						_r$2 = t$1.Field(i); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						StructField.copy(result, _r$2);
						result.Index = sliceType$14.nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						/* continue; */ $s = 7; continue;
					/* } */ case 16:
					if (ok || ntyp === ptrType$1.nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					styp = ntyp.kindType;
					if ((_entry$2 = nextCount[ptrType$10.keyFor(styp)], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$1 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$10.keyFor(_key$1)] = { k: _key$1, v: 2 };
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					if (nextCount === false) {
						nextCount = $makeMap(ptrType$10.keyFor, []);
					}
					_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$10.keyFor(_key$2)] = { k: _key$2, v: 1 };
					if ((_entry$3 = count[ptrType$10.keyFor(t$1)], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$3 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$10.keyFor(_key$3)] = { k: _key$3, v: 2 };
					}
					index = sliceType$14.nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.ptr(styp, index));
					_i$1++;
				/* } */ $s = 7; continue; case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
			if (ok) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [result, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.count = count; $f.current = current; $f.f = f; $f.fname = fname; $f.i = i; $f.index = index; $f.match = match; $f.name$1 = name$1; $f.next = next; $f.nextCount = nextCount; $f.ntyp = ntyp; $f.ok = ok; $f.result = result; $f.scan = scan; $f.styp = styp; $f.t = t; $f.t$1 = t$1; $f.visited = visited; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.ptr.prototype.FieldByName = function(name$1) {
		var $ptr, _i, _r, _r$1, _ref, _tmp, _tmp$1, _tuple, f, hasAnon, i, name$1, present, t, tf, tfname, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; hasAnon = $f.hasAnon; i = $f.i; name$1 = $f.name$1; present = $f.present; t = $f.t; tf = $f.tf; tfname = $f.tfname; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name$1 = [name$1];
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$14.nil, false);
		present = false;
		t = this;
		hasAnon = false;
		/* */ if (!(name$1[0] === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(name$1[0] === "")) { */ case 1:
			_ref = t.fields;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				i = _i;
				tf = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				tfname = $clone(tf.name, name).name();
				/* */ if (tfname === "") { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (tfname === "") { */ case 5:
					hasAnon = true;
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				/* */ if (tfname === name$1[0]) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (tfname === name$1[0]) { */ case 7:
					_r = t.Field(i); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_tmp = $clone(_r, StructField);
					_tmp$1 = true;
					StructField.copy(f, _tmp);
					present = _tmp$1;
					$s = -1; return [f, present];
				/* } */ case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		if (!hasAnon) {
			$s = -1; return [f, present];
		}
		_r$1 = t.FieldByNameFunc((function(name$1) { return function(s) {
			var $ptr, s;
			return s === name$1[0];
		}; })(name$1)); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		StructField.copy(f, _tuple[0]);
		present = _tuple[1];
		$s = -1; return [f, present];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.hasAnon = hasAnon; $f.i = i; $f.name$1 = name$1; $f.present = present; $f.t = t; $f.tf = tf; $f.tfname = tfname; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	PtrTo = function(t) {
		var $ptr, t;
		return $assertType(t, ptrType$1).ptrTo();
	};
	$pkg.PtrTo = PtrTo;
	rtype.ptr.prototype.Implements = function(u) {
		var $ptr, _r, t, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 20))) { */ case 1:
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		/* } */ case 2:
		$s = -1; return implements$1($assertType(u, ptrType$1), t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Implements }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var $ptr, _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = directlyAssignable(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r || implements$1(uu, t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.AssignableTo }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.ptr.prototype.ConvertibleTo = function(u) {
		var $ptr, _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = convertOp(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return !(_r === $throwNilPointerError);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.ConvertibleTo }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var $ptr, T, V, i, i$1, j, j$1, t, tm, tm$1, v, v$1, vm, vm$1, vmethods, x, x$1, x$2;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = T.kindType;
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = V.kindType;
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j]));
				if ($clone(V.nameOff(vm.name), name).name() === $clone(t.rtype.nameOff(tm.name), name).name() && V.typeOff(vm.typ) === t.rtype.typeOff(tm.typ)) {
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommon();
		if (v$1 === ptrType$6.nil) {
			return false;
		}
		i$1 = 0;
		vmethods = v$1.methods();
		j$1 = 0;
		while (true) {
			if (!(j$1 < (v$1.mcount >> 0))) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			vm$1 = $clone(((j$1 < 0 || j$1 >= vmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : vmethods.$array[vmethods.$offset + j$1]), method);
			if ($clone(V.nameOff(vm$1.name), name).name() === $clone(t.rtype.nameOff(tm$1.name), name).name() && V.typeOff(vm$1.mtyp) === t.rtype.typeOff(tm$1.typ)) {
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		var $ptr, T, V, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; T = $f.T; V = $f.V; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
			$s = -1; return false;
		}
		_r = haveIdenticalUnderlyingType(T, V, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: directlyAssignable }; } $f.$ptr = $ptr; $f.T = T; $f.V = V; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	haveIdenticalType = function(T, V, cmpTags) {
		var $ptr, T, V, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _v, cmpTags, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; T = $f.T; V = $f.V; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _v = $f._v; cmpTags = $f.cmpTags; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (cmpTags) {
			$s = -1; return $interfaceIsEqual(T, V);
		}
		_r = T.Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = V.Name(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (!(_r === _r$1)) { _v = true; $s = 3; continue s; }
		_r$2 = T.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = V.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = !((_r$2 === _r$3)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return false;
		/* } */ case 2:
		_r$4 = T.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = _r$4;
		_r$5 = V.common(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$1 = _r$5;
		_r$6 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: haveIdenticalType }; } $f.$ptr = $ptr; $f.T = T; $f.V = V; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._v = _v; $f.cmpTags = cmpTags; $f.$s = $s; $f.$r = $r; return $f;
	};
	haveIdenticalUnderlyingType = function(T, V, cmpTags) {
		var $ptr, T, V, _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _v, _v$1, _v$2, _v$3, cmpTags, i, i$1, i$2, kind, t, t$1, t$2, tf, tp, v, v$1, v$2, vf, vp, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; T = $f.T; V = $f.V; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; cmpTags = $f.cmpTags; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; kind = $f.kind; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; tf = $f.tf; tp = $f.tp; v = $f.v; v$1 = $f.v$1; v$2 = $f.v$2; vf = $f.vf; vp = $f.vp; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			$s = -1; return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			$s = -1; return true;
		}
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (18)) { $s = 3; continue; }
			/* */ if (_1 === (19)) { $s = 4; continue; }
			/* */ if (_1 === (20)) { $s = 5; continue; }
			/* */ if (_1 === (21)) { $s = 6; continue; }
			/* */ if ((_1 === (22)) || (_1 === (23))) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === (17)) { */ case 2:
				if (!(T.Len() === V.Len())) { _v = false; $s = 10; continue s; }
				_r = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 10:
				$s = -1; return _v;
			/* } else if (_1 === (18)) { */ case 3:
				if (!(V.ChanDir() === 3)) { _v$1 = false; $s = 14; continue s; }
				_r$1 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = _r$1; case 14:
				/* */ if (_v$1) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_v$1) { */ case 12:
					$s = -1; return true;
				/* } */ case 13:
				if (!(V.ChanDir() === T.ChanDir())) { _v$2 = false; $s = 16; continue s; }
				_r$2 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 16:
				$s = -1; return _v$2;
			/* } else if (_1 === (19)) { */ case 4:
				t = T.kindType;
				v = V.kindType;
				if (!((t.outCount === v.outCount)) || !((t.inCount === v.inCount))) {
					$s = -1; return false;
				}
				i = 0;
				/* while (true) { */ case 18:
					/* if (!(i < t.rtype.NumIn())) { break; } */ if(!(i < t.rtype.NumIn())) { $s = 19; continue; }
					_r$3 = haveIdenticalType(t.rtype.In(i), v.rtype.In(i), cmpTags); /* */ $s = 22; case 22: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (!_r$3) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (!_r$3) { */ case 20:
						$s = -1; return false;
					/* } */ case 21:
					i = i + (1) >> 0;
				/* } */ $s = 18; continue; case 19:
				i$1 = 0;
				/* while (true) { */ case 23:
					/* if (!(i$1 < t.rtype.NumOut())) { break; } */ if(!(i$1 < t.rtype.NumOut())) { $s = 24; continue; }
					_r$4 = haveIdenticalType(t.rtype.Out(i$1), v.rtype.Out(i$1), cmpTags); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if (!_r$4) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (!_r$4) { */ case 25:
						$s = -1; return false;
					/* } */ case 26:
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 23; continue; case 24:
				$s = -1; return true;
			/* } else if (_1 === (20)) { */ case 5:
				t$1 = T.kindType;
				v$1 = V.kindType;
				if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
					$s = -1; return true;
				}
				$s = -1; return false;
			/* } else if (_1 === (21)) { */ case 6:
				_r$5 = haveIdenticalType(T.Key(), V.Key(), cmpTags); /* */ $s = 29; case 29: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				if (!(_r$5)) { _v$3 = false; $s = 28; continue s; }
				_r$6 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 30; case 30: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_v$3 = _r$6; case 28:
				$s = -1; return _v$3;
			/* } else if ((_1 === (22)) || (_1 === (23))) { */ case 7:
				_r$7 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 31; case 31: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$s = -1; return _r$7;
			/* } else if (_1 === (25)) { */ case 8:
				t$2 = T.kindType;
				v$2 = V.kindType;
				if (!((t$2.fields.$length === v$2.fields.$length))) {
					$s = -1; return false;
				}
				_ref = t$2.fields;
				_i = 0;
				/* while (true) { */ case 32:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 33; continue; }
					i$2 = _i;
					tf = (x = t$2.fields, ((i$2 < 0 || i$2 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$2]));
					vf = (x$1 = v$2.fields, ((i$2 < 0 || i$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$2]));
					if (!($clone(tf.name, name).name() === $clone(vf.name, name).name())) {
						$s = -1; return false;
					}
					_r$8 = haveIdenticalType(tf.typ, vf.typ, cmpTags); /* */ $s = 36; case 36: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					/* */ if (!_r$8) { $s = 34; continue; }
					/* */ $s = 35; continue;
					/* if (!_r$8) { */ case 34:
						$s = -1; return false;
					/* } */ case 35:
					if (cmpTags && !($clone(tf.name, name).tag() === $clone(vf.name, name).tag())) {
						$s = -1; return false;
					}
					if (!((tf.offset === vf.offset))) {
						$s = -1; return false;
					}
					if (!$clone(tf.name, name).isExported()) {
						tp = $clone(tf.name, name).pkgPath();
						if (tp === "") {
							tp = $clone(t$2.pkgPath, name).name();
						}
						vp = $clone(vf.name, name).pkgPath();
						if (vp === "") {
							vp = $clone(v$2.pkgPath, name).name();
						}
						if (!(tp === vp)) {
							$s = -1; return false;
						}
					}
					_i++;
				/* } */ $s = 32; continue; case 33:
				$s = -1; return true;
			/* } */ case 9:
		case 1:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: haveIdenticalUnderlyingType }; } $f.$ptr = $ptr; $f.T = T; $f.V = V; $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.cmpTags = cmpTags; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.kind = kind; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.tf = tf; $f.tp = tp; $f.v = v; $f.v$1 = v$1; $f.v$2 = v$2; $f.vf = vf; $f.vp = vp; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	toType = function(t) {
		var $ptr, t;
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var $ptr, t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	flag.prototype.kind = function() {
		var $ptr, f;
		f = this.$val;
		return (((f & 31) >>> 0) >>> 0);
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	Value.ptr.prototype.pointer = function() {
		var $ptr, v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			return v.ptr.$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBe = function(expected) {
		var $ptr, expected, f;
		f = this.$val;
		if (!((new flag(f).kind() === expected))) {
			$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var $ptr, f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var $ptr, f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 256) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.ptr.prototype.Addr = function() {
		var $ptr, v;
		v = this;
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		return new Value.ptr(v.typ.ptrTo(), v.ptr, ((((v.flag & 96) >>> 0)) | 22) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.ptr.prototype.Bool = function() {
		var $ptr, v;
		v = this;
		new flag(v.flag).mustBe(1);
		return v.ptr.$get();
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.ptr.prototype.Bytes = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-byte slice"));
		/* } */ case 2:
		$s = -1; return v.ptr.$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Bytes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.ptr.prototype.runes = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-rune slice"));
		/* } */ case 2:
		$s = -1; return v.ptr.$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.runes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.ptr.prototype.CanAddr = function() {
		var $ptr, v;
		v = this;
		return !((((v.flag & 256) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.ptr.prototype.CanSet = function() {
		var $ptr, v;
		v = this;
		return ((v.flag & 352) >>> 0) === 256;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.Call = function(in$1) {
		var $ptr, _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).call("Call", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.ptr.prototype.CallSlice = function(in$1) {
		var $ptr, _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).call("CallSlice", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.CallSlice }; } $f.$ptr = $ptr; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.ptr.prototype.Complex = function() {
		var $ptr, _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return (x = v.ptr.$get(), new $Complex128(x.$real, x.$imag));
		} else if (_1 === (16)) {
			return v.ptr.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Complex", new flag(v.flag).kind()));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _v = $f._v; i = $f.i; index = $f.index; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (index.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index.$length === 1) { */ case 1:
			_r = $clone(v, Value).Field((0 >= index.$length ? ($throwRuntimeError("index out of range"), undefined) : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (i > 0) { */ case 6:
				if (!($clone(v, Value).Kind() === 22)) { _v = false; $s = 10; continue s; }
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1 === 25; case 10:
				/* */ if (_v) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_v) { */ case 8:
					if ($clone(v, Value).IsNil()) {
						$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					_r$2 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					v = _r$2;
				/* } */ case 9:
			/* } */ case 7:
			_r$3 = $clone(v, Value).Field(x); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._v = _v; $f.i = i; $f.index = index; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.ptr.prototype.FieldByName = function(name$1) {
		var $ptr, _r, _r$1, _tuple, f, name$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(25);
		_r = v.typ.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	Value.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _r, _r$1, _tuple, f, match, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; match = $f.match; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		_r = v.typ.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.match = match; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.ptr.prototype.Float = function() {
		var $ptr, _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return v.ptr.$get();
		} else if (_1 === (14)) {
			return v.ptr.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Float", new flag(v.flag).kind()));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Int = function() {
		var $ptr, _1, k, p, v;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (2)) {
			return new $Int64(0, p.$get());
		} else if (_1 === (3)) {
			return new $Int64(0, p.$get());
		} else if (_1 === (4)) {
			return new $Int64(0, p.$get());
		} else if (_1 === (5)) {
			return new $Int64(0, p.$get());
		} else if (_1 === (6)) {
			return p.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Int", new flag(v.flag).kind()));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.CanInterface = function() {
		var $ptr, v;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 96) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.ptr.prototype.Interface = function() {
		var $ptr, _r, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = $ifaceNil;
		v = this;
		_r = valueInterface($clone(v, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Interface }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.ptr.prototype.IsValid = function() {
		var $ptr, v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.Kind = function() {
		var $ptr, v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var $ptr, _r, c, e, fl, k, key, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; e = $f.e; fl = $f.fl; k = $f.k; key = $f.key; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = v.typ.kindType;
		_r = $clone(key, Value).assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = (key.$ptr_ptr || (key.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key)));
		}
		e = mapaccess(v.typ, $clone(v, Value).pointer(), k);
		if (e === 0) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = ((((v.flag | key.flag) >>> 0)) & 96) >>> 0;
		fl = (fl | ((typ.Kind() >>> 0))) >>> 0;
		if (ifaceIndir(typ)) {
			c = unsafe_New(typ);
			typedmemmove(typ, c, e);
			$s = -1; return new Value.ptr(typ, c, (fl | 128) >>> 0);
		} else {
			$s = -1; return new Value.ptr(typ, e.$get(), fl);
		}
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.e = e; $f.fl = fl; $f.k = k; $f.key = key; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.MapKeys = function() {
		var $ptr, _r, a, c, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; c = $f.c; fl = $f.fl; i = $f.i; it = $f.it; key = $f.key; keyType = $f.keyType; m = $f.m; mlen = $f.mlen; tt = $f.tt; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = v.typ.kindType;
		keyType = tt.key;
		fl = (((v.flag & 96) >>> 0) | (keyType.Kind() >>> 0)) >>> 0;
		m = $clone(v, Value).pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = $makeSlice(sliceType$10, mlen);
		i = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			_r = mapiterkey(it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			if (key === 0) {
				/* break; */ $s = 2; continue;
			}
			if (ifaceIndir(keyType)) {
				c = unsafe_New(keyType);
				typedmemmove(keyType, c, key);
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = new Value.ptr(keyType, c, (fl | 128) >>> 0));
			} else {
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = new Value.ptr(keyType, key.$get(), fl));
			}
			mapiternext(it);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $subslice(a, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapKeys }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.c = c; $f.fl = fl; $f.i = i; $f.it = it; $f.key = key; $f.keyType = keyType; $f.m = m; $f.mlen = mlen; $f.tt = tt; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.ptr.prototype.Method = function(i) {
		var $ptr, _r, _v, fl, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; fl = $f.fl; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) { _v = true; $s = 3; continue s; }
		_r = v.typ.NumMethod(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = (i >>> 0) >= (_r >>> 0); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect: Method index out of range"));
		/* } */ case 2:
		if ((v.typ.Kind() === 20) && $clone(v, Value).IsNil()) {
			$panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (v.flag & 160) >>> 0;
		fl = (fl | (19)) >>> 0;
		fl = (fl | (((((i >>> 0) << 10 >>> 0) | 512) >>> 0))) >>> 0;
		$s = -1; return new Value.ptr(v.typ, v.ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Method }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.fl = fl; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.NumMethod = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return 0;
		}
		_r = v.typ.NumMethod(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.NumMethod }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.ptr.prototype.MethodByName = function(name$1) {
		var $ptr, _r, _r$1, _tuple, m, name$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; m = $f.m; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = v.typ.MethodByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = $clone(_tuple[0], Method);
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r$1 = $clone(v, Value).Method(m.Index); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MethodByName }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	Value.ptr.prototype.NumField = function() {
		var $ptr, tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = v.typ.kindType;
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.OverflowComplex = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
		} else if (_1 === (16)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowComplex", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
	Value.ptr.prototype.OverflowFloat = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return overflowFloat32(x);
		} else if (_1 === (14)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowFloat", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		var $ptr, x;
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.ptr.prototype.OverflowInt = function(x) {
		var $ptr, _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowInt", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
	Value.ptr.prototype.OverflowUint = function(x) {
		var $ptr, _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (7)) || (_1 === (12)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowUint", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
	Value.ptr.prototype.Recv = function() {
		var $ptr, _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).recv(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$s = -1; return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Recv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	Value.ptr.prototype.recv = function(nb) {
		var $ptr, _r, _tuple, nb, ok, p, selected, t, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; nb = $f.nb; ok = $f.ok; p = $f.p; selected = $f.selected; t = $f.t; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		tt = v.typ.kindType;
		if (((tt.dir >> 0) & 1) === 0) {
			$panic(new $String("reflect: recv on send-only channel"));
		}
		t = tt.elem;
		val = new Value.ptr(t, 0, (t.Kind() >>> 0));
		p = 0;
		if (ifaceIndir(t)) {
			p = unsafe_New(t);
			val.ptr = p;
			val.flag = (val.flag | (128)) >>> 0;
		} else {
			p = (val.$ptr_ptr || (val.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val)));
		}
		_r = chanrecv(v.typ, $clone(v, Value).pointer(), nb, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		selected = _tuple[0];
		ok = _tuple[1];
		if (!selected) {
			val = new Value.ptr(ptrType$1.nil, 0, 0);
		}
		$s = -1; return [val, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.recv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.nb = nb; $f.ok = ok; $f.p = p; $f.selected = selected; $f.t = t; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.recv = function(nb) { return this.$val.recv(nb); };
	Value.ptr.prototype.Send = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).send($clone(x, Value), false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Send }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Send = function(x) { return this.$val.Send(x); };
	Value.ptr.prototype.send = function(x, nb) {
		var $ptr, _r, _r$1, nb, p, selected, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; nb = $f.nb; p = $f.p; selected = $f.selected; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		v = this;
		tt = v.typ.kindType;
		if (((tt.dir >> 0) & 2) === 0) {
			$panic(new $String("reflect: send on recv-only channel"));
		}
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Value.Send", tt.elem, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		p = 0;
		if (!((((x.flag & 128) >>> 0) === 0))) {
			p = x.ptr;
		} else {
			p = (x.$ptr_ptr || (x.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, x)));
		}
		_r$1 = chansend(v.typ, $clone(v, Value).pointer(), p, nb); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		selected = _r$1;
		$s = -1; return selected;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.send }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.nb = nb; $f.p = p; $f.selected = selected; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.send = function(x, nb) { return this.$val.send(x, nb); };
	Value.ptr.prototype.SetBool = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(1);
		v.ptr.$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
	Value.ptr.prototype.setRunes = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.setRunes of non-rune slice"));
		/* } */ case 2:
		v.ptr.$set(x);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.setRunes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
	Value.ptr.prototype.SetComplex = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			v.ptr.$set(new $Complex64(x.$real, x.$imag));
		} else if (_1 === (16)) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetComplex", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
	Value.ptr.prototype.SetFloat = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			v.ptr.$set($fround(x));
		} else if (_1 === (14)) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetFloat", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
	Value.ptr.prototype.SetInt = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (2)) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_1 === (3)) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24));
		} else if (_1 === (4)) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16));
		} else if (_1 === (5)) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_1 === (6)) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetInt", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Value.ptr.prototype.SetMapIndex = function(key, val) {
		var $ptr, _r, _r$1, e, k, key, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; e = $f.e; k = $f.k; key = $f.key; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		new flag(v.flag).mustBeExported();
		new flag(key.flag).mustBeExported();
		tt = v.typ.kindType;
		_r = $clone(key, Value).assignTo("reflect.Value.SetMapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = (key.$ptr_ptr || (key.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key)));
		}
		if (val.typ === ptrType$1.nil) {
			mapdelete(v.typ, $clone(v, Value).pointer(), k);
			$s = -1; return;
		}
		new flag(val.flag).mustBeExported();
		_r$1 = $clone(val, Value).assignTo("reflect.Value.SetMapIndex", tt.elem, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		val = _r$1;
		e = 0;
		if (!((((val.flag & 128) >>> 0) === 0))) {
			e = val.ptr;
		} else {
			e = (val.$ptr_ptr || (val.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val)));
		}
		$r = mapassign(v.typ, $clone(v, Value).pointer(), k, e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetMapIndex }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.k = k; $f.key = key; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetMapIndex = function(key, val) { return this.$val.SetMapIndex(key, val); };
	Value.ptr.prototype.SetUint = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (7)) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_1 === (8)) {
			v.ptr.$set((x.$low << 24 >>> 24));
		} else if (_1 === (9)) {
			v.ptr.$set((x.$low << 16 >>> 16));
		} else if (_1 === (10)) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_1 === (11)) {
			v.ptr.$set(x);
		} else if (_1 === (12)) {
			v.ptr.$set((x.$low >>> 0));
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetUint", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
	Value.ptr.prototype.SetPointer = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(26);
		v.ptr.$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
	Value.ptr.prototype.SetString = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(24);
		v.ptr.$set(x);
	};
	Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
	Value.ptr.prototype.String = function() {
		var $ptr, _1, _r, k, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; k = $f.k; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (0)) {
			$s = -1; return "<invalid Value>";
		} else if (_1 === (24)) {
			$s = -1; return v.ptr.$get();
		}
		_r = $clone(v, Value).Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return "<" + _r + " Value>";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.String }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.k = k; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.TryRecv = function() {
		var $ptr, _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).recv(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$s = -1; return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TryRecv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.ptr.prototype.TrySend = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).send($clone(x, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TrySend }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
	Value.ptr.prototype.Type = function() {
		var $ptr, f, i, m, m$1, tt, ut, v, x, x$1;
		v = this;
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.ptr("reflect.Value.Type", 0));
		}
		if (((f & 512) >>> 0) === 0) {
			return v.typ;
		}
		i = (v.flag >> 0) >> 10 >> 0;
		if (v.typ.Kind() === 20) {
			tt = v.typ.kindType;
			if ((i >>> 0) >= (tt.methods.$length >>> 0)) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			return v.typ.typeOff(m.typ);
		}
		ut = v.typ.uncommon();
		if (ut === ptrType$6.nil || (i >>> 0) >= (ut.mcount >>> 0)) {
			$panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = $clone((x$1 = ut.methods(), ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])), method);
		return v.typ.typeOff(m$1.mtyp);
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.Uint = function() {
		var $ptr, _1, k, p, v, x;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (7)) {
			return new $Uint64(0, p.$get());
		} else if (_1 === (8)) {
			return new $Uint64(0, p.$get());
		} else if (_1 === (9)) {
			return new $Uint64(0, p.$get());
		} else if (_1 === (10)) {
			return new $Uint64(0, p.$get());
		} else if (_1 === (11)) {
			return p.$get();
		} else if (_1 === (12)) {
			return (x = p.$get(), new $Uint64(0, x.constructor === Number ? x : 1));
		}
		$panic(new ValueError.ptr("reflect.Value.Uint", new flag(v.flag).kind()));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.ptr.prototype.UnsafeAddr = function() {
		var $ptr, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return v.ptr;
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	typesMustMatch = function(what, t1, t2) {
		var $ptr, _r, _r$1, t1, t2, what, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; t1 = $f.t1; t2 = $f.t2; what = $f.what; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!($interfaceIsEqual(t1, t2))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(t1, t2))) { */ case 1:
			_r = t1.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = t2.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(what + ": " + _r + " != " + _r$1));
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: typesMustMatch }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.t1 = t1; $f.t2 = t2; $f.what = what; $f.$s = $s; $f.$r = $r; return $f;
	};
	MakeMap = function(typ) {
		var $ptr, _r, _r$1, m, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; m = $f.m; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 21))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 21))) { */ case 1:
			$panic(new $String("reflect.MakeMap of non-map type"));
		/* } */ case 2:
		m = makemap($assertType(typ, ptrType$1));
		_r$1 = typ.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$1, m, 21);
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeMap }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.m = m; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeMap = MakeMap;
	New = function(typ) {
		var $ptr, _r, _r$1, fl, ptr, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; fl = $f.fl; ptr = $f.ptr; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$panic(new $String("reflect: New(nil)"));
		}
		ptr = unsafe_New($assertType(typ, ptrType$1));
		fl = 22;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.ptrTo(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$1, ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: New }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.fl = fl; $f.ptr = ptr; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var $ptr, _r, _r$1, _r$2, _r$3, context, dst, fl, target, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; context = $f.context; dst = $f.dst; fl = $f.fl; target = $f.target; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue(context, $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
			_r$1 = directlyAssignable(dst, v.typ); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 5; continue; }
			/* */ if (implements$1(dst, v.typ)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$1) { */ case 5:
				v.typ = dst;
				fl = (v.flag & 480) >>> 0;
				fl = (fl | ((dst.Kind() >>> 0))) >>> 0;
				$s = -1; return new Value.ptr(dst, v.ptr, fl);
			/* } else if (implements$1(dst, v.typ)) { */ case 6:
				if (target === 0) {
					target = unsafe_New(dst);
				}
				_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				x = _r$2;
				_r$3 = dst.NumMethod(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 0) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_r$3 === 0) { */ case 10:
					target.$set(x);
					$s = 12; continue;
				/* } else { */ case 11:
					ifaceE2I(dst, x, target);
				/* } */ case 12:
				$s = -1; return new Value.ptr(dst, target, 148);
			/* } */ case 7:
		case 4:
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.assignTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.context = context; $f.dst = dst; $f.fl = fl; $f.target = target; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.Convert = function(t) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; op = $f.op; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Convert", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		_r$1 = t.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = convertOp(_r$1, v.typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		/* */ if (op === $throwNilPointerError) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (op === $throwNilPointerError) { */ case 6:
			_r$3 = t.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + _r$3));
		/* } */ case 7:
		_r$4 = op($clone(v, Value), t); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Convert }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.op = op; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	convertOp = function(dst, src) {
		var $ptr, _1, _2, _3, _4, _5, _6, _7, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _v, _v$1, _v$2, dst, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _7 = $f._7; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; dst = $f.dst; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = src.Kind();
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 2; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 3; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 4; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 5; continue; }
			/* */ if (_1 === (24)) { $s = 6; continue; }
			/* */ if (_1 === (23)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 2:
				_2 = dst.Kind();
				if ((_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6)) || (_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10)) || (_2 === (11)) || (_2 === (12))) {
					$s = -1; return cvtInt;
				} else if ((_2 === (13)) || (_2 === (14))) {
					$s = -1; return cvtIntFloat;
				} else if (_2 === (24)) {
					$s = -1; return cvtIntString;
				}
				$s = 8; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 3:
				_3 = dst.Kind();
				if ((_3 === (2)) || (_3 === (3)) || (_3 === (4)) || (_3 === (5)) || (_3 === (6)) || (_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10)) || (_3 === (11)) || (_3 === (12))) {
					$s = -1; return cvtUint;
				} else if ((_3 === (13)) || (_3 === (14))) {
					$s = -1; return cvtUintFloat;
				} else if (_3 === (24)) {
					$s = -1; return cvtUintString;
				}
				$s = 8; continue;
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 4:
				_4 = dst.Kind();
				if ((_4 === (2)) || (_4 === (3)) || (_4 === (4)) || (_4 === (5)) || (_4 === (6))) {
					$s = -1; return cvtFloatInt;
				} else if ((_4 === (7)) || (_4 === (8)) || (_4 === (9)) || (_4 === (10)) || (_4 === (11)) || (_4 === (12))) {
					$s = -1; return cvtFloatUint;
				} else if ((_4 === (13)) || (_4 === (14))) {
					$s = -1; return cvtFloat;
				}
				$s = 8; continue;
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 5:
				_5 = dst.Kind();
				if ((_5 === (15)) || (_5 === (16))) {
					$s = -1; return cvtComplex;
				}
				$s = 8; continue;
			/* } else if (_1 === (24)) { */ case 6:
				if (!(dst.Kind() === 23)) { _v = false; $s = 11; continue s; }
				_r = dst.Elem().PkgPath(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r === ""; case 11:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 9:
						_r$1 = dst.Elem().Kind(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_6 = _r$1;
						if (_6 === (8)) {
							$s = -1; return cvtStringBytes;
						} else if (_6 === (5)) {
							$s = -1; return cvtStringRunes;
						}
					case 13:
				/* } */ case 10:
				$s = 8; continue;
			/* } else if (_1 === (23)) { */ case 7:
				if (!(dst.Kind() === 24)) { _v$1 = false; $s = 17; continue s; }
				_r$2 = src.Elem().PkgPath(); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$1 = _r$2 === ""; case 17:
				/* */ if (_v$1) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (_v$1) { */ case 15:
						_r$3 = src.Elem().Kind(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_7 = _r$3;
						if (_7 === (8)) {
							$s = -1; return cvtBytesString;
						} else if (_7 === (5)) {
							$s = -1; return cvtRunesString;
						}
					case 19:
				/* } */ case 16:
			/* } */ case 8:
		case 1:
		_r$4 = haveIdenticalUnderlyingType(dst, src, false); /* */ $s = 23; case 23: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (_r$4) { */ case 21:
			$s = -1; return cvtDirect;
		/* } */ case 22:
		if (!((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "")) { _v$2 = false; $s = 26; continue s; }
		_r$5 = dst.Elem().common(); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg = _r$5;
		_r$6 = src.Elem().common(); /* */ $s = 28; case 28: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_arg$1 = _r$6;
		_r$7 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 29; case 29: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_v$2 = _r$7; case 26:
		/* */ if (_v$2) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (_v$2) { */ case 24:
			$s = -1; return cvtDirect;
		/* } */ case 25:
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				$s = -1; return cvtI2I;
			}
			$s = -1; return cvtT2I;
		}
		$s = -1; return $throwNilPointerError;
		/* */ } return; } if ($f === undefined) { $f = { $blk: convertOp }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._7 = _7; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.dst = dst; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeFloat = function(f, v, t) {
		var $ptr, _1, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (4)) {
			ptr.$set($fround(v));
		} else if (_1 === (8)) {
			ptr.$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeFloat }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeComplex = function(f, v, t) {
		var $ptr, _1, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (8)) {
			ptr.$set(new $Complex64(v.$real, v.$imag));
		} else if (_1 === (16)) {
			ptr.$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeComplex }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeString = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$clone(ret, Value).SetString(v);
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeBytes = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = $clone(ret, Value).SetBytes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeRunes = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = $clone(ret, Value).setRunes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeRunes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtInt = function(v, t) {
		var $ptr, _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt((v.flag & 96) >>> 0, (x = $clone(v, Value).Int(), new $Uint64(x.$high, x.$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtInt }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUint = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt((v.flag & 96) >>> 0, $clone(v, Value).Uint(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUint }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatInt = function(v, t) {
		var $ptr, _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt((v.flag & 96) >>> 0, (x = new $Int64(0, $clone(v, Value).Float()), new $Uint64(x.$high, x.$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatInt }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatUint = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt((v.flag & 96) >>> 0, new $Uint64(0, $clone(v, Value).Float()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatUint }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat((v.flag & 96) >>> 0, $flatten64($clone(v, Value).Int()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat((v.flag & 96) >>> 0, $flatten64($clone(v, Value).Uint()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat((v.flag & 96) >>> 0, $clone(v, Value).Float(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtComplex = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeComplex((v.flag & 96) >>> 0, $clone(v, Value).Complex(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtComplex }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntString = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeString((v.flag & 96) >>> 0, $encodeRune($clone(v, Value).Int().$low), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintString = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeString((v.flag & 96) >>> 0, $encodeRune($clone(v, Value).Uint().$low), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtBytesString = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = (v.flag & 96) >>> 0;
		_r = $clone(v, Value).Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = $bytesToString(_r);
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtBytesString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringBytes = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = (v.flag & 96) >>> 0;
		_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = new sliceType$16($stringToBytes(_r));
		_arg$2 = t;
		_r$1 = makeBytes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringBytes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtRunesString = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = (v.flag & 96) >>> 0;
		_r = $clone(v, Value).runes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = $runesToString(_r);
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtRunesString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringRunes = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = (v.flag & 96) >>> 0;
		_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = new sliceType$18($stringToRunes(_r));
		_arg$2 = t;
		_r$1 = makeRunes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringRunes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtT2I = function(v, typ) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; target = $f.target; typ = $f.typ; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = unsafe_New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		target = _r$1;
		_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		x = _r$2;
		_r$3 = typ.NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 0) { */ case 4:
			target.$set(x);
			$s = 6; continue;
		/* } else { */ case 5:
			ifaceE2I($assertType(typ, ptrType$1), x, target);
		/* } */ case 6:
		_r$4 = typ.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$4, target, (((((v.flag & 96) >>> 0) | 128) >>> 0) | 20) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtT2I }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.target = target; $f.typ = typ; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtI2I = function(v, typ) {
		var $ptr, _r, _r$1, _r$2, ret, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ret = $f.ret; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if ($clone(v, Value).IsNil()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(v, Value).IsNil()) { */ case 1:
			_r = Zero(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ret = _r;
			ret.flag = (ret.flag | (((v.flag & 96) >>> 0))) >>> 0;
			$s = -1; return ret;
		/* } */ case 2:
		_r$1 = $clone(v, Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = cvtT2I($clone(_r$1, Value), typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtI2I }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ret = ret; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType$6.methods = [{prop: "methods", name: "methods", pkg: "reflect", typ: $funcType([], [sliceType$3], false)}];
	ptrType$17.methods = [{prop: "in$", name: "in", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}, {prop: "out", name: "out", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}];
	name.methods = [{prop: "name", name: "name", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "tag", name: "tag", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "isExported", name: "isExported", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "data", name: "data", pkg: "reflect", typ: $funcType([$Int], [ptrType$5], false)}, {prop: "nameLen", name: "nameLen", pkg: "reflect", typ: $funcType([], [$Int], false)}, {prop: "tagLen", name: "tagLen", pkg: "reflect", typ: $funcType([], [$Int], false)}];
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$6], false)}, {prop: "nameOff", name: "nameOff", pkg: "reflect", typ: $funcType([nameOff], [name], false)}, {prop: "typeOff", name: "typeOff", pkg: "reflect", typ: $funcType([typeOff], [ptrType$1], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "textOff", name: "textOff", pkg: "reflect", typ: $funcType([textOff], [$UnsafePointer], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "reflect", typ: $funcType([], [sliceType$3], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$14], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}];
	ChanDir.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$8.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ptrType$10.methods = [{prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$14], [StructField], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}];
	StructTag.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [$String, $Bool], false)}];
	Value.methods = [{prop: "object", name: "object", pkg: "reflect", typ: $funcType([], [ptrType$3], false)}, {prop: "call", name: "call", pkg: "reflect", typ: $funcType([$String, sliceType$10], [sliceType$10], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$12], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$16], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "pointer", name: "pointer", pkg: "reflect", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$16], false)}, {prop: "runes", name: "runes", pkg: "reflect", typ: $funcType([], [sliceType$18], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$10], [sliceType$10], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", typ: $funcType([sliceType$10], [sliceType$10], false)}, {prop: "Complex", name: "Complex", pkg: "", typ: $funcType([], [$Complex128], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$14], [Value], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [Value], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$10], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", typ: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", typ: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", typ: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", typ: $funcType([$Uint64], [$Bool], false)}, {prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "recv", name: "recv", pkg: "reflect", typ: $funcType([$Bool], [Value, $Bool], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([Value], [], false)}, {prop: "send", name: "send", pkg: "reflect", typ: $funcType([Value, $Bool], [$Bool], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", typ: $funcType([sliceType$18], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", typ: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", typ: $funcType([Value, Value], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", typ: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "TrySend", name: "TrySend", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Type], [Value], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "reflect", typ: $funcType([], [Kind], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", typ: $funcType([Kind], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", typ: $funcType([], [], false)}];
	ptrType$18.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	uncommonType.init("reflect", [{prop: "pkgPath", name: "pkgPath", exported: false, typ: nameOff, tag: ""}, {prop: "mcount", name: "mcount", exported: false, typ: $Uint16, tag: ""}, {prop: "_$2", name: "_", exported: false, typ: $Uint16, tag: ""}, {prop: "moff", name: "moff", exported: false, typ: $Uint32, tag: ""}, {prop: "_$4", name: "_", exported: false, typ: $Uint32, tag: ""}, {prop: "_methods", name: "_methods", exported: false, typ: sliceType$3, tag: ""}]);
	funcType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"func\""}, {prop: "inCount", name: "inCount", exported: false, typ: $Uint16, tag: ""}, {prop: "outCount", name: "outCount", exported: false, typ: $Uint16, tag: ""}, {prop: "_in", name: "_in", exported: false, typ: sliceType$2, tag: ""}, {prop: "_out", name: "_out", exported: false, typ: sliceType$2, tag: ""}]);
	name.init("reflect", [{prop: "bytes", name: "bytes", exported: false, typ: ptrType$5, tag: ""}]);
	nameData.init("reflect", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "tag", name: "tag", exported: false, typ: $String, tag: ""}, {prop: "pkgPath", name: "pkgPath", exported: false, typ: $String, tag: ""}, {prop: "exported", name: "exported", exported: false, typ: $Bool, tag: ""}]);
	mapIter.init("reflect", [{prop: "t", name: "t", exported: false, typ: Type, tag: ""}, {prop: "m", name: "m", exported: false, typ: ptrType$3, tag: ""}, {prop: "keys", name: "keys", exported: false, typ: ptrType$3, tag: ""}, {prop: "i", name: "i", exported: false, typ: $Int, tag: ""}]);
	Type.init([{prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$14], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$6], false)}]);
	rtype.init("reflect", [{prop: "size", name: "size", exported: false, typ: $Uintptr, tag: ""}, {prop: "ptrdata", name: "ptrdata", exported: false, typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", exported: false, typ: $Uint32, tag: ""}, {prop: "tflag", name: "tflag", exported: false, typ: tflag, tag: ""}, {prop: "align", name: "align", exported: false, typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", exported: false, typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", exported: false, typ: $Uint8, tag: ""}, {prop: "alg", name: "alg", exported: false, typ: ptrType$4, tag: ""}, {prop: "gcdata", name: "gcdata", exported: false, typ: ptrType$5, tag: ""}, {prop: "str", name: "str", exported: false, typ: nameOff, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", exported: false, typ: typeOff, tag: ""}]);
	typeAlg.init("reflect", [{prop: "hash", name: "hash", exported: false, typ: funcType$4, tag: ""}, {prop: "equal", name: "equal", exported: false, typ: funcType$5, tag: ""}]);
	method.init("reflect", [{prop: "name", name: "name", exported: false, typ: nameOff, tag: ""}, {prop: "mtyp", name: "mtyp", exported: false, typ: typeOff, tag: ""}, {prop: "ifn", name: "ifn", exported: false, typ: textOff, tag: ""}, {prop: "tfn", name: "tfn", exported: false, typ: textOff, tag: ""}]);
	arrayType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"array\""}, {prop: "elem", name: "elem", exported: false, typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", exported: false, typ: ptrType$1, tag: ""}, {prop: "len", name: "len", exported: false, typ: $Uintptr, tag: ""}]);
	chanType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"chan\""}, {prop: "elem", name: "elem", exported: false, typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", exported: false, typ: $Uintptr, tag: ""}]);
	imethod.init("reflect", [{prop: "name", name: "name", exported: false, typ: nameOff, tag: ""}, {prop: "typ", name: "typ", exported: false, typ: typeOff, tag: ""}]);
	interfaceType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"interface\""}, {prop: "pkgPath", name: "pkgPath", exported: false, typ: name, tag: ""}, {prop: "methods", name: "methods", exported: false, typ: sliceType$7, tag: ""}]);
	mapType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"map\""}, {prop: "key", name: "key", exported: false, typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", exported: false, typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", exported: false, typ: ptrType$1, tag: ""}, {prop: "hmap", name: "hmap", exported: false, typ: ptrType$1, tag: ""}, {prop: "keysize", name: "keysize", exported: false, typ: $Uint8, tag: ""}, {prop: "indirectkey", name: "indirectkey", exported: false, typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", exported: false, typ: $Uint8, tag: ""}, {prop: "indirectvalue", name: "indirectvalue", exported: false, typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", exported: false, typ: $Uint16, tag: ""}, {prop: "reflexivekey", name: "reflexivekey", exported: false, typ: $Bool, tag: ""}, {prop: "needkeyupdate", name: "needkeyupdate", exported: false, typ: $Bool, tag: ""}]);
	ptrType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"ptr\""}, {prop: "elem", name: "elem", exported: false, typ: ptrType$1, tag: ""}]);
	sliceType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"slice\""}, {prop: "elem", name: "elem", exported: false, typ: ptrType$1, tag: ""}]);
	structField.init("reflect", [{prop: "name", name: "name", exported: false, typ: name, tag: ""}, {prop: "typ", name: "typ", exported: false, typ: ptrType$1, tag: ""}, {prop: "offset", name: "offset", exported: false, typ: $Uintptr, tag: ""}]);
	structType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"struct\""}, {prop: "pkgPath", name: "pkgPath", exported: false, typ: name, tag: ""}, {prop: "fields", name: "fields", exported: false, typ: sliceType$8, tag: ""}]);
	Method.init("", [{prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", exported: true, typ: Type, tag: ""}, {prop: "Func", name: "Func", exported: true, typ: Value, tag: ""}, {prop: "Index", name: "Index", exported: true, typ: $Int, tag: ""}]);
	StructField.init("", [{prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", exported: true, typ: Type, tag: ""}, {prop: "Tag", name: "Tag", exported: true, typ: StructTag, tag: ""}, {prop: "Offset", name: "Offset", exported: true, typ: $Uintptr, tag: ""}, {prop: "Index", name: "Index", exported: true, typ: sliceType$14, tag: ""}, {prop: "Anonymous", name: "Anonymous", exported: true, typ: $Bool, tag: ""}]);
	fieldScan.init("reflect", [{prop: "typ", name: "typ", exported: false, typ: ptrType$10, tag: ""}, {prop: "index", name: "index", exported: false, typ: sliceType$14, tag: ""}]);
	Value.init("reflect", [{prop: "typ", name: "typ", exported: false, typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", exported: false, typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "", exported: false, typ: flag, tag: ""}]);
	ValueError.init("", [{prop: "Method", name: "Method", exported: true, typ: $String, tag: ""}, {prop: "Kind", name: "Kind", exported: true, typ: Kind, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		nameOffList = sliceType$1.nil;
		typeOffList = sliceType$2.nil;
		methodCache = new structType$1.ptr(new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), false);
		initialized = false;
		uncommonTypeMap = {};
		nameMap = {};
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
		jsObjectPtr = reflectType($jsObjectPtr);
		kindNames = new sliceType$6(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$r = init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, $init, errors, io, math, os, reflect, strconv, sync, utf8, fmtFlags, fmt, State, Formatter, Stringer, GoStringer, buffer, pp, scanError, ss, ssave, sliceType, ptrType, ptrType$1, arrayType, arrayType$1, sliceType$1, sliceType$2, ptrType$2, ptrType$5, ptrType$25, funcType, ppFree, byteType, space, ssFree, complexError, boolError, newPrinter, Fprintf, Printf, Sprintf, Errorf, Sprint, Sprintln, getField, tooLarge, parsenum, intFromArg, parseArgNumber, isSpace, notSpace, indexRune;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	utf8 = $packages["unicode/utf8"];
	fmtFlags = $pkg.fmtFlags = $newType(0, $kindStruct, "fmt.fmtFlags", true, "fmt", false, function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, zero_, plusV_, sharpV_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.widPresent = false;
			this.precPresent = false;
			this.minus = false;
			this.plus = false;
			this.sharp = false;
			this.space = false;
			this.zero = false;
			this.plusV = false;
			this.sharpV = false;
			return;
		}
		this.widPresent = widPresent_;
		this.precPresent = precPresent_;
		this.minus = minus_;
		this.plus = plus_;
		this.sharp = sharp_;
		this.space = space_;
		this.zero = zero_;
		this.plusV = plusV_;
		this.sharpV = sharpV_;
	});
	fmt = $pkg.fmt = $newType(0, $kindStruct, "fmt.fmt", true, "fmt", false, function(buf_, fmtFlags_, wid_, prec_, intbuf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = ptrType$1.nil;
			this.fmtFlags = new fmtFlags.ptr(false, false, false, false, false, false, false, false, false);
			this.wid = 0;
			this.prec = 0;
			this.intbuf = arrayType.zero();
			return;
		}
		this.buf = buf_;
		this.fmtFlags = fmtFlags_;
		this.wid = wid_;
		this.prec = prec_;
		this.intbuf = intbuf_;
	});
	State = $pkg.State = $newType(8, $kindInterface, "fmt.State", true, "fmt", true, null);
	Formatter = $pkg.Formatter = $newType(8, $kindInterface, "fmt.Formatter", true, "fmt", true, null);
	Stringer = $pkg.Stringer = $newType(8, $kindInterface, "fmt.Stringer", true, "fmt", true, null);
	GoStringer = $pkg.GoStringer = $newType(8, $kindInterface, "fmt.GoStringer", true, "fmt", true, null);
	buffer = $pkg.buffer = $newType(12, $kindSlice, "fmt.buffer", true, "fmt", false, null);
	pp = $pkg.pp = $newType(0, $kindStruct, "fmt.pp", true, "fmt", false, function(buf_, arg_, value_, fmt_, reordered_, goodArgNum_, panicking_, erroring_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = buffer.nil;
			this.arg = $ifaceNil;
			this.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
			this.fmt = new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType.zero());
			this.reordered = false;
			this.goodArgNum = false;
			this.panicking = false;
			this.erroring = false;
			return;
		}
		this.buf = buf_;
		this.arg = arg_;
		this.value = value_;
		this.fmt = fmt_;
		this.reordered = reordered_;
		this.goodArgNum = goodArgNum_;
		this.panicking = panicking_;
		this.erroring = erroring_;
	});
	scanError = $pkg.scanError = $newType(0, $kindStruct, "fmt.scanError", true, "fmt", false, function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	ss = $pkg.ss = $newType(0, $kindStruct, "fmt.ss", true, "fmt", false, function(rs_, buf_, count_, atEOF_, ssave_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rs = $ifaceNil;
			this.buf = buffer.nil;
			this.count = 0;
			this.atEOF = false;
			this.ssave = new ssave.ptr(false, false, false, 0, 0, 0);
			return;
		}
		this.rs = rs_;
		this.buf = buf_;
		this.count = count_;
		this.atEOF = atEOF_;
		this.ssave = ssave_;
	});
	ssave = $pkg.ssave = $newType(0, $kindStruct, "fmt.ssave", true, "fmt", false, function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.validSave = false;
			this.nlIsEnd = false;
			this.nlIsSpace = false;
			this.argLimit = 0;
			this.limit = 0;
			this.maxWid = 0;
			return;
		}
		this.validSave = validSave_;
		this.nlIsEnd = nlIsEnd_;
		this.nlIsSpace = nlIsSpace_;
		this.argLimit = argLimit_;
		this.limit = limit_;
		this.maxWid = maxWid_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(reflect.rtype);
	ptrType$1 = $ptrType(buffer);
	arrayType = $arrayType($Uint8, 68);
	arrayType$1 = $arrayType($Uint16, 2);
	sliceType$1 = $sliceType(arrayType$1);
	sliceType$2 = $sliceType($Uint8);
	ptrType$2 = $ptrType(pp);
	ptrType$5 = $ptrType(ss);
	ptrType$25 = $ptrType(fmt);
	funcType = $funcType([$Int32], [$Bool], false);
	fmt.ptr.prototype.clearflags = function() {
		var $ptr, f;
		f = this;
		fmtFlags.copy(f.fmtFlags, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false));
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.ptr.prototype.init = function(buf) {
		var $ptr, buf, f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.ptr.prototype.writePadding = function(n) {
		var $ptr, _i, _ref, buf, f, i, n, newLen, oldLen, padByte, padding;
		f = this;
		if (n <= 0) {
			return;
		}
		buf = f.buf.$get();
		oldLen = buf.$length;
		newLen = oldLen + n >> 0;
		if (newLen > buf.$capacity) {
			buf = $makeSlice(buffer, (($imul(buf.$capacity, 2)) + n >> 0));
			$copySlice(buf, f.buf.$get());
		}
		padByte = 32;
		if (f.fmtFlags.zero) {
			padByte = 48;
		}
		padding = $subslice(buf, oldLen, newLen);
		_ref = padding;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= padding.$length) ? ($throwRuntimeError("index out of range"), undefined) : padding.$array[padding.$offset + i] = padByte);
			_i++;
		}
		f.buf.$set($subslice(buf, 0, newLen));
	};
	fmt.prototype.writePadding = function(n) { return this.$val.writePadding(n); };
	fmt.ptr.prototype.pad = function(b) {
		var $ptr, b, f, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.Write(b);
			return;
		}
		width = f.wid - utf8.RuneCount(b) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.Write(b);
		} else {
			f.buf.Write(b);
			f.writePadding(width);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.ptr.prototype.padString = function(s) {
		var $ptr, f, s, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.WriteString(s);
			return;
		}
		width = f.wid - utf8.RuneCountInString(s) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.WriteString(s);
		} else {
			f.buf.WriteString(s);
			f.writePadding(width);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.ptr.prototype.fmt_boolean = function(v) {
		var $ptr, f, v;
		f = this;
		if (v) {
			f.padString("true");
		} else {
			f.padString("false");
		}
	};
	fmt.prototype.fmt_boolean = function(v) { return this.$val.fmt_boolean(v); };
	fmt.ptr.prototype.fmt_unicode = function(u) {
		var $ptr, buf, f, i, oldZero, prec, u, width;
		f = this;
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		prec = 4;
		if (f.fmtFlags.precPresent && f.prec > 4) {
			prec = f.prec;
			width = (((2 + prec >> 0) + 2 >> 0) + 4 >> 0) + 1 >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		i = buf.$length;
		if (f.fmtFlags.sharp && (u.$high < 0 || (u.$high === 0 && u.$low <= 1114111)) && strconv.IsPrint((u.$low >> 0))) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 39);
			i = i - (utf8.RuneLen((u.$low >> 0))) >> 0;
			utf8.EncodeRune($subslice(buf, i), (u.$low >> 0));
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 39);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 32);
		}
		while (true) {
			if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
			prec = prec - (1) >> 0;
			u = $shiftRightUint64(u, (4));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(u)));
		prec = prec - (1) >> 0;
		while (true) {
			if (!(prec > 0)) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			prec = prec - (1) >> 0;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 43);
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 85);
		oldZero = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero;
	};
	fmt.prototype.fmt_unicode = function(u) { return this.$val.fmt_unicode(u); };
	fmt.ptr.prototype.fmt_integer = function(u, base, isSigned, digits) {
		var $ptr, _1, _2, base, buf, digits, f, i, isSigned, negative, next, oldZero, oldZero$1, prec, u, width, x, x$1, x$2, x$3, x$4;
		f = this;
		negative = isSigned && (x = new $Int64(u.$high, u.$low), (x.$high < 0 || (x.$high === 0 && x.$low < 0)));
		if (negative) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		if (f.fmtFlags.widPresent || f.fmtFlags.precPresent) {
			width = (3 + f.wid >> 0) + f.prec >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		prec = 0;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
			if ((prec === 0) && (u.$high === 0 && u.$low === 0)) {
				oldZero = f.fmtFlags.zero;
				f.fmtFlags.zero = false;
				f.writePadding(f.wid);
				f.fmtFlags.zero = oldZero;
				return;
			}
		} else if (f.fmtFlags.zero && f.fmtFlags.widPresent) {
			prec = f.wid;
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				prec = prec - (1) >> 0;
			}
		}
		i = buf.$length;
		_1 = base;
		if (_1 === (10)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 10)))) { break; }
				i = i - (1) >> 0;
				next = $div64(u, new $Uint64(0, 10), false);
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = ((x$1 = new $Uint64(0 + u.$high, 48 + u.$low), x$2 = $mul64(next, new $Uint64(0, 10)), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low)).$low << 24 >>> 24));
				u = next;
			}
		} else if (_1 === (16)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
				u = $shiftRightUint64(u, (4));
			}
		} else if (_1 === (8)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 8)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = ((x$3 = new $Uint64(u.$high & 0, (u.$low & 7) >>> 0), new $Uint64(0 + x$3.$high, 48 + x$3.$low)).$low << 24 >>> 24));
				u = $shiftRightUint64(u, (3));
			}
		} else if (_1 === (2)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 2)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = ((x$4 = new $Uint64(u.$high & 0, (u.$low & 1) >>> 0), new $Uint64(0 + x$4.$high, 48 + x$4.$low)).$low << 24 >>> 24));
				u = $shiftRightUint64(u, (1));
			}
		} else {
			$panic(new $String("fmt: unknown base; can't happen"));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(u)));
		while (true) {
			if (!(i > 0 && prec > (buf.$length - i >> 0))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
		}
		if (f.fmtFlags.sharp) {
			_2 = base;
			if (_2 === (8)) {
				if (!((((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i]) === 48))) {
					i = i - (1) >> 0;
					((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
				}
			} else if (_2 === (16)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt(16));
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			}
		}
		if (negative) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 45);
		} else if (f.fmtFlags.plus) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 43);
		} else if (f.fmtFlags.space) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 32);
		}
		oldZero$1 = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero$1;
	};
	fmt.prototype.fmt_integer = function(u, base, isSigned, digits) { return this.$val.fmt_integer(u, base, isSigned, digits); };
	fmt.ptr.prototype.truncate = function(s) {
		var $ptr, _i, _ref, _rune, f, i, n, s;
		f = this;
		if (f.fmtFlags.precPresent) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				n = n - (1) >> 0;
				if (n < 0) {
					return $substring(s, 0, i);
				}
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncate = function(s) { return this.$val.truncate(s); };
	fmt.ptr.prototype.fmt_s = function(s) {
		var $ptr, f, s;
		f = this;
		s = f.truncate(s);
		f.padString(s);
	};
	fmt.prototype.fmt_s = function(s) { return this.$val.fmt_s(s); };
	fmt.ptr.prototype.fmt_sbx = function(s, b, digits) {
		var $ptr, b, buf, c, digits, f, i, length, s, width;
		f = this;
		length = b.$length;
		if (b === sliceType$2.nil) {
			length = s.length;
		}
		if (f.fmtFlags.precPresent && f.prec < length) {
			length = f.prec;
		}
		width = $imul(2, length);
		if (width > 0) {
			if (f.fmtFlags.space) {
				if (f.fmtFlags.sharp) {
					width = $imul(width, (2));
				}
				width = width + ((length - 1 >> 0)) >> 0;
			} else if (f.fmtFlags.sharp) {
				width = width + (2) >> 0;
			}
		} else {
			if (f.fmtFlags.widPresent) {
				f.writePadding(f.wid);
			}
			return;
		}
		if (f.fmtFlags.widPresent && f.wid > width && !f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
		buf = f.buf.$get();
		if (f.fmtFlags.sharp) {
			buf = $append(buf, 48, digits.charCodeAt(16));
		}
		c = 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			if (f.fmtFlags.space && i > 0) {
				buf = $append(buf, 32);
				if (f.fmtFlags.sharp) {
					buf = $append(buf, 48, digits.charCodeAt(16));
				}
			}
			if (!(b === sliceType$2.nil)) {
				c = ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]);
			} else {
				c = s.charCodeAt(i);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + (1) >> 0;
		}
		f.buf.$set(buf);
		if (f.fmtFlags.widPresent && f.wid > width && f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
	};
	fmt.prototype.fmt_sbx = function(s, b, digits) { return this.$val.fmt_sbx(s, b, digits); };
	fmt.ptr.prototype.fmt_sx = function(s, digits) {
		var $ptr, digits, f, s;
		f = this;
		f.fmt_sbx(s, sliceType$2.nil, digits);
	};
	fmt.prototype.fmt_sx = function(s, digits) { return this.$val.fmt_sx(s, digits); };
	fmt.ptr.prototype.fmt_bx = function(b, digits) {
		var $ptr, b, digits, f;
		f = this;
		f.fmt_sbx("", b, digits);
	};
	fmt.prototype.fmt_bx = function(b, digits) { return this.$val.fmt_bx(b, digits); };
	fmt.ptr.prototype.fmt_q = function(s) {
		var $ptr, buf, f, s;
		f = this;
		s = f.truncate(s);
		if (f.fmtFlags.sharp && strconv.CanBackquote(s)) {
			f.padString("`" + s + "`");
			return;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteToASCII(buf, s));
		} else {
			f.pad(strconv.AppendQuote(buf, s));
		}
	};
	fmt.prototype.fmt_q = function(s) { return this.$val.fmt_q(s); };
	fmt.ptr.prototype.fmt_c = function(c) {
		var $ptr, buf, c, f, r, w;
		f = this;
		r = (c.$low >> 0);
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		w = utf8.EncodeRune($subslice(buf, 0, 4), r);
		f.pad($subslice(buf, 0, w));
	};
	fmt.prototype.fmt_c = function(c) { return this.$val.fmt_c(c); };
	fmt.ptr.prototype.fmt_qc = function(c) {
		var $ptr, buf, c, f, r;
		f = this;
		r = (c.$low >> 0);
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteRuneToASCII(buf, r));
		} else {
			f.pad(strconv.AppendQuoteRune(buf, r));
		}
	};
	fmt.prototype.fmt_qc = function(c) { return this.$val.fmt_qc(c); };
	fmt.ptr.prototype.fmt_float = function(v, size, verb, prec) {
		var $ptr, f, num, oldZero, prec, size, v, verb;
		f = this;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
		}
		num = strconv.AppendFloat($subslice(new sliceType$2(f.intbuf), 0, 1), v, (verb << 24 >>> 24), prec, size);
		if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 45) || ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 43)) {
			num = $subslice(num, 1);
		} else {
			(0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0] = 43);
		}
		if (f.fmtFlags.space && ((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]) === 43) && !f.fmtFlags.plus) {
			(0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0] = 32);
		}
		if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 73) || ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 78)) {
			oldZero = f.fmtFlags.zero;
			f.fmtFlags.zero = false;
			if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 78) && !f.fmtFlags.space && !f.fmtFlags.plus) {
				num = $subslice(num, 1);
			}
			f.pad(num);
			f.fmtFlags.zero = oldZero;
			return;
		}
		if (f.fmtFlags.plus || !(((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]) === 43))) {
			if (f.fmtFlags.zero && f.fmtFlags.widPresent && f.wid > num.$length) {
				f.buf.WriteByte((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]));
				f.writePadding(f.wid - num.$length >> 0);
				f.buf.Write($subslice(num, 1));
				return;
			}
			f.pad(num);
			return;
		}
		f.pad($subslice(num, 1));
	};
	fmt.prototype.fmt_float = function(v, size, verb, prec) { return this.$val.fmt_float(v, size, verb, prec); };
	$ptrType(buffer).prototype.Write = function(p) {
		var $ptr, b, p;
		b = this;
		b.$set($appendSlice(b.$get(), p));
	};
	$ptrType(buffer).prototype.WriteString = function(s) {
		var $ptr, b, s;
		b = this;
		b.$set($appendSlice(b.$get(), s));
	};
	$ptrType(buffer).prototype.WriteByte = function(c) {
		var $ptr, b, c;
		b = this;
		b.$set($append(b.$get(), c));
	};
	$ptrType(buffer).prototype.WriteRune = function(r) {
		var $ptr, b, bp, n, r, w, x;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), (r << 24 >>> 24)));
			return;
		}
		b = bp.$get();
		n = b.$length;
		while (true) {
			if (!((n + 4 >> 0) > b.$capacity)) { break; }
			b = $append(b, 0);
		}
		w = utf8.EncodeRune((x = $subslice(b, n, (n + 4 >> 0)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length)), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
	};
	newPrinter = function() {
		var $ptr, _r, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = ppFree.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = $assertType(_r, ptrType$2);
		p.panicking = false;
		p.erroring = false;
		p.fmt.init((p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))));
		$s = -1; return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newPrinter }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.ptr.prototype.free = function() {
		var $ptr, p;
		p = this;
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = $ifaceNil;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.ptr.prototype.Width = function() {
		var $ptr, _tmp, _tmp$1, ok, p, wid;
		wid = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.wid;
		_tmp$1 = p.fmt.fmtFlags.widPresent;
		wid = _tmp;
		ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.ptr.prototype.Precision = function() {
		var $ptr, _tmp, _tmp$1, ok, p, prec;
		prec = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.prec;
		_tmp$1 = p.fmt.fmtFlags.precPresent;
		prec = _tmp;
		ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.ptr.prototype.Flag = function(b) {
		var $ptr, _1, b, p;
		p = this;
		_1 = b;
		if (_1 === (45)) {
			return p.fmt.fmtFlags.minus;
		} else if (_1 === (43)) {
			return p.fmt.fmtFlags.plus || p.fmt.fmtFlags.plusV;
		} else if (_1 === (35)) {
			return p.fmt.fmtFlags.sharp || p.fmt.fmtFlags.sharpV;
		} else if (_1 === (32)) {
			return p.fmt.fmtFlags.space;
		} else if (_1 === (48)) {
			return p.fmt.fmtFlags.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.ptr.prototype.Write = function(b) {
		var $ptr, _tmp, _tmp$1, b, err, p, ret;
		ret = 0;
		err = $ifaceNil;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(b);
		_tmp = b.$length;
		_tmp$1 = $ifaceNil;
		ret = _tmp;
		err = _tmp$1;
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	Fprintf = function(w, format, a) {
		var $ptr, _r, _r$1, _tuple, a, err, format, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; err = $f.err; format = $f.format; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = w.Write((x = p.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprintf }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.format = format; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprintf = Fprintf;
	Printf = function(format, a) {
		var $ptr, _r, _tuple, a, err, format, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; err = $f.err; format = $f.format; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = Fprintf(os.Stdout, format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Printf }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.format = format; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Printf = Printf;
	Sprintf = function(format, a) {
		var $ptr, _r, a, format, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; format = $f.format; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = $bytesToString(p.buf);
		p.free();
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintf }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.format = format; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintf = Sprintf;
	Errorf = function(format, a) {
		var $ptr, _r, _r$1, a, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; a = $f.a; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Sprintf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = errors.New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Errorf }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Errorf = Errorf;
	Sprint = function(a) {
		var $ptr, _r, a, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrint(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = $bytesToString(p.buf);
		p.free();
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprint }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprint = Sprint;
	Sprintln = function(a) {
		var $ptr, _r, a, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintln(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = $bytesToString(p.buf);
		p.free();
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintln }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintln = Sprintln;
	getField = function(v, i) {
		var $ptr, _r, _r$1, i, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; i = $f.i; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $clone(v, reflect.Value).Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		val = _r;
		/* */ if (($clone(val, reflect.Value).Kind() === 20) && !$clone(val, reflect.Value).IsNil()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (($clone(val, reflect.Value).Kind() === 20) && !$clone(val, reflect.Value).IsNil()) { */ case 2:
			_r$1 = $clone(val, reflect.Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			val = _r$1;
		/* } */ case 3:
		$s = -1; return val;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getField }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	tooLarge = function(x) {
		var $ptr, x;
		return x > 1000000 || x < -1000000;
	};
	parsenum = function(s, start, end) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, end, isnum, newi, num, s, start;
		num = 0;
		isnum = false;
		newi = 0;
		if (start >= end) {
			_tmp = 0;
			_tmp$1 = false;
			_tmp$2 = end;
			num = _tmp;
			isnum = _tmp$1;
			newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (true) {
			if (!(newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57)) { break; }
			if (tooLarge(num)) {
				_tmp$3 = 0;
				_tmp$4 = false;
				_tmp$5 = end;
				num = _tmp$3;
				isnum = _tmp$4;
				newi = _tmp$5;
				return [num, isnum, newi];
			}
			num = ($imul(num, 10)) + ((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0) >> 0;
			isnum = true;
			newi = newi + (1) >> 0;
		}
		return [num, isnum, newi];
	};
	pp.ptr.prototype.unknownType = function(v) {
		var $ptr, _r, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!$clone(v, reflect.Value).IsValid()) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
			$s = -1; return;
		}
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		_r = $clone(v, reflect.Value).Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.unknownType }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.ptr.prototype.badVerb = function(verb) {
		var $ptr, _r, _r$1, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.erroring = true;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
			/* */ if (!($interfaceIsEqual(p.arg, $ifaceNil))) { $s = 2; continue; }
			/* */ if ($clone(p.value, reflect.Value).IsValid()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(p.arg, $ifaceNil))) { */ case 2:
				_r = reflect.TypeOf(p.arg).String(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				$r = p.printArg(p.arg, 118); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else if ($clone(p.value, reflect.Value).IsValid()) { */ case 3:
				_r$1 = $clone(p.value, reflect.Value).Type().String(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				$r = p.printValue($clone(p.value, reflect.Value), 118, 0); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
			/* } */ case 5:
		case 1:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		p.erroring = false;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.badVerb }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.ptr.prototype.fmtBool = function(v, verb) {
		var $ptr, _1, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (116)) || (_1 === (118))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (116)) || (_1 === (118))) { */ case 2:
				p.fmt.fmt_boolean(v);
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBool }; } $f.$ptr = $ptr; $f._1 = _1; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.ptr.prototype.fmt0x64 = function(v, leading0x) {
		var $ptr, leading0x, p, sharp, v;
		p = this;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = leading0x;
		p.fmt.fmt_integer(v, 16, false, "0123456789abcdefx");
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.ptr.prototype.fmtInteger = function(v, isSigned, verb) {
		var $ptr, _1, isSigned, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; isSigned = $f.isSigned; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (100)) { $s = 3; continue; }
			/* */ if (_1 === (98)) { $s = 4; continue; }
			/* */ if (_1 === (111)) { $s = 5; continue; }
			/* */ if (_1 === (120)) { $s = 6; continue; }
			/* */ if (_1 === (88)) { $s = 7; continue; }
			/* */ if (_1 === (99)) { $s = 8; continue; }
			/* */ if (_1 === (113)) { $s = 9; continue; }
			/* */ if (_1 === (85)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV && !isSigned) {
					p.fmt0x64(v, true);
				} else {
					p.fmt.fmt_integer(v, 10, isSigned, "0123456789abcdefx");
				}
				$s = 12; continue;
			/* } else if (_1 === (100)) { */ case 3:
				p.fmt.fmt_integer(v, 10, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (98)) { */ case 4:
				p.fmt.fmt_integer(v, 2, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (111)) { */ case 5:
				p.fmt.fmt_integer(v, 8, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (120)) { */ case 6:
				p.fmt.fmt_integer(v, 16, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (88)) { */ case 7:
				p.fmt.fmt_integer(v, 16, isSigned, "0123456789ABCDEFX");
				$s = 12; continue;
			/* } else if (_1 === (99)) { */ case 8:
				p.fmt.fmt_c(v);
				$s = 12; continue;
			/* } else if (_1 === (113)) { */ case 9:
				/* */ if ((v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ((v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 13:
					p.fmt.fmt_qc(v);
					$s = 15; continue;
				/* } else { */ case 14:
					$r = p.badVerb(verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 15:
				$s = 12; continue;
			/* } else if (_1 === (85)) { */ case 10:
				p.fmt.fmt_unicode(v);
				$s = 12; continue;
			/* } else { */ case 11:
				$r = p.badVerb(verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtInteger }; } $f.$ptr = $ptr; $f._1 = _1; $f.isSigned = isSigned; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtInteger = function(v, isSigned, verb) { return this.$val.fmtInteger(v, isSigned, verb); };
	pp.ptr.prototype.fmtFloat = function(v, size, verb) {
		var $ptr, _1, p, size, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; p = $f.p; size = $f.size; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if ((_1 === (98)) || (_1 === (103)) || (_1 === (71))) { $s = 3; continue; }
			/* */ if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { $s = 4; continue; }
			/* */ if (_1 === (70)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (118)) { */ case 2:
				p.fmt.fmt_float(v, size, 103, -1);
				$s = 7; continue;
			/* } else if ((_1 === (98)) || (_1 === (103)) || (_1 === (71))) { */ case 3:
				p.fmt.fmt_float(v, size, verb, -1);
				$s = 7; continue;
			/* } else if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { */ case 4:
				p.fmt.fmt_float(v, size, verb, 6);
				$s = 7; continue;
			/* } else if (_1 === (70)) { */ case 5:
				p.fmt.fmt_float(v, size, 102, 6);
				$s = 7; continue;
			/* } else { */ case 6:
				$r = p.badVerb(verb); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 7:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat }; } $f.$ptr = $ptr; $f._1 = _1; $f.p = p; $f.size = size; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtFloat = function(v, size, verb) { return this.$val.fmtFloat(v, size, verb); };
	pp.ptr.prototype.fmtComplex = function(v, size, verb) {
		var $ptr, _1, _q, _q$1, oldPlus, p, size, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; oldPlus = $f.oldPlus; p = $f.p; size = $f.size; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { */ case 2:
				oldPlus = p.fmt.fmtFlags.plus;
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
				$r = p.fmtFloat(v.$real, (_q = size / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p.fmt.fmtFlags.plus = true;
				$r = p.fmtFloat(v.$imag, (_q$1 = size / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("i)");
				p.fmt.fmtFlags.plus = oldPlus;
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex }; } $f.$ptr = $ptr; $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f.oldPlus = oldPlus; $f.p = p; $f.size = size; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtComplex = function(v, size, verb) { return this.$val.fmtComplex(v, size, verb); };
	pp.ptr.prototype.fmtString = function(v, verb) {
		var $ptr, _1, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					p.fmt.fmt_q(v);
				} else {
					p.fmt.fmt_s(v);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmt_s(v);
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmt_sx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmt_sx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmt_q(v);
				$s = 8; continue;
			/* } else { */ case 7:
				$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtString }; } $f.$ptr = $ptr; $f._1 = _1; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtString = function(v, verb) { return this.$val.fmtString(v, verb); };
	pp.ptr.prototype.fmtBytes = function(v, verb, typeString) {
		var $ptr, _1, _i, _i$1, _r, _ref, _ref$1, c, c$1, i, i$1, p, typeString, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; c$1 = $f.c$1; i = $f.i; i$1 = $f.i$1; p = $f.p; typeString = $f.typeString; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (100))) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_1 === (118)) || (_1 === (100))) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(typeString);
					if (v === sliceType$2.nil) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					_ref = v;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						i = _i;
						c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
						if (i > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						}
						p.fmt0x64(new $Uint64(0, c), true);
						_i++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
					_ref$1 = v;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						i$1 = _i$1;
						c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (i$1 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
						p.fmt.fmt_integer(new $Uint64(0, c$1), 10, false, "0123456789abcdefx");
						_i$1++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmt_s($bytesToString(v));
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmt_bx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmt_bx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmt_q($bytesToString(v));
				$s = 8; continue;
			/* } else { */ case 7:
				_r = reflect.ValueOf(v); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.printValue($clone(_r, reflect.Value), verb, 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBytes }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.c$1 = c$1; $f.i = i; $f.i$1 = i$1; $f.p = p; $f.typeString = typeString; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBytes = function(v, verb, typeString) { return this.$val.fmtBytes(v, verb, typeString); };
	pp.ptr.prototype.fmtPointer = function(value, verb) {
		var $ptr, _1, _2, _r, p, u, value, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _r = $f._r; p = $f.p; u = $f.u; value = $f.value; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		u = 0;
			_1 = $clone(value, reflect.Value).Kind();
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { */ case 2:
				u = $clone(value, reflect.Value).Pointer();
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
		case 1:
			_2 = verb;
			/* */ if (_2 === (118)) { $s = 7; continue; }
			/* */ if (_2 === (112)) { $s = 8; continue; }
			/* */ if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_2 === (118)) { */ case 7:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 12:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
					_r = $clone(value, reflect.Value).Type().String(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(")(");
					if (u === 0) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("nil");
					} else {
						p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), true);
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
					$s = 14; continue;
				/* } else { */ case 13:
					if (u === 0) {
						p.fmt.padString("<nil>");
					} else {
						p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), !p.fmt.fmtFlags.sharp);
					}
				/* } */ case 14:
				$s = 11; continue;
			/* } else if (_2 === (112)) { */ case 8:
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), !p.fmt.fmtFlags.sharp);
				$s = 11; continue;
			/* } else if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { */ case 9:
				$r = p.fmtInteger(new $Uint64(0, u.constructor === Number ? u : 1), false, verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 11; continue;
			/* } else { */ case 10:
				$r = p.badVerb(verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
		case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtPointer }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._r = _r; $f.p = p; $f.u = u; $f.value = value; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtPointer = function(value, verb) { return this.$val.fmtPointer(value, verb); };
	pp.ptr.prototype.catchPanic = function(arg, verb) {
		var $ptr, _r, arg, err, oldFlags, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; arg = $f.arg; err = $f.err; oldFlags = $f.oldFlags; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		err = $recover();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			_r = reflect.ValueOf(arg); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
			if (($clone(v, reflect.Value).Kind() === 22) && $clone(v, reflect.Value).IsNil()) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
				$s = -1; return;
			}
			if (p.panicking) {
				$panic(err);
			}
			oldFlags = $clone(p.fmt.fmtFlags, fmtFlags);
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(PANIC=");
			p.panicking = true;
			$r = p.printArg(err, 118); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p.panicking = false;
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
			fmtFlags.copy(p.fmt.fmtFlags, oldFlags);
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.catchPanic }; } $f.$ptr = $ptr; $f._r = _r; $f.arg = arg; $f.err = err; $f.oldFlags = oldFlags; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.catchPanic = function(arg, verb) { return this.$val.catchPanic(arg, verb); };
	pp.ptr.prototype.handleMethods = function(verb) {
		var $ptr, _1, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, formatter, handled, ok, ok$1, p, stringer, v, v$1, verb, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; formatter = $f.formatter; handled = $f.handled; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; stringer = $f.stringer; v = $f.v; v$1 = $f.v$1; verb = $f.verb; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		handled = false;
		p = this;
		if (p.erroring) {
			$s = -1; return handled;
		}
		_tuple = $assertType(p.arg, Formatter, true);
		formatter = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			handled = true;
			$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
			$r = formatter.Format(p, verb); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return handled;
		/* } */ case 2:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 4:
			_tuple$1 = $assertType(p.arg, GoStringer, true);
			stringer = _tuple$1[0];
			ok$1 = _tuple$1[1];
			/* */ if (ok$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (ok$1) { */ case 7:
				handled = true;
				$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
				_r = stringer.GoString(); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return handled;
			/* } */ case 8:
			$s = 6; continue;
		/* } else { */ case 5:
				_1 = verb;
				/* */ if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { */ case 12:
					_ref = p.arg;
					/* */ if ($assertType(_ref, $error, true)[1]) { $s = 14; continue; }
					/* */ if ($assertType(_ref, Stringer, true)[1]) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if ($assertType(_ref, $error, true)[1]) { */ case 14:
						v = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$1 = v.Error(); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$1, verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return handled;
					/* } else if ($assertType(_ref, Stringer, true)[1]) { */ case 15:
						v$1 = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$2 = v$1.String(); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$2, verb); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return handled;
					/* } */ case 16:
				/* } */ case 13:
			case 11:
		/* } */ case 6:
		handled = false;
		$s = -1; return handled;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  handled; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: pp.ptr.prototype.handleMethods }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.formatter = formatter; $f.handled = handled; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.stringer = stringer; $f.v = v; $f.v$1 = v$1; $f.verb = verb; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	pp.prototype.handleMethods = function(verb) { return this.$val.handleMethods(verb); };
	pp.ptr.prototype.printArg = function(arg, verb) {
		var $ptr, _1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, arg, f, f$1, f$10, f$11, f$12, f$13, f$14, f$15, f$16, f$17, f$18, f$19, f$2, f$3, f$4, f$5, f$6, f$7, f$8, f$9, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; arg = $f.arg; f = $f.f; f$1 = $f.f$1; f$10 = $f.f$10; f$11 = $f.f$11; f$12 = $f.f$12; f$13 = $f.f$13; f$14 = $f.f$14; f$15 = $f.f$15; f$16 = $f.f$16; f$17 = $f.f$17; f$18 = $f.f$18; f$19 = $f.f$19; f$2 = $f.f$2; f$3 = $f.f$3; f$4 = $f.f$4; f$5 = $f.f$5; f$6 = $f.f$6; f$7 = $f.f$7; f$8 = $f.f$8; f$9 = $f.f$9; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 1:
				_1 = verb;
				/* */ if ((_1 === (84)) || (_1 === (118))) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if ((_1 === (84)) || (_1 === (118))) { */ case 4:
					p.fmt.padString("<nil>");
					$s = 6; continue;
				/* } else { */ case 5:
					$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
			case 3:
			$s = -1; return;
		/* } */ case 2:
			_2 = verb;
			/* */ if (_2 === (84)) { $s = 9; continue; }
			/* */ if (_2 === (112)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_2 === (84)) { */ case 9:
				_r = reflect.TypeOf(arg).String(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } else if (_2 === (112)) { */ case 10:
				_r$1 = reflect.ValueOf(arg); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = p.fmtPointer($clone(_r$1, reflect.Value), 112); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 11:
		case 8:
		_ref = arg;
		/* */ if ($assertType(_ref, $Bool, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, $Float32, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, $Float64, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, $Complex64, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, $Complex128, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, $Int, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref, $Int8, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref, $Int16, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref, $Int32, true)[1]) { $s = 24; continue; }
		/* */ if ($assertType(_ref, $Int64, true)[1]) { $s = 25; continue; }
		/* */ if ($assertType(_ref, $Uint, true)[1]) { $s = 26; continue; }
		/* */ if ($assertType(_ref, $Uint8, true)[1]) { $s = 27; continue; }
		/* */ if ($assertType(_ref, $Uint16, true)[1]) { $s = 28; continue; }
		/* */ if ($assertType(_ref, $Uint32, true)[1]) { $s = 29; continue; }
		/* */ if ($assertType(_ref, $Uint64, true)[1]) { $s = 30; continue; }
		/* */ if ($assertType(_ref, $Uintptr, true)[1]) { $s = 31; continue; }
		/* */ if ($assertType(_ref, $String, true)[1]) { $s = 32; continue; }
		/* */ if ($assertType(_ref, sliceType$2, true)[1]) { $s = 33; continue; }
		/* */ if ($assertType(_ref, reflect.Value, true)[1]) { $s = 34; continue; }
		/* */ $s = 35; continue;
		/* if ($assertType(_ref, $Bool, true)[1]) { */ case 16:
			f = _ref.$val;
			$r = p.fmtBool(f, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float32, true)[1]) { */ case 17:
			f$1 = _ref.$val;
			$r = p.fmtFloat(f$1, 32, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float64, true)[1]) { */ case 18:
			f$2 = _ref.$val;
			$r = p.fmtFloat(f$2, 64, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex64, true)[1]) { */ case 19:
			f$3 = _ref.$val;
			$r = p.fmtComplex(new $Complex128(f$3.$real, f$3.$imag), 64, verb); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex128, true)[1]) { */ case 20:
			f$4 = _ref.$val;
			$r = p.fmtComplex(f$4, 128, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int, true)[1]) { */ case 21:
			f$5 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$5), true, verb); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int8, true)[1]) { */ case 22:
			f$6 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$6), true, verb); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int16, true)[1]) { */ case 23:
			f$7 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$7), true, verb); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int32, true)[1]) { */ case 24:
			f$8 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$8), true, verb); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int64, true)[1]) { */ case 25:
			f$9 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(f$9.$high, f$9.$low), true, verb); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint, true)[1]) { */ case 26:
			f$10 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$10), false, verb); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint8, true)[1]) { */ case 27:
			f$11 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$11), false, verb); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint16, true)[1]) { */ case 28:
			f$12 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$12), false, verb); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint32, true)[1]) { */ case 29:
			f$13 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$13), false, verb); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint64, true)[1]) { */ case 30:
			f$14 = _ref.$val;
			$r = p.fmtInteger(f$14, false, verb); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uintptr, true)[1]) { */ case 31:
			f$15 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$15.constructor === Number ? f$15 : 1), false, verb); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $String, true)[1]) { */ case 32:
			f$16 = _ref.$val;
			$r = p.fmtString(f$16, verb); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, sliceType$2, true)[1]) { */ case 33:
			f$17 = _ref.$val;
			$r = p.fmtBytes(f$17, verb, "[]byte"); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, reflect.Value, true)[1]) { */ case 34:
			f$18 = _ref.$val;
			/* */ if ($clone(f$18, reflect.Value).IsValid() && $clone(f$18, reflect.Value).CanInterface()) { $s = 55; continue; }
			/* */ $s = 56; continue;
			/* if ($clone(f$18, reflect.Value).IsValid() && $clone(f$18, reflect.Value).CanInterface()) { */ case 55:
				_r$2 = $clone(f$18, reflect.Value).Interface(); /* */ $s = 57; case 57: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				p.arg = _r$2;
				_r$3 = p.handleMethods(verb); /* */ $s = 60; case 60: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3) { $s = 58; continue; }
				/* */ $s = 59; continue;
				/* if (_r$3) { */ case 58:
					$s = -1; return;
				/* } */ case 59:
			/* } */ case 56:
			$r = p.printValue($clone(f$18, reflect.Value), verb, 0); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else { */ case 35:
			f$19 = _ref;
			_r$4 = p.handleMethods(verb); /* */ $s = 64; case 64: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 62; continue; }
			/* */ $s = 63; continue;
			/* if (!_r$4) { */ case 62:
				_r$5 = reflect.ValueOf(f$19); /* */ $s = 65; case 65: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$r = p.printValue($clone(_r$5, reflect.Value), verb, 0); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 63:
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printArg }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.arg = arg; $f.f = f; $f.f$1 = f$1; $f.f$10 = f$10; $f.f$11 = f$11; $f.f$12 = f$12; $f.f$13 = f$13; $f.f$14 = f$14; $f.f$15 = f$15; $f.f$16 = f$16; $f.f$17 = f$17; $f.f$18 = f$18; $f.f$19 = f$19; $f.f$2 = f$2; $f.f$3 = f$3; $f.f$4 = f$4; $f.f$5 = f$5; $f.f$6 = f$6; $f.f$7 = f$7; $f.f$8 = f$8; $f.f$9 = f$9; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printArg = function(arg, verb) { return this.$val.printArg(arg, verb); };
	pp.ptr.prototype.printValue = function(value, verb, depth) {
		var $ptr, _1, _2, _3, _4, _arg, _arg$1, _arg$2, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, a, bytes, depth, f, i, i$1, i$2, i$3, i$4, key, keys, name, p, t, value, value$1, verb, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; a = $f.a; bytes = $f.bytes; depth = $f.depth; f = $f.f; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; key = $f.key; keys = $f.keys; name = $f.name; p = $f.p; t = $f.t; value = $f.value; value$1 = $f.value$1; verb = $f.verb; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (depth > 0 && $clone(value, reflect.Value).IsValid() && $clone(value, reflect.Value).CanInterface()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (depth > 0 && $clone(value, reflect.Value).IsValid() && $clone(value, reflect.Value).CanInterface()) { */ case 1:
			_r = $clone(value, reflect.Value).Interface(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			p.arg = _r;
			_r$1 = p.handleMethods(verb); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1) { */ case 4:
				$s = -1; return;
			/* } */ case 5:
		/* } */ case 2:
		p.arg = $ifaceNil;
		p.value = value;
			f = value;
			_1 = $clone(value, reflect.Value).Kind();
			/* */ if (_1 === (0)) { $s = 8; continue; }
			/* */ if (_1 === (1)) { $s = 9; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 10; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 11; continue; }
			/* */ if (_1 === (13)) { $s = 12; continue; }
			/* */ if (_1 === (14)) { $s = 13; continue; }
			/* */ if (_1 === (15)) { $s = 14; continue; }
			/* */ if (_1 === (16)) { $s = 15; continue; }
			/* */ if (_1 === (24)) { $s = 16; continue; }
			/* */ if (_1 === (21)) { $s = 17; continue; }
			/* */ if (_1 === (25)) { $s = 18; continue; }
			/* */ if (_1 === (20)) { $s = 19; continue; }
			/* */ if ((_1 === (17)) || (_1 === (23))) { $s = 20; continue; }
			/* */ if (_1 === (22)) { $s = 21; continue; }
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (_1 === (0)) { */ case 8:
				/* */ if (depth === 0) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (depth === 0) { */ case 25:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<invalid reflect.Value>");
					$s = 27; continue;
				/* } else { */ case 26:
						_2 = verb;
						/* */ if (_2 === (118)) { $s = 29; continue; }
						/* */ $s = 30; continue;
						/* if (_2 === (118)) { */ case 29:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
							$s = 31; continue;
						/* } else { */ case 30:
							$r = p.badVerb(verb); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 31:
					case 28:
				/* } */ case 27:
				$s = 24; continue;
			/* } else if (_1 === (1)) { */ case 9:
				$r = p.fmtBool($clone(f, reflect.Value).Bool(), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 10:
				$r = p.fmtInteger((x = $clone(f, reflect.Value).Int(), new $Uint64(x.$high, x.$low)), true, verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 11:
				$r = p.fmtInteger($clone(f, reflect.Value).Uint(), false, verb); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (13)) { */ case 12:
				$r = p.fmtFloat($clone(f, reflect.Value).Float(), 32, verb); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (14)) { */ case 13:
				$r = p.fmtFloat($clone(f, reflect.Value).Float(), 64, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (15)) { */ case 14:
				$r = p.fmtComplex($clone(f, reflect.Value).Complex(), 64, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (16)) { */ case 15:
				$r = p.fmtComplex($clone(f, reflect.Value).Complex(), 128, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (24)) { */ case 16:
				_r$2 = $clone(f, reflect.Value).String(); /* */ $s = 40; case 40: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = p.fmtString(_r$2, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (21)) { */ case 17:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 42:
					_r$3 = $clone(f, reflect.Value).Type().String(); /* */ $s = 45; case 45: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$3); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if ($clone(f, reflect.Value).IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					$s = 44; continue;
				/* } else { */ case 43:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("map[");
				/* } */ case 44:
				_r$4 = $clone(f, reflect.Value).MapKeys(); /* */ $s = 47; case 47: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				keys = _r$4;
				_ref = keys;
				_i = 0;
				/* while (true) { */ case 48:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 49; continue; }
					i = _i;
					key = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					if (i > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					$r = p.printValue($clone(key, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
					_r$5 = $clone(f, reflect.Value).MapIndex($clone(key, reflect.Value)); /* */ $s = 51; case 51: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$r = p.printValue($clone(_r$5, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
				/* } */ $s = 48; continue; case 49:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 24; continue;
			/* } else if (_1 === (25)) { */ case 18:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 53; continue; }
				/* */ $s = 54; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 53:
					_r$6 = $clone(f, reflect.Value).Type().String(); /* */ $s = 55; case 55: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$6); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 54:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
				i$1 = 0;
				/* while (true) { */ case 57:
					/* if (!(i$1 < $clone(f, reflect.Value).NumField())) { break; } */ if(!(i$1 < $clone(f, reflect.Value).NumField())) { $s = 58; continue; }
					if (i$1 > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					/* */ if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { $s = 59; continue; }
					/* */ $s = 60; continue;
					/* if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { */ case 59:
						_r$7 = $clone(f, reflect.Value).Type().Field(i$1); /* */ $s = 61; case 61: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						name = _r$7.Name;
						if (!(name === "")) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(name);
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
						}
					/* } */ case 60:
					_r$8 = getField($clone(f, reflect.Value), i$1); /* */ $s = 62; case 62: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					$r = p.printValue($clone(_r$8, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 63; case 63: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 57; continue; case 58:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				$s = 24; continue;
			/* } else if (_1 === (20)) { */ case 19:
				_r$9 = $clone(f, reflect.Value).Elem(); /* */ $s = 64; case 64: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				value$1 = _r$9;
				/* */ if (!$clone(value$1, reflect.Value).IsValid()) { $s = 65; continue; }
				/* */ $s = 66; continue;
				/* if (!$clone(value$1, reflect.Value).IsValid()) { */ case 65:
					/* */ if (p.fmt.fmtFlags.sharpV) { $s = 68; continue; }
					/* */ $s = 69; continue;
					/* if (p.fmt.fmtFlags.sharpV) { */ case 68:
						_r$10 = $clone(f, reflect.Value).Type().String(); /* */ $s = 71; case 71: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$10); /* */ $s = 72; case 72: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = 70; continue;
					/* } else { */ case 69:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
					/* } */ case 70:
					$s = 67; continue;
				/* } else { */ case 66:
					$r = p.printValue($clone(value$1, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 73; case 73: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 67:
				$s = 24; continue;
			/* } else if ((_1 === (17)) || (_1 === (23))) { */ case 20:
					_3 = verb;
					/* */ if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { $s = 75; continue; }
					/* */ $s = 76; continue;
					/* if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { */ case 75:
						t = $clone(f, reflect.Value).Type();
						_r$11 = t.Elem(); /* */ $s = 79; case 79: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						_r$12 = _r$11.Kind(); /* */ $s = 80; case 80: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						/* */ if (_r$12 === 8) { $s = 77; continue; }
						/* */ $s = 78; continue;
						/* if (_r$12 === 8) { */ case 77:
							bytes = sliceType$2.nil;
							/* */ if ($clone(f, reflect.Value).Kind() === 23) { $s = 81; continue; }
							/* */ if ($clone(f, reflect.Value).CanAddr()) { $s = 82; continue; }
							/* */ $s = 83; continue;
							/* if ($clone(f, reflect.Value).Kind() === 23) { */ case 81:
								_r$13 = $clone(f, reflect.Value).Bytes(); /* */ $s = 85; case 85: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
								bytes = _r$13;
								$s = 84; continue;
							/* } else if ($clone(f, reflect.Value).CanAddr()) { */ case 82:
								_r$14 = $clone(f, reflect.Value).Slice(0, $clone(f, reflect.Value).Len()); /* */ $s = 86; case 86: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
								_r$15 = $clone(_r$14, reflect.Value).Bytes(); /* */ $s = 87; case 87: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
								bytes = _r$15;
								$s = 84; continue;
							/* } else { */ case 83:
								bytes = $makeSlice(sliceType$2, $clone(f, reflect.Value).Len());
								_ref$1 = bytes;
								_i$1 = 0;
								/* while (true) { */ case 88:
									/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 89; continue; }
									i$2 = _i$1;
									_r$16 = $clone(f, reflect.Value).Index(i$2); /* */ $s = 90; case 90: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
									_r$17 = $clone(_r$16, reflect.Value).Uint(); /* */ $s = 91; case 91: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
									((i$2 < 0 || i$2 >= bytes.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + i$2] = (_r$17.$low << 24 >>> 24));
									_i$1++;
								/* } */ $s = 88; continue; case 89:
							/* } */ case 84:
							_arg = bytes;
							_arg$1 = verb;
							_r$18 = t.String(); /* */ $s = 92; case 92: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
							_arg$2 = _r$18;
							$r = p.fmtBytes(_arg, _arg$1, _arg$2); /* */ $s = 93; case 93: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 78:
					/* } */ case 76:
				case 74:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 94; continue; }
				/* */ $s = 95; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 94:
					_r$19 = $clone(f, reflect.Value).Type().String(); /* */ $s = 97; case 97: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$19); /* */ $s = 98; case 98: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (($clone(f, reflect.Value).Kind() === 23) && $clone(f, reflect.Value).IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					i$3 = 0;
					/* while (true) { */ case 99:
						/* if (!(i$3 < $clone(f, reflect.Value).Len())) { break; } */ if(!(i$3 < $clone(f, reflect.Value).Len())) { $s = 100; continue; }
						if (i$3 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						}
						_r$20 = $clone(f, reflect.Value).Index(i$3); /* */ $s = 101; case 101: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
						$r = p.printValue($clone(_r$20, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 102; case 102: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$3 = i$3 + (1) >> 0;
					/* } */ $s = 99; continue; case 100:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
					$s = 96; continue;
				/* } else { */ case 95:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
					i$4 = 0;
					/* while (true) { */ case 103:
						/* if (!(i$4 < $clone(f, reflect.Value).Len())) { break; } */ if(!(i$4 < $clone(f, reflect.Value).Len())) { $s = 104; continue; }
						if (i$4 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
						_r$21 = $clone(f, reflect.Value).Index(i$4); /* */ $s = 105; case 105: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
						$r = p.printValue($clone(_r$21, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 106; case 106: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$4 = i$4 + (1) >> 0;
					/* } */ $s = 103; continue; case 104:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				/* } */ case 96:
				$s = 24; continue;
			/* } else if (_1 === (22)) { */ case 21:
				/* */ if ((depth === 0) && !(($clone(f, reflect.Value).Pointer() === 0))) { $s = 107; continue; }
				/* */ $s = 108; continue;
				/* if ((depth === 0) && !(($clone(f, reflect.Value).Pointer() === 0))) { */ case 107:
						_r$22 = $clone(f, reflect.Value).Elem(); /* */ $s = 110; case 110: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
						a = _r$22;
						_4 = $clone(a, reflect.Value).Kind();
						/* */ if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { $s = 111; continue; }
						/* */ $s = 112; continue;
						/* if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { */ case 111:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
							$r = p.printValue($clone(a, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 113; case 113: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 112:
					case 109:
				/* } */ case 108:
				$r = p.fmtPointer($clone(f, reflect.Value), verb); /* */ $s = 114; case 114: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { */ case 22:
				$r = p.fmtPointer($clone(f, reflect.Value), verb); /* */ $s = 115; case 115: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else { */ case 23:
				$r = p.unknownType($clone(f, reflect.Value)); /* */ $s = 116; case 116: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 24:
		case 7:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printValue }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.a = a; $f.bytes = bytes; $f.depth = depth; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.key = key; $f.keys = keys; $f.name = name; $f.p = p; $f.t = t; $f.value = value; $f.value$1 = value$1; $f.verb = verb; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printValue = function(value, verb, depth) { return this.$val.printValue(value, verb, depth); };
	intFromArg = function(a, argNum) {
		var $ptr, _1, _r, _tuple, a, argNum, isInt, n, n$1, newArgNum, num, v, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _tuple = $f._tuple; a = $f.a; argNum = $f.argNum; isInt = $f.isInt; n = $f.n; n$1 = $f.n$1; newArgNum = $f.newArgNum; num = $f.num; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		num = 0;
		isInt = false;
		newArgNum = 0;
		newArgNum = argNum;
		/* */ if (argNum < a.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (argNum < a.$length) { */ case 1:
			_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), $Int, true);
			num = _tuple[0];
			isInt = _tuple[1];
			/* */ if (!isInt) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!isInt) { */ case 3:
					_r = reflect.ValueOf(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					_1 = $clone(v, reflect.Value).Kind();
					if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
						n = $clone(v, reflect.Value).Int();
						if ((x = new $Int64(0, ((n.$low + ((n.$high >> 31) * 4294967296)) >> 0)), (x.$high === n.$high && x.$low === n.$low))) {
							num = ((n.$low + ((n.$high >> 31) * 4294967296)) >> 0);
							isInt = true;
						}
					} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) {
						n$1 = $clone(v, reflect.Value).Uint();
						if ((x$1 = new $Int64(n$1.$high, n$1.$low), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0))) && (x$2 = new $Uint64(0, (n$1.$low >> 0)), (x$2.$high === n$1.$high && x$2.$low === n$1.$low))) {
							num = (n$1.$low >> 0);
							isInt = true;
						}
					}
				case 5:
			/* } */ case 4:
			newArgNum = argNum + 1 >> 0;
			if (tooLarge(num)) {
				num = 0;
				isInt = false;
			}
		/* } */ case 2:
		$s = -1; return [num, isInt, newArgNum];
		/* */ } return; } if ($f === undefined) { $f = { $blk: intFromArg }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.argNum = argNum; $f.isInt = isInt; $f.n = n; $f.n$1 = n$1; $f.newArgNum = newArgNum; $f.num = num; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseArgNumber = function(format) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, format, i, index, newi, ok, ok$1, wid, width;
		index = 0;
		wid = 0;
		ok = false;
		if (format.length < 3) {
			_tmp = 0;
			_tmp$1 = 1;
			_tmp$2 = false;
			index = _tmp;
			wid = _tmp$1;
			ok = _tmp$2;
			return [index, wid, ok];
		}
		i = 1;
		while (true) {
			if (!(i < format.length)) { break; }
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i);
				width = _tuple[0];
				ok$1 = _tuple[1];
				newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp$3 = 0;
					_tmp$4 = i + 1 >> 0;
					_tmp$5 = false;
					index = _tmp$3;
					wid = _tmp$4;
					ok = _tmp$5;
					return [index, wid, ok];
				}
				_tmp$6 = width - 1 >> 0;
				_tmp$7 = i + 1 >> 0;
				_tmp$8 = true;
				index = _tmp$6;
				wid = _tmp$7;
				ok = _tmp$8;
				return [index, wid, ok];
			}
			i = i + (1) >> 0;
		}
		_tmp$9 = 0;
		_tmp$10 = 1;
		_tmp$11 = false;
		index = _tmp$9;
		wid = _tmp$10;
		ok = _tmp$11;
		return [index, wid, ok];
	};
	pp.ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, argNum, format, found, i, index, newArgNum, newi, numArgs, ok, p, wid;
		newArgNum = 0;
		newi = 0;
		found = false;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum;
			_tmp$1 = i;
			_tmp$2 = false;
			newArgNum = _tmp;
			newi = _tmp$1;
			found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber($substring(format, i));
		index = _tuple[0];
		wid = _tuple[1];
		ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index;
			_tmp$4 = i + wid >> 0;
			_tmp$5 = true;
			newArgNum = _tmp$3;
			newi = _tmp$4;
			found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum;
		_tmp$7 = i + wid >> 0;
		_tmp$8 = ok;
		newArgNum = _tmp$6;
		newi = _tmp$7;
		found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.ptr.prototype.badArgNum = function(verb) {
		var $ptr, p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(BADINDEX)");
	};
	pp.prototype.badArgNum = function(verb) { return this.$val.badArgNum(verb); };
	pp.ptr.prototype.missingArg = function(verb) {
		var $ptr, p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(MISSING)");
	};
	pp.prototype.missingArg = function(verb) { return this.$val.missingArg(verb); };
	pp.ptr.prototype.doPrintf = function(format, a) {
		var $ptr, _1, _i, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, argNum, c, end, format, i, i$1, lasti, p, verb, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; a = $f.a; afterIndex = $f.afterIndex; arg = $f.arg; argNum = $f.argNum; c = $f.c; end = $f.end; format = $f.format; i = $f.i; i$1 = $f.i$1; lasti = $f.lasti; p = $f.p; verb = $f.verb; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 2; continue; }
			p.goodArgNum = true;
			lasti = i;
			while (true) {
				if (!(i < end && !((format.charCodeAt(i) === 37)))) { break; }
				i = i + (1) >> 0;
			}
			if (i > lasti) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString($substring(format, lasti, i));
			}
			if (i >= end) {
				/* break; */ $s = 2; continue;
			}
			i = i + (1) >> 0;
			p.fmt.clearflags();
			/* while (true) { */ case 3:
				/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 4; continue; }
				c = format.charCodeAt(i);
					_1 = c;
					/* */ if (_1 === (35)) { $s = 6; continue; }
					/* */ if (_1 === (48)) { $s = 7; continue; }
					/* */ if (_1 === (43)) { $s = 8; continue; }
					/* */ if (_1 === (45)) { $s = 9; continue; }
					/* */ if (_1 === (32)) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (_1 === (35)) { */ case 6:
						p.fmt.fmtFlags.sharp = true;
						$s = 12; continue;
					/* } else if (_1 === (48)) { */ case 7:
						p.fmt.fmtFlags.zero = !p.fmt.fmtFlags.minus;
						$s = 12; continue;
					/* } else if (_1 === (43)) { */ case 8:
						p.fmt.fmtFlags.plus = true;
						$s = 12; continue;
					/* } else if (_1 === (45)) { */ case 9:
						p.fmt.fmtFlags.minus = true;
						p.fmt.fmtFlags.zero = false;
						$s = 12; continue;
					/* } else if (_1 === (32)) { */ case 10:
						p.fmt.fmtFlags.space = true;
						$s = 12; continue;
					/* } else { */ case 11:
						/* */ if (97 <= c && c <= 122 && argNum < a.$length) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (97 <= c && c <= 122 && argNum < a.$length) { */ case 13:
							if (c === 118) {
								p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
								p.fmt.fmtFlags.sharp = false;
								p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
								p.fmt.fmtFlags.plus = false;
							}
							$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), (c >> 0)); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							argNum = argNum + (1) >> 0;
							i = i + (1) >> 0;
							/* continue formatLoop; */ $s = 1; continue s;
						/* } */ case 14:
						/* break simpleFormat; */ $s = 4; continue s;
					/* } */ case 12:
				case 5:
				i = i + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			_tuple = p.argNumber(argNum, format, i, a.$length);
			argNum = _tuple[0];
			i = _tuple[1];
			afterIndex = _tuple[2];
			/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 16:
				i = i + (1) >> 0;
				_r = intFromArg(a, argNum); /* */ $s = 19; case 19: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				p.fmt.wid = _tuple$1[0];
				p.fmt.fmtFlags.widPresent = _tuple$1[1];
				argNum = _tuple$1[2];
				if (!p.fmt.fmtFlags.widPresent) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(BADWIDTH)");
				}
				if (p.fmt.wid < 0) {
					p.fmt.wid = -p.fmt.wid;
					p.fmt.fmtFlags.minus = true;
					p.fmt.fmtFlags.zero = false;
				}
				afterIndex = false;
				$s = 18; continue;
			/* } else { */ case 17:
				_tuple$2 = parsenum(format, i, end);
				p.fmt.wid = _tuple$2[0];
				p.fmt.fmtFlags.widPresent = _tuple$2[1];
				i = _tuple$2[2];
				if (afterIndex && p.fmt.fmtFlags.widPresent) {
					p.goodArgNum = false;
				}
			/* } */ case 18:
			/* */ if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { */ case 20:
				i = i + (1) >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$3[0];
				i = _tuple$3[1];
				afterIndex = _tuple$3[2];
				/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 22:
					i = i + (1) >> 0;
					_r$1 = intFromArg(a, argNum); /* */ $s = 25; case 25: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$4 = _r$1;
					p.fmt.prec = _tuple$4[0];
					p.fmt.fmtFlags.precPresent = _tuple$4[1];
					argNum = _tuple$4[2];
					if (p.fmt.prec < 0) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = false;
					}
					if (!p.fmt.fmtFlags.precPresent) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(BADPREC)");
					}
					afterIndex = false;
					$s = 24; continue;
				/* } else { */ case 23:
					_tuple$5 = parsenum(format, i, end);
					p.fmt.prec = _tuple$5[0];
					p.fmt.fmtFlags.precPresent = _tuple$5[1];
					i = _tuple$5[2];
					if (!p.fmt.fmtFlags.precPresent) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = true;
					}
				/* } */ case 24:
			/* } */ case 21:
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$6[0];
				i = _tuple$6[1];
				afterIndex = _tuple$6[2];
			}
			if (i >= end) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(NOVERB)");
				/* break; */ $s = 2; continue;
			}
			_tuple$7 = utf8.DecodeRuneInString($substring(format, i));
			verb = _tuple$7[0];
			w = _tuple$7[1];
			i = i + (w) >> 0;
				/* */ if ((verb === 37)) { $s = 27; continue; }
				/* */ if (!p.goodArgNum) { $s = 28; continue; }
				/* */ if (argNum >= a.$length) { $s = 29; continue; }
				/* */ if ((verb === 118)) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if ((verb === 37)) { */ case 27:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(37);
					$s = 32; continue;
				/* } else if (!p.goodArgNum) { */ case 28:
					p.badArgNum(verb);
					$s = 32; continue;
				/* } else if (argNum >= a.$length) { */ case 29:
					p.missingArg(verb);
					$s = 32; continue;
				/* } else if ((verb === 118)) { */ case 30:
					p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
					p.fmt.fmtFlags.sharp = false;
					p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
					p.fmt.fmtFlags.plus = false;
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
					$s = 32; continue;
				/* } else { */ case 31:
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
				/* } */ case 32:
			case 26:
		/* } */ $s = 1; continue; case 2:
		/* */ if (!p.reordered && argNum < a.$length) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (!p.reordered && argNum < a.$length) { */ case 35:
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(EXTRA ");
			_ref = $subslice(a, argNum);
			_i = 0;
			/* while (true) { */ case 37:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 38; continue; }
				i$1 = _i;
				arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (i$1 > 0) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
				}
				/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 39:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
					$s = 41; continue;
				/* } else { */ case 40:
					_r$2 = reflect.TypeOf(arg).String(); /* */ $s = 42; case 42: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
					$r = p.printArg(arg, 118); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 41:
				_i++;
			/* } */ $s = 37; continue; case 38:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintf }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.a = a; $f.afterIndex = afterIndex; $f.arg = arg; $f.argNum = argNum; $f.c = c; $f.end = end; $f.format = format; $f.i = i; $f.i$1 = i$1; $f.lasti = lasti; $f.p = p; $f.verb = verb; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	pp.ptr.prototype.doPrint = function(a) {
		var $ptr, _i, _r, _ref, _v, a, arg, argNum, isString, p, prevString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _v = $f._v; a = $f.a; arg = $f.arg; argNum = $f.argNum; isString = $f.isString; p = $f.p; prevString = $f.prevString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		prevString = false;
		_ref = a;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			argNum = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!(!($interfaceIsEqual(arg, $ifaceNil)))) { _v = false; $s = 3; continue s; }
			_r = reflect.TypeOf(arg).Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r === 24; case 3:
			isString = _v;
			if (argNum > 0 && !isString && !prevString) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
			}
			$r = p.printArg(arg, 118); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			prevString = isString;
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrint }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._v = _v; $f.a = a; $f.arg = arg; $f.argNum = argNum; $f.isString = isString; $f.p = p; $f.prevString = prevString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrint = function(a) { return this.$val.doPrint(a); };
	pp.ptr.prototype.doPrintln = function(a) {
		var $ptr, _i, _ref, a, arg, argNum, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; a = $f.a; arg = $f.arg; argNum = $f.argNum; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = a;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			argNum = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (argNum > 0) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
			}
			$r = p.printArg(arg, 118); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(10);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintln }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.a = a; $f.arg = arg; $f.argNum = argNum; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintln = function(a) { return this.$val.doPrintln(a); };
	ss.ptr.prototype.Read = function(buf) {
		var $ptr, _tmp, _tmp$1, buf, err, n, s;
		n = 0;
		err = $ifaceNil;
		s = this;
		_tmp = 0;
		_tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune");
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.ptr.prototype.ReadRune = function() {
		var $ptr, _r, _tuple, err, r, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		s = this;
		if (s.atEOF || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			$s = -1; return [r, size, err];
		}
		_r = s.rs.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		size = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			s.count = s.count + (1) >> 0;
			if (s.ssave.nlIsEnd && (r === 10)) {
				s.atEOF = true;
			}
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		$s = -1; return [r, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.ReadRune }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.ptr.prototype.Width = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, ok, s, wid;
		wid = 0;
		ok = false;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0;
			_tmp$1 = false;
			wid = _tmp;
			ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid;
		_tmp$3 = true;
		wid = _tmp$2;
		ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.ptr.prototype.getRune = function() {
		var $ptr, _r, _tuple, err, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		s = this;
		_r = s.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				$s = -1; return r;
			}
			s.error(err);
		}
		$s = -1; return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.getRune }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.ptr.prototype.UnreadRune = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.rs.UnreadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		s.atEOF = false;
		s.count = s.count - (1) >> 0;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.UnreadRune }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.ptr.prototype.error = function(err) {
		var $ptr, err, s, x;
		s = this;
		$panic((x = new scanError.ptr(err), new x.constructor.elem(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.ptr.prototype.errorString = function(err) {
		var $ptr, err, s, x;
		s = this;
		$panic((x = new scanError.ptr(errors.New(err)), new x.constructor.elem(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.ptr.prototype.Token = function(skipSpace, f) {
		var $ptr, _r, err, f, s, skipSpace, tok, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; err = $f.err; f = $f.f; s = $f.s; skipSpace = $f.skipSpace; tok = $f.tok; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		tok = sliceType$2.nil;
		err[0] = $ifaceNil;
		s = this;
		$deferred.push([(function(err) { return function() {
			var $ptr, _tuple, e, ok, se;
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple = $assertType(e, scanError, true);
				se = $clone(_tuple[0], scanError);
				ok = _tuple[1];
				if (ok) {
					err[0] = se.err;
				} else {
					$panic(e);
				}
			}
		}; })(err), []]);
		if (f === $throwNilPointerError) {
			f = notSpace;
		}
		s.buf = $subslice(s.buf, 0, 0);
		_r = s.token(skipSpace, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		tok = _r;
		$s = -1; return [tok, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tok, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ss.ptr.prototype.Token }; } $f.$ptr = $ptr; $f._r = _r; $f.err = err; $f.f = f; $f.s = s; $f.skipSpace = skipSpace; $f.tok = tok; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var $ptr, _i, _ref, r, rng, rx;
		if (r >= 65536) {
			return false;
		}
		rx = (r << 16 >>> 16);
		_ref = space;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rng = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), arrayType$1);
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		var $ptr, r;
		return !isSpace(r);
	};
	ss.ptr.prototype.SkipSpace = function() {
		var $ptr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.skipSpace(false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.SkipSpace }; } $f.$ptr = $ptr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	ss.ptr.prototype.free = function(old) {
		var $ptr, old, s;
		s = this;
		if (old.validSave) {
			ssave.copy(s.ssave, old);
			return;
		}
		if (s.buf.$capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rs = $ifaceNil;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.ptr.prototype.skipSpace = function(stopAtNewline) {
		var $ptr, _r, _r$1, _r$2, _v, r, s, stopAtNewline, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _v = $f._v; r = $f.r; s = $f.s; stopAtNewline = $f.stopAtNewline; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			_r = s.getRune(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				$s = -1; return;
			}
			if (!(r === 13)) { _v = false; $s = 6; continue s; }
			_r$1 = s.peek("\n"); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			/* */ if (r === 10) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (r === 10) { */ case 8:
				if (stopAtNewline) {
					/* break; */ $s = 2; continue;
				}
				if (s.ssave.nlIsSpace) {
					/* continue; */ $s = 1; continue;
				}
				s.errorString("unexpected newline");
				$s = -1; return;
			/* } */ case 9:
			/* */ if (!isSpace(r)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!isSpace(r)) { */ case 10:
				_r$2 = s.UnreadRune(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 2; continue;
			/* } */ case 11:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.skipSpace }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._v = _v; $f.r = r; $f.s = s; $f.stopAtNewline = stopAtNewline; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.skipSpace = function(stopAtNewline) { return this.$val.skipSpace(stopAtNewline); };
	ss.ptr.prototype.token = function(skipSpace, f) {
		var $ptr, _r, _r$1, _r$2, f, r, s, skipSpace, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; r = $f.r; s = $f.s; skipSpace = $f.skipSpace; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (skipSpace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (skipSpace) { */ case 1:
			$r = s.skipSpace(false); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* while (true) { */ case 4:
			_r = s.getRune(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				/* break; */ $s = 5; continue;
			}
			_r$1 = f(r); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				_r$2 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 5; continue;
			/* } */ case 8:
			(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r);
		/* } */ $s = 4; continue; case 5:
		$s = -1; return (x = s.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.token }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.r = r; $f.s = s; $f.skipSpace = skipSpace; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var $ptr, _i, _ref, _rune, c, i, r, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.ptr.prototype.peek = function(ok) {
		var $ptr, _r, _r$1, ok, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; ok = $f.ok; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = _r;
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$1 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		$s = -1; return indexRune(ok, r) >= 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.peek }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.ok = ok; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	ptrType$25.methods = [{prop: "clearflags", name: "clearflags", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "init", name: "init", pkg: "fmt", typ: $funcType([ptrType$1], [], false)}, {prop: "writePadding", name: "writePadding", pkg: "fmt", typ: $funcType([$Int], [], false)}, {prop: "pad", name: "pad", pkg: "fmt", typ: $funcType([sliceType$2], [], false)}, {prop: "padString", name: "padString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_boolean", name: "fmt_boolean", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "fmt_unicode", name: "fmt_unicode", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_integer", name: "fmt_integer", pkg: "fmt", typ: $funcType([$Uint64, $Int, $Bool, $String], [], false)}, {prop: "truncate", name: "truncate", pkg: "fmt", typ: $funcType([$String], [$String], false)}, {prop: "fmt_s", name: "fmt_s", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_sbx", name: "fmt_sbx", pkg: "fmt", typ: $funcType([$String, sliceType$2, $String], [], false)}, {prop: "fmt_sx", name: "fmt_sx", pkg: "fmt", typ: $funcType([$String, $String], [], false)}, {prop: "fmt_bx", name: "fmt_bx", pkg: "fmt", typ: $funcType([sliceType$2, $String], [], false)}, {prop: "fmt_q", name: "fmt_q", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_c", name: "fmt_c", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_qc", name: "fmt_qc", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_float", name: "fmt_float", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32, $Int], [], false)}];
	ptrType$1.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [], false)}];
	ptrType$2.methods = [{prop: "free", name: "free", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "unknownType", name: "unknownType", pkg: "fmt", typ: $funcType([reflect.Value], [], false)}, {prop: "badVerb", name: "badVerb", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "fmtBool", name: "fmtBool", pkg: "fmt", typ: $funcType([$Bool, $Int32], [], false)}, {prop: "fmt0x64", name: "fmt0x64", pkg: "fmt", typ: $funcType([$Uint64, $Bool], [], false)}, {prop: "fmtInteger", name: "fmtInteger", pkg: "fmt", typ: $funcType([$Uint64, $Bool, $Int32], [], false)}, {prop: "fmtFloat", name: "fmtFloat", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32], [], false)}, {prop: "fmtComplex", name: "fmtComplex", pkg: "fmt", typ: $funcType([$Complex128, $Int, $Int32], [], false)}, {prop: "fmtString", name: "fmtString", pkg: "fmt", typ: $funcType([$String, $Int32], [], false)}, {prop: "fmtBytes", name: "fmtBytes", pkg: "fmt", typ: $funcType([sliceType$2, $Int32, $String], [], false)}, {prop: "fmtPointer", name: "fmtPointer", pkg: "fmt", typ: $funcType([reflect.Value, $Int32], [], false)}, {prop: "catchPanic", name: "catchPanic", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "handleMethods", name: "handleMethods", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "printArg", name: "printArg", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "printValue", name: "printValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [], false)}, {prop: "argNumber", name: "argNumber", pkg: "fmt", typ: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: "badArgNum", name: "badArgNum", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "missingArg", name: "missingArg", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "doPrintf", name: "doPrintf", pkg: "fmt", typ: $funcType([$String, sliceType], [], false)}, {prop: "doPrint", name: "doPrint", pkg: "fmt", typ: $funcType([sliceType], [], false)}, {prop: "doPrintln", name: "doPrintln", pkg: "fmt", typ: $funcType([sliceType], [], false)}];
	ptrType$5.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "getRune", name: "getRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "mustReadRune", name: "mustReadRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "error", name: "error", pkg: "fmt", typ: $funcType([$error], [], false)}, {prop: "errorString", name: "errorString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType$2, $error], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "free", name: "free", pkg: "fmt", typ: $funcType([ssave], [], false)}, {prop: "skipSpace", name: "skipSpace", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "token", name: "token", pkg: "fmt", typ: $funcType([$Bool, funcType], [sliceType$2], false)}, {prop: "consume", name: "consume", pkg: "fmt", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: "peek", name: "peek", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "notEOF", name: "notEOF", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "accept", name: "accept", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "okVerb", name: "okVerb", pkg: "fmt", typ: $funcType([$Int32, $String, $String], [$Bool], false)}, {prop: "scanBool", name: "scanBool", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "getBase", name: "getBase", pkg: "fmt", typ: $funcType([$Int32], [$Int, $String], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "fmt", typ: $funcType([$String, $Bool], [$String], false)}, {prop: "scanRune", name: "scanRune", pkg: "fmt", typ: $funcType([$Int], [$Int64], false)}, {prop: "scanBasePrefix", name: "scanBasePrefix", pkg: "fmt", typ: $funcType([], [$Int, $String, $Bool], false)}, {prop: "scanInt", name: "scanInt", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Int64], false)}, {prop: "scanUint", name: "scanUint", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Uint64], false)}, {prop: "floatToken", name: "floatToken", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "complexTokens", name: "complexTokens", pkg: "fmt", typ: $funcType([], [$String, $String], false)}, {prop: "convertFloat", name: "convertFloat", pkg: "fmt", typ: $funcType([$String, $Int], [$Float64], false)}, {prop: "scanComplex", name: "scanComplex", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Complex128], false)}, {prop: "convertString", name: "convertString", pkg: "fmt", typ: $funcType([$Int32], [$String], false)}, {prop: "quotedString", name: "quotedString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "hexByte", name: "hexByte", pkg: "fmt", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "hexString", name: "hexString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "scanOne", name: "scanOne", pkg: "fmt", typ: $funcType([$Int32, $emptyInterface], [], false)}, {prop: "doScan", name: "doScan", pkg: "fmt", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "advance", name: "advance", pkg: "fmt", typ: $funcType([$String], [$Int], false)}, {prop: "doScanf", name: "doScanf", pkg: "fmt", typ: $funcType([$String, sliceType], [$Int, $error], false)}];
	fmtFlags.init("fmt", [{prop: "widPresent", name: "widPresent", exported: false, typ: $Bool, tag: ""}, {prop: "precPresent", name: "precPresent", exported: false, typ: $Bool, tag: ""}, {prop: "minus", name: "minus", exported: false, typ: $Bool, tag: ""}, {prop: "plus", name: "plus", exported: false, typ: $Bool, tag: ""}, {prop: "sharp", name: "sharp", exported: false, typ: $Bool, tag: ""}, {prop: "space", name: "space", exported: false, typ: $Bool, tag: ""}, {prop: "zero", name: "zero", exported: false, typ: $Bool, tag: ""}, {prop: "plusV", name: "plusV", exported: false, typ: $Bool, tag: ""}, {prop: "sharpV", name: "sharpV", exported: false, typ: $Bool, tag: ""}]);
	fmt.init("fmt", [{prop: "buf", name: "buf", exported: false, typ: ptrType$1, tag: ""}, {prop: "fmtFlags", name: "", exported: false, typ: fmtFlags, tag: ""}, {prop: "wid", name: "wid", exported: false, typ: $Int, tag: ""}, {prop: "prec", name: "prec", exported: false, typ: $Int, tag: ""}, {prop: "intbuf", name: "intbuf", exported: false, typ: arrayType, tag: ""}]);
	State.init([{prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}]);
	Formatter.init([{prop: "Format", name: "Format", pkg: "", typ: $funcType([State, $Int32], [], false)}]);
	Stringer.init([{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	GoStringer.init([{prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}]);
	buffer.init($Uint8);
	pp.init("fmt", [{prop: "buf", name: "buf", exported: false, typ: buffer, tag: ""}, {prop: "arg", name: "arg", exported: false, typ: $emptyInterface, tag: ""}, {prop: "value", name: "value", exported: false, typ: reflect.Value, tag: ""}, {prop: "fmt", name: "fmt", exported: false, typ: fmt, tag: ""}, {prop: "reordered", name: "reordered", exported: false, typ: $Bool, tag: ""}, {prop: "goodArgNum", name: "goodArgNum", exported: false, typ: $Bool, tag: ""}, {prop: "panicking", name: "panicking", exported: false, typ: $Bool, tag: ""}, {prop: "erroring", name: "erroring", exported: false, typ: $Bool, tag: ""}]);
	scanError.init("fmt", [{prop: "err", name: "err", exported: false, typ: $error, tag: ""}]);
	ss.init("fmt", [{prop: "rs", name: "rs", exported: false, typ: io.RuneScanner, tag: ""}, {prop: "buf", name: "buf", exported: false, typ: buffer, tag: ""}, {prop: "count", name: "count", exported: false, typ: $Int, tag: ""}, {prop: "atEOF", name: "atEOF", exported: false, typ: $Bool, tag: ""}, {prop: "ssave", name: "", exported: false, typ: ssave, tag: ""}]);
	ssave.init("fmt", [{prop: "validSave", name: "validSave", exported: false, typ: $Bool, tag: ""}, {prop: "nlIsEnd", name: "nlIsEnd", exported: false, typ: $Bool, tag: ""}, {prop: "nlIsSpace", name: "nlIsSpace", exported: false, typ: $Bool, tag: ""}, {prop: "argLimit", name: "argLimit", exported: false, typ: $Int, tag: ""}, {prop: "limit", name: "limit", exported: false, typ: $Int, tag: ""}, {prop: "maxWid", name: "maxWid", exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ppFree = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			var $ptr;
			return new pp.ptr(buffer.nil, $ifaceNil, new reflect.Value.ptr(ptrType.nil, 0, 0), new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType.zero()), false, false, false, false);
		}));
		byteType = reflect.TypeOf(new $Uint8(0));
		space = new sliceType$1([$toNativeArray($kindUint16, [9, 13]), $toNativeArray($kindUint16, [32, 32]), $toNativeArray($kindUint16, [133, 133]), $toNativeArray($kindUint16, [160, 160]), $toNativeArray($kindUint16, [5760, 5760]), $toNativeArray($kindUint16, [8192, 8202]), $toNativeArray($kindUint16, [8232, 8233]), $toNativeArray($kindUint16, [8239, 8239]), $toNativeArray($kindUint16, [8287, 8287]), $toNativeArray($kindUint16, [12288, 12288])]);
		ssFree = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			var $ptr;
			return new ss.ptr($ifaceNil, buffer.nil, 0, false, new ssave.ptr(false, false, false, 0, 0, 0));
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["context"] = (function() {
	var $pkg = {}, $init, errors, fmt, reflect, sync, time, Context, emptyCtx, canceler, cancelCtx, timerCtx, valueCtx, ptrType, ptrType$1, structType, ptrType$2, ptrType$3, ptrType$4, sliceType, ptrType$5, chanType, chanType$1, mapType, background, todo, Background, TODO, WithCancel, newCancelCtx, propagateCancel, parentCancelCtx, removeChild;
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	reflect = $packages["reflect"];
	sync = $packages["sync"];
	time = $packages["time"];
	Context = $pkg.Context = $newType(8, $kindInterface, "context.Context", true, "context", true, null);
	emptyCtx = $pkg.emptyCtx = $newType(4, $kindInt, "context.emptyCtx", true, "context", false, null);
	canceler = $pkg.canceler = $newType(8, $kindInterface, "context.canceler", true, "context", false, null);
	cancelCtx = $pkg.cancelCtx = $newType(0, $kindStruct, "context.cancelCtx", true, "context", false, function(Context_, done_, mu_, children_, err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Context = $ifaceNil;
			this.done = $chanNil;
			this.mu = new sync.Mutex.ptr(0, 0);
			this.children = false;
			this.err = $ifaceNil;
			return;
		}
		this.Context = Context_;
		this.done = done_;
		this.mu = mu_;
		this.children = children_;
		this.err = err_;
	});
	timerCtx = $pkg.timerCtx = $newType(0, $kindStruct, "context.timerCtx", true, "context", false, function(cancelCtx_, timer_, deadline_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.cancelCtx = new cancelCtx.ptr($ifaceNil, $chanNil, new sync.Mutex.ptr(0, 0), false, $ifaceNil);
			this.timer = ptrType$5.nil;
			this.deadline = new time.Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil);
			return;
		}
		this.cancelCtx = cancelCtx_;
		this.timer = timer_;
		this.deadline = deadline_;
	});
	valueCtx = $pkg.valueCtx = $newType(0, $kindStruct, "context.valueCtx", true, "context", false, function(Context_, key_, val_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Context = $ifaceNil;
			this.key = $ifaceNil;
			this.val = $ifaceNil;
			return;
		}
		this.Context = Context_;
		this.key = key_;
		this.val = val_;
	});
	ptrType = $ptrType(emptyCtx);
	ptrType$1 = $ptrType(time.Location);
	structType = $structType("", []);
	ptrType$2 = $ptrType(cancelCtx);
	ptrType$3 = $ptrType(timerCtx);
	ptrType$4 = $ptrType(valueCtx);
	sliceType = $sliceType($emptyInterface);
	ptrType$5 = $ptrType(time.Timer);
	chanType = $chanType(structType, false, true);
	chanType$1 = $chanType(structType, false, false);
	mapType = $mapType(canceler, structType);
	$ptrType(emptyCtx).prototype.Deadline = function() {
		var $ptr, deadline, ok;
		deadline = new time.Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil);
		ok = false;
		return [deadline, ok];
	};
	$ptrType(emptyCtx).prototype.Done = function() {
		var $ptr;
		return $chanNil;
	};
	$ptrType(emptyCtx).prototype.Err = function() {
		var $ptr;
		return $ifaceNil;
	};
	$ptrType(emptyCtx).prototype.Value = function(key) {
		var $ptr, key;
		return $ifaceNil;
	};
	$ptrType(emptyCtx).prototype.String = function() {
		var $ptr, _1, e;
		e = this;
		_1 = e;
		if (_1 === (background)) {
			return "context.Background";
		} else if (_1 === (todo)) {
			return "context.TODO";
		}
		return "unknown empty Context";
	};
	Background = function() {
		var $ptr;
		return background;
	};
	$pkg.Background = Background;
	TODO = function() {
		var $ptr;
		return todo;
	};
	$pkg.TODO = TODO;
	WithCancel = function(parent) {
		var $ptr, _tmp, _tmp$1, c, cancel, ctx, parent, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; c = $f.c; cancel = $f.cancel; ctx = $f.ctx; parent = $f.parent; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = [c];
		ctx = $ifaceNil;
		cancel = $throwNilPointerError;
		c[0] = $clone(newCancelCtx(parent), cancelCtx);
		$r = propagateCancel(parent, c[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp = c[0];
		_tmp$1 = (function(c) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = c[0].cancel(true, $pkg.Canceled); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(c);
		ctx = _tmp;
		cancel = _tmp$1;
		$s = -1; return [ctx, cancel];
		/* */ } return; } if ($f === undefined) { $f = { $blk: WithCancel }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.c = c; $f.cancel = cancel; $f.ctx = ctx; $f.parent = parent; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.WithCancel = WithCancel;
	newCancelCtx = function(parent) {
		var $ptr, parent;
		return new cancelCtx.ptr(parent, new $Chan(structType, 0), new sync.Mutex.ptr(0, 0), false, $ifaceNil);
	};
	propagateCancel = function(parent, child) {
		var $ptr, _key, _r, _tuple, child, ok, p, parent, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r = $f._r; _tuple = $f._tuple; child = $f.child; ok = $f.ok; p = $f.p; parent = $f.parent; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		child = [child];
		parent = [parent];
		_r = parent[0].Done(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === $chanNil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === $chanNil) { */ case 1:
			$s = -1; return;
		/* } */ case 2:
		_tuple = parentCancelCtx(parent[0]);
		p = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (ok) { */ case 4:
			$r = p.mu.Lock(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(p.err, $ifaceNil))) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!($interfaceIsEqual(p.err, $ifaceNil))) { */ case 8:
				$r = child[0].cancel(false, p.err); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 10; continue;
			/* } else { */ case 9:
				if (p.children === false) {
					p.children = {};
				}
				_key = child[0]; (p.children || $throwRuntimeError("assignment to entry in nil map"))[canceler.keyFor(_key)] = { k: _key, v: new structType.ptr() };
			/* } */ case 10:
			$r = p.mu.Unlock(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 6; continue;
		/* } else { */ case 5:
			$go((function(child, parent) { return function $b() {
				var $ptr, _arg, _r$1, _r$2, _r$3, _r$4, _selection, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _selection = $f._selection; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r$1 = parent[0].Done(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = child[0].Done(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = $select([[_r$1], [_r$2]]); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_selection = _r$3;
				/* */ if (_selection[0] === 0) { $s = 4; continue; }
				/* */ if (_selection[0] === 1) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_selection[0] === 0) { */ case 4:
					_r$4 = parent[0].Err(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_arg = _r$4;
					$r = child[0].cancel(false, _arg); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 6; continue;
				/* } else if (_selection[0] === 1) { */ case 5:
				/* } */ case 6:
				$s = -1; return;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._selection = _selection; $f.$s = $s; $f.$r = $r; return $f;
			}; })(child, parent), []);
		/* } */ case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: propagateCancel }; } $f.$ptr = $ptr; $f._key = _key; $f._r = _r; $f._tuple = _tuple; $f.child = child; $f.ok = ok; $f.p = p; $f.parent = parent; $f.$s = $s; $f.$r = $r; return $f;
	};
	parentCancelCtx = function(parent) {
		var $ptr, _ref, c, c$1, c$2, c$3, parent;
		while (true) {
			_ref = parent;
			if ($assertType(_ref, ptrType$2, true)[1]) {
				c = _ref.$val;
				return [c, true];
			} else if ($assertType(_ref, ptrType$3, true)[1]) {
				c$1 = _ref.$val;
				return [c$1.cancelCtx, true];
			} else if ($assertType(_ref, ptrType$4, true)[1]) {
				c$2 = _ref.$val;
				parent = c$2.Context;
			} else {
				c$3 = _ref;
				return [ptrType$2.nil, false];
			}
		}
	};
	removeChild = function(parent, child) {
		var $ptr, _tuple, child, ok, p, parent, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; child = $f.child; ok = $f.ok; p = $f.p; parent = $f.parent; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = parentCancelCtx(parent);
		p = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return;
		}
		$r = p.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!(p.children === false)) {
			delete p.children[canceler.keyFor(child)];
		}
		$r = p.mu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: removeChild }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f.child = child; $f.ok = ok; $f.p = p; $f.parent = parent; $f.$s = $s; $f.$r = $r; return $f;
	};
	cancelCtx.ptr.prototype.Done = function() {
		var $ptr, c;
		c = this;
		return c.done;
	};
	cancelCtx.prototype.Done = function() { return this.$val.Done(); };
	cancelCtx.ptr.prototype.Err = function() {
		var $ptr, c, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; c = $f.c; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		c = this;
		$r = c.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(c.mu, "Unlock"), []]);
		$s = -1; return c.err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: cancelCtx.ptr.prototype.Err }; } $f.$ptr = $ptr; $f.c = c; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	cancelCtx.prototype.Err = function() { return this.$val.Err(); };
	cancelCtx.ptr.prototype.String = function() {
		var $ptr, _r, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = fmt.Sprintf("%v.WithCancel", new sliceType([c.Context])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cancelCtx.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	cancelCtx.prototype.String = function() { return this.$val.String(); };
	cancelCtx.ptr.prototype.cancel = function(removeFromParent, err) {
		var $ptr, _entry, _i, _keys, _ref, c, child, err, removeFromParent, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _ref = $f._ref; c = $f.c; child = $f.child; err = $f.err; removeFromParent = $f.removeFromParent; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			$panic(new $String("context: internal error: missing cancel error"));
		}
		$r = c.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!($interfaceIsEqual(c.err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(c.err, $ifaceNil))) { */ case 2:
			$r = c.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 3:
		c.err = err;
		$close(c.done);
		_ref = c.children;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 5:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 6; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 5; continue;
			}
			child = _entry.k;
			$r = child.cancel(false, err); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 5; continue; case 6:
		c.children = false;
		$r = c.mu.Unlock(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (removeFromParent) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (removeFromParent) { */ case 9:
			$r = removeChild(c.Context, c); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 10:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cancelCtx.ptr.prototype.cancel }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._ref = _ref; $f.c = c; $f.child = child; $f.err = err; $f.removeFromParent = removeFromParent; $f.$s = $s; $f.$r = $r; return $f;
	};
	cancelCtx.prototype.cancel = function(removeFromParent, err) { return this.$val.cancel(removeFromParent, err); };
	timerCtx.ptr.prototype.Deadline = function() {
		var $ptr, _tmp, _tmp$1, c, deadline, ok;
		deadline = new time.Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil);
		ok = false;
		c = this;
		_tmp = $clone(c.deadline, time.Time);
		_tmp$1 = true;
		time.Time.copy(deadline, _tmp);
		ok = _tmp$1;
		return [deadline, ok];
	};
	timerCtx.prototype.Deadline = function() { return this.$val.Deadline(); };
	timerCtx.ptr.prototype.String = function() {
		var $ptr, _r, c, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = fmt.Sprintf("%v.WithDeadline(%s [%s])", new sliceType([c.cancelCtx.Context, (x$1 = c.deadline, new x$1.constructor.elem(x$1)), time.Until($clone(c.deadline, time.Time))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: timerCtx.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	timerCtx.prototype.String = function() { return this.$val.String(); };
	timerCtx.ptr.prototype.cancel = function(removeFromParent, err) {
		var $ptr, c, err, removeFromParent, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; c = $f.c; err = $f.err; removeFromParent = $f.removeFromParent; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		$r = c.cancelCtx.cancel(false, err); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (removeFromParent) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (removeFromParent) { */ case 2:
			$r = removeChild(c.cancelCtx.Context, c); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$r = c.cancelCtx.mu.Lock(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!(c.timer === ptrType$5.nil)) {
			c.timer.Stop();
			c.timer = ptrType$5.nil;
		}
		$r = c.cancelCtx.mu.Unlock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: timerCtx.ptr.prototype.cancel }; } $f.$ptr = $ptr; $f.c = c; $f.err = err; $f.removeFromParent = removeFromParent; $f.$s = $s; $f.$r = $r; return $f;
	};
	timerCtx.prototype.cancel = function(removeFromParent, err) { return this.$val.cancel(removeFromParent, err); };
	valueCtx.ptr.prototype.String = function() {
		var $ptr, _r, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = fmt.Sprintf("%v.WithValue(%#v, %#v)", new sliceType([c.Context, c.key, c.val])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: valueCtx.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	valueCtx.prototype.String = function() { return this.$val.String(); };
	valueCtx.ptr.prototype.Value = function(key) {
		var $ptr, _r, c, key, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; key = $f.key; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if ($interfaceIsEqual(c.key, key)) {
			$s = -1; return c.val;
		}
		_r = c.Context.Value(key); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: valueCtx.ptr.prototype.Value }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.key = key; $f.$s = $s; $f.$r = $r; return $f;
	};
	valueCtx.prototype.Value = function(key) { return this.$val.Value(key); };
	ptrType.methods = [{prop: "Deadline", name: "Deadline", pkg: "", typ: $funcType([], [time.Time, $Bool], false)}, {prop: "Done", name: "Done", pkg: "", typ: $funcType([], [chanType], false)}, {prop: "Err", name: "Err", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Value", name: "Value", pkg: "", typ: $funcType([$emptyInterface], [$emptyInterface], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "Done", name: "Done", pkg: "", typ: $funcType([], [chanType], false)}, {prop: "Err", name: "Err", pkg: "", typ: $funcType([], [$error], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "cancel", name: "cancel", pkg: "context", typ: $funcType([$Bool, $error], [], false)}];
	ptrType$3.methods = [{prop: "Deadline", name: "Deadline", pkg: "", typ: $funcType([], [time.Time, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "cancel", name: "cancel", pkg: "context", typ: $funcType([$Bool, $error], [], false)}];
	ptrType$4.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Value", name: "Value", pkg: "", typ: $funcType([$emptyInterface], [$emptyInterface], false)}];
	Context.init([{prop: "Deadline", name: "Deadline", pkg: "", typ: $funcType([], [time.Time, $Bool], false)}, {prop: "Done", name: "Done", pkg: "", typ: $funcType([], [chanType], false)}, {prop: "Err", name: "Err", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Value", name: "Value", pkg: "", typ: $funcType([$emptyInterface], [$emptyInterface], false)}]);
	canceler.init([{prop: "Done", name: "Done", pkg: "", typ: $funcType([], [chanType], false)}, {prop: "cancel", name: "cancel", pkg: "context", typ: $funcType([$Bool, $error], [], false)}]);
	cancelCtx.init("context", [{prop: "Context", name: "", exported: true, typ: Context, tag: ""}, {prop: "done", name: "done", exported: false, typ: chanType$1, tag: ""}, {prop: "mu", name: "mu", exported: false, typ: sync.Mutex, tag: ""}, {prop: "children", name: "children", exported: false, typ: mapType, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}]);
	timerCtx.init("context", [{prop: "cancelCtx", name: "", exported: false, typ: cancelCtx, tag: ""}, {prop: "timer", name: "timer", exported: false, typ: ptrType$5, tag: ""}, {prop: "deadline", name: "deadline", exported: false, typ: time.Time, tag: ""}]);
	valueCtx.init("context", [{prop: "Context", name: "", exported: true, typ: Context, tag: ""}, {prop: "key", name: "key", exported: false, typ: $emptyInterface, tag: ""}, {prop: "val", name: "val", exported: false, typ: $emptyInterface, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Canceled = errors.New("context canceled");
		background = $newDataPointer(0, ptrType);
		todo = $newDataPointer(0, ptrType);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, $init, RangeTable, Range16, Range32, CaseRange, d, foldPair, arrayType, sliceType, sliceType$1, sliceType$3, sliceType$4, _L, _Nd, _White_Space, _CaseRanges, properties, asciiFold, caseOrbit, to, IsDigit, IsLetter, IsSpace, is16, is32, isExcludingLatin, To, ToUpper, ToLower, SimpleFold;
	RangeTable = $pkg.RangeTable = $newType(0, $kindStruct, "unicode.RangeTable", true, "unicode", true, function(R16_, R32_, LatinOffset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R16 = sliceType.nil;
			this.R32 = sliceType$1.nil;
			this.LatinOffset = 0;
			return;
		}
		this.R16 = R16_;
		this.R32 = R32_;
		this.LatinOffset = LatinOffset_;
	});
	Range16 = $pkg.Range16 = $newType(0, $kindStruct, "unicode.Range16", true, "unicode", true, function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	Range32 = $pkg.Range32 = $newType(0, $kindStruct, "unicode.Range32", true, "unicode", true, function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	CaseRange = $pkg.CaseRange = $newType(0, $kindStruct, "unicode.CaseRange", true, "unicode", true, function(Lo_, Hi_, Delta_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Delta = arrayType.zero();
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Delta = Delta_;
	});
	d = $pkg.d = $newType(12, $kindArray, "unicode.d", true, "unicode", false, null);
	foldPair = $pkg.foldPair = $newType(0, $kindStruct, "unicode.foldPair", true, "unicode", false, function(From_, To_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.From = 0;
			this.To = 0;
			return;
		}
		this.From = From_;
		this.To = To_;
	});
	arrayType = $arrayType($Int32, 3);
	sliceType = $sliceType(Range16);
	sliceType$1 = $sliceType(Range32);
	sliceType$3 = $sliceType(CaseRange);
	sliceType$4 = $sliceType(foldPair);
	to = function(_case, r, caseRange) {
		var $ptr, _case, _q, caseRange, cr, delta, hi, lo, m, r, x;
		if (_case < 0 || 3 <= _case) {
			return 65533;
		}
		lo = 0;
		hi = caseRange.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			cr = ((m < 0 || m >= caseRange.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseRange.$array[caseRange.$offset + m]);
			if ((cr.Lo >> 0) <= r && r <= (cr.Hi >> 0)) {
				delta = (x = cr.Delta, ((_case < 0 || _case >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[_case]));
				if (delta > 1114111) {
					return (cr.Lo >> 0) + ((((((r - (cr.Lo >> 0) >> 0)) & ~1) >> 0) | ((_case & 1) >> 0))) >> 0;
				}
				return r + delta >> 0;
			}
			if (r < (cr.Lo >> 0)) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return r;
	};
	IsDigit = function(r) {
		var $ptr, r;
		if (r <= 255) {
			return 48 <= r && r <= 57;
		}
		return isExcludingLatin($pkg.Digit, r);
	};
	$pkg.IsDigit = IsDigit;
	IsLetter = function(r) {
		var $ptr, r, x;
		if ((r >>> 0) <= 255) {
			return !(((((x = (r << 24 >>> 24), ((x < 0 || x >= properties.length) ? ($throwRuntimeError("index out of range"), undefined) : properties[x])) & 96) >>> 0) === 0));
		}
		return isExcludingLatin($pkg.Letter, r);
	};
	$pkg.IsLetter = IsLetter;
	IsSpace = function(r) {
		var $ptr, _1, r;
		if ((r >>> 0) <= 255) {
			_1 = r;
			if ((_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12)) || (_1 === (13)) || (_1 === (32)) || (_1 === (133)) || (_1 === (160))) {
				return true;
			}
			return false;
		}
		return isExcludingLatin($pkg.White_Space, r);
	};
	$pkg.IsSpace = IsSpace;
	is16 = function(ranges, r) {
		var $ptr, _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18 || r <= 255) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = ((m < 0 || m >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + m]);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	is32 = function(ranges, r) {
		var $ptr, _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = $clone(((m < 0 || m >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + m]), Range32);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	isExcludingLatin = function(rangeTab, r) {
		var $ptr, off, r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		off = rangeTab.LatinOffset;
		if (r16.$length > off && r <= ((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? ($throwRuntimeError("index out of range"), undefined) : r16.$array[r16.$offset + x])).Hi >> 0)) {
			return is16($subslice(r16, off), (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= ((0 >= r32.$length ? ($throwRuntimeError("index out of range"), undefined) : r32.$array[r32.$offset + 0]).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	To = function(_case, r) {
		var $ptr, _case, r;
		return to(_case, r, $pkg.CaseRanges);
	};
	$pkg.To = To;
	ToUpper = function(r) {
		var $ptr, r;
		if (r <= 127) {
			if (97 <= r && r <= 122) {
				r = r - (32) >> 0;
			}
			return r;
		}
		return To(0, r);
	};
	$pkg.ToUpper = ToUpper;
	ToLower = function(r) {
		var $ptr, r;
		if (r <= 127) {
			if (65 <= r && r <= 90) {
				r = r + (32) >> 0;
			}
			return r;
		}
		return To(1, r);
	};
	$pkg.ToLower = ToLower;
	SimpleFold = function(r) {
		var $ptr, _q, hi, l, lo, m, r;
		if (r < 0 || r > 1114111) {
			return r;
		}
		if ((r >> 0) < 128) {
			return (((r < 0 || r >= asciiFold.length) ? ($throwRuntimeError("index out of range"), undefined) : asciiFold[r]) >> 0);
		}
		lo = 0;
		hi = caseOrbit.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if ((((m < 0 || m >= caseOrbit.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseOrbit.$array[caseOrbit.$offset + m]).From >> 0) < r) {
				lo = m + 1 >> 0;
			} else {
				hi = m;
			}
		}
		if (lo < caseOrbit.$length && ((((lo < 0 || lo >= caseOrbit.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseOrbit.$array[caseOrbit.$offset + lo]).From >> 0) === r)) {
			return (((lo < 0 || lo >= caseOrbit.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseOrbit.$array[caseOrbit.$offset + lo]).To >> 0);
		}
		l = ToLower(r);
		if (!((l === r))) {
			return l;
		}
		return ToUpper(r);
	};
	$pkg.SimpleFold = SimpleFold;
	RangeTable.init("", [{prop: "R16", name: "R16", exported: true, typ: sliceType, tag: ""}, {prop: "R32", name: "R32", exported: true, typ: sliceType$1, tag: ""}, {prop: "LatinOffset", name: "LatinOffset", exported: true, typ: $Int, tag: ""}]);
	Range16.init("", [{prop: "Lo", name: "Lo", exported: true, typ: $Uint16, tag: ""}, {prop: "Hi", name: "Hi", exported: true, typ: $Uint16, tag: ""}, {prop: "Stride", name: "Stride", exported: true, typ: $Uint16, tag: ""}]);
	Range32.init("", [{prop: "Lo", name: "Lo", exported: true, typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", exported: true, typ: $Uint32, tag: ""}, {prop: "Stride", name: "Stride", exported: true, typ: $Uint32, tag: ""}]);
	CaseRange.init("", [{prop: "Lo", name: "Lo", exported: true, typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", exported: true, typ: $Uint32, tag: ""}, {prop: "Delta", name: "Delta", exported: true, typ: d, tag: ""}]);
	d.init($Int32, 3);
	foldPair.init("", [{prop: "From", name: "From", exported: true, typ: $Uint16, tag: ""}, {prop: "To", name: "To", exported: true, typ: $Uint16, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_L = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(97, 122, 1), new Range16.ptr(170, 181, 11), new Range16.ptr(186, 192, 6), new Range16.ptr(193, 214, 1), new Range16.ptr(216, 246, 1), new Range16.ptr(248, 705, 1), new Range16.ptr(710, 721, 1), new Range16.ptr(736, 740, 1), new Range16.ptr(748, 750, 2), new Range16.ptr(880, 884, 1), new Range16.ptr(886, 887, 1), new Range16.ptr(890, 893, 1), new Range16.ptr(895, 902, 7), new Range16.ptr(904, 906, 1), new Range16.ptr(908, 910, 2), new Range16.ptr(911, 929, 1), new Range16.ptr(931, 1013, 1), new Range16.ptr(1015, 1153, 1), new Range16.ptr(1162, 1327, 1), new Range16.ptr(1329, 1366, 1), new Range16.ptr(1369, 1377, 8), new Range16.ptr(1378, 1415, 1), new Range16.ptr(1488, 1514, 1), new Range16.ptr(1520, 1522, 1), new Range16.ptr(1568, 1610, 1), new Range16.ptr(1646, 1647, 1), new Range16.ptr(1649, 1747, 1), new Range16.ptr(1749, 1765, 16), new Range16.ptr(1766, 1774, 8), new Range16.ptr(1775, 1786, 11), new Range16.ptr(1787, 1788, 1), new Range16.ptr(1791, 1808, 17), new Range16.ptr(1810, 1839, 1), new Range16.ptr(1869, 1957, 1), new Range16.ptr(1969, 1994, 25), new Range16.ptr(1995, 2026, 1), new Range16.ptr(2036, 2037, 1), new Range16.ptr(2042, 2048, 6), new Range16.ptr(2049, 2069, 1), new Range16.ptr(2074, 2084, 10), new Range16.ptr(2088, 2112, 24), new Range16.ptr(2113, 2136, 1), new Range16.ptr(2208, 2228, 1), new Range16.ptr(2230, 2237, 1), new Range16.ptr(2308, 2361, 1), new Range16.ptr(2365, 2384, 19), new Range16.ptr(2392, 2401, 1), new Range16.ptr(2417, 2432, 1), new Range16.ptr(2437, 2444, 1), new Range16.ptr(2447, 2448, 1), new Range16.ptr(2451, 2472, 1), new Range16.ptr(2474, 2480, 1), new Range16.ptr(2482, 2486, 4), new Range16.ptr(2487, 2489, 1), new Range16.ptr(2493, 2510, 17), new Range16.ptr(2524, 2525, 1), new Range16.ptr(2527, 2529, 1), new Range16.ptr(2544, 2545, 1), new Range16.ptr(2565, 2570, 1), new Range16.ptr(2575, 2576, 1), new Range16.ptr(2579, 2600, 1), new Range16.ptr(2602, 2608, 1), new Range16.ptr(2610, 2611, 1), new Range16.ptr(2613, 2614, 1), new Range16.ptr(2616, 2617, 1), new Range16.ptr(2649, 2652, 1), new Range16.ptr(2654, 2674, 20), new Range16.ptr(2675, 2676, 1), new Range16.ptr(2693, 2701, 1), new Range16.ptr(2703, 2705, 1), new Range16.ptr(2707, 2728, 1), new Range16.ptr(2730, 2736, 1), new Range16.ptr(2738, 2739, 1), new Range16.ptr(2741, 2745, 1), new Range16.ptr(2749, 2768, 19), new Range16.ptr(2784, 2785, 1), new Range16.ptr(2809, 2821, 12), new Range16.ptr(2822, 2828, 1), new Range16.ptr(2831, 2832, 1), new Range16.ptr(2835, 2856, 1), new Range16.ptr(2858, 2864, 1), new Range16.ptr(2866, 2867, 1), new Range16.ptr(2869, 2873, 1), new Range16.ptr(2877, 2908, 31), new Range16.ptr(2909, 2911, 2), new Range16.ptr(2912, 2913, 1), new Range16.ptr(2929, 2947, 18), new Range16.ptr(2949, 2954, 1), new Range16.ptr(2958, 2960, 1), new Range16.ptr(2962, 2965, 1), new Range16.ptr(2969, 2970, 1), new Range16.ptr(2972, 2974, 2), new Range16.ptr(2975, 2979, 4), new Range16.ptr(2980, 2984, 4), new Range16.ptr(2985, 2986, 1), new Range16.ptr(2990, 3001, 1), new Range16.ptr(3024, 3077, 53), new Range16.ptr(3078, 3084, 1), new Range16.ptr(3086, 3088, 1), new Range16.ptr(3090, 3112, 1), new Range16.ptr(3114, 3129, 1), new Range16.ptr(3133, 3160, 27), new Range16.ptr(3161, 3162, 1), new Range16.ptr(3168, 3169, 1), new Range16.ptr(3200, 3205, 5), new Range16.ptr(3206, 3212, 1), new Range16.ptr(3214, 3216, 1), new Range16.ptr(3218, 3240, 1), new Range16.ptr(3242, 3251, 1), new Range16.ptr(3253, 3257, 1), new Range16.ptr(3261, 3294, 33), new Range16.ptr(3296, 3297, 1), new Range16.ptr(3313, 3314, 1), new Range16.ptr(3333, 3340, 1), new Range16.ptr(3342, 3344, 1), new Range16.ptr(3346, 3386, 1), new Range16.ptr(3389, 3406, 17), new Range16.ptr(3412, 3414, 1), new Range16.ptr(3423, 3425, 1), new Range16.ptr(3450, 3455, 1), new Range16.ptr(3461, 3478, 1), new Range16.ptr(3482, 3505, 1), new Range16.ptr(3507, 3515, 1), new Range16.ptr(3517, 3520, 3), new Range16.ptr(3521, 3526, 1), new Range16.ptr(3585, 3632, 1), new Range16.ptr(3634, 3635, 1), new Range16.ptr(3648, 3654, 1), new Range16.ptr(3713, 3714, 1), new Range16.ptr(3716, 3719, 3), new Range16.ptr(3720, 3722, 2), new Range16.ptr(3725, 3732, 7), new Range16.ptr(3733, 3735, 1), new Range16.ptr(3737, 3743, 1), new Range16.ptr(3745, 3747, 1), new Range16.ptr(3749, 3751, 2), new Range16.ptr(3754, 3755, 1), new Range16.ptr(3757, 3760, 1), new Range16.ptr(3762, 3763, 1), new Range16.ptr(3773, 3776, 3), new Range16.ptr(3777, 3780, 1), new Range16.ptr(3782, 3804, 22), new Range16.ptr(3805, 3807, 1), new Range16.ptr(3840, 3904, 64), new Range16.ptr(3905, 3911, 1), new Range16.ptr(3913, 3948, 1), new Range16.ptr(3976, 3980, 1), new Range16.ptr(4096, 4138, 1), new Range16.ptr(4159, 4176, 17), new Range16.ptr(4177, 4181, 1), new Range16.ptr(4186, 4189, 1), new Range16.ptr(4193, 4197, 4), new Range16.ptr(4198, 4206, 8), new Range16.ptr(4207, 4208, 1), new Range16.ptr(4213, 4225, 1), new Range16.ptr(4238, 4256, 18), new Range16.ptr(4257, 4293, 1), new Range16.ptr(4295, 4301, 6), new Range16.ptr(4304, 4346, 1), new Range16.ptr(4348, 4680, 1), new Range16.ptr(4682, 4685, 1), new Range16.ptr(4688, 4694, 1), new Range16.ptr(4696, 4698, 2), new Range16.ptr(4699, 4701, 1), new Range16.ptr(4704, 4744, 1), new Range16.ptr(4746, 4749, 1), new Range16.ptr(4752, 4784, 1), new Range16.ptr(4786, 4789, 1), new Range16.ptr(4792, 4798, 1), new Range16.ptr(4800, 4802, 2), new Range16.ptr(4803, 4805, 1), new Range16.ptr(4808, 4822, 1), new Range16.ptr(4824, 4880, 1), new Range16.ptr(4882, 4885, 1), new Range16.ptr(4888, 4954, 1), new Range16.ptr(4992, 5007, 1), new Range16.ptr(5024, 5109, 1), new Range16.ptr(5112, 5117, 1), new Range16.ptr(5121, 5740, 1), new Range16.ptr(5743, 5759, 1), new Range16.ptr(5761, 5786, 1), new Range16.ptr(5792, 5866, 1), new Range16.ptr(5873, 5880, 1), new Range16.ptr(5888, 5900, 1), new Range16.ptr(5902, 5905, 1), new Range16.ptr(5920, 5937, 1), new Range16.ptr(5952, 5969, 1), new Range16.ptr(5984, 5996, 1), new Range16.ptr(5998, 6000, 1), new Range16.ptr(6016, 6067, 1), new Range16.ptr(6103, 6108, 5), new Range16.ptr(6176, 6263, 1), new Range16.ptr(6272, 6276, 1), new Range16.ptr(6279, 6312, 1), new Range16.ptr(6314, 6320, 6), new Range16.ptr(6321, 6389, 1), new Range16.ptr(6400, 6430, 1), new Range16.ptr(6480, 6509, 1), new Range16.ptr(6512, 6516, 1), new Range16.ptr(6528, 6571, 1), new Range16.ptr(6576, 6601, 1), new Range16.ptr(6656, 6678, 1), new Range16.ptr(6688, 6740, 1), new Range16.ptr(6823, 6917, 94), new Range16.ptr(6918, 6963, 1), new Range16.ptr(6981, 6987, 1), new Range16.ptr(7043, 7072, 1), new Range16.ptr(7086, 7087, 1), new Range16.ptr(7098, 7141, 1), new Range16.ptr(7168, 7203, 1), new Range16.ptr(7245, 7247, 1), new Range16.ptr(7258, 7293, 1), new Range16.ptr(7296, 7304, 1), new Range16.ptr(7401, 7404, 1), new Range16.ptr(7406, 7409, 1), new Range16.ptr(7413, 7414, 1), new Range16.ptr(7424, 7615, 1), new Range16.ptr(7680, 7957, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7968, 8005, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8016, 8023, 1), new Range16.ptr(8025, 8031, 2), new Range16.ptr(8032, 8061, 1), new Range16.ptr(8064, 8116, 1), new Range16.ptr(8118, 8124, 1), new Range16.ptr(8126, 8130, 4), new Range16.ptr(8131, 8132, 1), new Range16.ptr(8134, 8140, 1), new Range16.ptr(8144, 8147, 1), new Range16.ptr(8150, 8155, 1), new Range16.ptr(8160, 8172, 1), new Range16.ptr(8178, 8180, 1), new Range16.ptr(8182, 8188, 1), new Range16.ptr(8305, 8319, 14), new Range16.ptr(8336, 8348, 1), new Range16.ptr(8450, 8455, 5), new Range16.ptr(8458, 8467, 1), new Range16.ptr(8469, 8473, 4), new Range16.ptr(8474, 8477, 1), new Range16.ptr(8484, 8490, 2), new Range16.ptr(8491, 8493, 1), new Range16.ptr(8495, 8505, 1), new Range16.ptr(8508, 8511, 1), new Range16.ptr(8517, 8521, 1), new Range16.ptr(8526, 8579, 53), new Range16.ptr(8580, 11264, 2684), new Range16.ptr(11265, 11310, 1), new Range16.ptr(11312, 11358, 1), new Range16.ptr(11360, 11492, 1), new Range16.ptr(11499, 11502, 1), new Range16.ptr(11506, 11507, 1), new Range16.ptr(11520, 11557, 1), new Range16.ptr(11559, 11565, 6), new Range16.ptr(11568, 11623, 1), new Range16.ptr(11631, 11648, 17), new Range16.ptr(11649, 11670, 1), new Range16.ptr(11680, 11686, 1), new Range16.ptr(11688, 11694, 1), new Range16.ptr(11696, 11702, 1), new Range16.ptr(11704, 11710, 1), new Range16.ptr(11712, 11718, 1), new Range16.ptr(11720, 11726, 1), new Range16.ptr(11728, 11734, 1), new Range16.ptr(11736, 11742, 1), new Range16.ptr(11823, 12293, 470), new Range16.ptr(12294, 12337, 43), new Range16.ptr(12338, 12341, 1), new Range16.ptr(12347, 12348, 1), new Range16.ptr(12353, 12438, 1), new Range16.ptr(12445, 12447, 1), new Range16.ptr(12449, 12538, 1), new Range16.ptr(12540, 12543, 1), new Range16.ptr(12549, 12589, 1), new Range16.ptr(12593, 12686, 1), new Range16.ptr(12704, 12730, 1), new Range16.ptr(12784, 12799, 1), new Range16.ptr(13312, 19893, 1), new Range16.ptr(19968, 40917, 1), new Range16.ptr(40960, 42124, 1), new Range16.ptr(42192, 42237, 1), new Range16.ptr(42240, 42508, 1), new Range16.ptr(42512, 42527, 1), new Range16.ptr(42538, 42539, 1), new Range16.ptr(42560, 42606, 1), new Range16.ptr(42623, 42653, 1), new Range16.ptr(42656, 42725, 1), new Range16.ptr(42775, 42783, 1), new Range16.ptr(42786, 42888, 1), new Range16.ptr(42891, 42926, 1), new Range16.ptr(42928, 42935, 1), new Range16.ptr(42999, 43009, 1), new Range16.ptr(43011, 43013, 1), new Range16.ptr(43015, 43018, 1), new Range16.ptr(43020, 43042, 1), new Range16.ptr(43072, 43123, 1), new Range16.ptr(43138, 43187, 1), new Range16.ptr(43250, 43255, 1), new Range16.ptr(43259, 43261, 2), new Range16.ptr(43274, 43301, 1), new Range16.ptr(43312, 43334, 1), new Range16.ptr(43360, 43388, 1), new Range16.ptr(43396, 43442, 1), new Range16.ptr(43471, 43488, 17), new Range16.ptr(43489, 43492, 1), new Range16.ptr(43494, 43503, 1), new Range16.ptr(43514, 43518, 1), new Range16.ptr(43520, 43560, 1), new Range16.ptr(43584, 43586, 1), new Range16.ptr(43588, 43595, 1), new Range16.ptr(43616, 43638, 1), new Range16.ptr(43642, 43646, 4), new Range16.ptr(43647, 43695, 1), new Range16.ptr(43697, 43701, 4), new Range16.ptr(43702, 43705, 3), new Range16.ptr(43706, 43709, 1), new Range16.ptr(43712, 43714, 2), new Range16.ptr(43739, 43741, 1), new Range16.ptr(43744, 43754, 1), new Range16.ptr(43762, 43764, 1), new Range16.ptr(43777, 43782, 1), new Range16.ptr(43785, 43790, 1), new Range16.ptr(43793, 43798, 1), new Range16.ptr(43808, 43814, 1), new Range16.ptr(43816, 43822, 1), new Range16.ptr(43824, 43866, 1), new Range16.ptr(43868, 43877, 1), new Range16.ptr(43888, 44002, 1), new Range16.ptr(44032, 55203, 1), new Range16.ptr(55216, 55238, 1), new Range16.ptr(55243, 55291, 1), new Range16.ptr(63744, 64109, 1), new Range16.ptr(64112, 64217, 1), new Range16.ptr(64256, 64262, 1), new Range16.ptr(64275, 64279, 1), new Range16.ptr(64285, 64287, 2), new Range16.ptr(64288, 64296, 1), new Range16.ptr(64298, 64310, 1), new Range16.ptr(64312, 64316, 1), new Range16.ptr(64318, 64320, 2), new Range16.ptr(64321, 64323, 2), new Range16.ptr(64324, 64326, 2), new Range16.ptr(64327, 64433, 1), new Range16.ptr(64467, 64829, 1), new Range16.ptr(64848, 64911, 1), new Range16.ptr(64914, 64967, 1), new Range16.ptr(65008, 65019, 1), new Range16.ptr(65136, 65140, 1), new Range16.ptr(65142, 65276, 1), new Range16.ptr(65313, 65338, 1), new Range16.ptr(65345, 65370, 1), new Range16.ptr(65382, 65470, 1), new Range16.ptr(65474, 65479, 1), new Range16.ptr(65482, 65487, 1), new Range16.ptr(65490, 65495, 1), new Range16.ptr(65498, 65500, 1)]), new sliceType$1([new Range32.ptr(65536, 65547, 1), new Range32.ptr(65549, 65574, 1), new Range32.ptr(65576, 65594, 1), new Range32.ptr(65596, 65597, 1), new Range32.ptr(65599, 65613, 1), new Range32.ptr(65616, 65629, 1), new Range32.ptr(65664, 65786, 1), new Range32.ptr(66176, 66204, 1), new Range32.ptr(66208, 66256, 1), new Range32.ptr(66304, 66335, 1), new Range32.ptr(66352, 66368, 1), new Range32.ptr(66370, 66377, 1), new Range32.ptr(66384, 66421, 1), new Range32.ptr(66432, 66461, 1), new Range32.ptr(66464, 66499, 1), new Range32.ptr(66504, 66511, 1), new Range32.ptr(66560, 66717, 1), new Range32.ptr(66736, 66771, 1), new Range32.ptr(66776, 66811, 1), new Range32.ptr(66816, 66855, 1), new Range32.ptr(66864, 66915, 1), new Range32.ptr(67072, 67382, 1), new Range32.ptr(67392, 67413, 1), new Range32.ptr(67424, 67431, 1), new Range32.ptr(67584, 67589, 1), new Range32.ptr(67592, 67594, 2), new Range32.ptr(67595, 67637, 1), new Range32.ptr(67639, 67640, 1), new Range32.ptr(67644, 67647, 3), new Range32.ptr(67648, 67669, 1), new Range32.ptr(67680, 67702, 1), new Range32.ptr(67712, 67742, 1), new Range32.ptr(67808, 67826, 1), new Range32.ptr(67828, 67829, 1), new Range32.ptr(67840, 67861, 1), new Range32.ptr(67872, 67897, 1), new Range32.ptr(67968, 68023, 1), new Range32.ptr(68030, 68031, 1), new Range32.ptr(68096, 68112, 16), new Range32.ptr(68113, 68115, 1), new Range32.ptr(68117, 68119, 1), new Range32.ptr(68121, 68147, 1), new Range32.ptr(68192, 68220, 1), new Range32.ptr(68224, 68252, 1), new Range32.ptr(68288, 68295, 1), new Range32.ptr(68297, 68324, 1), new Range32.ptr(68352, 68405, 1), new Range32.ptr(68416, 68437, 1), new Range32.ptr(68448, 68466, 1), new Range32.ptr(68480, 68497, 1), new Range32.ptr(68608, 68680, 1), new Range32.ptr(68736, 68786, 1), new Range32.ptr(68800, 68850, 1), new Range32.ptr(69635, 69687, 1), new Range32.ptr(69763, 69807, 1), new Range32.ptr(69840, 69864, 1), new Range32.ptr(69891, 69926, 1), new Range32.ptr(69968, 70002, 1), new Range32.ptr(70006, 70019, 13), new Range32.ptr(70020, 70066, 1), new Range32.ptr(70081, 70084, 1), new Range32.ptr(70106, 70108, 2), new Range32.ptr(70144, 70161, 1), new Range32.ptr(70163, 70187, 1), new Range32.ptr(70272, 70278, 1), new Range32.ptr(70280, 70282, 2), new Range32.ptr(70283, 70285, 1), new Range32.ptr(70287, 70301, 1), new Range32.ptr(70303, 70312, 1), new Range32.ptr(70320, 70366, 1), new Range32.ptr(70405, 70412, 1), new Range32.ptr(70415, 70416, 1), new Range32.ptr(70419, 70440, 1), new Range32.ptr(70442, 70448, 1), new Range32.ptr(70450, 70451, 1), new Range32.ptr(70453, 70457, 1), new Range32.ptr(70461, 70480, 19), new Range32.ptr(70493, 70497, 1), new Range32.ptr(70656, 70708, 1), new Range32.ptr(70727, 70730, 1), new Range32.ptr(70784, 70831, 1), new Range32.ptr(70852, 70853, 1), new Range32.ptr(70855, 71040, 185), new Range32.ptr(71041, 71086, 1), new Range32.ptr(71128, 71131, 1), new Range32.ptr(71168, 71215, 1), new Range32.ptr(71236, 71296, 60), new Range32.ptr(71297, 71338, 1), new Range32.ptr(71424, 71449, 1), new Range32.ptr(71840, 71903, 1), new Range32.ptr(71935, 72384, 449), new Range32.ptr(72385, 72440, 1), new Range32.ptr(72704, 72712, 1), new Range32.ptr(72714, 72750, 1), new Range32.ptr(72768, 72818, 50), new Range32.ptr(72819, 72847, 1), new Range32.ptr(73728, 74649, 1), new Range32.ptr(74880, 75075, 1), new Range32.ptr(77824, 78894, 1), new Range32.ptr(82944, 83526, 1), new Range32.ptr(92160, 92728, 1), new Range32.ptr(92736, 92766, 1), new Range32.ptr(92880, 92909, 1), new Range32.ptr(92928, 92975, 1), new Range32.ptr(92992, 92995, 1), new Range32.ptr(93027, 93047, 1), new Range32.ptr(93053, 93071, 1), new Range32.ptr(93952, 94020, 1), new Range32.ptr(94032, 94099, 67), new Range32.ptr(94100, 94111, 1), new Range32.ptr(94176, 94208, 32), new Range32.ptr(94209, 100332, 1), new Range32.ptr(100352, 101106, 1), new Range32.ptr(110592, 110593, 1), new Range32.ptr(113664, 113770, 1), new Range32.ptr(113776, 113788, 1), new Range32.ptr(113792, 113800, 1), new Range32.ptr(113808, 113817, 1), new Range32.ptr(119808, 119892, 1), new Range32.ptr(119894, 119964, 1), new Range32.ptr(119966, 119967, 1), new Range32.ptr(119970, 119973, 3), new Range32.ptr(119974, 119977, 3), new Range32.ptr(119978, 119980, 1), new Range32.ptr(119982, 119993, 1), new Range32.ptr(119995, 119997, 2), new Range32.ptr(119998, 120003, 1), new Range32.ptr(120005, 120069, 1), new Range32.ptr(120071, 120074, 1), new Range32.ptr(120077, 120084, 1), new Range32.ptr(120086, 120092, 1), new Range32.ptr(120094, 120121, 1), new Range32.ptr(120123, 120126, 1), new Range32.ptr(120128, 120132, 1), new Range32.ptr(120134, 120138, 4), new Range32.ptr(120139, 120144, 1), new Range32.ptr(120146, 120485, 1), new Range32.ptr(120488, 120512, 1), new Range32.ptr(120514, 120538, 1), new Range32.ptr(120540, 120570, 1), new Range32.ptr(120572, 120596, 1), new Range32.ptr(120598, 120628, 1), new Range32.ptr(120630, 120654, 1), new Range32.ptr(120656, 120686, 1), new Range32.ptr(120688, 120712, 1), new Range32.ptr(120714, 120744, 1), new Range32.ptr(120746, 120770, 1), new Range32.ptr(120772, 120779, 1), new Range32.ptr(124928, 125124, 1), new Range32.ptr(125184, 125251, 1), new Range32.ptr(126464, 126467, 1), new Range32.ptr(126469, 126495, 1), new Range32.ptr(126497, 126498, 1), new Range32.ptr(126500, 126503, 3), new Range32.ptr(126505, 126514, 1), new Range32.ptr(126516, 126519, 1), new Range32.ptr(126521, 126523, 2), new Range32.ptr(126530, 126535, 5), new Range32.ptr(126537, 126541, 2), new Range32.ptr(126542, 126543, 1), new Range32.ptr(126545, 126546, 1), new Range32.ptr(126548, 126551, 3), new Range32.ptr(126553, 126561, 2), new Range32.ptr(126562, 126564, 2), new Range32.ptr(126567, 126570, 1), new Range32.ptr(126572, 126578, 1), new Range32.ptr(126580, 126583, 1), new Range32.ptr(126585, 126588, 1), new Range32.ptr(126590, 126592, 2), new Range32.ptr(126593, 126601, 1), new Range32.ptr(126603, 126619, 1), new Range32.ptr(126625, 126627, 1), new Range32.ptr(126629, 126633, 1), new Range32.ptr(126635, 126651, 1), new Range32.ptr(131072, 173782, 1), new Range32.ptr(173824, 177972, 1), new Range32.ptr(177984, 178205, 1), new Range32.ptr(178208, 183969, 1), new Range32.ptr(194560, 195101, 1)]), 6);
		_Nd = new RangeTable.ptr(new sliceType([new Range16.ptr(48, 57, 1), new Range16.ptr(1632, 1641, 1), new Range16.ptr(1776, 1785, 1), new Range16.ptr(1984, 1993, 1), new Range16.ptr(2406, 2415, 1), new Range16.ptr(2534, 2543, 1), new Range16.ptr(2662, 2671, 1), new Range16.ptr(2790, 2799, 1), new Range16.ptr(2918, 2927, 1), new Range16.ptr(3046, 3055, 1), new Range16.ptr(3174, 3183, 1), new Range16.ptr(3302, 3311, 1), new Range16.ptr(3430, 3439, 1), new Range16.ptr(3558, 3567, 1), new Range16.ptr(3664, 3673, 1), new Range16.ptr(3792, 3801, 1), new Range16.ptr(3872, 3881, 1), new Range16.ptr(4160, 4169, 1), new Range16.ptr(4240, 4249, 1), new Range16.ptr(6112, 6121, 1), new Range16.ptr(6160, 6169, 1), new Range16.ptr(6470, 6479, 1), new Range16.ptr(6608, 6617, 1), new Range16.ptr(6784, 6793, 1), new Range16.ptr(6800, 6809, 1), new Range16.ptr(6992, 7001, 1), new Range16.ptr(7088, 7097, 1), new Range16.ptr(7232, 7241, 1), new Range16.ptr(7248, 7257, 1), new Range16.ptr(42528, 42537, 1), new Range16.ptr(43216, 43225, 1), new Range16.ptr(43264, 43273, 1), new Range16.ptr(43472, 43481, 1), new Range16.ptr(43504, 43513, 1), new Range16.ptr(43600, 43609, 1), new Range16.ptr(44016, 44025, 1), new Range16.ptr(65296, 65305, 1)]), new sliceType$1([new Range32.ptr(66720, 66729, 1), new Range32.ptr(69734, 69743, 1), new Range32.ptr(69872, 69881, 1), new Range32.ptr(69942, 69951, 1), new Range32.ptr(70096, 70105, 1), new Range32.ptr(70384, 70393, 1), new Range32.ptr(70736, 70745, 1), new Range32.ptr(70864, 70873, 1), new Range32.ptr(71248, 71257, 1), new Range32.ptr(71360, 71369, 1), new Range32.ptr(71472, 71481, 1), new Range32.ptr(71904, 71913, 1), new Range32.ptr(72784, 72793, 1), new Range32.ptr(92768, 92777, 1), new Range32.ptr(93008, 93017, 1), new Range32.ptr(120782, 120831, 1), new Range32.ptr(125264, 125273, 1)]), 1);
		$pkg.Digit = _Nd;
		$pkg.Letter = _L;
		_White_Space = new RangeTable.ptr(new sliceType([new Range16.ptr(9, 13, 1), new Range16.ptr(32, 32, 1), new Range16.ptr(133, 133, 1), new Range16.ptr(160, 160, 1), new Range16.ptr(5760, 5760, 1), new Range16.ptr(8192, 8202, 1), new Range16.ptr(8232, 8233, 1), new Range16.ptr(8239, 8239, 1), new Range16.ptr(8287, 8287, 1), new Range16.ptr(12288, 12288, 1)]), sliceType$1.nil, 4);
		$pkg.White_Space = _White_Space;
		_CaseRanges = new sliceType$3([new CaseRange.ptr(65, 90, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(97, 122, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(181, 181, $toNativeArray($kindInt32, [743, 0, 743])), new CaseRange.ptr(192, 214, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(216, 222, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(224, 246, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(248, 254, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(255, 255, $toNativeArray($kindInt32, [121, 0, 121])), new CaseRange.ptr(256, 303, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(304, 304, $toNativeArray($kindInt32, [0, -199, 0])), new CaseRange.ptr(305, 305, $toNativeArray($kindInt32, [-232, 0, -232])), new CaseRange.ptr(306, 311, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(313, 328, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(330, 375, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(376, 376, $toNativeArray($kindInt32, [0, -121, 0])), new CaseRange.ptr(377, 382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(383, 383, $toNativeArray($kindInt32, [-300, 0, -300])), new CaseRange.ptr(384, 384, $toNativeArray($kindInt32, [195, 0, 195])), new CaseRange.ptr(385, 385, $toNativeArray($kindInt32, [0, 210, 0])), new CaseRange.ptr(386, 389, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(390, 390, $toNativeArray($kindInt32, [0, 206, 0])), new CaseRange.ptr(391, 392, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(393, 394, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(395, 396, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(398, 398, $toNativeArray($kindInt32, [0, 79, 0])), new CaseRange.ptr(399, 399, $toNativeArray($kindInt32, [0, 202, 0])), new CaseRange.ptr(400, 400, $toNativeArray($kindInt32, [0, 203, 0])), new CaseRange.ptr(401, 402, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(403, 403, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(404, 404, $toNativeArray($kindInt32, [0, 207, 0])), new CaseRange.ptr(405, 405, $toNativeArray($kindInt32, [97, 0, 97])), new CaseRange.ptr(406, 406, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(407, 407, $toNativeArray($kindInt32, [0, 209, 0])), new CaseRange.ptr(408, 409, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(410, 410, $toNativeArray($kindInt32, [163, 0, 163])), new CaseRange.ptr(412, 412, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(413, 413, $toNativeArray($kindInt32, [0, 213, 0])), new CaseRange.ptr(414, 414, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(415, 415, $toNativeArray($kindInt32, [0, 214, 0])), new CaseRange.ptr(416, 421, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(422, 422, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(423, 424, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(425, 425, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(428, 429, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(430, 430, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(431, 432, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(433, 434, $toNativeArray($kindInt32, [0, 217, 0])), new CaseRange.ptr(435, 438, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(439, 439, $toNativeArray($kindInt32, [0, 219, 0])), new CaseRange.ptr(440, 441, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(444, 445, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(447, 447, $toNativeArray($kindInt32, [56, 0, 56])), new CaseRange.ptr(452, 452, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(453, 453, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(454, 454, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(455, 455, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(456, 456, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(457, 457, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(458, 458, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(459, 459, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(460, 460, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(461, 476, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(477, 477, $toNativeArray($kindInt32, [-79, 0, -79])), new CaseRange.ptr(478, 495, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(497, 497, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(498, 498, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(499, 499, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(500, 501, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(502, 502, $toNativeArray($kindInt32, [0, -97, 0])), new CaseRange.ptr(503, 503, $toNativeArray($kindInt32, [0, -56, 0])), new CaseRange.ptr(504, 543, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(544, 544, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(546, 563, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(570, 570, $toNativeArray($kindInt32, [0, 10795, 0])), new CaseRange.ptr(571, 572, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(573, 573, $toNativeArray($kindInt32, [0, -163, 0])), new CaseRange.ptr(574, 574, $toNativeArray($kindInt32, [0, 10792, 0])), new CaseRange.ptr(575, 576, $toNativeArray($kindInt32, [10815, 0, 10815])), new CaseRange.ptr(577, 578, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(579, 579, $toNativeArray($kindInt32, [0, -195, 0])), new CaseRange.ptr(580, 580, $toNativeArray($kindInt32, [0, 69, 0])), new CaseRange.ptr(581, 581, $toNativeArray($kindInt32, [0, 71, 0])), new CaseRange.ptr(582, 591, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(592, 592, $toNativeArray($kindInt32, [10783, 0, 10783])), new CaseRange.ptr(593, 593, $toNativeArray($kindInt32, [10780, 0, 10780])), new CaseRange.ptr(594, 594, $toNativeArray($kindInt32, [10782, 0, 10782])), new CaseRange.ptr(595, 595, $toNativeArray($kindInt32, [-210, 0, -210])), new CaseRange.ptr(596, 596, $toNativeArray($kindInt32, [-206, 0, -206])), new CaseRange.ptr(598, 599, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(601, 601, $toNativeArray($kindInt32, [-202, 0, -202])), new CaseRange.ptr(603, 603, $toNativeArray($kindInt32, [-203, 0, -203])), new CaseRange.ptr(604, 604, $toNativeArray($kindInt32, [42319, 0, 42319])), new CaseRange.ptr(608, 608, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(609, 609, $toNativeArray($kindInt32, [42315, 0, 42315])), new CaseRange.ptr(611, 611, $toNativeArray($kindInt32, [-207, 0, -207])), new CaseRange.ptr(613, 613, $toNativeArray($kindInt32, [42280, 0, 42280])), new CaseRange.ptr(614, 614, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(616, 616, $toNativeArray($kindInt32, [-209, 0, -209])), new CaseRange.ptr(617, 617, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(618, 618, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(619, 619, $toNativeArray($kindInt32, [10743, 0, 10743])), new CaseRange.ptr(620, 620, $toNativeArray($kindInt32, [42305, 0, 42305])), new CaseRange.ptr(623, 623, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(625, 625, $toNativeArray($kindInt32, [10749, 0, 10749])), new CaseRange.ptr(626, 626, $toNativeArray($kindInt32, [-213, 0, -213])), new CaseRange.ptr(629, 629, $toNativeArray($kindInt32, [-214, 0, -214])), new CaseRange.ptr(637, 637, $toNativeArray($kindInt32, [10727, 0, 10727])), new CaseRange.ptr(640, 640, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(643, 643, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(647, 647, $toNativeArray($kindInt32, [42282, 0, 42282])), new CaseRange.ptr(648, 648, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(649, 649, $toNativeArray($kindInt32, [-69, 0, -69])), new CaseRange.ptr(650, 651, $toNativeArray($kindInt32, [-217, 0, -217])), new CaseRange.ptr(652, 652, $toNativeArray($kindInt32, [-71, 0, -71])), new CaseRange.ptr(658, 658, $toNativeArray($kindInt32, [-219, 0, -219])), new CaseRange.ptr(669, 669, $toNativeArray($kindInt32, [42261, 0, 42261])), new CaseRange.ptr(670, 670, $toNativeArray($kindInt32, [42258, 0, 42258])), new CaseRange.ptr(837, 837, $toNativeArray($kindInt32, [84, 0, 84])), new CaseRange.ptr(880, 883, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(886, 887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(891, 893, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(895, 895, $toNativeArray($kindInt32, [0, 116, 0])), new CaseRange.ptr(902, 902, $toNativeArray($kindInt32, [0, 38, 0])), new CaseRange.ptr(904, 906, $toNativeArray($kindInt32, [0, 37, 0])), new CaseRange.ptr(908, 908, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(910, 911, $toNativeArray($kindInt32, [0, 63, 0])), new CaseRange.ptr(913, 929, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(931, 939, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(940, 940, $toNativeArray($kindInt32, [-38, 0, -38])), new CaseRange.ptr(941, 943, $toNativeArray($kindInt32, [-37, 0, -37])), new CaseRange.ptr(945, 961, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(962, 962, $toNativeArray($kindInt32, [-31, 0, -31])), new CaseRange.ptr(963, 971, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(972, 972, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(973, 974, $toNativeArray($kindInt32, [-63, 0, -63])), new CaseRange.ptr(975, 975, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(976, 976, $toNativeArray($kindInt32, [-62, 0, -62])), new CaseRange.ptr(977, 977, $toNativeArray($kindInt32, [-57, 0, -57])), new CaseRange.ptr(981, 981, $toNativeArray($kindInt32, [-47, 0, -47])), new CaseRange.ptr(982, 982, $toNativeArray($kindInt32, [-54, 0, -54])), new CaseRange.ptr(983, 983, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(984, 1007, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1008, 1008, $toNativeArray($kindInt32, [-86, 0, -86])), new CaseRange.ptr(1009, 1009, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1010, 1010, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(1011, 1011, $toNativeArray($kindInt32, [-116, 0, -116])), new CaseRange.ptr(1012, 1012, $toNativeArray($kindInt32, [0, -60, 0])), new CaseRange.ptr(1013, 1013, $toNativeArray($kindInt32, [-96, 0, -96])), new CaseRange.ptr(1015, 1016, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1017, 1017, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(1018, 1019, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1021, 1023, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(1024, 1039, $toNativeArray($kindInt32, [0, 80, 0])), new CaseRange.ptr(1040, 1071, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(1072, 1103, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(1104, 1119, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1120, 1153, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1162, 1215, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1216, 1216, $toNativeArray($kindInt32, [0, 15, 0])), new CaseRange.ptr(1217, 1230, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1231, 1231, $toNativeArray($kindInt32, [-15, 0, -15])), new CaseRange.ptr(1232, 1327, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1329, 1366, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(1377, 1414, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(4256, 4293, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4295, 4295, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4301, 4301, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(5024, 5103, $toNativeArray($kindInt32, [0, 38864, 0])), new CaseRange.ptr(5104, 5109, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(5112, 5117, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(7296, 7296, $toNativeArray($kindInt32, [-6254, 0, -6254])), new CaseRange.ptr(7297, 7297, $toNativeArray($kindInt32, [-6253, 0, -6253])), new CaseRange.ptr(7298, 7298, $toNativeArray($kindInt32, [-6244, 0, -6244])), new CaseRange.ptr(7299, 7300, $toNativeArray($kindInt32, [-6242, 0, -6242])), new CaseRange.ptr(7301, 7301, $toNativeArray($kindInt32, [-6243, 0, -6243])), new CaseRange.ptr(7302, 7302, $toNativeArray($kindInt32, [-6236, 0, -6236])), new CaseRange.ptr(7303, 7303, $toNativeArray($kindInt32, [-6181, 0, -6181])), new CaseRange.ptr(7304, 7304, $toNativeArray($kindInt32, [35266, 0, 35266])), new CaseRange.ptr(7545, 7545, $toNativeArray($kindInt32, [35332, 0, 35332])), new CaseRange.ptr(7549, 7549, $toNativeArray($kindInt32, [3814, 0, 3814])), new CaseRange.ptr(7680, 7829, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7835, 7835, $toNativeArray($kindInt32, [-59, 0, -59])), new CaseRange.ptr(7838, 7838, $toNativeArray($kindInt32, [0, -7615, 0])), new CaseRange.ptr(7840, 7935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7936, 7943, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7944, 7951, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7952, 7957, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7960, 7965, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7968, 7975, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7976, 7983, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7984, 7991, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7992, 7999, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8000, 8005, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8008, 8013, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8017, 8017, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8019, 8019, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8021, 8021, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8023, 8023, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8025, 8025, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8027, 8027, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8029, 8029, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8031, 8031, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8032, 8039, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8040, 8047, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8048, 8049, $toNativeArray($kindInt32, [74, 0, 74])), new CaseRange.ptr(8050, 8053, $toNativeArray($kindInt32, [86, 0, 86])), new CaseRange.ptr(8054, 8055, $toNativeArray($kindInt32, [100, 0, 100])), new CaseRange.ptr(8056, 8057, $toNativeArray($kindInt32, [128, 0, 128])), new CaseRange.ptr(8058, 8059, $toNativeArray($kindInt32, [112, 0, 112])), new CaseRange.ptr(8060, 8061, $toNativeArray($kindInt32, [126, 0, 126])), new CaseRange.ptr(8064, 8071, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8072, 8079, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8080, 8087, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8088, 8095, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8096, 8103, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8104, 8111, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8112, 8113, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8115, 8115, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8120, 8121, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8122, 8123, $toNativeArray($kindInt32, [0, -74, 0])), new CaseRange.ptr(8124, 8124, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8126, 8126, $toNativeArray($kindInt32, [-7205, 0, -7205])), new CaseRange.ptr(8131, 8131, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8136, 8139, $toNativeArray($kindInt32, [0, -86, 0])), new CaseRange.ptr(8140, 8140, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8144, 8145, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8152, 8153, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8154, 8155, $toNativeArray($kindInt32, [0, -100, 0])), new CaseRange.ptr(8160, 8161, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8165, 8165, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(8168, 8169, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8170, 8171, $toNativeArray($kindInt32, [0, -112, 0])), new CaseRange.ptr(8172, 8172, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(8179, 8179, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8184, 8185, $toNativeArray($kindInt32, [0, -128, 0])), new CaseRange.ptr(8186, 8187, $toNativeArray($kindInt32, [0, -126, 0])), new CaseRange.ptr(8188, 8188, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8486, 8486, $toNativeArray($kindInt32, [0, -7517, 0])), new CaseRange.ptr(8490, 8490, $toNativeArray($kindInt32, [0, -8383, 0])), new CaseRange.ptr(8491, 8491, $toNativeArray($kindInt32, [0, -8262, 0])), new CaseRange.ptr(8498, 8498, $toNativeArray($kindInt32, [0, 28, 0])), new CaseRange.ptr(8526, 8526, $toNativeArray($kindInt32, [-28, 0, -28])), new CaseRange.ptr(8544, 8559, $toNativeArray($kindInt32, [0, 16, 0])), new CaseRange.ptr(8560, 8575, $toNativeArray($kindInt32, [-16, 0, -16])), new CaseRange.ptr(8579, 8580, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(9398, 9423, $toNativeArray($kindInt32, [0, 26, 0])), new CaseRange.ptr(9424, 9449, $toNativeArray($kindInt32, [-26, 0, -26])), new CaseRange.ptr(11264, 11310, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(11312, 11358, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(11360, 11361, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11362, 11362, $toNativeArray($kindInt32, [0, -10743, 0])), new CaseRange.ptr(11363, 11363, $toNativeArray($kindInt32, [0, -3814, 0])), new CaseRange.ptr(11364, 11364, $toNativeArray($kindInt32, [0, -10727, 0])), new CaseRange.ptr(11365, 11365, $toNativeArray($kindInt32, [-10795, 0, -10795])), new CaseRange.ptr(11366, 11366, $toNativeArray($kindInt32, [-10792, 0, -10792])), new CaseRange.ptr(11367, 11372, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11373, 11373, $toNativeArray($kindInt32, [0, -10780, 0])), new CaseRange.ptr(11374, 11374, $toNativeArray($kindInt32, [0, -10749, 0])), new CaseRange.ptr(11375, 11375, $toNativeArray($kindInt32, [0, -10783, 0])), new CaseRange.ptr(11376, 11376, $toNativeArray($kindInt32, [0, -10782, 0])), new CaseRange.ptr(11378, 11379, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11381, 11382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11390, 11391, $toNativeArray($kindInt32, [0, -10815, 0])), new CaseRange.ptr(11392, 11491, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11499, 11502, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11506, 11507, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11520, 11557, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11559, 11559, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11565, 11565, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(42560, 42605, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42624, 42651, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42786, 42799, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42802, 42863, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42873, 42876, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42877, 42877, $toNativeArray($kindInt32, [0, -35332, 0])), new CaseRange.ptr(42878, 42887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42891, 42892, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42893, 42893, $toNativeArray($kindInt32, [0, -42280, 0])), new CaseRange.ptr(42896, 42899, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42902, 42921, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42922, 42922, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42923, 42923, $toNativeArray($kindInt32, [0, -42319, 0])), new CaseRange.ptr(42924, 42924, $toNativeArray($kindInt32, [0, -42315, 0])), new CaseRange.ptr(42925, 42925, $toNativeArray($kindInt32, [0, -42305, 0])), new CaseRange.ptr(42926, 42926, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42928, 42928, $toNativeArray($kindInt32, [0, -42258, 0])), new CaseRange.ptr(42929, 42929, $toNativeArray($kindInt32, [0, -42282, 0])), new CaseRange.ptr(42930, 42930, $toNativeArray($kindInt32, [0, -42261, 0])), new CaseRange.ptr(42931, 42931, $toNativeArray($kindInt32, [0, 928, 0])), new CaseRange.ptr(42932, 42935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(43859, 43859, $toNativeArray($kindInt32, [-928, 0, -928])), new CaseRange.ptr(43888, 43967, $toNativeArray($kindInt32, [-38864, 0, -38864])), new CaseRange.ptr(65313, 65338, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(65345, 65370, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(66560, 66599, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66600, 66639, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(66736, 66771, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66776, 66811, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(68736, 68786, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(68800, 68850, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(71840, 71871, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(71872, 71903, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(125184, 125217, $toNativeArray($kindInt32, [0, 34, 0])), new CaseRange.ptr(125218, 125251, $toNativeArray($kindInt32, [-34, 0, -34]))]);
		$pkg.CaseRanges = _CaseRanges;
		properties = $toNativeArray($kindUint8, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 144, 130, 130, 130, 136, 130, 130, 130, 130, 130, 130, 136, 130, 130, 130, 130, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 130, 130, 136, 136, 136, 130, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 130, 130, 130, 136, 130, 136, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 130, 136, 130, 136, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 130, 136, 136, 136, 136, 136, 130, 136, 136, 224, 130, 136, 0, 136, 136, 136, 136, 132, 132, 136, 192, 130, 130, 136, 132, 224, 130, 132, 132, 132, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 136, 160, 160, 160, 160, 160, 160, 160, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 136, 192, 192, 192, 192, 192, 192, 192, 192]);
		asciiFold = $toNativeArray($kindUint16, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 91, 92, 93, 94, 95, 96, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 8490, 76, 77, 78, 79, 80, 81, 82, 383, 84, 85, 86, 87, 88, 89, 90, 123, 124, 125, 126, 127]);
		caseOrbit = new sliceType$4([new foldPair.ptr(75, 107), new foldPair.ptr(83, 115), new foldPair.ptr(107, 8490), new foldPair.ptr(115, 383), new foldPair.ptr(181, 924), new foldPair.ptr(197, 229), new foldPair.ptr(223, 7838), new foldPair.ptr(229, 8491), new foldPair.ptr(304, 304), new foldPair.ptr(305, 305), new foldPair.ptr(383, 83), new foldPair.ptr(452, 453), new foldPair.ptr(453, 454), new foldPair.ptr(454, 452), new foldPair.ptr(455, 456), new foldPair.ptr(456, 457), new foldPair.ptr(457, 455), new foldPair.ptr(458, 459), new foldPair.ptr(459, 460), new foldPair.ptr(460, 458), new foldPair.ptr(497, 498), new foldPair.ptr(498, 499), new foldPair.ptr(499, 497), new foldPair.ptr(837, 921), new foldPair.ptr(914, 946), new foldPair.ptr(917, 949), new foldPair.ptr(920, 952), new foldPair.ptr(921, 953), new foldPair.ptr(922, 954), new foldPair.ptr(924, 956), new foldPair.ptr(928, 960), new foldPair.ptr(929, 961), new foldPair.ptr(931, 962), new foldPair.ptr(934, 966), new foldPair.ptr(937, 969), new foldPair.ptr(946, 976), new foldPair.ptr(949, 1013), new foldPair.ptr(952, 977), new foldPair.ptr(953, 8126), new foldPair.ptr(954, 1008), new foldPair.ptr(956, 181), new foldPair.ptr(960, 982), new foldPair.ptr(961, 1009), new foldPair.ptr(962, 963), new foldPair.ptr(963, 931), new foldPair.ptr(966, 981), new foldPair.ptr(969, 8486), new foldPair.ptr(976, 914), new foldPair.ptr(977, 1012), new foldPair.ptr(981, 934), new foldPair.ptr(982, 928), new foldPair.ptr(1008, 922), new foldPair.ptr(1009, 929), new foldPair.ptr(1012, 920), new foldPair.ptr(1013, 917), new foldPair.ptr(1042, 1074), new foldPair.ptr(1044, 1076), new foldPair.ptr(1054, 1086), new foldPair.ptr(1057, 1089), new foldPair.ptr(1058, 1090), new foldPair.ptr(1066, 1098), new foldPair.ptr(1074, 7296), new foldPair.ptr(1076, 7297), new foldPair.ptr(1086, 7298), new foldPair.ptr(1089, 7299), new foldPair.ptr(1090, 7300), new foldPair.ptr(1098, 7302), new foldPair.ptr(1122, 1123), new foldPair.ptr(1123, 7303), new foldPair.ptr(7296, 1042), new foldPair.ptr(7297, 1044), new foldPair.ptr(7298, 1054), new foldPair.ptr(7299, 1057), new foldPair.ptr(7300, 7301), new foldPair.ptr(7301, 1058), new foldPair.ptr(7302, 1066), new foldPair.ptr(7303, 1122), new foldPair.ptr(7304, 42570), new foldPair.ptr(7776, 7777), new foldPair.ptr(7777, 7835), new foldPair.ptr(7835, 7776), new foldPair.ptr(7838, 223), new foldPair.ptr(8126, 837), new foldPair.ptr(8486, 937), new foldPair.ptr(8490, 75), new foldPair.ptr(8491, 197), new foldPair.ptr(42570, 42571), new foldPair.ptr(42571, 7304)]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bytes"] = (function() {
	var $pkg = {}, $init, errors, io, unicode, utf8, Buffer, readOp, Reader, ptrType, sliceType, arrayType, ptrType$2, IndexByte, Equal, makeSlice, NewBuffer, EqualFold, NewReader;
	errors = $packages["errors"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Buffer = $pkg.Buffer = $newType(0, $kindStruct, "bytes.Buffer", true, "bytes", true, function(buf_, off_, bootstrap_, lastRead_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.off = 0;
			this.bootstrap = arrayType.zero();
			this.lastRead = 0;
			return;
		}
		this.buf = buf_;
		this.off = off_;
		this.bootstrap = bootstrap_;
		this.lastRead = lastRead_;
	});
	readOp = $pkg.readOp = $newType(4, $kindInt, "bytes.readOp", true, "bytes", false, null);
	Reader = $pkg.Reader = $newType(0, $kindStruct, "bytes.Reader", true, "bytes", true, function(s_, i_, prevRune_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = sliceType.nil;
			this.i = new $Int64(0, 0);
			this.prevRune = 0;
			return;
		}
		this.s = s_;
		this.i = i_;
		this.prevRune = prevRune_;
	});
	ptrType = $ptrType(Buffer);
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 64);
	ptrType$2 = $ptrType(Reader);
	IndexByte = function(s, c) {
		var $ptr, _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	$pkg.IndexByte = IndexByte;
	Equal = function(a, b) {
		var $ptr, _i, _ref, a, b, c, i;
		if (!((a.$length === b.$length))) {
			return false;
		}
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((c === ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i])))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$pkg.Equal = Equal;
	Buffer.ptr.prototype.Bytes = function() {
		var $ptr, b;
		b = this;
		return $subslice(b.buf, b.off);
	};
	Buffer.prototype.Bytes = function() { return this.$val.Bytes(); };
	Buffer.ptr.prototype.String = function() {
		var $ptr, b;
		b = this;
		if (b === ptrType.nil) {
			return "<nil>";
		}
		return $bytesToString($subslice(b.buf, b.off));
	};
	Buffer.prototype.String = function() { return this.$val.String(); };
	Buffer.ptr.prototype.Len = function() {
		var $ptr, b;
		b = this;
		return b.buf.$length - b.off >> 0;
	};
	Buffer.prototype.Len = function() { return this.$val.Len(); };
	Buffer.ptr.prototype.Cap = function() {
		var $ptr, b;
		b = this;
		return b.buf.$capacity;
	};
	Buffer.prototype.Cap = function() { return this.$val.Cap(); };
	Buffer.ptr.prototype.Truncate = function(n) {
		var $ptr, b, n;
		b = this;
		b.lastRead = 0;
		if (n < 0 || n > b.Len()) {
			$panic(new $String("bytes.Buffer: truncation out of range"));
		} else if ((n === 0)) {
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, (b.off + n >> 0));
	};
	Buffer.prototype.Truncate = function(n) { return this.$val.Truncate(n); };
	Buffer.ptr.prototype.Reset = function() {
		var $ptr, b;
		b = this;
		b.Truncate(0);
	};
	Buffer.prototype.Reset = function() { return this.$val.Reset(); };
	Buffer.ptr.prototype.grow = function(n) {
		var $ptr, _q, b, buf, m, n;
		b = this;
		m = b.Len();
		if ((m === 0) && !((b.off === 0))) {
			b.Truncate(0);
		}
		if ((b.buf.$length + n >> 0) > b.buf.$capacity) {
			buf = sliceType.nil;
			if (b.buf === sliceType.nil && n <= 64) {
				buf = $subslice(new sliceType(b.bootstrap), 0);
			} else if ((m + n >> 0) <= (_q = b.buf.$capacity / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) {
				$copySlice(b.buf, $subslice(b.buf, b.off));
				buf = $subslice(b.buf, 0, m);
			} else {
				buf = makeSlice(($imul(2, b.buf.$capacity)) + n >> 0);
				$copySlice(buf, $subslice(b.buf, b.off));
			}
			b.buf = buf;
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, ((b.off + m >> 0) + n >> 0));
		return b.off + m >> 0;
	};
	Buffer.prototype.grow = function(n) { return this.$val.grow(n); };
	Buffer.ptr.prototype.Grow = function(n) {
		var $ptr, b, m, n;
		b = this;
		if (n < 0) {
			$panic(new $String("bytes.Buffer.Grow: negative count"));
		}
		m = b.grow(n);
		b.buf = $subslice(b.buf, 0, m);
	};
	Buffer.prototype.Grow = function(n) { return this.$val.Grow(n); };
	Buffer.ptr.prototype.Write = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, m, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		m = b.grow(p.$length);
		_tmp = $copySlice($subslice(b.buf, m), p);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.Write = function(p) { return this.$val.Write(p); };
	Buffer.ptr.prototype.WriteString = function(s) {
		var $ptr, _tmp, _tmp$1, b, err, m, n, s;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		m = b.grow(s.length);
		_tmp = $copyString($subslice(b.buf, m), s);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Buffer.ptr.prototype.ReadFrom = function(r) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, free, m, n, newBuf, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; free = $f.free; m = $f.m; n = $f.n; newBuf = $f.newBuf; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
		}
		/* while (true) { */ case 1:
			free = b.buf.$capacity - b.buf.$length >> 0;
			if (free < 512) {
				newBuf = b.buf;
				if ((b.off + free >> 0) < 512) {
					newBuf = makeSlice(($imul(2, b.buf.$capacity)) + 512 >> 0);
				}
				$copySlice(newBuf, $subslice(b.buf, b.off));
				b.buf = $subslice(newBuf, 0, (b.buf.$length - b.off >> 0));
				b.off = 0;
			}
			_r = r.Read($subslice(b.buf, b.buf.$length, b.buf.$capacity)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			b.buf = $subslice(b.buf, 0, (b.buf.$length + m >> 0));
			n = (x = new $Int64(0, m), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if ($interfaceIsEqual(e, io.EOF)) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = e;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.ReadFrom }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.free = free; $f.m = m; $f.n = n; $f.newBuf = newBuf; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	makeSlice = function(n) {
		var $ptr, n, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			var $ptr;
			if (!($interfaceIsEqual($recover(), $ifaceNil))) {
				$panic($pkg.ErrTooLarge);
			}
		}), []]);
		return $makeSlice(sliceType, n);
		/* */ } catch(err) { $err = err; return sliceType.nil; } finally { $callDeferred($deferred, $err); }
	};
	Buffer.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, m, n, nBytes, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; n = $f.n; nBytes = $f.nBytes; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		/* */ if (b.off < b.buf.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.off < b.buf.$length) { */ case 1:
			nBytes = b.Len();
			_r = w.Write($subslice(b.buf, b.off)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (m > nBytes) {
				$panic(new $String("bytes.Buffer.WriteTo: invalid Write count"));
			}
			b.off = b.off + (m) >> 0;
			n = new $Int64(0, m);
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = e;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
			if (!((m === nBytes))) {
				_tmp$2 = n;
				_tmp$3 = io.ErrShortWrite;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
		/* } */ case 2:
		b.Truncate(0);
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.n = n; $f.nBytes = nBytes; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Buffer.ptr.prototype.WriteByte = function(c) {
		var $ptr, b, c, m, x;
		b = this;
		b.lastRead = 0;
		m = b.grow(1);
		(x = b.buf, ((m < 0 || m >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + m] = c));
		return $ifaceNil;
	};
	Buffer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Buffer.ptr.prototype.WriteRune = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, m, n, r;
		n = 0;
		err = $ifaceNil;
		b = this;
		if (r < 128) {
			b.WriteByte((r << 24 >>> 24));
			_tmp = 1;
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		b.lastRead = 0;
		m = b.grow(4);
		n = utf8.EncodeRune($subslice(b.buf, m, (m + 4 >> 0)), r);
		b.buf = $subslice(b.buf, 0, (m + n >> 0));
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
	};
	Buffer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Buffer.ptr.prototype.Read = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			if (p.$length === 0) {
				return [n, err];
			}
			_tmp = 0;
			_tmp$1 = io.EOF;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		n = $copySlice(p, $subslice(b.buf, b.off));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = -1;
		}
		return [n, err];
	};
	Buffer.prototype.Read = function(p) { return this.$val.Read(p); };
	Buffer.ptr.prototype.Next = function(n) {
		var $ptr, b, data, m, n;
		b = this;
		b.lastRead = 0;
		m = b.Len();
		if (n > m) {
			n = m;
		}
		data = $subslice(b.buf, b.off, (b.off + n >> 0));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = -1;
		}
		return data;
	};
	Buffer.prototype.Next = function(n) { return this.$val.Next(n); };
	Buffer.ptr.prototype.ReadByte = function() {
		var $ptr, b, c, x, x$1;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			return [0, io.EOF];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		b.off = b.off + (1) >> 0;
		b.lastRead = -1;
		return [c, $ifaceNil];
	};
	Buffer.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Buffer.ptr.prototype.ReadRune = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, b, c, err, n, r, size, x, x$1;
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			r = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [r, size, err];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		if (c < 128) {
			b.off = b.off + (1) >> 0;
			b.lastRead = 1;
			_tmp$3 = (c >> 0);
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			r = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [r, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(b.buf, b.off));
		r = _tuple[0];
		n = _tuple[1];
		b.off = b.off + (n) >> 0;
		b.lastRead = (n >> 0);
		_tmp$6 = r;
		_tmp$7 = n;
		_tmp$8 = $ifaceNil;
		r = _tmp$6;
		size = _tmp$7;
		err = _tmp$8;
		return [r, size, err];
	};
	Buffer.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Buffer.ptr.prototype.UnreadRune = function() {
		var $ptr, b;
		b = this;
		if (b.lastRead <= 0) {
			return errors.New("bytes.Buffer: UnreadRune: previous operation was not ReadRune");
		}
		if (b.off >= (b.lastRead >> 0)) {
			b.off = b.off - ((b.lastRead >> 0)) >> 0;
		}
		b.lastRead = 0;
		return $ifaceNil;
	};
	Buffer.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Buffer.ptr.prototype.UnreadByte = function() {
		var $ptr, b;
		b = this;
		if (b.lastRead === 0) {
			return errors.New("bytes.Buffer: UnreadByte: previous operation was not a read");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			b.off = b.off - (1) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Buffer.ptr.prototype.ReadBytes = function(delim) {
		var $ptr, _tuple, b, delim, err, line, slice;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		line = $appendSlice(line, slice);
		return [line, err];
	};
	Buffer.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Buffer.ptr.prototype.readSlice = function(delim) {
		var $ptr, _tmp, _tmp$1, b, delim, end, err, i, line;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		i = IndexByte($subslice(b.buf, b.off), delim);
		end = (b.off + i >> 0) + 1 >> 0;
		if (i < 0) {
			end = b.buf.$length;
			err = io.EOF;
		}
		line = $subslice(b.buf, b.off, end);
		b.off = end;
		b.lastRead = -1;
		_tmp = line;
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.readSlice = function(delim) { return this.$val.readSlice(delim); };
	Buffer.ptr.prototype.ReadString = function(delim) {
		var $ptr, _tmp, _tmp$1, _tuple, b, delim, err, line, slice;
		line = "";
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		_tmp = $bytesToString(slice);
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	NewBuffer = function(buf) {
		var $ptr, buf;
		return new Buffer.ptr(buf, 0, arrayType.zero(), 0);
	};
	$pkg.NewBuffer = NewBuffer;
	EqualFold = function(s, t) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, r, r$1, r$2, s, size, size$1, sr, t, tr;
		while (true) {
			if (!(!((s.$length === 0)) && !((t.$length === 0)))) { break; }
			_tmp = 0;
			_tmp$1 = 0;
			sr = _tmp;
			tr = _tmp$1;
			if ((0 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 0]) < 128) {
				_tmp$2 = ((0 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 0]) >> 0);
				_tmp$3 = $subslice(s, 1);
				sr = _tmp$2;
				s = _tmp$3;
			} else {
				_tuple = utf8.DecodeRune(s);
				r = _tuple[0];
				size = _tuple[1];
				_tmp$4 = r;
				_tmp$5 = $subslice(s, size);
				sr = _tmp$4;
				s = _tmp$5;
			}
			if ((0 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 0]) < 128) {
				_tmp$6 = ((0 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 0]) >> 0);
				_tmp$7 = $subslice(t, 1);
				tr = _tmp$6;
				t = _tmp$7;
			} else {
				_tuple$1 = utf8.DecodeRune(t);
				r$1 = _tuple$1[0];
				size$1 = _tuple$1[1];
				_tmp$8 = r$1;
				_tmp$9 = $subslice(t, size$1);
				tr = _tmp$8;
				t = _tmp$9;
			}
			if (tr === sr) {
				continue;
			}
			if (tr < sr) {
				_tmp$10 = sr;
				_tmp$11 = tr;
				tr = _tmp$10;
				sr = _tmp$11;
			}
			if (tr < 128 && 65 <= sr && sr <= 90) {
				if (tr === ((sr + 97 >> 0) - 65 >> 0)) {
					continue;
				}
				return false;
			}
			r$2 = unicode.SimpleFold(sr);
			while (true) {
				if (!(!((r$2 === sr)) && r$2 < tr)) { break; }
				r$2 = unicode.SimpleFold(r$2);
			}
			if (r$2 === tr) {
				continue;
			}
			return false;
		}
		return s.$length === t.$length;
	};
	$pkg.EqualFold = EqualFold;
	Reader.ptr.prototype.Len = function() {
		var $ptr, r, x, x$1, x$2, x$3, x$4;
		r = this;
		if ((x = r.i, x$1 = new $Int64(0, r.s.$length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return 0;
		}
		return ((x$2 = (x$3 = new $Int64(0, r.s.$length), x$4 = r.i, new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low)), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0);
	};
	Reader.prototype.Len = function() { return this.$val.Len(); };
	Reader.ptr.prototype.Size = function() {
		var $ptr, r;
		r = this;
		return new $Int64(0, r.s.$length);
	};
	Reader.prototype.Size = function() { return this.$val.Size(); };
	Reader.ptr.prototype.Read = function(b) {
		var $ptr, _tmp, _tmp$1, b, err, n, r, x, x$1, x$2, x$3;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = new $Int64(0, r.s.$length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = 0;
			_tmp$1 = io.EOF;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		r.prevRune = -1;
		n = $copySlice(b, $subslice(r.s, $flatten64(r.i)));
		r.i = (x$2 = r.i, x$3 = new $Int64(0, n), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [n, err];
	};
	Reader.prototype.Read = function(b) { return this.$val.Read(b); };
	Reader.ptr.prototype.ReadAt = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, off, r, x;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp = 0;
			_tmp$1 = errors.New("bytes.Reader.ReadAt: negative offset");
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		if ((x = new $Int64(0, r.s.$length), (off.$high > x.$high || (off.$high === x.$high && off.$low >= x.$low)))) {
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		n = $copySlice(b, $subslice(r.s, $flatten64(off)));
		if (n < b.$length) {
			err = io.EOF;
		}
		return [n, err];
	};
	Reader.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	Reader.ptr.prototype.ReadByte = function() {
		var $ptr, b, r, x, x$1, x$2, x$3, x$4, x$5;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = new $Int64(0, r.s.$length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return [0, io.EOF];
		}
		b = (x$2 = r.s, x$3 = r.i, (($flatten64(x$3) < 0 || $flatten64(x$3) >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + $flatten64(x$3)]));
		r.i = (x$4 = r.i, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
		return [b, $ifaceNil];
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var $ptr, r, x, x$1, x$2;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			return errors.New("bytes.Reader.UnreadByte: at beginning of slice");
		}
		r.i = (x$1 = r.i, x$2 = new $Int64(0, 1), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, c, ch, err, r, size, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		ch = 0;
		size = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = new $Int64(0, r.s.$length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			r.prevRune = -1;
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			ch = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [ch, size, err];
		}
		r.prevRune = ((x$2 = r.i, x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0);
		c = (x$3 = r.s, x$4 = r.i, (($flatten64(x$4) < 0 || $flatten64(x$4) >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + $flatten64(x$4)]));
		if (c < 128) {
			r.i = (x$5 = r.i, x$6 = new $Int64(0, 1), new $Int64(x$5.$high + x$6.$high, x$5.$low + x$6.$low));
			_tmp$3 = (c >> 0);
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			ch = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [ch, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(r.s, $flatten64(r.i)));
		ch = _tuple[0];
		size = _tuple[1];
		r.i = (x$7 = r.i, x$8 = new $Int64(0, size), new $Int64(x$7.$high + x$8.$high, x$7.$low + x$8.$low));
		return [ch, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var $ptr, r;
		r = this;
		if (r.prevRune < 0) {
			return errors.New("bytes.Reader.UnreadRune: previous operation was not ReadRune");
		}
		r.i = new $Int64(0, r.prevRune);
		r.prevRune = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Seek = function(offset, whence) {
		var $ptr, _1, abs, offset, r, whence, x, x$1;
		r = this;
		r.prevRune = -1;
		abs = new $Int64(0, 0);
		_1 = whence;
		if (_1 === (0)) {
			abs = offset;
		} else if (_1 === (1)) {
			abs = (x = r.i, new $Int64(x.$high + offset.$high, x.$low + offset.$low));
		} else if (_1 === (2)) {
			abs = (x$1 = new $Int64(0, r.s.$length), new $Int64(x$1.$high + offset.$high, x$1.$low + offset.$low));
		} else {
			return [new $Int64(0, 0), errors.New("bytes.Reader.Seek: invalid whence")];
		}
		if ((abs.$high < 0 || (abs.$high === 0 && abs.$low < 0))) {
			return [new $Int64(0, 0), errors.New("bytes.Reader.Seek: negative position")];
		}
		r.i = abs;
		return [abs, $ifaceNil];
	};
	Reader.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, b, err, m, n, r, w, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; m = $f.m; n = $f.n; r = $f.r; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = new $Int64(0, r.s.$length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		b = $subslice(r.s, $flatten64(r.i));
		_r = w.Write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = _tuple[0];
		err = _tuple[1];
		if (m > b.$length) {
			$panic(new $String("bytes.Reader.WriteTo: invalid Write count"));
		}
		r.i = (x$2 = r.i, x$3 = new $Int64(0, m), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		n = new $Int64(0, m);
		if (!((m === b.$length)) && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.m = m; $f.n = n; $f.r = r; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.Reset = function(b) {
		var $ptr, b, r;
		r = this;
		Reader.copy(r, new Reader.ptr(b, new $Int64(0, 0), -1));
	};
	Reader.prototype.Reset = function(b) { return this.$val.Reset(b); };
	NewReader = function(b) {
		var $ptr, b;
		return new Reader.ptr(b, new $Int64(0, 0), -1);
	};
	$pkg.NewReader = NewReader;
	ptrType.methods = [{prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "grow", name: "grow", pkg: "bytes", typ: $funcType([$Int], [$Int], false)}, {prop: "Grow", name: "Grow", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "readSlice", name: "readSlice", pkg: "bytes", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}];
	ptrType$2.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType, $Int64], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([sliceType], [], false)}];
	Buffer.init("bytes", [{prop: "buf", name: "buf", exported: false, typ: sliceType, tag: ""}, {prop: "off", name: "off", exported: false, typ: $Int, tag: ""}, {prop: "bootstrap", name: "bootstrap", exported: false, typ: arrayType, tag: ""}, {prop: "lastRead", name: "lastRead", exported: false, typ: readOp, tag: ""}]);
	Reader.init("bytes", [{prop: "s", name: "s", exported: false, typ: sliceType, tag: ""}, {prop: "i", name: "i", exported: false, typ: $Int64, tag: ""}, {prop: "prevRune", name: "prevRune", exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding"] = (function() {
	var $pkg = {}, $init, TextMarshaler, TextUnmarshaler, sliceType;
	TextMarshaler = $pkg.TextMarshaler = $newType(8, $kindInterface, "encoding.TextMarshaler", true, "encoding", true, null);
	TextUnmarshaler = $pkg.TextUnmarshaler = $newType(8, $kindInterface, "encoding.TextUnmarshaler", true, "encoding", true, null);
	sliceType = $sliceType($Uint8);
	TextMarshaler.init([{prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType, $error], false)}]);
	TextUnmarshaler.init([{prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType], [$error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/base64"] = (function() {
	var $pkg = {}, $init, io, strconv, Encoding, CorruptInputError, arrayType, arrayType$1, sliceType, ptrType, arrayType$4, NewEncoding;
	io = $packages["io"];
	strconv = $packages["strconv"];
	Encoding = $pkg.Encoding = $newType(0, $kindStruct, "base64.Encoding", true, "encoding/base64", true, function(encode_, decodeMap_, padChar_, strict_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.encode = arrayType.zero();
			this.decodeMap = arrayType$1.zero();
			this.padChar = 0;
			this.strict = false;
			return;
		}
		this.encode = encode_;
		this.decodeMap = decodeMap_;
		this.padChar = padChar_;
		this.strict = strict_;
	});
	CorruptInputError = $pkg.CorruptInputError = $newType(8, $kindInt64, "base64.CorruptInputError", true, "encoding/base64", true, null);
	arrayType = $arrayType($Uint8, 64);
	arrayType$1 = $arrayType($Uint8, 256);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Encoding);
	arrayType$4 = $arrayType($Uint8, 4);
	NewEncoding = function(encoder$1) {
		var $ptr, e, encoder$1, i, i$1, x, x$1, x$2;
		if (!((encoder$1.length === 64))) {
			$panic(new $String("encoding alphabet is not 64-bytes long"));
		}
		e = new Encoding.ptr(arrayType.zero(), arrayType$1.zero(), 0, false);
		e.padChar = 61;
		$copyString(new sliceType(e.encode), encoder$1);
		i = 0;
		while (true) {
			if (!(i < 256)) { break; }
			(x = e.decodeMap, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i] = 255));
			i = i + (1) >> 0;
		}
		i$1 = 0;
		while (true) {
			if (!(i$1 < encoder$1.length)) { break; }
			(x$1 = e.decodeMap, x$2 = encoder$1.charCodeAt(i$1), ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2] = (i$1 << 24 >>> 24)));
			i$1 = i$1 + (1) >> 0;
		}
		return e;
	};
	$pkg.NewEncoding = NewEncoding;
	Encoding.ptr.prototype.WithPadding = function(padding) {
		var $ptr, enc, padding;
		enc = this;
		enc.padChar = padding;
		return enc;
	};
	Encoding.prototype.WithPadding = function(padding) { return this.$val.WithPadding(padding); };
	Encoding.ptr.prototype.Strict = function() {
		var $ptr, enc;
		enc = this;
		enc.strict = true;
		return enc;
	};
	Encoding.prototype.Strict = function() { return this.$val.Strict(); };
	Encoding.ptr.prototype.Encode = function(dst, src) {
		var $ptr, _1, _q, _tmp, _tmp$1, di, dst, enc, n, remain, si, src, val, val$1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		enc = this;
		if (src.$length === 0) {
			return;
		}
		_tmp = 0;
		_tmp$1 = 0;
		di = _tmp;
		si = _tmp$1;
		n = $imul(((_q = src.$length / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), 3);
		while (true) {
			if (!(si < n)) { break; }
			val = ((((((x = si + 0 >> 0, ((x < 0 || x >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x])) >>> 0) << 16 >>> 0) | (((x$1 = si + 1 >> 0, ((x$1 < 0 || x$1 >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x$1])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$2 = si + 2 >> 0, ((x$2 < 0 || x$2 >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x$2])) >>> 0)) >>> 0;
			(x$5 = di + 0 >> 0, ((x$5 < 0 || x$5 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$5] = (x$3 = enc.encode, x$4 = ((val >>> 18 >>> 0) & 63) >>> 0, ((x$4 < 0 || x$4 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[x$4]))));
			(x$8 = di + 1 >> 0, ((x$8 < 0 || x$8 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$8] = (x$6 = enc.encode, x$7 = ((val >>> 12 >>> 0) & 63) >>> 0, ((x$7 < 0 || x$7 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[x$7]))));
			(x$11 = di + 2 >> 0, ((x$11 < 0 || x$11 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$11] = (x$9 = enc.encode, x$10 = ((val >>> 6 >>> 0) & 63) >>> 0, ((x$10 < 0 || x$10 >= x$9.length) ? ($throwRuntimeError("index out of range"), undefined) : x$9[x$10]))));
			(x$14 = di + 3 >> 0, ((x$14 < 0 || x$14 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$14] = (x$12 = enc.encode, x$13 = (val & 63) >>> 0, ((x$13 < 0 || x$13 >= x$12.length) ? ($throwRuntimeError("index out of range"), undefined) : x$12[x$13]))));
			si = si + (3) >> 0;
			di = di + (4) >> 0;
		}
		remain = src.$length - si >> 0;
		if (remain === 0) {
			return;
		}
		val$1 = ((x$15 = si + 0 >> 0, ((x$15 < 0 || x$15 >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x$15])) >>> 0) << 16 >>> 0;
		if (remain === 2) {
			val$1 = (val$1 | ((((x$16 = si + 1 >> 0, ((x$16 < 0 || x$16 >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x$16])) >>> 0) << 8 >>> 0))) >>> 0;
		}
		(x$19 = di + 0 >> 0, ((x$19 < 0 || x$19 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$19] = (x$17 = enc.encode, x$18 = ((val$1 >>> 18 >>> 0) & 63) >>> 0, ((x$18 < 0 || x$18 >= x$17.length) ? ($throwRuntimeError("index out of range"), undefined) : x$17[x$18]))));
		(x$22 = di + 1 >> 0, ((x$22 < 0 || x$22 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$22] = (x$20 = enc.encode, x$21 = ((val$1 >>> 12 >>> 0) & 63) >>> 0, ((x$21 < 0 || x$21 >= x$20.length) ? ($throwRuntimeError("index out of range"), undefined) : x$20[x$21]))));
		_1 = remain;
		if (_1 === (2)) {
			(x$25 = di + 2 >> 0, ((x$25 < 0 || x$25 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$25] = (x$23 = enc.encode, x$24 = ((val$1 >>> 6 >>> 0) & 63) >>> 0, ((x$24 < 0 || x$24 >= x$23.length) ? ($throwRuntimeError("index out of range"), undefined) : x$23[x$24]))));
			if (!((enc.padChar === -1))) {
				(x$26 = di + 3 >> 0, ((x$26 < 0 || x$26 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$26] = (enc.padChar << 24 >>> 24)));
			}
		} else if (_1 === (1)) {
			if (!((enc.padChar === -1))) {
				(x$27 = di + 2 >> 0, ((x$27 < 0 || x$27 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$27] = (enc.padChar << 24 >>> 24)));
				(x$28 = di + 3 >> 0, ((x$28 < 0 || x$28 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$28] = (enc.padChar << 24 >>> 24)));
			}
		}
	};
	Encoding.prototype.Encode = function(dst, src) { return this.$val.Encode(dst, src); };
	Encoding.ptr.prototype.EncodeToString = function(src) {
		var $ptr, buf, enc, src;
		enc = this;
		buf = $makeSlice(sliceType, enc.EncodedLen(src.$length));
		enc.Encode(buf, src);
		return $bytesToString(buf);
	};
	Encoding.prototype.EncodeToString = function(src) { return this.$val.EncodeToString(src); };
	Encoding.ptr.prototype.EncodedLen = function(n) {
		var $ptr, _q, _q$1, enc, n;
		enc = this;
		if (enc.padChar === -1) {
			return (_q = ((($imul(n, 8)) + 5 >> 0)) / 6, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return $imul((_q$1 = ((n + 2 >> 0)) / 3, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 4);
	};
	Encoding.prototype.EncodedLen = function(n) { return this.$val.EncodedLen(n); };
	CorruptInputError.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return "illegal base64 data at input byte " + strconv.FormatInt(new $Int64(e.$high, e.$low), 10);
	};
	$ptrType(CorruptInputError).prototype.Error = function() { return this.$get().Error(); };
	Encoding.ptr.prototype.decode = function(dst, src) {
		var $ptr, _1, _2, _i, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, dbuf, dinc, dlen, dst, enc, end, err, in$1, j, n, si, src, val, x;
		n = 0;
		end = false;
		err = $ifaceNil;
		enc = this;
		si = 0;
		while (true) {
			if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) === 13)))) { break; }
			si = si + (1) >> 0;
		}
		while (true) {
			if (!(si < src.$length && !end)) { break; }
			dbuf = arrayType$4.zero();
			_tmp = 3;
			_tmp$1 = 4;
			dinc = _tmp;
			dlen = _tmp$1;
			_ref = dbuf;
			_i = 0;
			while (true) {
				if (!(_i < 4)) { break; }
				j = _i;
				if (src.$length === si) {
					if (!((enc.padChar === -1)) || j < 2) {
						_tmp$2 = n;
						_tmp$3 = false;
						_tmp$4 = new CorruptInputError(0, (si - j >> 0));
						n = _tmp$2;
						end = _tmp$3;
						err = _tmp$4;
						return [n, end, err];
					}
					_tmp$5 = j - 1 >> 0;
					_tmp$6 = j;
					_tmp$7 = true;
					dinc = _tmp$5;
					dlen = _tmp$6;
					end = _tmp$7;
					break;
				}
				in$1 = ((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]);
				si = si + (1) >> 0;
				while (true) {
					if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) === 13)))) { break; }
					si = si + (1) >> 0;
				}
				if ((in$1 >> 0) === enc.padChar) {
					_1 = j;
					if ((_1 === (0)) || (_1 === (1))) {
						_tmp$8 = n;
						_tmp$9 = false;
						_tmp$10 = new CorruptInputError(0, (si - 1 >> 0));
						n = _tmp$8;
						end = _tmp$9;
						err = _tmp$10;
						return [n, end, err];
					} else if (_1 === (2)) {
						if (si === src.$length) {
							_tmp$11 = n;
							_tmp$12 = false;
							_tmp$13 = new CorruptInputError(0, src.$length);
							n = _tmp$11;
							end = _tmp$12;
							err = _tmp$13;
							return [n, end, err];
						}
						if (!(((((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) >> 0) === enc.padChar))) {
							_tmp$14 = n;
							_tmp$15 = false;
							_tmp$16 = new CorruptInputError(0, (si - 1 >> 0));
							n = _tmp$14;
							end = _tmp$15;
							err = _tmp$16;
							return [n, end, err];
						}
						si = si + (1) >> 0;
						while (true) {
							if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) === 13)))) { break; }
							si = si + (1) >> 0;
						}
					}
					if (si < src.$length) {
						err = new CorruptInputError(0, si);
					}
					_tmp$17 = 3;
					_tmp$18 = j;
					_tmp$19 = true;
					dinc = _tmp$17;
					dlen = _tmp$18;
					end = _tmp$19;
					break;
				}
				((j < 0 || j >= dbuf.length) ? ($throwRuntimeError("index out of range"), undefined) : dbuf[j] = (x = enc.decodeMap, ((in$1 < 0 || in$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[in$1])));
				if (((j < 0 || j >= dbuf.length) ? ($throwRuntimeError("index out of range"), undefined) : dbuf[j]) === 255) {
					_tmp$20 = n;
					_tmp$21 = false;
					_tmp$22 = new CorruptInputError(0, (si - 1 >> 0));
					n = _tmp$20;
					end = _tmp$21;
					err = _tmp$22;
					return [n, end, err];
				}
				_i++;
			}
			val = (((((((dbuf[0] >>> 0) << 18 >>> 0) | ((dbuf[1] >>> 0) << 12 >>> 0)) >>> 0) | ((dbuf[2] >>> 0) << 6 >>> 0)) >>> 0) | (dbuf[3] >>> 0)) >>> 0;
			_tmp$23 = ((val >>> 0 >>> 0) << 24 >>> 24);
			_tmp$24 = ((val >>> 8 >>> 0) << 24 >>> 24);
			_tmp$25 = ((val >>> 16 >>> 0) << 24 >>> 24);
			dbuf[2] = _tmp$23;
			dbuf[1] = _tmp$24;
			dbuf[0] = _tmp$25;
			_2 = dlen;
			if (_2 === (4)) {
				(2 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 2] = dbuf[2]);
				dbuf[2] = 0;
				(1 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 1] = dbuf[1]);
				if (enc.strict && !((dbuf[2] === 0))) {
					_tmp$26 = n;
					_tmp$27 = end;
					_tmp$28 = new CorruptInputError(0, (si - 1 >> 0));
					n = _tmp$26;
					end = _tmp$27;
					err = _tmp$28;
					return [n, end, err];
				}
				dbuf[1] = 0;
				(0 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 0] = dbuf[0]);
				if (enc.strict && (!((dbuf[1] === 0)) || !((dbuf[2] === 0)))) {
					_tmp$29 = n;
					_tmp$30 = end;
					_tmp$31 = new CorruptInputError(0, (si - 2 >> 0));
					n = _tmp$29;
					end = _tmp$30;
					err = _tmp$31;
					return [n, end, err];
				}
			} else if (_2 === (3)) {
				(1 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 1] = dbuf[1]);
				if (enc.strict && !((dbuf[2] === 0))) {
					_tmp$32 = n;
					_tmp$33 = end;
					_tmp$34 = new CorruptInputError(0, (si - 1 >> 0));
					n = _tmp$32;
					end = _tmp$33;
					err = _tmp$34;
					return [n, end, err];
				}
				dbuf[1] = 0;
				(0 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 0] = dbuf[0]);
				if (enc.strict && (!((dbuf[1] === 0)) || !((dbuf[2] === 0)))) {
					_tmp$35 = n;
					_tmp$36 = end;
					_tmp$37 = new CorruptInputError(0, (si - 2 >> 0));
					n = _tmp$35;
					end = _tmp$36;
					err = _tmp$37;
					return [n, end, err];
				}
			} else if (_2 === (2)) {
				(0 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 0] = dbuf[0]);
				if (enc.strict && (!((dbuf[1] === 0)) || !((dbuf[2] === 0)))) {
					_tmp$38 = n;
					_tmp$39 = end;
					_tmp$40 = new CorruptInputError(0, (si - 2 >> 0));
					n = _tmp$38;
					end = _tmp$39;
					err = _tmp$40;
					return [n, end, err];
				}
			}
			dst = $subslice(dst, dinc);
			n = n + ((dlen - 1 >> 0)) >> 0;
		}
		_tmp$41 = n;
		_tmp$42 = end;
		_tmp$43 = err;
		n = _tmp$41;
		end = _tmp$42;
		err = _tmp$43;
		return [n, end, err];
	};
	Encoding.prototype.decode = function(dst, src) { return this.$val.decode(dst, src); };
	Encoding.ptr.prototype.Decode = function(dst, src) {
		var $ptr, _tuple, dst, enc, err, n, src;
		n = 0;
		err = $ifaceNil;
		enc = this;
		_tuple = enc.decode(dst, src);
		n = _tuple[0];
		err = _tuple[2];
		return [n, err];
	};
	Encoding.prototype.Decode = function(dst, src) { return this.$val.Decode(dst, src); };
	Encoding.ptr.prototype.DecodeString = function(s) {
		var $ptr, _tuple, dbuf, enc, err, n, s;
		enc = this;
		dbuf = $makeSlice(sliceType, enc.DecodedLen(s.length));
		_tuple = enc.decode(dbuf, new sliceType($stringToBytes(s)));
		n = _tuple[0];
		err = _tuple[2];
		return [$subslice(dbuf, 0, n), err];
	};
	Encoding.prototype.DecodeString = function(s) { return this.$val.DecodeString(s); };
	Encoding.ptr.prototype.DecodedLen = function(n) {
		var $ptr, _q, _q$1, enc, n;
		enc = this;
		if (enc.padChar === -1) {
			return (_q = ($imul(n, 6)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return $imul((_q$1 = n / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 3);
	};
	Encoding.prototype.DecodedLen = function(n) { return this.$val.DecodedLen(n); };
	Encoding.methods = [{prop: "WithPadding", name: "WithPadding", pkg: "", typ: $funcType([$Int32], [ptrType], false)}, {prop: "Strict", name: "Strict", pkg: "", typ: $funcType([], [ptrType], false)}];
	ptrType.methods = [{prop: "Encode", name: "Encode", pkg: "", typ: $funcType([sliceType, sliceType], [], false)}, {prop: "EncodeToString", name: "EncodeToString", pkg: "", typ: $funcType([sliceType], [$String], false)}, {prop: "EncodedLen", name: "EncodedLen", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "decode", name: "decode", pkg: "encoding/base64", typ: $funcType([sliceType, sliceType], [$Int, $Bool, $error], false)}, {prop: "Decode", name: "Decode", pkg: "", typ: $funcType([sliceType, sliceType], [$Int, $error], false)}, {prop: "DecodeString", name: "DecodeString", pkg: "", typ: $funcType([$String], [sliceType, $error], false)}, {prop: "DecodedLen", name: "DecodedLen", pkg: "", typ: $funcType([$Int], [$Int], false)}];
	CorruptInputError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Encoding.init("encoding/base64", [{prop: "encode", name: "encode", exported: false, typ: arrayType, tag: ""}, {prop: "decodeMap", name: "decodeMap", exported: false, typ: arrayType$1, tag: ""}, {prop: "padChar", name: "padChar", exported: false, typ: $Int32, tag: ""}, {prop: "strict", name: "strict", exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.StdEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
		$pkg.URLEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_");
		$pkg.RawStdEncoding = $clone($pkg.StdEncoding, Encoding).WithPadding(-1);
		$pkg.RawURLEncoding = $clone($pkg.URLEncoding, Encoding).WithPadding(-1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sort"] = (function() {
	var $pkg = {}, $init, reflect, Interface, lessSwap, reverse, StringSlice, sliceType$2, funcType, funcType$1, Search, SearchStrings, insertionSort, siftDown, heapSort, medianOfThree, doPivot, quickSort, Sort, maxDepth, Slice, Reverse, Strings, insertionSort_func, siftDown_func, heapSort_func, medianOfThree_func, doPivot_func, quickSort_func;
	reflect = $packages["reflect"];
	Interface = $pkg.Interface = $newType(8, $kindInterface, "sort.Interface", true, "sort", true, null);
	lessSwap = $pkg.lessSwap = $newType(0, $kindStruct, "sort.lessSwap", true, "sort", false, function(Less_, Swap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Less = $throwNilPointerError;
			this.Swap = $throwNilPointerError;
			return;
		}
		this.Less = Less_;
		this.Swap = Swap_;
	});
	reverse = $pkg.reverse = $newType(0, $kindStruct, "sort.reverse", true, "sort", false, function(Interface_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Interface = $ifaceNil;
			return;
		}
		this.Interface = Interface_;
	});
	StringSlice = $pkg.StringSlice = $newType(12, $kindSlice, "sort.StringSlice", true, "sort", true, null);
	sliceType$2 = $sliceType($String);
	funcType = $funcType([$Int, $Int], [$Bool], false);
	funcType$1 = $funcType([$Int, $Int], [], false);
	Search = function(n, f) {
		var $ptr, _q, _r, _tmp, _tmp$1, f, h, i, j, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; f = $f.f; h = $f.h; i = $f.i; j = $f.j; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = 0;
		_tmp$1 = n;
		i = _tmp;
		j = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(i < j)) { break; } */ if(!(i < j)) { $s = 2; continue; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			_r = f(h); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				i = h + 1 >> 0;
				$s = 5; continue;
			/* } else { */ case 4:
				j = h;
			/* } */ case 5:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Search }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.f = f; $f.h = h; $f.i = i; $f.j = j; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Search = Search;
	SearchStrings = function(a, x) {
		var $ptr, _r, a, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		x = [x];
		_r = Search(a[0].$length, (function(a, x) { return function(i) {
			var $ptr, i;
			return ((i < 0 || i >= a[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : a[0].$array[a[0].$offset + i]) >= x[0];
		}; })(a, x)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SearchStrings }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SearchStrings = SearchStrings;
	StringSlice.prototype.Search = function(x) {
		var $ptr, _r, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = SearchStrings($subslice(new sliceType$2(p.$array), p.$offset, p.$offset + p.$length), x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StringSlice.prototype.Search }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(StringSlice).prototype.Search = function(x) { return this.$get().Search(x); };
	insertionSort = function(data, a, b) {
		var $ptr, _r, _v, a, b, data, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; a = $f.a; b = $f.b; data = $f.data; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
			j = i;
			/* while (true) { */ case 3:
				if (!(j > a)) { _v = false; $s = 5; continue s; }
				_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: insertionSort }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	siftDown = function(data, lo, hi, first) {
		var $ptr, _r, _r$1, _v, child, data, first, hi, lo, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; child = $f.child; data = $f.data; first = $f.first; hi = $f.hi; lo = $f.lo; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = lo;
		/* while (true) { */ case 1:
			child = ($imul(2, root)) + 1 >> 0;
			if (child >= hi) {
				/* break; */ $s = 2; continue;
			}
			if (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }
			_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				child = child + (1) >> 0;
			/* } */ case 4:
			_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				$s = -1; return;
			/* } */ case 8:
			$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			root = child;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: siftDown }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.child = child; $f.data = data; $f.first = first; $f.hi = hi; $f.lo = lo; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	heapSort = function(data, a, b) {
		var $ptr, _q, a, b, data, first, hi, i, i$1, lo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; a = $f.a; b = $f.b; data = $f.data; first = $f.first; hi = $f.hi; i = $f.i; i$1 = $f.i$1; lo = $f.lo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			$r = siftDown(data, i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		i$1 = hi - 1 >> 0;
		/* while (true) { */ case 4:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }
			$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = siftDown(data, lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 - (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: heapSort }; } $f.$ptr = $ptr; $f._q = _q; $f.a = a; $f.b = b; $f.data = data; $f.first = first; $f.hi = hi; $f.i = i; $f.i$1 = i$1; $f.lo = lo; $f.$s = $s; $f.$r = $r; return $f;
	};
	medianOfThree = function(data, m1, m0, m2) {
		var $ptr, _r, _r$1, _r$2, data, m0, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; data = $f.data; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Less(m1, m0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$r = data.Swap(m1, m0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$1 = data.Less(m2, m1); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$1) { */ case 5:
			$r = data.Swap(m2, m1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = data.Less(m1, m0); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r$2) { */ case 9:
				$r = data.Swap(m1, m0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
		/* } */ case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: medianOfThree }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.data = data; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	doPivot = function(data, lo, hi) {
		var $ptr, _q, _q$1, _q$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tmp$3, _v, _v$1, _v$2, _v$3, _v$4, a, b, c, data, dups, hi, lo, m, midhi, midlo, pivot, protect, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; a = $f.a; b = $f.b; c = $f.c; data = $f.data; dups = $f.dups; hi = $f.hi; lo = $f.lo; m = $f.m; midhi = $f.midhi; midlo = $f.midlo; pivot = $f.pivot; protect = $f.protect; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		midlo = 0;
		midhi = 0;
		m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		/* */ if ((hi - lo >> 0) > 40) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((hi - lo >> 0) > 40) { */ case 1:
			s = (_q$1 = ((hi - lo >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			$r = medianOfThree(data, lo, lo + s >> 0, lo + ($imul(2, s)) >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, m, m - s >> 0, m + s >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - ($imul(2, s)) >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = medianOfThree(data, lo, m, hi - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pivot = lo;
		_tmp = lo + 1 >> 0;
		_tmp$1 = hi - 1 >> 0;
		a = _tmp;
		c = _tmp$1;
		/* while (true) { */ case 7:
			if (!(a < c)) { _v = false; $s = 9; continue s; }
			_r = data.Less(a, pivot); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 9:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 8; continue; }
			a = a + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		b = a;
		/* while (true) { */ case 11:
			/* while (true) { */ case 13:
				if (!(b < c)) { _v$1 = false; $s = 15; continue s; }
				_r$1 = data.Less(pivot, b); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = !_r$1; case 15:
				/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 14; continue; }
				b = b + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			/* while (true) { */ case 17:
				if (!(b < c)) { _v$2 = false; $s = 19; continue s; }
				_r$2 = data.Less(pivot, c - 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 19:
				/* if (!(_v$2)) { break; } */ if(!(_v$2)) { $s = 18; continue; }
				c = c - (1) >> 0;
			/* } */ $s = 17; continue; case 18:
			if (b >= c) {
				/* break; */ $s = 12; continue;
			}
			$r = data.Swap(b, c - 1 >> 0); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			b = b + (1) >> 0;
			c = c - (1) >> 0;
		/* } */ $s = 11; continue; case 12:
		protect = (hi - c >> 0) < 5;
		/* */ if (!protect && (hi - c >> 0) < (_q$2 = ((hi - lo >> 0)) / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (!protect && (hi - c >> 0) < (_q$2 = ((hi - lo >> 0)) / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))) { */ case 22:
			dups = 0;
			_r$3 = data.Less(pivot, hi - 1 >> 0); /* */ $s = 26; case 26: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (!_r$3) { */ case 24:
				$r = data.Swap(c, hi - 1 >> 0); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				c = c + (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 25:
			_r$4 = data.Less(b - 1 >> 0, pivot); /* */ $s = 30; case 30: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (!_r$4) { */ case 28:
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 29:
			_r$5 = data.Less(m, pivot); /* */ $s = 33; case 33: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (!_r$5) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (!_r$5) { */ case 31:
				$r = data.Swap(m, b - 1 >> 0); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 32:
			protect = dups > 1;
		/* } */ case 23:
		/* */ if (protect) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (protect) { */ case 35:
			/* while (true) { */ case 37:
				/* while (true) { */ case 39:
					if (!(a < b)) { _v$3 = false; $s = 41; continue s; }
					_r$6 = data.Less(b - 1 >> 0, pivot); /* */ $s = 42; case 42: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_v$3 = !_r$6; case 41:
					/* if (!(_v$3)) { break; } */ if(!(_v$3)) { $s = 40; continue; }
					b = b - (1) >> 0;
				/* } */ $s = 39; continue; case 40:
				/* while (true) { */ case 43:
					if (!(a < b)) { _v$4 = false; $s = 45; continue s; }
					_r$7 = data.Less(a, pivot); /* */ $s = 46; case 46: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_v$4 = _r$7; case 45:
					/* if (!(_v$4)) { break; } */ if(!(_v$4)) { $s = 44; continue; }
					a = a + (1) >> 0;
				/* } */ $s = 43; continue; case 44:
				if (a >= b) {
					/* break; */ $s = 38; continue;
				}
				$r = data.Swap(a, b - 1 >> 0); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = a + (1) >> 0;
				b = b - (1) >> 0;
			/* } */ $s = 37; continue; case 38:
		/* } */ case 36:
		$r = data.Swap(pivot, b - 1 >> 0); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$2 = b - 1 >> 0;
		_tmp$3 = c;
		midlo = _tmp$2;
		midhi = _tmp$3;
		$s = -1; return [midlo, midhi];
		/* */ } return; } if ($f === undefined) { $f = { $blk: doPivot }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f.a = a; $f.b = b; $f.c = c; $f.data = data; $f.dups = dups; $f.hi = hi; $f.lo = lo; $f.m = m; $f.midhi = midhi; $f.midlo = midlo; $f.pivot = pivot; $f.protect = protect; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	quickSort = function(data, a, b, maxDepth$1) {
		var $ptr, _r, _r$1, _tuple, a, b, data, i, maxDepth$1, mhi, mlo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; b = $f.b; data = $f.data; i = $f.i; maxDepth$1 = $f.maxDepth$1; mhi = $f.mhi; mlo = $f.mlo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			/* if (!((b - a >> 0) > 12)) { break; } */ if(!((b - a >> 0) > 12)) { $s = 2; continue; }
			/* */ if (maxDepth$1 === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (maxDepth$1 === 0) { */ case 3:
				$r = heapSort(data, a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
			maxDepth$1 = maxDepth$1 - (1) >> 0;
			_r = doPivot(data, a, b); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			mlo = _tuple[0];
			mhi = _tuple[1];
			/* */ if ((mlo - a >> 0) < (b - mhi >> 0)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((mlo - a >> 0) < (b - mhi >> 0)) { */ case 7:
				$r = quickSort(data, a, mlo, maxDepth$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = mhi;
				$s = 9; continue;
			/* } else { */ case 8:
				$r = quickSort(data, mhi, b, maxDepth$1); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = mlo;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		/* */ if ((b - a >> 0) > 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((b - a >> 0) > 1) { */ case 12:
			i = a + 6 >> 0;
			/* while (true) { */ case 14:
				/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 15; continue; }
				_r$1 = data.Less(i, i - 6 >> 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_r$1) { */ case 16:
					$r = data.Swap(i, i - 6 >> 0); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 17:
				i = i + (1) >> 0;
			/* } */ $s = 14; continue; case 15:
			$r = insertionSort(data, a, b); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: quickSort }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.maxDepth$1 = maxDepth$1; $f.mhi = mhi; $f.mlo = mlo; $f.$s = $s; $f.$r = $r; return $f;
	};
	Sort = function(data) {
		var $ptr, _r, data, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; data = $f.data; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		$r = quickSort(data, 0, n, maxDepth(n)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sort }; } $f.$ptr = $ptr; $f._r = _r; $f.data = data; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sort = Sort;
	maxDepth = function(n) {
		var $ptr, depth, i, n;
		depth = 0;
		i = n;
		while (true) {
			if (!(i > 0)) { break; }
			depth = depth + (1) >> 0;
			i = (i >> $min((1), 31)) >> 0;
		}
		return $imul(depth, 2);
	};
	Slice = function(slice, less) {
		var $ptr, _r, _r$1, length, less, rv, slice, swap, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; length = $f.length; less = $f.less; rv = $f.rv; slice = $f.slice; swap = $f.swap; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = reflect.ValueOf(slice); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rv = _r;
		_r$1 = reflect.Swapper(slice); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		swap = _r$1;
		length = $clone(rv, reflect.Value).Len();
		$r = quickSort_func(new lessSwap.ptr(less, swap), 0, length, maxDepth(length)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Slice }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.length = length; $f.less = less; $f.rv = rv; $f.slice = slice; $f.swap = swap; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Slice = Slice;
	reverse.ptr.prototype.Less = function(i, j) {
		var $ptr, _r, i, j, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; j = $f.j; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Interface.Less(j, i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: reverse.ptr.prototype.Less }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.j = j; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	reverse.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	Reverse = function(data) {
		var $ptr, data;
		return new reverse.ptr(data);
	};
	$pkg.Reverse = Reverse;
	StringSlice.prototype.Len = function() {
		var $ptr, p;
		p = this;
		return p.$length;
	};
	$ptrType(StringSlice).prototype.Len = function() { return this.$get().Len(); };
	StringSlice.prototype.Less = function(i, j) {
		var $ptr, i, j, p;
		p = this;
		return ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]) < ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]);
	};
	$ptrType(StringSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	StringSlice.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, p;
		p = this;
		_tmp = ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]);
		_tmp$1 = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
		((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i] = _tmp);
		((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j] = _tmp$1);
	};
	$ptrType(StringSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	StringSlice.prototype.Sort = function() {
		var $ptr, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = Sort(p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StringSlice.prototype.Sort }; } $f.$ptr = $ptr; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(StringSlice).prototype.Sort = function() { return this.$get().Sort(); };
	Strings = function(a) {
		var $ptr, a, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; a = $f.a; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = Sort($subslice(new StringSlice(a.$array), a.$offset, a.$offset + a.$length)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Strings }; } $f.$ptr = $ptr; $f.a = a; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Strings = Strings;
	insertionSort_func = function(data, a, b) {
		var $ptr, _r, _v, a, b, data, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; a = $f.a; b = $f.b; data = $f.data; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
			j = i;
			/* while (true) { */ case 3:
				if (!(j > a)) { _v = false; $s = 5; continue s; }
				_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: insertionSort_func }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	siftDown_func = function(data, lo, hi, first) {
		var $ptr, _r, _r$1, _v, child, data, first, hi, lo, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; child = $f.child; data = $f.data; first = $f.first; hi = $f.hi; lo = $f.lo; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = lo;
		/* while (true) { */ case 1:
			child = ($imul(2, root)) + 1 >> 0;
			if (child >= hi) {
				/* break; */ $s = 2; continue;
			}
			if (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }
			_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				child = child + (1) >> 0;
			/* } */ case 4:
			_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				$s = -1; return;
			/* } */ case 8:
			$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			root = child;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: siftDown_func }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.child = child; $f.data = data; $f.first = first; $f.hi = hi; $f.lo = lo; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	heapSort_func = function(data, a, b) {
		var $ptr, _q, a, b, data, first, hi, i, i$1, lo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; a = $f.a; b = $f.b; data = $f.data; first = $f.first; hi = $f.hi; i = $f.i; i$1 = $f.i$1; lo = $f.lo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			$r = siftDown_func($clone(data, lessSwap), i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		i$1 = hi - 1 >> 0;
		/* while (true) { */ case 4:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }
			$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = siftDown_func($clone(data, lessSwap), lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 - (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: heapSort_func }; } $f.$ptr = $ptr; $f._q = _q; $f.a = a; $f.b = b; $f.data = data; $f.first = first; $f.hi = hi; $f.i = i; $f.i$1 = i$1; $f.lo = lo; $f.$s = $s; $f.$r = $r; return $f;
	};
	medianOfThree_func = function(data, m1, m0, m2) {
		var $ptr, _r, _r$1, _r$2, data, m0, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; data = $f.data; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Less(m1, m0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$r = data.Swap(m1, m0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$1 = data.Less(m2, m1); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$1) { */ case 5:
			$r = data.Swap(m2, m1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = data.Less(m1, m0); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r$2) { */ case 9:
				$r = data.Swap(m1, m0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
		/* } */ case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: medianOfThree_func }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.data = data; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	doPivot_func = function(data, lo, hi) {
		var $ptr, _q, _q$1, _q$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tmp$3, _v, _v$1, _v$2, _v$3, _v$4, a, b, c, data, dups, hi, lo, m, midhi, midlo, pivot, protect, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; a = $f.a; b = $f.b; c = $f.c; data = $f.data; dups = $f.dups; hi = $f.hi; lo = $f.lo; m = $f.m; midhi = $f.midhi; midlo = $f.midlo; pivot = $f.pivot; protect = $f.protect; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		midlo = 0;
		midhi = 0;
		m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		/* */ if ((hi - lo >> 0) > 40) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((hi - lo >> 0) > 40) { */ case 1:
			s = (_q$1 = ((hi - lo >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			$r = medianOfThree_func($clone(data, lessSwap), lo, lo + s >> 0, lo + ($imul(2, s)) >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree_func($clone(data, lessSwap), m, m - s >> 0, m + s >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree_func($clone(data, lessSwap), hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - ($imul(2, s)) >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = medianOfThree_func($clone(data, lessSwap), lo, m, hi - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pivot = lo;
		_tmp = lo + 1 >> 0;
		_tmp$1 = hi - 1 >> 0;
		a = _tmp;
		c = _tmp$1;
		/* while (true) { */ case 7:
			if (!(a < c)) { _v = false; $s = 9; continue s; }
			_r = data.Less(a, pivot); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 9:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 8; continue; }
			a = a + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		b = a;
		/* while (true) { */ case 11:
			/* while (true) { */ case 13:
				if (!(b < c)) { _v$1 = false; $s = 15; continue s; }
				_r$1 = data.Less(pivot, b); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = !_r$1; case 15:
				/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 14; continue; }
				b = b + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			/* while (true) { */ case 17:
				if (!(b < c)) { _v$2 = false; $s = 19; continue s; }
				_r$2 = data.Less(pivot, c - 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 19:
				/* if (!(_v$2)) { break; } */ if(!(_v$2)) { $s = 18; continue; }
				c = c - (1) >> 0;
			/* } */ $s = 17; continue; case 18:
			if (b >= c) {
				/* break; */ $s = 12; continue;
			}
			$r = data.Swap(b, c - 1 >> 0); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			b = b + (1) >> 0;
			c = c - (1) >> 0;
		/* } */ $s = 11; continue; case 12:
		protect = (hi - c >> 0) < 5;
		/* */ if (!protect && (hi - c >> 0) < (_q$2 = ((hi - lo >> 0)) / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (!protect && (hi - c >> 0) < (_q$2 = ((hi - lo >> 0)) / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))) { */ case 22:
			dups = 0;
			_r$3 = data.Less(pivot, hi - 1 >> 0); /* */ $s = 26; case 26: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (!_r$3) { */ case 24:
				$r = data.Swap(c, hi - 1 >> 0); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				c = c + (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 25:
			_r$4 = data.Less(b - 1 >> 0, pivot); /* */ $s = 30; case 30: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (!_r$4) { */ case 28:
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 29:
			_r$5 = data.Less(m, pivot); /* */ $s = 33; case 33: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (!_r$5) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (!_r$5) { */ case 31:
				$r = data.Swap(m, b - 1 >> 0); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 32:
			protect = dups > 1;
		/* } */ case 23:
		/* */ if (protect) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (protect) { */ case 35:
			/* while (true) { */ case 37:
				/* while (true) { */ case 39:
					if (!(a < b)) { _v$3 = false; $s = 41; continue s; }
					_r$6 = data.Less(b - 1 >> 0, pivot); /* */ $s = 42; case 42: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_v$3 = !_r$6; case 41:
					/* if (!(_v$3)) { break; } */ if(!(_v$3)) { $s = 40; continue; }
					b = b - (1) >> 0;
				/* } */ $s = 39; continue; case 40:
				/* while (true) { */ case 43:
					if (!(a < b)) { _v$4 = false; $s = 45; continue s; }
					_r$7 = data.Less(a, pivot); /* */ $s = 46; case 46: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_v$4 = _r$7; case 45:
					/* if (!(_v$4)) { break; } */ if(!(_v$4)) { $s = 44; continue; }
					a = a + (1) >> 0;
				/* } */ $s = 43; continue; case 44:
				if (a >= b) {
					/* break; */ $s = 38; continue;
				}
				$r = data.Swap(a, b - 1 >> 0); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = a + (1) >> 0;
				b = b - (1) >> 0;
			/* } */ $s = 37; continue; case 38:
		/* } */ case 36:
		$r = data.Swap(pivot, b - 1 >> 0); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$2 = b - 1 >> 0;
		_tmp$3 = c;
		midlo = _tmp$2;
		midhi = _tmp$3;
		$s = -1; return [midlo, midhi];
		/* */ } return; } if ($f === undefined) { $f = { $blk: doPivot_func }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f.a = a; $f.b = b; $f.c = c; $f.data = data; $f.dups = dups; $f.hi = hi; $f.lo = lo; $f.m = m; $f.midhi = midhi; $f.midlo = midlo; $f.pivot = pivot; $f.protect = protect; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	quickSort_func = function(data, a, b, maxDepth$1) {
		var $ptr, _r, _r$1, _tuple, a, b, data, i, maxDepth$1, mhi, mlo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; b = $f.b; data = $f.data; i = $f.i; maxDepth$1 = $f.maxDepth$1; mhi = $f.mhi; mlo = $f.mlo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			/* if (!((b - a >> 0) > 12)) { break; } */ if(!((b - a >> 0) > 12)) { $s = 2; continue; }
			/* */ if (maxDepth$1 === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (maxDepth$1 === 0) { */ case 3:
				$r = heapSort_func($clone(data, lessSwap), a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
			maxDepth$1 = maxDepth$1 - (1) >> 0;
			_r = doPivot_func($clone(data, lessSwap), a, b); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			mlo = _tuple[0];
			mhi = _tuple[1];
			/* */ if ((mlo - a >> 0) < (b - mhi >> 0)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((mlo - a >> 0) < (b - mhi >> 0)) { */ case 7:
				$r = quickSort_func($clone(data, lessSwap), a, mlo, maxDepth$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = mhi;
				$s = 9; continue;
			/* } else { */ case 8:
				$r = quickSort_func($clone(data, lessSwap), mhi, b, maxDepth$1); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = mlo;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		/* */ if ((b - a >> 0) > 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((b - a >> 0) > 1) { */ case 12:
			i = a + 6 >> 0;
			/* while (true) { */ case 14:
				/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 15; continue; }
				_r$1 = data.Less(i, i - 6 >> 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_r$1) { */ case 16:
					$r = data.Swap(i, i - 6 >> 0); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 17:
				i = i + (1) >> 0;
			/* } */ $s = 14; continue; case 15:
			$r = insertionSort_func($clone(data, lessSwap), a, b); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: quickSort_func }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.maxDepth$1 = maxDepth$1; $f.mhi = mhi; $f.mlo = mlo; $f.$s = $s; $f.$r = $r; return $f;
	};
	reverse.methods = [{prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	StringSlice.methods = [{prop: "Search", name: "Search", pkg: "", typ: $funcType([$String], [$Int], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Sort", name: "Sort", pkg: "", typ: $funcType([], [], false)}];
	Interface.init([{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}]);
	lessSwap.init("", [{prop: "Less", name: "Less", exported: true, typ: funcType, tag: ""}, {prop: "Swap", name: "Swap", exported: true, typ: funcType$1, tag: ""}]);
	reverse.init("", [{prop: "Interface", name: "", exported: true, typ: Interface, tag: ""}]);
	StringSlice.init($String);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = reflect.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, $init, errors, js, io, unicode, utf8, Reader, Replacer, replacer, trieNode, genericReplacer, appendSliceWriter, stringWriterIface, stringWriter, singleStringReplacer, byteReplacer, byteStringReplacer, stringFinder, asciiSet, arrayType, ptrType, sliceType, arrayType$1, ptrType$1, ptrType$2, sliceType$1, ptrType$3, ptrType$4, arrayType$2, sliceType$2, sliceType$3, ptrType$5, arrayType$3, ptrType$6, ptrType$7, ptrType$8, ptrType$9, IndexByte, Index, LastIndex, Count, NewReader, NewReplacer, makeGenericReplacer, getStringWriter, makeSingleStringReplacer, makeStringFinder, longestCommonSuffix, max, explode, Contains, ContainsRune, IndexRune, IndexAny, genSplit, Split, Join, HasPrefix, HasSuffix, Map, ToLower, TrimLeftFunc, TrimRightFunc, TrimFunc, IndexFunc, indexFunc, lastIndexFunc, makeASCIISet, makeCutsetFunc, TrimLeft, TrimRight, TrimSpace, TrimPrefix, Replace;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Reader = $pkg.Reader = $newType(0, $kindStruct, "strings.Reader", true, "strings", true, function(s_, i_, prevRune_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			this.i = new $Int64(0, 0);
			this.prevRune = 0;
			return;
		}
		this.s = s_;
		this.i = i_;
		this.prevRune = prevRune_;
	});
	Replacer = $pkg.Replacer = $newType(0, $kindStruct, "strings.Replacer", true, "strings", true, function(r_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			return;
		}
		this.r = r_;
	});
	replacer = $pkg.replacer = $newType(8, $kindInterface, "strings.replacer", true, "strings", false, null);
	trieNode = $pkg.trieNode = $newType(0, $kindStruct, "strings.trieNode", true, "strings", false, function(value_, priority_, prefix_, next_, table_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.value = "";
			this.priority = 0;
			this.prefix = "";
			this.next = ptrType$2.nil;
			this.table = sliceType$1.nil;
			return;
		}
		this.value = value_;
		this.priority = priority_;
		this.prefix = prefix_;
		this.next = next_;
		this.table = table_;
	});
	genericReplacer = $pkg.genericReplacer = $newType(0, $kindStruct, "strings.genericReplacer", true, "strings", false, function(root_, tableSize_, mapping_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.root = new trieNode.ptr("", 0, "", ptrType$2.nil, sliceType$1.nil);
			this.tableSize = 0;
			this.mapping = arrayType.zero();
			return;
		}
		this.root = root_;
		this.tableSize = tableSize_;
		this.mapping = mapping_;
	});
	appendSliceWriter = $pkg.appendSliceWriter = $newType(12, $kindSlice, "strings.appendSliceWriter", true, "strings", false, null);
	stringWriterIface = $pkg.stringWriterIface = $newType(8, $kindInterface, "strings.stringWriterIface", true, "strings", false, null);
	stringWriter = $pkg.stringWriter = $newType(0, $kindStruct, "strings.stringWriter", true, "strings", false, function(w_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = $ifaceNil;
			return;
		}
		this.w = w_;
	});
	singleStringReplacer = $pkg.singleStringReplacer = $newType(0, $kindStruct, "strings.singleStringReplacer", true, "strings", false, function(finder_, value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.finder = ptrType$4.nil;
			this.value = "";
			return;
		}
		this.finder = finder_;
		this.value = value_;
	});
	byteReplacer = $pkg.byteReplacer = $newType(256, $kindArray, "strings.byteReplacer", true, "strings", false, null);
	byteStringReplacer = $pkg.byteStringReplacer = $newType(3072, $kindArray, "strings.byteStringReplacer", true, "strings", false, null);
	stringFinder = $pkg.stringFinder = $newType(0, $kindStruct, "strings.stringFinder", true, "strings", false, function(pattern_, badCharSkip_, goodSuffixSkip_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pattern = "";
			this.badCharSkip = arrayType$2.zero();
			this.goodSuffixSkip = sliceType$2.nil;
			return;
		}
		this.pattern = pattern_;
		this.badCharSkip = badCharSkip_;
		this.goodSuffixSkip = goodSuffixSkip_;
	});
	asciiSet = $pkg.asciiSet = $newType(32, $kindArray, "strings.asciiSet", true, "strings", false, null);
	arrayType = $arrayType($Uint8, 256);
	ptrType = $ptrType(byteReplacer);
	sliceType = $sliceType($Uint8);
	arrayType$1 = $arrayType(sliceType, 256);
	ptrType$1 = $ptrType(byteStringReplacer);
	ptrType$2 = $ptrType(trieNode);
	sliceType$1 = $sliceType(ptrType$2);
	ptrType$3 = $ptrType(appendSliceWriter);
	ptrType$4 = $ptrType(stringFinder);
	arrayType$2 = $arrayType($Int, 256);
	sliceType$2 = $sliceType($Int);
	sliceType$3 = $sliceType($String);
	ptrType$5 = $ptrType(asciiSet);
	arrayType$3 = $arrayType($Uint32, 8);
	ptrType$6 = $ptrType(Reader);
	ptrType$7 = $ptrType(Replacer);
	ptrType$8 = $ptrType(genericReplacer);
	ptrType$9 = $ptrType(singleStringReplacer);
	IndexByte = function(s, c) {
		var $ptr, c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	$pkg.IndexByte = IndexByte;
	Index = function(s, sep) {
		var $ptr, s, sep;
		return $parseInt(s.indexOf(sep)) >> 0;
	};
	$pkg.Index = Index;
	LastIndex = function(s, sep) {
		var $ptr, s, sep;
		return $parseInt(s.lastIndexOf(sep)) >> 0;
	};
	$pkg.LastIndex = LastIndex;
	Count = function(s, sep) {
		var $ptr, n, pos, s, sep;
		n = 0;
		if ((sep.length === 0)) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length > s.length) {
			return 0;
		} else if ((sep.length === s.length)) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		while (true) {
			pos = Index(s, sep);
			if (pos === -1) {
				break;
			}
			n = n + (1) >> 0;
			s = $substring(s, (pos + sep.length >> 0));
		}
		return n;
	};
	$pkg.Count = Count;
	Reader.ptr.prototype.Len = function() {
		var $ptr, r, x, x$1, x$2, x$3, x$4;
		r = this;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return 0;
		}
		return ((x$2 = (x$3 = new $Int64(0, r.s.length), x$4 = r.i, new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low)), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0);
	};
	Reader.prototype.Len = function() { return this.$val.Len(); };
	Reader.ptr.prototype.Size = function() {
		var $ptr, r;
		r = this;
		return new $Int64(0, r.s.length);
	};
	Reader.prototype.Size = function() { return this.$val.Size(); };
	Reader.ptr.prototype.Read = function(b) {
		var $ptr, _tmp, _tmp$1, b, err, n, r, x, x$1, x$2, x$3;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = 0;
			_tmp$1 = io.EOF;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		r.prevRune = -1;
		n = $copyString(b, $substring(r.s, $flatten64(r.i)));
		r.i = (x$2 = r.i, x$3 = new $Int64(0, n), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [n, err];
	};
	Reader.prototype.Read = function(b) { return this.$val.Read(b); };
	Reader.ptr.prototype.ReadAt = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, off, r, x;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp = 0;
			_tmp$1 = errors.New("strings.Reader.ReadAt: negative offset");
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		if ((x = new $Int64(0, r.s.length), (off.$high > x.$high || (off.$high === x.$high && off.$low >= x.$low)))) {
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		n = $copyString(b, $substring(r.s, $flatten64(off)));
		if (n < b.$length) {
			err = io.EOF;
		}
		return [n, err];
	};
	Reader.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	Reader.ptr.prototype.ReadByte = function() {
		var $ptr, b, r, x, x$1, x$2, x$3;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return [0, io.EOF];
		}
		b = r.s.charCodeAt($flatten64(r.i));
		r.i = (x$2 = r.i, x$3 = new $Int64(0, 1), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [b, $ifaceNil];
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var $ptr, r, x, x$1, x$2;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			return errors.New("strings.Reader.UnreadByte: at beginning of string");
		}
		r.i = (x$1 = r.i, x$2 = new $Int64(0, 1), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, c, ch, err, r, size, x, x$1, x$2, x$3, x$4, x$5, x$6;
		ch = 0;
		size = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			r.prevRune = -1;
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			ch = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [ch, size, err];
		}
		r.prevRune = ((x$2 = r.i, x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0);
		c = r.s.charCodeAt($flatten64(r.i));
		if (c < 128) {
			r.i = (x$3 = r.i, x$4 = new $Int64(0, 1), new $Int64(x$3.$high + x$4.$high, x$3.$low + x$4.$low));
			_tmp$3 = (c >> 0);
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			ch = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [ch, size, err];
		}
		_tuple = utf8.DecodeRuneInString($substring(r.s, $flatten64(r.i)));
		ch = _tuple[0];
		size = _tuple[1];
		r.i = (x$5 = r.i, x$6 = new $Int64(0, size), new $Int64(x$5.$high + x$6.$high, x$5.$low + x$6.$low));
		return [ch, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var $ptr, r;
		r = this;
		if (r.prevRune < 0) {
			return errors.New("strings.Reader.UnreadRune: previous operation was not ReadRune");
		}
		r.i = new $Int64(0, r.prevRune);
		r.prevRune = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Seek = function(offset, whence) {
		var $ptr, _1, abs, offset, r, whence, x, x$1;
		r = this;
		r.prevRune = -1;
		abs = new $Int64(0, 0);
		_1 = whence;
		if (_1 === (0)) {
			abs = offset;
		} else if (_1 === (1)) {
			abs = (x = r.i, new $Int64(x.$high + offset.$high, x.$low + offset.$low));
		} else if (_1 === (2)) {
			abs = (x$1 = new $Int64(0, r.s.length), new $Int64(x$1.$high + offset.$high, x$1.$low + offset.$low));
		} else {
			return [new $Int64(0, 0), errors.New("strings.Reader.Seek: invalid whence")];
		}
		if ((abs.$high < 0 || (abs.$high === 0 && abs.$low < 0))) {
			return [new $Int64(0, 0), errors.New("strings.Reader.Seek: negative position")];
		}
		r.i = abs;
		return [abs, $ifaceNil];
	};
	Reader.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, err, m, n, r, s, w, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; m = $f.m; n = $f.n; r = $f.r; s = $f.s; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		s = $substring(r.s, $flatten64(r.i));
		_r = io.WriteString(w, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = _tuple[0];
		err = _tuple[1];
		if (m > s.length) {
			$panic(new $String("strings.Reader.WriteTo: invalid WriteString count"));
		}
		r.i = (x$2 = r.i, x$3 = new $Int64(0, m), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		n = new $Int64(0, m);
		if (!((m === s.length)) && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.m = m; $f.n = n; $f.r = r; $f.s = s; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.Reset = function(s) {
		var $ptr, r, s;
		r = this;
		Reader.copy(r, new Reader.ptr(s, new $Int64(0, 0), -1));
	};
	Reader.prototype.Reset = function(s) { return this.$val.Reset(s); };
	NewReader = function(s) {
		var $ptr, s;
		return new Reader.ptr(s, new $Int64(0, 0), -1);
	};
	$pkg.NewReader = NewReader;
	NewReplacer = function(oldnew) {
		var $ptr, _i, _r, _ref, allNewBytes, i, i$1, i$2, i$3, n, n$1, o, o$1, oldnew, r, r$1, x, x$1, x$2;
		if ((_r = oldnew.$length % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 1) {
			$panic(new $String("strings.NewReplacer: odd argument count"));
		}
		if ((oldnew.$length === 2) && (0 >= oldnew.$length ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + 0]).length > 1) {
			return new Replacer.ptr(makeSingleStringReplacer((0 >= oldnew.$length ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + 0]), (1 >= oldnew.$length ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + 1])));
		}
		allNewBytes = true;
		i = 0;
		while (true) {
			if (!(i < oldnew.$length)) { break; }
			if (!((((i < 0 || i >= oldnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + i]).length === 1))) {
				return new Replacer.ptr(makeGenericReplacer(oldnew));
			}
			if (!(((x = i + 1 >> 0, ((x < 0 || x >= oldnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + x])).length === 1))) {
				allNewBytes = false;
			}
			i = i + (2) >> 0;
		}
		if (allNewBytes) {
			r = arrayType.zero();
			_ref = r;
			_i = 0;
			while (true) {
				if (!(_i < 256)) { break; }
				i$1 = _i;
				((i$1 < 0 || i$1 >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[i$1] = (i$1 << 24 >>> 24));
				_i++;
			}
			i$2 = oldnew.$length - 2 >> 0;
			while (true) {
				if (!(i$2 >= 0)) { break; }
				o = ((i$2 < 0 || i$2 >= oldnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + i$2]).charCodeAt(0);
				n = (x$1 = i$2 + 1 >> 0, ((x$1 < 0 || x$1 >= oldnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + x$1])).charCodeAt(0);
				((o < 0 || o >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[o] = n);
				i$2 = i$2 - (2) >> 0;
			}
			return new Replacer.ptr(new ptrType(r));
		}
		r$1 = arrayType$1.zero();
		i$3 = oldnew.$length - 2 >> 0;
		while (true) {
			if (!(i$3 >= 0)) { break; }
			o$1 = ((i$3 < 0 || i$3 >= oldnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + i$3]).charCodeAt(0);
			n$1 = (x$2 = i$3 + 1 >> 0, ((x$2 < 0 || x$2 >= oldnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + x$2]));
			((o$1 < 0 || o$1 >= r$1.length) ? ($throwRuntimeError("index out of range"), undefined) : r$1[o$1] = new sliceType($stringToBytes(n$1)));
			i$3 = i$3 - (2) >> 0;
		}
		return new Replacer.ptr(new ptrType$1(r$1));
	};
	$pkg.NewReplacer = NewReplacer;
	Replacer.ptr.prototype.Replace = function(s) {
		var $ptr, _r, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.r.Replace(s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Replacer.ptr.prototype.Replace }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Replacer.prototype.Replace = function(s) { return this.$val.Replace(s); };
	Replacer.ptr.prototype.WriteString = function(w, s) {
		var $ptr, _r, _tuple, err, n, r, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; n = $f.n; r = $f.r; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		_r = r.r.WriteString(w, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Replacer.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.n = n; $f.r = r; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Replacer.prototype.WriteString = function(w, s) { return this.$val.WriteString(w, s); };
	trieNode.ptr.prototype.add = function(key, val, priority, r) {
		var $ptr, key, keyNode, m, n, next, prefixNode, priority, r, t, val, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		if (key === "") {
			if (t.priority === 0) {
				t.value = val;
				t.priority = priority;
			}
			return;
		}
		if (!(t.prefix === "")) {
			n = 0;
			while (true) {
				if (!(n < t.prefix.length && n < key.length)) { break; }
				if (!((t.prefix.charCodeAt(n) === key.charCodeAt(n)))) {
					break;
				}
				n = n + (1) >> 0;
			}
			if (n === t.prefix.length) {
				t.next.add($substring(key, n), val, priority, r);
			} else if (n === 0) {
				prefixNode = ptrType$2.nil;
				if (t.prefix.length === 1) {
					prefixNode = t.next;
				} else {
					prefixNode = new trieNode.ptr("", 0, $substring(t.prefix, 1), t.next, sliceType$1.nil);
				}
				keyNode = new trieNode.ptr("", 0, "", ptrType$2.nil, sliceType$1.nil);
				t.table = $makeSlice(sliceType$1, r.tableSize);
				(x = t.table, x$1 = (x$2 = r.mapping, x$3 = t.prefix.charCodeAt(0), ((x$3 < 0 || x$3 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[x$3])), ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = prefixNode));
				(x$4 = t.table, x$5 = (x$6 = r.mapping, x$7 = key.charCodeAt(0), ((x$7 < 0 || x$7 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[x$7])), ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5] = keyNode));
				t.prefix = "";
				t.next = ptrType$2.nil;
				keyNode.add($substring(key, 1), val, priority, r);
			} else {
				next = new trieNode.ptr("", 0, $substring(t.prefix, n), t.next, sliceType$1.nil);
				t.prefix = $substring(t.prefix, 0, n);
				t.next = next;
				next.add($substring(key, n), val, priority, r);
			}
		} else if (!(t.table === sliceType$1.nil)) {
			m = (x$8 = r.mapping, x$9 = key.charCodeAt(0), ((x$9 < 0 || x$9 >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[x$9]));
			if ((x$10 = t.table, ((m < 0 || m >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + m])) === ptrType$2.nil) {
				(x$11 = t.table, ((m < 0 || m >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + m] = new trieNode.ptr("", 0, "", ptrType$2.nil, sliceType$1.nil)));
			}
			(x$12 = t.table, ((m < 0 || m >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + m])).add($substring(key, 1), val, priority, r);
		} else {
			t.prefix = key;
			t.next = new trieNode.ptr("", 0, "", ptrType$2.nil, sliceType$1.nil);
			t.next.add("", val, priority, r);
		}
	};
	trieNode.prototype.add = function(key, val, priority, r) { return this.$val.add(key, val, priority, r); };
	genericReplacer.ptr.prototype.lookup = function(s, ignoreRoot) {
		var $ptr, bestPriority, found, ignoreRoot, index, keylen, n, node, r, s, val, x, x$1, x$2;
		val = "";
		keylen = 0;
		found = false;
		r = this;
		bestPriority = 0;
		node = r.root;
		n = 0;
		while (true) {
			if (!(!(node === ptrType$2.nil))) { break; }
			if (node.priority > bestPriority && !(ignoreRoot && node === r.root)) {
				bestPriority = node.priority;
				val = node.value;
				keylen = n;
				found = true;
			}
			if (s === "") {
				break;
			}
			if (!(node.table === sliceType$1.nil)) {
				index = (x = r.mapping, x$1 = s.charCodeAt(0), ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1]));
				if ((index >> 0) === r.tableSize) {
					break;
				}
				node = (x$2 = node.table, ((index < 0 || index >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + index]));
				s = $substring(s, 1);
				n = n + (1) >> 0;
			} else if (!(node.prefix === "") && HasPrefix(s, node.prefix)) {
				n = n + (node.prefix.length) >> 0;
				s = $substring(s, node.prefix.length);
				node = node.next;
			} else {
				break;
			}
		}
		return [val, keylen, found];
	};
	genericReplacer.prototype.lookup = function(s, ignoreRoot) { return this.$val.lookup(s, ignoreRoot); };
	makeGenericReplacer = function(oldnew) {
		var $ptr, _i, _i$1, _ref, _ref$1, b, b$1, i, i$1, i$2, index, j, key, oldnew, r, x, x$1, x$2, x$3, x$4;
		r = new genericReplacer.ptr(new trieNode.ptr("", 0, "", ptrType$2.nil, sliceType$1.nil), 0, arrayType.zero());
		i = 0;
		while (true) {
			if (!(i < oldnew.$length)) { break; }
			key = ((i < 0 || i >= oldnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + i]);
			j = 0;
			while (true) {
				if (!(j < key.length)) { break; }
				(x = r.mapping, x$1 = key.charCodeAt(j), ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1] = 1));
				j = j + (1) >> 0;
			}
			i = i + (2) >> 0;
		}
		_ref = r.mapping;
		_i = 0;
		while (true) {
			if (!(_i < 256)) { break; }
			b = ((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]);
			r.tableSize = r.tableSize + ((b >> 0)) >> 0;
			_i++;
		}
		index = 0;
		_ref$1 = r.mapping;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < 256)) { break; }
			i$1 = _i$1;
			b$1 = ((_i$1 < 0 || _i$1 >= _ref$1.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1[_i$1]);
			if (b$1 === 0) {
				(x$2 = r.mapping, ((i$1 < 0 || i$1 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i$1] = (r.tableSize << 24 >>> 24)));
			} else {
				(x$3 = r.mapping, ((i$1 < 0 || i$1 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[i$1] = index));
				index = index + (1) << 24 >>> 24;
			}
			_i$1++;
		}
		r.root.table = $makeSlice(sliceType$1, r.tableSize);
		i$2 = 0;
		while (true) {
			if (!(i$2 < oldnew.$length)) { break; }
			r.root.add(((i$2 < 0 || i$2 >= oldnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + i$2]), (x$4 = i$2 + 1 >> 0, ((x$4 < 0 || x$4 >= oldnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + x$4])), oldnew.$length - i$2 >> 0, r);
			i$2 = i$2 + (2) >> 0;
		}
		return r;
	};
	$ptrType(appendSliceWriter).prototype.Write = function(p) {
		var $ptr, p, w;
		w = this;
		w.$set($appendSlice(w.$get(), p));
		return [p.$length, $ifaceNil];
	};
	$ptrType(appendSliceWriter).prototype.WriteString = function(s) {
		var $ptr, s, w;
		w = this;
		w.$set($appendSlice(w.$get(), s));
		return [s.length, $ifaceNil];
	};
	stringWriter.ptr.prototype.WriteString = function(s) {
		var $ptr, _r, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		_r = w.w.Write(new sliceType($stringToBytes(s))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stringWriter.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	stringWriter.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	getStringWriter = function(w) {
		var $ptr, _tuple, ok, sw, w, x;
		_tuple = $assertType(w, stringWriterIface, true);
		sw = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			sw = (x = new stringWriter.ptr(w), new x.constructor.elem(x));
		}
		return sw;
	};
	genericReplacer.ptr.prototype.Replace = function(s) {
		var $ptr, _r, buf, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; buf = $f.buf; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		r = this;
		buf[0] = $makeSlice(appendSliceWriter, 0, s.length);
		_r = r.WriteString((buf.$ptr || (buf.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, buf))), s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return $bytesToString(buf[0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: genericReplacer.ptr.prototype.Replace }; } $f.$ptr = $ptr; $f._r = _r; $f.buf = buf; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	genericReplacer.prototype.Replace = function(s) { return this.$val.Replace(s); };
	genericReplacer.ptr.prototype.WriteString = function(w, s) {
		var $ptr, _r, _r$1, _r$2, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, err, i, index, keylen, last, match, n, prevMatchEmpty, r, s, sw, val, w, wn, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; err = $f.err; i = $f.i; index = $f.index; keylen = $f.keylen; last = $f.last; match = $f.match; n = $f.n; prevMatchEmpty = $f.prevMatchEmpty; r = $f.r; s = $f.s; sw = $f.sw; val = $f.val; w = $f.w; wn = $f.wn; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		sw = getStringWriter(w);
		_tmp = 0;
		_tmp$1 = 0;
		last = _tmp;
		wn = _tmp$1;
		prevMatchEmpty = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i <= s.length)) { break; } */ if(!(i <= s.length)) { $s = 2; continue; }
			/* */ if (!((i === s.length)) && (r.root.priority === 0)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((i === s.length)) && (r.root.priority === 0)) { */ case 3:
				index = ((x = r.mapping, x$1 = s.charCodeAt(i), ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) >> 0);
				if ((index === r.tableSize) || (x$2 = r.root.table, ((index < 0 || index >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + index])) === ptrType$2.nil) {
					i = i + (1) >> 0;
					/* continue; */ $s = 1; continue;
				}
			/* } */ case 4:
			_tuple = r.lookup($substring(s, i), prevMatchEmpty);
			val = _tuple[0];
			keylen = _tuple[1];
			match = _tuple[2];
			prevMatchEmpty = match && (keylen === 0);
			/* */ if (match) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (match) { */ case 5:
				_r = sw.WriteString($substring(s, last, i)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				wn = _tuple$1[0];
				err = _tuple$1[1];
				n = n + (wn) >> 0;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [n, err];
				}
				_r$1 = sw.WriteString(val); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$2 = _r$1;
				wn = _tuple$2[0];
				err = _tuple$2[1];
				n = n + (wn) >> 0;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [n, err];
				}
				i = i + (keylen) >> 0;
				last = i;
				/* continue; */ $s = 1; continue;
			/* } */ case 6:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!((last === s.length))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!((last === s.length))) { */ case 9:
			_r$2 = sw.WriteString($substring(s, last)); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$3 = _r$2;
			wn = _tuple$3[0];
			err = _tuple$3[1];
			n = n + (wn) >> 0;
		/* } */ case 10:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: genericReplacer.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.err = err; $f.i = i; $f.index = index; $f.keylen = keylen; $f.last = last; $f.match = match; $f.n = n; $f.prevMatchEmpty = prevMatchEmpty; $f.r = r; $f.s = s; $f.sw = sw; $f.val = val; $f.w = w; $f.wn = wn; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	genericReplacer.prototype.WriteString = function(w, s) { return this.$val.WriteString(w, s); };
	makeSingleStringReplacer = function(pattern, value) {
		var $ptr, pattern, value;
		return new singleStringReplacer.ptr(makeStringFinder(pattern), value);
	};
	singleStringReplacer.ptr.prototype.Replace = function(s) {
		var $ptr, _tmp, _tmp$1, buf, i, match, matched, r, s;
		r = this;
		buf = sliceType.nil;
		_tmp = 0;
		_tmp$1 = false;
		i = _tmp;
		matched = _tmp$1;
		while (true) {
			match = r.finder.next($substring(s, i));
			if (match === -1) {
				break;
			}
			matched = true;
			buf = $appendSlice(buf, $substring(s, i, (i + match >> 0)));
			buf = $appendSlice(buf, r.value);
			i = i + ((match + r.finder.pattern.length >> 0)) >> 0;
		}
		if (!matched) {
			return s;
		}
		buf = $appendSlice(buf, $substring(s, i));
		return $bytesToString(buf);
	};
	singleStringReplacer.prototype.Replace = function(s) { return this.$val.Replace(s); };
	singleStringReplacer.ptr.prototype.WriteString = function(w, s) {
		var $ptr, _r, _r$1, _r$2, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, err, i, match, n, r, s, sw, w, wn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; i = $f.i; match = $f.match; n = $f.n; r = $f.r; s = $f.s; sw = $f.sw; w = $f.w; wn = $f.wn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		sw = getStringWriter(w);
		_tmp = 0;
		_tmp$1 = 0;
		i = _tmp;
		wn = _tmp$1;
		/* while (true) { */ case 1:
			match = r.finder.next($substring(s, i));
			if (match === -1) {
				/* break; */ $s = 2; continue;
			}
			_r = sw.WriteString($substring(s, i, (i + match >> 0))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			wn = _tuple[0];
			err = _tuple[1];
			n = n + (wn) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [n, err];
			}
			_r$1 = sw.WriteString(r.value); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			wn = _tuple$1[0];
			err = _tuple$1[1];
			n = n + (wn) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [n, err];
			}
			i = i + ((match + r.finder.pattern.length >> 0)) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = sw.WriteString($substring(s, i)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		wn = _tuple$2[0];
		err = _tuple$2[1];
		n = n + (wn) >> 0;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: singleStringReplacer.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.i = i; $f.match = match; $f.n = n; $f.r = r; $f.s = s; $f.sw = sw; $f.w = w; $f.wn = wn; $f.$s = $s; $f.$r = $r; return $f;
	};
	singleStringReplacer.prototype.WriteString = function(w, s) { return this.$val.WriteString(w, s); };
	byteReplacer.prototype.Replace = function(s) {
		var $ptr, b, buf, i, r, s;
		r = this.$val;
		buf = sliceType.nil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			b = s.charCodeAt(i);
			if (!(((r.nilCheck, ((b < 0 || b >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[b])) === b))) {
				if (buf === sliceType.nil) {
					buf = new sliceType($stringToBytes(s));
				}
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (r.nilCheck, ((b < 0 || b >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[b])));
			}
			i = i + (1) >> 0;
		}
		if (buf === sliceType.nil) {
			return s;
		}
		return $bytesToString(buf);
	};
	$ptrType(byteReplacer).prototype.Replace = function(s) { return (new byteReplacer(this.$get())).Replace(s); };
	byteReplacer.prototype.WriteString = function(w, s) {
		var $ptr, _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, buf, bufsize, err, err$1, i, n, ncopy, r, s, w, wn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; buf = $f.buf; bufsize = $f.bufsize; err = $f.err; err$1 = $f.err$1; i = $f.i; n = $f.n; ncopy = $f.ncopy; r = $f.r; s = $f.s; w = $f.w; wn = $f.wn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this.$val;
		bufsize = 32768;
		if (s.length < bufsize) {
			bufsize = s.length;
		}
		buf = $makeSlice(sliceType, bufsize);
		/* while (true) { */ case 1:
			/* if (!(s.length > 0)) { break; } */ if(!(s.length > 0)) { $s = 2; continue; }
			ncopy = $copyString(buf, s);
			s = $substring(s, ncopy);
			_ref = $subslice(buf, 0, ncopy);
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (r.nilCheck, ((b < 0 || b >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[b])));
				_i++;
			}
			_r = w.Write($subslice(buf, 0, ncopy)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			wn = _tuple[0];
			err$1 = _tuple[1];
			n = n + (wn) >> 0;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = err$1;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: byteReplacer.prototype.WriteString }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.bufsize = bufsize; $f.err = err; $f.err$1 = err$1; $f.i = i; $f.n = n; $f.ncopy = ncopy; $f.r = r; $f.s = s; $f.w = w; $f.wn = wn; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(byteReplacer).prototype.WriteString = function(w, s) { return (new byteReplacer(this.$get())).WriteString(w, s); };
	byteStringReplacer.prototype.Replace = function(s) {
		var $ptr, anyChanges, b, b$1, bi, buf, i, i$1, n, newSize, r, s;
		r = this.$val;
		newSize = s.length;
		anyChanges = false;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			b = s.charCodeAt(i);
			if (!((r.nilCheck, ((b < 0 || b >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[b])) === sliceType.nil)) {
				anyChanges = true;
				newSize = newSize + (((r.nilCheck, ((b < 0 || b >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[b])).$length - 1 >> 0)) >> 0;
			}
			i = i + (1) >> 0;
		}
		if (!anyChanges) {
			return s;
		}
		buf = $makeSlice(sliceType, newSize);
		bi = buf;
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			b$1 = s.charCodeAt(i$1);
			if (!((r.nilCheck, ((b$1 < 0 || b$1 >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[b$1])) === sliceType.nil)) {
				n = $copySlice(bi, (r.nilCheck, ((b$1 < 0 || b$1 >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[b$1])));
				bi = $subslice(bi, n);
			} else {
				(0 >= bi.$length ? ($throwRuntimeError("index out of range"), undefined) : bi.$array[bi.$offset + 0] = b$1);
				bi = $subslice(bi, 1);
			}
			i$1 = i$1 + (1) >> 0;
		}
		return $bytesToString(buf);
	};
	$ptrType(byteStringReplacer).prototype.Replace = function(s) { return (new byteStringReplacer(this.$get())).Replace(s); };
	byteStringReplacer.prototype.WriteString = function(w, s) {
		var $ptr, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, _tuple$2, b, err, err$1, err$2, i, last, n, nw, nw$1, nw$2, r, s, sw, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; i = $f.i; last = $f.last; n = $f.n; nw = $f.nw; nw$1 = $f.nw$1; nw$2 = $f.nw$2; r = $f.r; s = $f.s; sw = $f.sw; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this.$val;
		sw = getStringWriter(w);
		last = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < s.length)) { break; } */ if(!(i < s.length)) { $s = 2; continue; }
			b = s.charCodeAt(i);
			/* */ if ((r.nilCheck, ((b < 0 || b >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[b])) === sliceType.nil) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((r.nilCheck, ((b < 0 || b >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[b])) === sliceType.nil) { */ case 3:
				i = i + (1) >> 0;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			/* */ if (!((last === i))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!((last === i))) { */ case 5:
				_r = sw.WriteString($substring(s, last, i)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				nw = _tuple[0];
				err$1 = _tuple[1];
				n = n + (nw) >> 0;
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					_tmp = n;
					_tmp$1 = err$1;
					n = _tmp;
					err = _tmp$1;
					$s = -1; return [n, err];
				}
			/* } */ case 6:
			last = i + 1 >> 0;
			_r$1 = w.Write((r.nilCheck, ((b < 0 || b >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[b]))); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			nw$1 = _tuple$1[0];
			err$2 = _tuple$1[1];
			n = n + (nw$1) >> 0;
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				_tmp$2 = n;
				_tmp$3 = err$2;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!((last === s.length))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!((last === s.length))) { */ case 9:
			nw$2 = 0;
			_r$2 = sw.WriteString($substring(s, last)); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2;
			nw$2 = _tuple$2[0];
			err = _tuple$2[1];
			n = n + (nw$2) >> 0;
		/* } */ case 10:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: byteStringReplacer.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.i = i; $f.last = last; $f.n = n; $f.nw = nw; $f.nw$1 = nw$1; $f.nw$2 = nw$2; $f.r = r; $f.s = s; $f.sw = sw; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(byteStringReplacer).prototype.WriteString = function(w, s) { return (new byteStringReplacer(this.$get())).WriteString(w, s); };
	makeStringFinder = function(pattern) {
		var $ptr, _i, _ref, f, i, i$1, i$2, i$3, last, lastPrefix, lenSuffix, pattern, x, x$1, x$2, x$3, x$4, x$5;
		f = new stringFinder.ptr(pattern, arrayType$2.zero(), $makeSlice(sliceType$2, pattern.length));
		last = pattern.length - 1 >> 0;
		_ref = f.badCharSkip;
		_i = 0;
		while (true) {
			if (!(_i < 256)) { break; }
			i = _i;
			(x = f.badCharSkip, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i] = pattern.length));
			_i++;
		}
		i$1 = 0;
		while (true) {
			if (!(i$1 < last)) { break; }
			(x$1 = f.badCharSkip, x$2 = pattern.charCodeAt(i$1), ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2] = (last - i$1 >> 0)));
			i$1 = i$1 + (1) >> 0;
		}
		lastPrefix = last;
		i$2 = last;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			if (HasPrefix(pattern, $substring(pattern, (i$2 + 1 >> 0)))) {
				lastPrefix = i$2 + 1 >> 0;
			}
			(x$3 = f.goodSuffixSkip, ((i$2 < 0 || i$2 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$2] = ((lastPrefix + last >> 0) - i$2 >> 0)));
			i$2 = i$2 - (1) >> 0;
		}
		i$3 = 0;
		while (true) {
			if (!(i$3 < last)) { break; }
			lenSuffix = longestCommonSuffix(pattern, $substring(pattern, 1, (i$3 + 1 >> 0)));
			if (!((pattern.charCodeAt((i$3 - lenSuffix >> 0)) === pattern.charCodeAt((last - lenSuffix >> 0))))) {
				(x$4 = f.goodSuffixSkip, x$5 = last - lenSuffix >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5] = ((lenSuffix + last >> 0) - i$3 >> 0)));
			}
			i$3 = i$3 + (1) >> 0;
		}
		return f;
	};
	longestCommonSuffix = function(a, b) {
		var $ptr, a, b, i;
		i = 0;
		while (true) {
			if (!(i < a.length && i < b.length)) { break; }
			if (!((a.charCodeAt(((a.length - 1 >> 0) - i >> 0)) === b.charCodeAt(((b.length - 1 >> 0) - i >> 0))))) {
				break;
			}
			i = i + (1) >> 0;
		}
		return i;
	};
	stringFinder.ptr.prototype.next = function(text) {
		var $ptr, f, i, j, text, x, x$1, x$2;
		f = this;
		i = f.pattern.length - 1 >> 0;
		while (true) {
			if (!(i < text.length)) { break; }
			j = f.pattern.length - 1 >> 0;
			while (true) {
				if (!(j >= 0 && (text.charCodeAt(i) === f.pattern.charCodeAt(j)))) { break; }
				i = i - (1) >> 0;
				j = j - (1) >> 0;
			}
			if (j < 0) {
				return i + 1 >> 0;
			}
			i = i + (max((x = f.badCharSkip, x$1 = text.charCodeAt(i), ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])), (x$2 = f.goodSuffixSkip, ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j])))) >> 0;
		}
		return -1;
	};
	stringFinder.prototype.next = function(text) { return this.$val.next(text); };
	max = function(a, b) {
		var $ptr, a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	explode = function(s, n) {
		var $ptr, _tuple, a, ch, i, l, n, s, size, x;
		l = utf8.RuneCountInString(s);
		if (n < 0 || n > l) {
			n = l;
		}
		a = $makeSlice(sliceType$3, n);
		i = 0;
		while (true) {
			if (!(i < (n - 1 >> 0))) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			ch = _tuple[0];
			size = _tuple[1];
			((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = $substring(s, 0, size));
			s = $substring(s, size);
			if (ch === 65533) {
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = "\xEF\xBF\xBD");
			}
			i = i + (1) >> 0;
		}
		if (n > 0) {
			(x = n - 1 >> 0, ((x < 0 || x >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x] = s));
		}
		return a;
	};
	Contains = function(s, substr) {
		var $ptr, s, substr;
		return Index(s, substr) >= 0;
	};
	$pkg.Contains = Contains;
	ContainsRune = function(s, r) {
		var $ptr, r, s;
		return IndexRune(s, r) >= 0;
	};
	$pkg.ContainsRune = ContainsRune;
	IndexRune = function(s, r) {
		var $ptr, _i, _ref, _rune, i, r, r$1, s;
		if (0 <= r && r < 128) {
			return IndexByte(s, (r << 24 >>> 24));
		} else if ((r === 65533)) {
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				r$1 = _rune[0];
				if (r$1 === 65533) {
					return i;
				}
				_i += _rune[1];
			}
			return -1;
		} else if (!utf8.ValidRune(r)) {
			return -1;
		} else {
			return Index(s, $encodeRune(r));
		}
	};
	$pkg.IndexRune = IndexRune;
	IndexAny = function(s, chars) {
		var $ptr, _i, _i$1, _ref, _ref$1, _rune, _rune$1, _tuple, as, c, chars, i, i$1, isASCII, m, s;
		if (chars.length > 0) {
			if (s.length > 8) {
				_tuple = makeASCIISet(chars);
				as = $clone(_tuple[0], asciiSet);
				isASCII = _tuple[1];
				if (isASCII) {
					i = 0;
					while (true) {
						if (!(i < s.length)) { break; }
						if (new ptrType$5(as).contains(s.charCodeAt(i))) {
							return i;
						}
						i = i + (1) >> 0;
					}
					return -1;
				}
			}
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i$1 = _i;
				c = _rune[0];
				_ref$1 = chars;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.length)) { break; }
					_rune$1 = $decodeRune(_ref$1, _i$1);
					m = _rune$1[0];
					if (c === m) {
						return i$1;
					}
					_i$1 += _rune$1[1];
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	$pkg.IndexAny = IndexAny;
	genSplit = function(s, sep, sepSave, n) {
		var $ptr, a, c, i, n, na, s, sep, sepSave, start;
		if (n === 0) {
			return sliceType$3.nil;
		}
		if (sep === "") {
			return explode(s, n);
		}
		if (n < 0) {
			n = Count(s, sep) + 1 >> 0;
		}
		c = sep.charCodeAt(0);
		start = 0;
		a = $makeSlice(sliceType$3, n);
		na = 0;
		i = 0;
		while (true) {
			if (!((i + sep.length >> 0) <= s.length && (na + 1 >> 0) < n)) { break; }
			if ((s.charCodeAt(i) === c) && ((sep.length === 1) || $substring(s, i, (i + sep.length >> 0)) === sep)) {
				((na < 0 || na >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + na] = $substring(s, start, (i + sepSave >> 0)));
				na = na + (1) >> 0;
				start = i + sep.length >> 0;
				i = i + ((sep.length - 1 >> 0)) >> 0;
			}
			i = i + (1) >> 0;
		}
		((na < 0 || na >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + na] = $substring(s, start));
		return $subslice(a, 0, (na + 1 >> 0));
	};
	Split = function(s, sep) {
		var $ptr, s, sep;
		return genSplit(s, sep, 0, -1);
	};
	$pkg.Split = Split;
	Join = function(a, sep) {
		var $ptr, _1, _i, _ref, a, b, bp, i, n, s, sep;
		_1 = a.$length;
		if (_1 === (0)) {
			return "";
		} else if (_1 === (1)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]);
		} else if (_1 === (2)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) + sep + (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]);
		} else if (_1 === (3)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) + sep + (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]) + sep + (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]);
		}
		n = $imul(sep.length, ((a.$length - 1 >> 0)));
		i = 0;
		while (true) {
			if (!(i < a.$length)) { break; }
			n = n + (((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]).length) >> 0;
			i = i + (1) >> 0;
		}
		b = $makeSlice(sliceType, n);
		bp = $copyString(b, (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]));
		_ref = $subslice(a, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			bp = bp + ($copyString($subslice(b, bp), sep)) >> 0;
			bp = bp + ($copyString($subslice(b, bp), s)) >> 0;
			_i++;
		}
		return $bytesToString(b);
	};
	$pkg.Join = Join;
	HasPrefix = function(s, prefix) {
		var $ptr, prefix, s;
		return s.length >= prefix.length && $substring(s, 0, prefix.length) === prefix;
	};
	$pkg.HasPrefix = HasPrefix;
	HasSuffix = function(s, suffix) {
		var $ptr, s, suffix;
		return s.length >= suffix.length && $substring(s, (s.length - suffix.length >> 0)) === suffix;
	};
	$pkg.HasSuffix = HasSuffix;
	Map = function(mapping, s) {
		var $ptr, _i, _r, _ref, _rune, b, c, i, mapping, maxbytes, nb, nbytes, r, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _rune = $f._rune; b = $f.b; c = $f.c; i = $f.i; mapping = $f.mapping; maxbytes = $f.maxbytes; nb = $f.nb; nbytes = $f.nbytes; r = $f.r; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		maxbytes = s.length;
		nbytes = 0;
		b = sliceType.nil;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			_r = mapping(c); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (b === sliceType.nil) {
				if (r === c) {
					_i += _rune[1];
					/* continue; */ $s = 1; continue;
				}
				b = $makeSlice(sliceType, maxbytes);
				nbytes = $copyString(b, $substring(s, 0, i));
			}
			if (r >= 0) {
				wid = 1;
				if (r >= 128) {
					wid = utf8.RuneLen(r);
				}
				if ((nbytes + wid >> 0) > maxbytes) {
					maxbytes = ($imul(maxbytes, 2)) + 4 >> 0;
					nb = $makeSlice(sliceType, maxbytes);
					$copySlice(nb, $subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes, maxbytes), r)) >> 0;
			}
			_i += _rune[1];
		/* } */ $s = 1; continue; case 2:
		if (b === sliceType.nil) {
			$s = -1; return s;
		}
		$s = -1; return $bytesToString($subslice(b, 0, nbytes));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._rune = _rune; $f.b = b; $f.c = c; $f.i = i; $f.mapping = mapping; $f.maxbytes = maxbytes; $f.nb = nb; $f.nbytes = nbytes; $f.r = r; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Map = Map;
	ToLower = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Map(unicode.ToLower, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ToLower }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ToLower = ToLower;
	TrimLeftFunc = function(s, f) {
		var $ptr, _r, f, i, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; i = $f.i; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = indexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i === -1) {
			$s = -1; return "";
		}
		$s = -1; return $substring(s, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimLeftFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.i = i; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimLeftFunc = TrimLeftFunc;
	TrimRightFunc = function(s, f) {
		var $ptr, _r, _tuple, f, i, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = lastIndexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i >= 0 && s.charCodeAt(i) >= 128) {
			_tuple = utf8.DecodeRuneInString($substring(s, i));
			wid = _tuple[1];
			i = i + (wid) >> 0;
		} else {
			i = i + (1) >> 0;
		}
		$s = -1; return $substring(s, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimRightFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRightFunc = TrimRightFunc;
	TrimFunc = function(s, f) {
		var $ptr, _r, _r$1, f, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimLeftFunc(s, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = TrimRightFunc(_r, f); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimFunc = TrimFunc;
	IndexFunc = function(s, f) {
		var $ptr, _r, f, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = indexFunc(s, f, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IndexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.IndexFunc = IndexFunc;
	indexFunc = function(s, f, truth) {
		var $ptr, _r, _tuple, f, r, s, start, truth, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; r = $f.r; s = $f.s; start = $f.start; truth = $f.truth; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = 0;
		/* while (true) { */ case 1:
			/* if (!(start < s.length)) { break; } */ if(!(start < s.length)) { $s = 2; continue; }
			wid = 1;
			r = (s.charCodeAt(start) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString($substring(s, start));
				r = _tuple[0];
				wid = _tuple[1];
			}
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				$s = -1; return start;
			/* } */ case 4:
			start = start + (wid) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: indexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.r = r; $f.s = s; $f.start = start; $f.truth = truth; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	lastIndexFunc = function(s, f, truth) {
		var $ptr, _r, _tuple, f, i, r, s, size, truth, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; r = $f.r; s = $f.s; size = $f.size; truth = $f.truth; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = s.length;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_tuple = utf8.DecodeLastRuneInString($substring(s, 0, i));
			r = _tuple[0];
			size = _tuple[1];
			i = i - (size) >> 0;
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				$s = -1; return i;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lastIndexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.r = r; $f.s = s; $f.size = size; $f.truth = truth; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeASCIISet = function(chars) {
		var $ptr, _index, _tmp, _tmp$1, _tmp$2, _tmp$3, as, c, chars, i, ok, y;
		as = arrayType$3.zero();
		ok = false;
		i = 0;
		while (true) {
			if (!(i < chars.length)) { break; }
			c = chars.charCodeAt(i);
			if (c >= 128) {
				_tmp = $clone(as, asciiSet);
				_tmp$1 = false;
				asciiSet.copy(as, _tmp);
				ok = _tmp$1;
				return [as, ok];
			}
			_index = c >>> 5 << 24 >>> 24;
			((_index < 0 || _index >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[_index] = ((((_index < 0 || _index >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[_index]) | (((y = (((c & 31) >>> 0) >>> 0), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0));
			i = i + (1) >> 0;
		}
		_tmp$2 = $clone(as, asciiSet);
		_tmp$3 = true;
		asciiSet.copy(as, _tmp$2);
		ok = _tmp$3;
		return [as, ok];
	};
	asciiSet.prototype.contains = function(c) {
		var $ptr, as, c, x, y;
		as = this.$val;
		return !((((((x = c >>> 5 << 24 >>> 24, (as.nilCheck, ((x < 0 || x >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[x]))) & (((y = (((c & 31) >>> 0) >>> 0), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0)) === 0));
	};
	$ptrType(asciiSet).prototype.contains = function(c) { return (new asciiSet(this.$get())).contains(c); };
	makeCutsetFunc = function(cutset) {
		var $ptr, _tuple, as, cutset, isASCII;
		if ((cutset.length === 1) && cutset.charCodeAt(0) < 128) {
			return (function(r) {
				var $ptr, r;
				return r === (cutset.charCodeAt(0) >> 0);
			});
		}
		_tuple = makeASCIISet(cutset);
		as = $clone(_tuple[0], asciiSet);
		isASCII = _tuple[1];
		if (isASCII) {
			return (function(r) {
				var $ptr, r;
				return r < 128 && new ptrType$5(as).contains((r << 24 >>> 24));
			});
		}
		return (function(r) {
			var $ptr, r;
			return IndexRune(cutset, r) >= 0;
		});
	};
	TrimLeft = function(s, cutset) {
		var $ptr, _r, cutset, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; cutset = $f.cutset; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (s === "" || cutset === "") {
			$s = -1; return s;
		}
		_r = TrimLeftFunc(s, makeCutsetFunc(cutset)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimLeft }; } $f.$ptr = $ptr; $f._r = _r; $f.cutset = cutset; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimLeft = TrimLeft;
	TrimRight = function(s, cutset) {
		var $ptr, _r, cutset, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; cutset = $f.cutset; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (s === "" || cutset === "") {
			$s = -1; return s;
		}
		_r = TrimRightFunc(s, makeCutsetFunc(cutset)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimRight }; } $f.$ptr = $ptr; $f._r = _r; $f.cutset = cutset; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRight = TrimRight;
	TrimSpace = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimFunc(s, unicode.IsSpace); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimSpace }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimSpace = TrimSpace;
	TrimPrefix = function(s, prefix) {
		var $ptr, prefix, s;
		if (HasPrefix(s, prefix)) {
			return $substring(s, prefix.length);
		}
		return s;
	};
	$pkg.TrimPrefix = TrimPrefix;
	Replace = function(s, old, new$1, n) {
		var $ptr, _tuple, i, j, m, n, new$1, old, s, start, t, w, wid;
		if (old === new$1 || (n === 0)) {
			return s;
		}
		m = Count(s, old);
		if (m === 0) {
			return s;
		} else if (n < 0 || m < n) {
			n = m;
		}
		t = $makeSlice(sliceType, (s.length + ($imul(n, ((new$1.length - old.length >> 0)))) >> 0));
		w = 0;
		start = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			j = start;
			if (old.length === 0) {
				if (i > 0) {
					_tuple = utf8.DecodeRuneInString($substring(s, start));
					wid = _tuple[1];
					j = j + (wid) >> 0;
				}
			} else {
				j = j + (Index($substring(s, start), old)) >> 0;
			}
			w = w + ($copyString($subslice(t, w), $substring(s, start, j))) >> 0;
			w = w + ($copyString($subslice(t, w), new$1)) >> 0;
			start = j + old.length >> 0;
			i = i + (1) >> 0;
		}
		w = w + ($copyString($subslice(t, w), $substring(s, start))) >> 0;
		return $bytesToString($subslice(t, 0, w));
	};
	$pkg.Replace = Replace;
	ptrType$6.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType, $Int64], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([$String], [], false)}];
	ptrType$7.methods = [{prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}];
	ptrType$2.methods = [{prop: "add", name: "add", pkg: "strings", typ: $funcType([$String, $String, $Int, ptrType$8], [], false)}];
	ptrType$8.methods = [{prop: "lookup", name: "lookup", pkg: "strings", typ: $funcType([$String, $Bool], [$String, $Int, $Bool], false)}, {prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}];
	ptrType$3.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}];
	stringWriter.methods = [{prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}];
	ptrType$9.methods = [{prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}];
	ptrType.methods = [{prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}];
	ptrType$1.methods = [{prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}];
	ptrType$4.methods = [{prop: "next", name: "next", pkg: "strings", typ: $funcType([$String], [$Int], false)}];
	ptrType$5.methods = [{prop: "contains", name: "contains", pkg: "strings", typ: $funcType([$Uint8], [$Bool], false)}];
	Reader.init("strings", [{prop: "s", name: "s", exported: false, typ: $String, tag: ""}, {prop: "i", name: "i", exported: false, typ: $Int64, tag: ""}, {prop: "prevRune", name: "prevRune", exported: false, typ: $Int, tag: ""}]);
	Replacer.init("strings", [{prop: "r", name: "r", exported: false, typ: replacer, tag: ""}]);
	replacer.init([{prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}]);
	trieNode.init("strings", [{prop: "value", name: "value", exported: false, typ: $String, tag: ""}, {prop: "priority", name: "priority", exported: false, typ: $Int, tag: ""}, {prop: "prefix", name: "prefix", exported: false, typ: $String, tag: ""}, {prop: "next", name: "next", exported: false, typ: ptrType$2, tag: ""}, {prop: "table", name: "table", exported: false, typ: sliceType$1, tag: ""}]);
	genericReplacer.init("strings", [{prop: "root", name: "root", exported: false, typ: trieNode, tag: ""}, {prop: "tableSize", name: "tableSize", exported: false, typ: $Int, tag: ""}, {prop: "mapping", name: "mapping", exported: false, typ: arrayType, tag: ""}]);
	appendSliceWriter.init($Uint8);
	stringWriterIface.init([{prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}]);
	stringWriter.init("strings", [{prop: "w", name: "w", exported: false, typ: io.Writer, tag: ""}]);
	singleStringReplacer.init("strings", [{prop: "finder", name: "finder", exported: false, typ: ptrType$4, tag: ""}, {prop: "value", name: "value", exported: false, typ: $String, tag: ""}]);
	byteReplacer.init($Uint8, 256);
	byteStringReplacer.init(sliceType, 256);
	stringFinder.init("strings", [{prop: "pattern", name: "pattern", exported: false, typ: $String, tag: ""}, {prop: "badCharSkip", name: "badCharSkip", exported: false, typ: arrayType$2, tag: ""}, {prop: "goodSuffixSkip", name: "goodSuffixSkip", exported: false, typ: sliceType$2, tag: ""}]);
	asciiSet.init($Uint32, 8);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf16"] = (function() {
	var $pkg = {}, $init, IsSurrogate, DecodeRune;
	IsSurrogate = function(r) {
		var $ptr, r;
		return 55296 <= r && r < 57344;
	};
	$pkg.IsSurrogate = IsSurrogate;
	DecodeRune = function(r1, r2) {
		var $ptr, r1, r2;
		if (55296 <= r1 && r1 < 56320 && 56320 <= r2 && r2 < 57344) {
			return ((((r1 - 55296 >> 0)) << 10 >> 0) | ((r2 - 56320 >> 0))) + 65536 >> 0;
		}
		return 65533;
	};
	$pkg.DecodeRune = DecodeRune;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/json"] = (function() {
	var $pkg = {}, $init, bytes, encoding, base64, errors, fmt, nosync, io, math, reflect, runtime, sort, strconv, strings, atomic, unicode, utf16, utf8, Unmarshaler, UnmarshalTypeError, InvalidUnmarshalError, Number, decodeState, unquotedValue, Marshaler, field, byIndex, SyntaxError, scanner, Decoder, Token, Delim, tagOptions, sliceType, structType$1, sliceType$1, ptrType, ptrType$1, ptrType$2, sliceType$2, structType$2, ptrType$4, ptrType$5, mapType$1, ptrType$6, sliceType$3, mapType$2, ptrType$9, ptrType$10, ptrType$11, ptrType$13, ptrType$14, funcType, ptrType$26, funcType$1, ptrType$27, errPhase, nullLiteral, textUnmarshalerType, numberType, marshalerType, textMarshalerType, fieldCache, _r, _r$1, _r$2, isValidNumber, getu4, unquote, unquoteBytes, isValidTag, fillField, typeFields, dominantField, cachedTypeFields, foldFunc, equalFoldRight, asciiEqualFold, simpleLetterEqualFold, nextValue, isSpace, stateBeginValueOrEmpty, stateBeginValue, stateBeginStringOrEmpty, stateBeginString, stateEndValue, stateEndTop, stateInString, stateInStringEsc, stateInStringEscU, stateInStringEscU1, stateInStringEscU12, stateInStringEscU123, stateNeg, state1, state0, stateDot, stateDot0, stateE, stateESign, stateE0, stateT, stateTr, stateTru, stateF, stateFa, stateFal, stateFals, stateN, stateNu, stateNul, stateError, quoteChar, stateRedo, NewDecoder, nonSpace, clearOffset, parseTag;
	bytes = $packages["bytes"];
	encoding = $packages["encoding"];
	base64 = $packages["encoding/base64"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	math = $packages["math"];
	reflect = $packages["reflect"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	atomic = $packages["sync/atomic"];
	unicode = $packages["unicode"];
	utf16 = $packages["unicode/utf16"];
	utf8 = $packages["unicode/utf8"];
	Unmarshaler = $pkg.Unmarshaler = $newType(8, $kindInterface, "json.Unmarshaler", true, "encoding/json", true, null);
	UnmarshalTypeError = $pkg.UnmarshalTypeError = $newType(0, $kindStruct, "json.UnmarshalTypeError", true, "encoding/json", true, function(Value_, Type_, Offset_, Struct_, Field_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Value = "";
			this.Type = $ifaceNil;
			this.Offset = new $Int64(0, 0);
			this.Struct = "";
			this.Field = "";
			return;
		}
		this.Value = Value_;
		this.Type = Type_;
		this.Offset = Offset_;
		this.Struct = Struct_;
		this.Field = Field_;
	});
	InvalidUnmarshalError = $pkg.InvalidUnmarshalError = $newType(0, $kindStruct, "json.InvalidUnmarshalError", true, "encoding/json", true, function(Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = $ifaceNil;
			return;
		}
		this.Type = Type_;
	});
	Number = $pkg.Number = $newType(8, $kindString, "json.Number", true, "encoding/json", true, null);
	decodeState = $pkg.decodeState = $newType(0, $kindStruct, "json.decodeState", true, "encoding/json", false, function(data_, off_, scan_, nextscan_, errorContext_, savedError_, useNumber_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.data = sliceType$1.nil;
			this.off = 0;
			this.scan = new scanner.ptr($throwNilPointerError, false, sliceType$2.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0));
			this.nextscan = new scanner.ptr($throwNilPointerError, false, sliceType$2.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0));
			this.errorContext = new structType$2.ptr("", "");
			this.savedError = $ifaceNil;
			this.useNumber = false;
			return;
		}
		this.data = data_;
		this.off = off_;
		this.scan = scan_;
		this.nextscan = nextscan_;
		this.errorContext = errorContext_;
		this.savedError = savedError_;
		this.useNumber = useNumber_;
	});
	unquotedValue = $pkg.unquotedValue = $newType(0, $kindStruct, "json.unquotedValue", true, "encoding/json", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	Marshaler = $pkg.Marshaler = $newType(8, $kindInterface, "json.Marshaler", true, "encoding/json", true, null);
	field = $pkg.field = $newType(0, $kindStruct, "json.field", true, "encoding/json", false, function(name_, nameBytes_, equalFold_, tag_, index_, typ_, omitEmpty_, quoted_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.nameBytes = sliceType$1.nil;
			this.equalFold = $throwNilPointerError;
			this.tag = false;
			this.index = sliceType$2.nil;
			this.typ = $ifaceNil;
			this.omitEmpty = false;
			this.quoted = false;
			return;
		}
		this.name = name_;
		this.nameBytes = nameBytes_;
		this.equalFold = equalFold_;
		this.tag = tag_;
		this.index = index_;
		this.typ = typ_;
		this.omitEmpty = omitEmpty_;
		this.quoted = quoted_;
	});
	byIndex = $pkg.byIndex = $newType(12, $kindSlice, "json.byIndex", true, "encoding/json", false, null);
	SyntaxError = $pkg.SyntaxError = $newType(0, $kindStruct, "json.SyntaxError", true, "encoding/json", true, function(msg_, Offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.msg = "";
			this.Offset = new $Int64(0, 0);
			return;
		}
		this.msg = msg_;
		this.Offset = Offset_;
	});
	scanner = $pkg.scanner = $newType(0, $kindStruct, "json.scanner", true, "encoding/json", false, function(step_, endTop_, parseState_, err_, redo_, redoCode_, redoState_, bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.step = $throwNilPointerError;
			this.endTop = false;
			this.parseState = sliceType$2.nil;
			this.err = $ifaceNil;
			this.redo = false;
			this.redoCode = 0;
			this.redoState = $throwNilPointerError;
			this.bytes = new $Int64(0, 0);
			return;
		}
		this.step = step_;
		this.endTop = endTop_;
		this.parseState = parseState_;
		this.err = err_;
		this.redo = redo_;
		this.redoCode = redoCode_;
		this.redoState = redoState_;
		this.bytes = bytes_;
	});
	Decoder = $pkg.Decoder = $newType(0, $kindStruct, "json.Decoder", true, "encoding/json", true, function(r_, buf_, d_, scanp_, scan_, err_, tokenState_, tokenStack_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.buf = sliceType$1.nil;
			this.d = new decodeState.ptr(sliceType$1.nil, 0, new scanner.ptr($throwNilPointerError, false, sliceType$2.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0)), new scanner.ptr($throwNilPointerError, false, sliceType$2.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0)), new structType$2.ptr("", ""), $ifaceNil, false);
			this.scanp = 0;
			this.scan = new scanner.ptr($throwNilPointerError, false, sliceType$2.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0));
			this.err = $ifaceNil;
			this.tokenState = 0;
			this.tokenStack = sliceType$2.nil;
			return;
		}
		this.r = r_;
		this.buf = buf_;
		this.d = d_;
		this.scanp = scanp_;
		this.scan = scan_;
		this.err = err_;
		this.tokenState = tokenState_;
		this.tokenStack = tokenStack_;
	});
	Token = $pkg.Token = $newType(8, $kindInterface, "json.Token", true, "encoding/json", true, null);
	Delim = $pkg.Delim = $newType(4, $kindInt32, "json.Delim", true, "encoding/json", true, null);
	tagOptions = $pkg.tagOptions = $newType(8, $kindString, "json.tagOptions", true, "encoding/json", false, null);
	sliceType = $sliceType($emptyInterface);
	structType$1 = $structType("encoding/json", [{prop: "value", name: "value", exported: false, typ: atomic.Value, tag: ""}, {prop: "mu", name: "mu", exported: false, typ: nosync.Mutex, tag: ""}]);
	sliceType$1 = $sliceType($Uint8);
	ptrType = $ptrType(encoding.TextUnmarshaler);
	ptrType$1 = $ptrType(Marshaler);
	ptrType$2 = $ptrType(encoding.TextMarshaler);
	sliceType$2 = $sliceType($Int);
	structType$2 = $structType("", [{prop: "Struct", name: "Struct", exported: true, typ: $String, tag: ""}, {prop: "Field", name: "Field", exported: true, typ: $String, tag: ""}]);
	ptrType$4 = $ptrType(UnmarshalTypeError);
	ptrType$5 = $ptrType(reflect.rtype);
	mapType$1 = $mapType($String, $emptyInterface);
	ptrType$6 = $ptrType(field);
	sliceType$3 = $sliceType(field);
	mapType$2 = $mapType(reflect.Type, sliceType$3);
	ptrType$9 = $ptrType($String);
	ptrType$10 = $ptrType($emptyInterface);
	ptrType$11 = $ptrType(SyntaxError);
	ptrType$13 = $ptrType(InvalidUnmarshalError);
	ptrType$14 = $ptrType(decodeState);
	funcType = $funcType([sliceType$1, sliceType$1], [$Bool], false);
	ptrType$26 = $ptrType(scanner);
	funcType$1 = $funcType([ptrType$26, $Uint8], [$Int], false);
	ptrType$27 = $ptrType(Decoder);
	UnmarshalTypeError.ptr.prototype.Error = function() {
		var $ptr, _r$3, _r$4, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		/* */ if (!(e.Struct === "") || !(e.Field === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(e.Struct === "") || !(e.Field === "")) { */ case 1:
			_r$3 = e.Type.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return "json: cannot unmarshal " + e.Value + " into Go struct field " + e.Struct + "." + e.Field + " of type " + _r$3;
		/* } */ case 2:
		_r$4 = e.Type.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return "json: cannot unmarshal " + e.Value + " into Go value of type " + _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: UnmarshalTypeError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	UnmarshalTypeError.prototype.Error = function() { return this.$val.Error(); };
	InvalidUnmarshalError.ptr.prototype.Error = function() {
		var $ptr, _r$3, _r$4, _r$5, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		if ($interfaceIsEqual(e.Type, $ifaceNil)) {
			$s = -1; return "json: Unmarshal(nil)";
		}
		_r$3 = e.Type.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!((_r$3 === 22))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r$3 === 22))) { */ case 1:
			_r$4 = e.Type.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return "json: Unmarshal(non-pointer " + _r$4 + ")";
		/* } */ case 2:
		_r$5 = e.Type.String(); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return "json: Unmarshal(nil " + _r$5 + ")";
		/* */ } return; } if ($f === undefined) { $f = { $blk: InvalidUnmarshalError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	InvalidUnmarshalError.prototype.Error = function() { return this.$val.Error(); };
	decodeState.ptr.prototype.unmarshal = function(v) {
		var $ptr, _r$3, d, err, rv, v, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; d = $f.d; err = $f.err; rv = $f.rv; v = $f.v; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		err[0] = $ifaceNil;
		d = this;
		$deferred.push([(function(err) { return function() {
			var $ptr, _tuple, ok, r;
			r = $recover();
			if (!($interfaceIsEqual(r, $ifaceNil))) {
				_tuple = $assertType(r, runtime.Error, true);
				ok = _tuple[1];
				if (ok) {
					$panic(r);
				}
				err[0] = $assertType(r, $error);
			}
		}; })(err), []]);
		_r$3 = reflect.ValueOf(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		rv = _r$3;
		if (!(($clone(rv, reflect.Value).Kind() === 22)) || $clone(rv, reflect.Value).IsNil()) {
			err[0] = new InvalidUnmarshalError.ptr(reflect.TypeOf(v));
			$s = -1; return err[0];
		}
		d.scan.reset();
		$r = d.value($clone(rv, reflect.Value)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		err[0] = d.savedError;
		$s = -1; return err[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.unmarshal }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.d = d; $f.err = err; $f.rv = rv; $f.v = v; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	decodeState.prototype.unmarshal = function(v) { return this.$val.unmarshal(v); };
	Number.prototype.String = function() {
		var $ptr, n;
		n = this.$val;
		return n;
	};
	$ptrType(Number).prototype.String = function() { return new Number(this.$get()).String(); };
	Number.prototype.Float64 = function() {
		var $ptr, n;
		n = this.$val;
		return strconv.ParseFloat(n, 64);
	};
	$ptrType(Number).prototype.Float64 = function() { return new Number(this.$get()).Float64(); };
	Number.prototype.Int64 = function() {
		var $ptr, n;
		n = this.$val;
		return strconv.ParseInt(n, 10, 64);
	};
	$ptrType(Number).prototype.Int64 = function() { return new Number(this.$get()).Int64(); };
	isValidNumber = function(s) {
		var $ptr, s;
		if (s === "") {
			return false;
		}
		if (s.charCodeAt(0) === 45) {
			s = $substring(s, 1);
			if (s === "") {
				return false;
			}
		}
		if ((s.charCodeAt(0) === 48)) {
			s = $substring(s, 1);
		} else if (49 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57) {
			s = $substring(s, 1);
			while (true) {
				if (!(s.length > 0 && 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57)) { break; }
				s = $substring(s, 1);
			}
		} else {
			return false;
		}
		if (s.length >= 2 && (s.charCodeAt(0) === 46) && 48 <= s.charCodeAt(1) && s.charCodeAt(1) <= 57) {
			s = $substring(s, 2);
			while (true) {
				if (!(s.length > 0 && 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57)) { break; }
				s = $substring(s, 1);
			}
		}
		if (s.length >= 2 && ((s.charCodeAt(0) === 101) || (s.charCodeAt(0) === 69))) {
			s = $substring(s, 1);
			if ((s.charCodeAt(0) === 43) || (s.charCodeAt(0) === 45)) {
				s = $substring(s, 1);
				if (s === "") {
					return false;
				}
			}
			while (true) {
				if (!(s.length > 0 && 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57)) { break; }
				s = $substring(s, 1);
			}
		}
		return s === "";
	};
	decodeState.ptr.prototype.init = function(data) {
		var $ptr, d, data;
		d = this;
		d.data = data;
		d.off = 0;
		d.savedError = $ifaceNil;
		d.errorContext.Struct = "";
		d.errorContext.Field = "";
		return d;
	};
	decodeState.prototype.init = function(data) { return this.$val.init(data); };
	decodeState.ptr.prototype.error = function(err) {
		var $ptr, d, err;
		d = this;
		$panic(d.addErrorContext(err));
	};
	decodeState.prototype.error = function(err) { return this.$val.error(err); };
	decodeState.ptr.prototype.saveError = function(err) {
		var $ptr, d, err;
		d = this;
		if ($interfaceIsEqual(d.savedError, $ifaceNil)) {
			d.savedError = d.addErrorContext(err);
		}
	};
	decodeState.prototype.saveError = function(err) { return this.$val.saveError(err); };
	decodeState.ptr.prototype.addErrorContext = function(err) {
		var $ptr, _ref, d, err, err$1;
		d = this;
		if (!(d.errorContext.Struct === "") || !(d.errorContext.Field === "")) {
			_ref = err;
			if ($assertType(_ref, ptrType$4, true)[1]) {
				err$1 = _ref.$val;
				err$1.Struct = d.errorContext.Struct;
				err$1.Field = d.errorContext.Field;
				return err$1;
			}
		}
		return err;
	};
	decodeState.prototype.addErrorContext = function(err) { return this.$val.addErrorContext(err); };
	decodeState.ptr.prototype.next = function() {
		var $ptr, _r$3, _r$4, _r$5, _tuple, c, d, err, item, rest, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; c = $f.c; d = $f.d; err = $f.err; item = $f.item; rest = $f.rest; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		c = (x = d.data, x$1 = d.off, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		_r$3 = nextValue($subslice(d.data, d.off), d.nextscan); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		item = _tuple[0];
		rest = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			d.error(err);
		}
		d.off = d.data.$length - rest.$length >> 0;
		/* */ if (c === 123) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (c === 123) { */ case 2:
			_r$4 = d.scan.step(d.scan, 125); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			$s = 4; continue;
		/* } else { */ case 3:
			_r$5 = d.scan.step(d.scan, 93); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 4:
		$s = -1; return item;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.next }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.c = c; $f.d = d; $f.err = err; $f.item = item; $f.rest = rest; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.next = function() { return this.$val.next(); };
	decodeState.ptr.prototype.scanWhile = function(op) {
		var $ptr, _r$3, _r$4, c, d, newOp, op, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; c = $f.c; d = $f.d; newOp = $f.newOp; op = $f.op; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		newOp = 0;
		/* while (true) { */ case 1:
			/* */ if (d.off >= d.data.$length) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (d.off >= d.data.$length) { */ case 3:
				_r$3 = d.scan.eof(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				newOp = _r$3;
				d.off = d.data.$length + 1 >> 0;
				$s = 5; continue;
			/* } else { */ case 4:
				c = (x = d.data, x$1 = d.off, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
				d.off = d.off + (1) >> 0;
				_r$4 = d.scan.step(d.scan, c); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				newOp = _r$4;
			/* } */ case 5:
			if (!((newOp === op))) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return newOp;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.scanWhile }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.c = c; $f.d = d; $f.newOp = newOp; $f.op = op; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.scanWhile = function(op) { return this.$val.scanWhile(op); };
	decodeState.ptr.prototype.value = function(v) {
		var $ptr, _1, _r$10, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, d, err, n, op, rest, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$10 = $f._r$10; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; d = $f.d; err = $f.err; n = $f.n; op = $f.op; rest = $f.rest; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* */ if (!$clone(v, reflect.Value).IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!$clone(v, reflect.Value).IsValid()) { */ case 1:
			_r$3 = nextValue($subslice(d.data, d.off), d.nextscan); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			rest = _tuple[1];
			err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.error(err);
			}
			d.off = d.data.$length - rest.$length >> 0;
			if (d.scan.redo) {
				d.scan.redo = false;
				d.scan.step = stateBeginValue;
			}
			_r$4 = d.scan.step(d.scan, 34); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			_r$5 = d.scan.step(d.scan, 34); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			n = d.scan.parseState.$length;
			/* */ if (n > 0 && ((x = d.scan.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) === 0)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (n > 0 && ((x = d.scan.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) === 0)) { */ case 6:
				_r$6 = d.scan.step(d.scan, 58); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				_r$7 = d.scan.step(d.scan, 34); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
				_r$8 = d.scan.step(d.scan, 34); /* */ $s = 10; case 10: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8;
				_r$9 = d.scan.step(d.scan, 125); /* */ $s = 11; case 11: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$9;
			/* } */ case 7:
			$s = -1; return;
		/* } */ case 2:
			_r$10 = d.scanWhile(9); /* */ $s = 13; case 13: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			op = _r$10;
			_1 = op;
			/* */ if (_1 === (6)) { $s = 14; continue; }
			/* */ if (_1 === (2)) { $s = 15; continue; }
			/* */ if (_1 === (1)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (_1 === (6)) { */ case 14:
				$r = d.array($clone(v, reflect.Value)); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 18; continue;
			/* } else if (_1 === (2)) { */ case 15:
				$r = d.object($clone(v, reflect.Value)); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 18; continue;
			/* } else if (_1 === (1)) { */ case 16:
				$r = d.literal($clone(v, reflect.Value)); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 18; continue;
			/* } else { */ case 17:
				d.error(errPhase);
			/* } */ case 18:
		case 12:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.value }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$10 = _r$10; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.n = n; $f.op = op; $f.rest = rest; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.value = function(v) { return this.$val.value(v); };
	decodeState.ptr.prototype.valueQuoted = function() {
		var $ptr, _1, _r$3, _r$4, _ref, d, op, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; d = $f.d; op = $f.op; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
			_r$3 = d.scanWhile(9); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			op = _r$3;
			_1 = op;
			/* */ if (_1 === (6)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (1)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (6)) { */ case 3:
				$r = d.array(new reflect.Value.ptr(ptrType$5.nil, 0, 0)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 7; continue;
			/* } else if (_1 === (2)) { */ case 4:
				$r = d.object(new reflect.Value.ptr(ptrType$5.nil, 0, 0)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 7; continue;
			/* } else if (_1 === (1)) { */ case 5:
				_r$4 = d.literalInterface(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_ref = _r$4;
				/* */ if (_ref === $ifaceNil || $assertType(_ref, $String, true)[1]) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (_ref === $ifaceNil || $assertType(_ref, $String, true)[1]) { */ case 11:
					v = _ref;
					$s = -1; return v;
				/* } */ case 12:
				$s = 7; continue;
			/* } else { */ case 6:
				d.error(errPhase);
			/* } */ case 7:
		case 1:
		$s = -1; return (x = new unquotedValue.ptr(), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.valueQuoted }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.d = d; $f.op = op; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.valueQuoted = function() { return this.$val.valueQuoted(); };
	decodeState.ptr.prototype.indirect = function(v, decodingNull) {
		var $ptr, _r$10, _r$11, _r$12, _r$13, _r$14, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _v, _v$1, _v$2, d, decodingNull, e, ok, ok$1, u, u$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; d = $f.d; decodingNull = $f.decodingNull; e = $f.e; ok = $f.ok; ok$1 = $f.ok$1; u = $f.u; u$1 = $f.u$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (!(!(($clone(v, reflect.Value).Kind() === 22)))) { _v = false; $s = 3; continue s; }
		_r$3 = $clone(v, reflect.Value).Type().Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = !(_r$3 === ""); case 3:
		/* */ if (_v && $clone(v, reflect.Value).CanAddr()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v && $clone(v, reflect.Value).CanAddr()) { */ case 1:
			v = $clone(v, reflect.Value).Addr();
		/* } */ case 2:
		/* while (true) { */ case 5:
			/* */ if (($clone(v, reflect.Value).Kind() === 20) && !$clone(v, reflect.Value).IsNil()) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (($clone(v, reflect.Value).Kind() === 20) && !$clone(v, reflect.Value).IsNil()) { */ case 7:
				_r$4 = $clone(v, reflect.Value).Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				e = _r$4;
				if (!(($clone(e, reflect.Value).Kind() === 22) && !$clone(e, reflect.Value).IsNil())) { _v$1 = false; $s = 12; continue s; }
				if (!decodingNull) { _v$2 = true; $s = 13; continue s; }
				_r$5 = $clone(e, reflect.Value).Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = $clone(_r$5, reflect.Value).Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_v$2 = _r$6 === 22; case 13:
				_v$1 = _v$2; case 12:
				/* */ if (_v$1) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_v$1) { */ case 10:
					v = e;
					/* continue; */ $s = 5; continue;
				/* } */ case 11:
			/* } */ case 8:
			if (!(($clone(v, reflect.Value).Kind() === 22))) {
				/* break; */ $s = 6; continue;
			}
			_r$7 = $clone(v, reflect.Value).Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$8 = $clone(_r$7, reflect.Value).Kind(); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			/* */ if (!((_r$8 === 22)) && decodingNull && $clone(v, reflect.Value).CanSet()) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (!((_r$8 === 22)) && decodingNull && $clone(v, reflect.Value).CanSet()) { */ case 16:
				/* break; */ $s = 6; continue;
			/* } */ case 17:
			/* */ if ($clone(v, reflect.Value).IsNil()) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ($clone(v, reflect.Value).IsNil()) { */ case 20:
				_r$9 = $clone(v, reflect.Value).Type().Elem(); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$10 = reflect.New(_r$9); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				$r = $clone(v, reflect.Value).Set($clone(_r$10, reflect.Value)); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 21:
			_r$11 = $clone(v, reflect.Value).Type().NumMethod(); /* */ $s = 27; case 27: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			/* */ if (_r$11 > 0) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (_r$11 > 0) { */ case 25:
				_r$12 = $clone(v, reflect.Value).Interface(); /* */ $s = 28; case 28: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_tuple = $assertType(_r$12, Unmarshaler, true);
				u = _tuple[0];
				ok = _tuple[1];
				if (ok) {
					$s = -1; return [u, $ifaceNil, new reflect.Value.ptr(ptrType$5.nil, 0, 0)];
				}
				/* */ if (!decodingNull) { $s = 29; continue; }
				/* */ $s = 30; continue;
				/* if (!decodingNull) { */ case 29:
					_r$13 = $clone(v, reflect.Value).Interface(); /* */ $s = 31; case 31: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_tuple$1 = $assertType(_r$13, encoding.TextUnmarshaler, true);
					u$1 = _tuple$1[0];
					ok$1 = _tuple$1[1];
					if (ok$1) {
						$s = -1; return [$ifaceNil, u$1, new reflect.Value.ptr(ptrType$5.nil, 0, 0)];
					}
				/* } */ case 30:
			/* } */ case 26:
			_r$14 = $clone(v, reflect.Value).Elem(); /* */ $s = 32; case 32: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			v = _r$14;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return [$ifaceNil, $ifaceNil, v];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.indirect }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.d = d; $f.decodingNull = decodingNull; $f.e = e; $f.ok = ok; $f.ok$1 = ok$1; $f.u = u; $f.u$1 = u$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.indirect = function(v, decodingNull) { return this.$val.indirect(v, decodingNull); };
	decodeState.ptr.prototype.array = function(v) {
		var $ptr, _1, _q, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, d, err, i, newcap, newv, op, pv, u, ut, v, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _q = $f._q; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; d = $f.d; err = $f.err; i = $f.i; newcap = $f.newcap; newv = $f.newv; op = $f.op; pv = $f.pv; u = $f.u; ut = $f.ut; v = $f.v; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$3 = d.indirect($clone(v, reflect.Value), false); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		u = _tuple[0];
		ut = _tuple[1];
		pv = _tuple[2];
		/* */ if (!($interfaceIsEqual(u, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(u, $ifaceNil))) { */ case 2:
			d.off = d.off - (1) >> 0;
			_r$4 = d.next(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = u.UnmarshalJSON(_r$4); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			err = _r$5;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.error(err);
			}
			$s = -1; return;
		/* } */ case 3:
		/* */ if (!($interfaceIsEqual(ut, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(ut, $ifaceNil))) { */ case 6:
			d.saveError(new UnmarshalTypeError.ptr("array", $clone(v, reflect.Value).Type(), new $Int64(0, d.off), "", ""));
			d.off = d.off - (1) >> 0;
			_r$6 = d.next(); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			$s = -1; return;
		/* } */ case 7:
		v = pv;
			_1 = $clone(v, reflect.Value).Kind();
			/* */ if (_1 === (20)) { $s = 10; continue; }
			/* */ if (_1 === (17)) { $s = 11; continue; }
			/* */ if (_1 === (23)) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_1 === (20)) { */ case 10:
				_r$7 = $clone(v, reflect.Value).NumMethod(); /* */ $s = 17; case 17: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				/* */ if (_r$7 === 0) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (_r$7 === 0) { */ case 15:
					_r$8 = d.arrayInterface(); /* */ $s = 18; case 18: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$9 = reflect.ValueOf(_r$8); /* */ $s = 19; case 19: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					$r = $clone(v, reflect.Value).Set($clone(_r$9, reflect.Value)); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 16:
				d.saveError(new UnmarshalTypeError.ptr("array", $clone(v, reflect.Value).Type(), new $Int64(0, d.off), "", ""));
				d.off = d.off - (1) >> 0;
				_r$10 = d.next(); /* */ $s = 21; case 21: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$10;
				$s = -1; return;
			/* } else if (_1 === (17)) { */ case 11:
				$s = 14; continue;
			/* } else if (_1 === (23)) { */ case 12:
				/* break; */ $s = 9; continue;
				$s = 14; continue;
			/* } else { */ case 13:
				d.saveError(new UnmarshalTypeError.ptr("array", $clone(v, reflect.Value).Type(), new $Int64(0, d.off), "", ""));
				d.off = d.off - (1) >> 0;
				_r$11 = d.next(); /* */ $s = 22; case 22: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$11;
				$s = -1; return;
			/* } */ case 14:
		case 9:
		i = 0;
		/* while (true) { */ case 23:
			_r$12 = d.scanWhile(9); /* */ $s = 25; case 25: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			op = _r$12;
			if (op === 8) {
				/* break; */ $s = 24; continue;
			}
			d.off = d.off - (1) >> 0;
			d.scan.undo(op);
			/* */ if ($clone(v, reflect.Value).Kind() === 23) { $s = 26; continue; }
			/* */ $s = 27; continue;
			/* if ($clone(v, reflect.Value).Kind() === 23) { */ case 26:
				/* */ if (i >= $clone(v, reflect.Value).Cap()) { $s = 28; continue; }
				/* */ $s = 29; continue;
				/* if (i >= $clone(v, reflect.Value).Cap()) { */ case 28:
					newcap = $clone(v, reflect.Value).Cap() + (_q = $clone(v, reflect.Value).Cap() / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
					if (newcap < 4) {
						newcap = 4;
					}
					_r$13 = reflect.MakeSlice($clone(v, reflect.Value).Type(), $clone(v, reflect.Value).Len(), newcap); /* */ $s = 30; case 30: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					newv = _r$13;
					_r$14 = reflect.Copy($clone(newv, reflect.Value), $clone(v, reflect.Value)); /* */ $s = 31; case 31: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_r$14;
					$r = $clone(v, reflect.Value).Set($clone(newv, reflect.Value)); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 29:
				if (i >= $clone(v, reflect.Value).Len()) {
					$clone(v, reflect.Value).SetLen(i + 1 >> 0);
				}
			/* } */ case 27:
			/* */ if (i < $clone(v, reflect.Value).Len()) { $s = 33; continue; }
			/* */ $s = 34; continue;
			/* if (i < $clone(v, reflect.Value).Len()) { */ case 33:
				_r$15 = $clone(v, reflect.Value).Index(i); /* */ $s = 36; case 36: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				$r = d.value($clone(_r$15, reflect.Value)); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 35; continue;
			/* } else { */ case 34:
				$r = d.value(new reflect.Value.ptr(ptrType$5.nil, 0, 0)); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 35:
			i = i + (1) >> 0;
			_r$16 = d.scanWhile(9); /* */ $s = 39; case 39: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			op = _r$16;
			if (op === 8) {
				/* break; */ $s = 24; continue;
			}
			if (!((op === 7))) {
				d.error(errPhase);
			}
		/* } */ $s = 23; continue; case 24:
		/* */ if (i < $clone(v, reflect.Value).Len()) { $s = 40; continue; }
		/* */ $s = 41; continue;
		/* if (i < $clone(v, reflect.Value).Len()) { */ case 40:
			/* */ if ($clone(v, reflect.Value).Kind() === 17) { $s = 42; continue; }
			/* */ $s = 43; continue;
			/* if ($clone(v, reflect.Value).Kind() === 17) { */ case 42:
				_r$17 = $clone(v, reflect.Value).Type().Elem(); /* */ $s = 45; case 45: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_r$18 = reflect.Zero(_r$17); /* */ $s = 46; case 46: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				z = _r$18;
				/* while (true) { */ case 47:
					/* if (!(i < $clone(v, reflect.Value).Len())) { break; } */ if(!(i < $clone(v, reflect.Value).Len())) { $s = 48; continue; }
					_r$19 = $clone(v, reflect.Value).Index(i); /* */ $s = 49; case 49: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					$r = $clone(_r$19, reflect.Value).Set($clone(z, reflect.Value)); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i = i + (1) >> 0;
				/* } */ $s = 47; continue; case 48:
				$s = 44; continue;
			/* } else { */ case 43:
				$clone(v, reflect.Value).SetLen(i);
			/* } */ case 44:
		/* } */ case 41:
		/* */ if ((i === 0) && ($clone(v, reflect.Value).Kind() === 23)) { $s = 51; continue; }
		/* */ $s = 52; continue;
		/* if ((i === 0) && ($clone(v, reflect.Value).Kind() === 23)) { */ case 51:
			_r$20 = reflect.MakeSlice($clone(v, reflect.Value).Type(), 0, 0); /* */ $s = 53; case 53: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			$r = $clone(v, reflect.Value).Set($clone(_r$20, reflect.Value)); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 52:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.array }; } $f.$ptr = $ptr; $f._1 = _1; $f._q = _q; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.i = i; $f.newcap = newcap; $f.newv = newv; $f.op = op; $f.pv = pv; $f.u = u; $f.ut = ut; $f.v = v; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.array = function(v) { return this.$val.array(v); };
	decodeState.ptr.prototype.object = function(v) {
		var $ptr, _1, _2, _3, _i, _i$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$4, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$5, _r$50, _r$51, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tuple, _tuple$1, _tuple$2, _tuple$3, _v, _v$1, _v$2, _v$3, d, destring, elemType, err, err$1, err$2, f, ff, fields, i, i$1, item, key, kt, kv, mapElem, n, n$1, ok, op, pv, qv, qv$1, qv$2, s, s$1, start, subv, t, u, ut, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _i = $f._i; _i$1 = $f._i$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$4 = $f._r$4; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$44 = $f._r$44; _r$45 = $f._r$45; _r$46 = $f._r$46; _r$47 = $f._r$47; _r$48 = $f._r$48; _r$49 = $f._r$49; _r$5 = $f._r$5; _r$50 = $f._r$50; _r$51 = $f._r$51; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; d = $f.d; destring = $f.destring; elemType = $f.elemType; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; f = $f.f; ff = $f.ff; fields = $f.fields; i = $f.i; i$1 = $f.i$1; item = $f.item; key = $f.key; kt = $f.kt; kv = $f.kv; mapElem = $f.mapElem; n = $f.n; n$1 = $f.n$1; ok = $f.ok; op = $f.op; pv = $f.pv; qv = $f.qv; qv$1 = $f.qv$1; qv$2 = $f.qv$2; s = $f.s; s$1 = $f.s$1; start = $f.start; subv = $f.subv; t = $f.t; u = $f.u; ut = $f.ut; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$3 = d.indirect($clone(v, reflect.Value), false); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		u = _tuple[0];
		ut = _tuple[1];
		pv = _tuple[2];
		/* */ if (!($interfaceIsEqual(u, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(u, $ifaceNil))) { */ case 2:
			d.off = d.off - (1) >> 0;
			_r$4 = d.next(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = u.UnmarshalJSON(_r$4); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			err = _r$5;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.error(err);
			}
			$s = -1; return;
		/* } */ case 3:
		/* */ if (!($interfaceIsEqual(ut, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(ut, $ifaceNil))) { */ case 6:
			d.saveError(new UnmarshalTypeError.ptr("object", $clone(v, reflect.Value).Type(), new $Int64(0, d.off), "", ""));
			d.off = d.off - (1) >> 0;
			_r$6 = d.next(); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			$s = -1; return;
		/* } */ case 7:
		v = pv;
		if (!($clone(v, reflect.Value).Kind() === 20)) { _v = false; $s = 11; continue s; }
		_r$7 = $clone(v, reflect.Value).NumMethod(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_v = _r$7 === 0; case 11:
		/* */ if (_v) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (_v) { */ case 9:
			_r$8 = d.objectInterface(); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$9 = reflect.ValueOf(new mapType$1(_r$8)); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			$r = $clone(v, reflect.Value).Set($clone(_r$9, reflect.Value)); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 10:
			_1 = $clone(v, reflect.Value).Kind();
			/* */ if (_1 === (21)) { $s = 17; continue; }
			/* */ if (_1 === (25)) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (_1 === (21)) { */ case 17:
				t = $clone(v, reflect.Value).Type();
					_r$10 = t.Key(); /* */ $s = 22; case 22: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_r$11 = _r$10.Kind(); /* */ $s = 23; case 23: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_2 = _r$11;
					/* */ if ((_2 === (24)) || (_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6)) || (_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10)) || (_2 === (11)) || (_2 === (12))) { $s = 24; continue; }
					_r$12 = t.Key(); /* */ $s = 27; case 27: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_r$13 = reflect.PtrTo(_r$12); /* */ $s = 28; case 28: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_r$14 = _r$13.Implements(textUnmarshalerType); /* */ $s = 29; case 29: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					/* */ if (!_r$14) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if ((_2 === (24)) || (_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6)) || (_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10)) || (_2 === (11)) || (_2 === (12))) { */ case 24:
						$s = 26; continue;
					/* } else if (!_r$14) { */ case 25:
						d.saveError(new UnmarshalTypeError.ptr("object", $clone(v, reflect.Value).Type(), new $Int64(0, d.off), "", ""));
						d.off = d.off - (1) >> 0;
						_r$15 = d.next(); /* */ $s = 30; case 30: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						_r$15;
						$s = -1; return;
					/* } */ case 26:
				case 21:
				/* */ if ($clone(v, reflect.Value).IsNil()) { $s = 31; continue; }
				/* */ $s = 32; continue;
				/* if ($clone(v, reflect.Value).IsNil()) { */ case 31:
					_r$16 = reflect.MakeMap(t); /* */ $s = 33; case 33: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					$r = $clone(v, reflect.Value).Set($clone(_r$16, reflect.Value)); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 32:
				$s = 20; continue;
			/* } else if (_1 === (25)) { */ case 18:
				$s = 20; continue;
			/* } else { */ case 19:
				d.saveError(new UnmarshalTypeError.ptr("object", $clone(v, reflect.Value).Type(), new $Int64(0, d.off), "", ""));
				d.off = d.off - (1) >> 0;
				_r$17 = d.next(); /* */ $s = 35; case 35: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_r$17;
				$s = -1; return;
			/* } */ case 20:
		case 16:
		mapElem = new reflect.Value.ptr(ptrType$5.nil, 0, 0);
		/* while (true) { */ case 36:
			_r$18 = d.scanWhile(9); /* */ $s = 38; case 38: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			op = _r$18;
			if (op === 5) {
				/* break; */ $s = 37; continue;
			}
			if (!((op === 1))) {
				d.error(errPhase);
			}
			start = d.off - 1 >> 0;
			_r$19 = d.scanWhile(0); /* */ $s = 39; case 39: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			op = _r$19;
			item = $subslice(d.data, start, (d.off - 1 >> 0));
			_tuple$1 = unquoteBytes(item);
			key = _tuple$1[0];
			ok = _tuple$1[1];
			if (!ok) {
				d.error(errPhase);
			}
			subv = new reflect.Value.ptr(ptrType$5.nil, 0, 0);
			destring = false;
			/* */ if ($clone(v, reflect.Value).Kind() === 21) { $s = 40; continue; }
			/* */ $s = 41; continue;
			/* if ($clone(v, reflect.Value).Kind() === 21) { */ case 40:
				_r$20 = $clone(v, reflect.Value).Type().Elem(); /* */ $s = 43; case 43: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				elemType = _r$20;
				/* */ if (!$clone(mapElem, reflect.Value).IsValid()) { $s = 44; continue; }
				/* */ $s = 45; continue;
				/* if (!$clone(mapElem, reflect.Value).IsValid()) { */ case 44:
					_r$21 = reflect.New(elemType); /* */ $s = 47; case 47: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
					_r$22 = $clone(_r$21, reflect.Value).Elem(); /* */ $s = 48; case 48: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					mapElem = _r$22;
					$s = 46; continue;
				/* } else { */ case 45:
					_r$23 = reflect.Zero(elemType); /* */ $s = 49; case 49: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
					$r = $clone(mapElem, reflect.Value).Set($clone(_r$23, reflect.Value)); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 46:
				subv = mapElem;
				$s = 42; continue;
			/* } else { */ case 41:
				f = ptrType$6.nil;
				_r$24 = cachedTypeFields($clone(v, reflect.Value).Type()); /* */ $s = 51; case 51: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				fields = _r$24;
				_ref = fields;
				_i = 0;
				/* while (true) { */ case 52:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 53; continue; }
					i = _i;
					ff = ((i < 0 || i >= fields.$length) ? ($throwRuntimeError("index out of range"), undefined) : fields.$array[fields.$offset + i]);
					if (bytes.Equal(ff.nameBytes, key)) {
						f = ff;
						/* break; */ $s = 53; continue;
					}
					if (!(f === ptrType$6.nil)) { _v$1 = false; $s = 56; continue s; }
					_r$25 = ff.equalFold(ff.nameBytes, key); /* */ $s = 57; case 57: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					_v$1 = _r$25; case 56:
					/* */ if (_v$1) { $s = 54; continue; }
					/* */ $s = 55; continue;
					/* if (_v$1) { */ case 54:
						f = ff;
					/* } */ case 55:
					_i++;
				/* } */ $s = 52; continue; case 53:
				/* */ if (!(f === ptrType$6.nil)) { $s = 58; continue; }
				/* */ $s = 59; continue;
				/* if (!(f === ptrType$6.nil)) { */ case 58:
					subv = v;
					destring = f.quoted;
					_ref$1 = f.index;
					_i$1 = 0;
					/* while (true) { */ case 60:
						/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 61; continue; }
						i$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
						/* */ if ($clone(subv, reflect.Value).Kind() === 22) { $s = 62; continue; }
						/* */ $s = 63; continue;
						/* if ($clone(subv, reflect.Value).Kind() === 22) { */ case 62:
							/* */ if ($clone(subv, reflect.Value).IsNil()) { $s = 64; continue; }
							/* */ $s = 65; continue;
							/* if ($clone(subv, reflect.Value).IsNil()) { */ case 64:
								_r$26 = $clone(subv, reflect.Value).Type().Elem(); /* */ $s = 66; case 66: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
								_r$27 = reflect.New(_r$26); /* */ $s = 67; case 67: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
								$r = $clone(subv, reflect.Value).Set($clone(_r$27, reflect.Value)); /* */ $s = 68; case 68: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 65:
							_r$28 = $clone(subv, reflect.Value).Elem(); /* */ $s = 69; case 69: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
							subv = _r$28;
						/* } */ case 63:
						_r$29 = $clone(subv, reflect.Value).Field(i$1); /* */ $s = 70; case 70: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
						subv = _r$29;
						_i$1++;
					/* } */ $s = 60; continue; case 61:
					d.errorContext.Field = f.name;
					_r$30 = $clone(v, reflect.Value).Type().Name(); /* */ $s = 71; case 71: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
					d.errorContext.Struct = _r$30;
				/* } */ case 59:
			/* } */ case 42:
			/* */ if (op === 9) { $s = 72; continue; }
			/* */ $s = 73; continue;
			/* if (op === 9) { */ case 72:
				_r$31 = d.scanWhile(9); /* */ $s = 74; case 74: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				op = _r$31;
			/* } */ case 73:
			if (!((op === 3))) {
				d.error(errPhase);
			}
			/* */ if (destring) { $s = 75; continue; }
			/* */ $s = 76; continue;
			/* if (destring) { */ case 75:
				_r$32 = d.valueQuoted(); /* */ $s = 78; case 78: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
				_ref$2 = _r$32;
				/* */ if (_ref$2 === $ifaceNil) { $s = 79; continue; }
				/* */ if ($assertType(_ref$2, $String, true)[1]) { $s = 80; continue; }
				/* */ $s = 81; continue;
				/* if (_ref$2 === $ifaceNil) { */ case 79:
					qv = _ref$2;
					$r = d.literalStore(nullLiteral, $clone(subv, reflect.Value), false); /* */ $s = 83; case 83: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 82; continue;
				/* } else if ($assertType(_ref$2, $String, true)[1]) { */ case 80:
					qv$1 = _ref$2.$val;
					$r = d.literalStore(new sliceType$1($stringToBytes(qv$1)), $clone(subv, reflect.Value), true); /* */ $s = 84; case 84: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 82; continue;
				/* } else { */ case 81:
					qv$2 = _ref$2;
					_r$33 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal unquoted value into %v", new sliceType([$clone(subv, reflect.Value).Type()])); /* */ $s = 85; case 85: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
					$r = d.saveError(_r$33); /* */ $s = 86; case 86: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 82:
				$s = 77; continue;
			/* } else { */ case 76:
				$r = d.value($clone(subv, reflect.Value)); /* */ $s = 87; case 87: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 77:
			/* */ if ($clone(v, reflect.Value).Kind() === 21) { $s = 88; continue; }
			/* */ $s = 89; continue;
			/* if ($clone(v, reflect.Value).Kind() === 21) { */ case 88:
				_r$34 = $clone(v, reflect.Value).Type().Key(); /* */ $s = 90; case 90: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
				kt = _r$34;
				kv = new reflect.Value.ptr(ptrType$5.nil, 0, 0);
					_r$35 = kt.Kind(); /* */ $s = 96; case 96: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
					/* */ if ((_r$35 === 24)) { $s = 92; continue; }
					_r$36 = reflect.PtrTo(kt).Implements(textUnmarshalerType); /* */ $s = 97; case 97: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
					/* */ if (_r$36) { $s = 93; continue; }
					/* */ $s = 94; continue;
					/* if ((_r$35 === 24)) { */ case 92:
						_r$37 = reflect.ValueOf(key); /* */ $s = 98; case 98: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
						_r$38 = $clone(_r$37, reflect.Value).Convert(kt); /* */ $s = 99; case 99: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
						kv = _r$38;
						$s = 95; continue;
					/* } else if (_r$36) { */ case 93:
						_r$39 = $clone(v, reflect.Value).Type().Key(); /* */ $s = 100; case 100: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
						_r$40 = reflect.New(_r$39); /* */ $s = 101; case 101: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
						kv = _r$40;
						$r = d.literalStore(item, $clone(kv, reflect.Value), true); /* */ $s = 102; case 102: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_r$41 = $clone(kv, reflect.Value).Elem(); /* */ $s = 103; case 103: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
						kv = _r$41;
						$s = 95; continue;
					/* } else { */ case 94:
							_r$42 = kt.Kind(); /* */ $s = 105; case 105: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
							_3 = _r$42;
							/* */ if ((_3 === (2)) || (_3 === (3)) || (_3 === (4)) || (_3 === (5)) || (_3 === (6))) { $s = 106; continue; }
							/* */ if ((_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10)) || (_3 === (11)) || (_3 === (12))) { $s = 107; continue; }
							/* */ $s = 108; continue;
							/* if ((_3 === (2)) || (_3 === (3)) || (_3 === (4)) || (_3 === (5)) || (_3 === (6))) { */ case 106:
								s = $bytesToString(key);
								_tuple$2 = strconv.ParseInt(s, 10, 64);
								n = _tuple$2[0];
								err$1 = _tuple$2[1];
								if (!($interfaceIsEqual(err$1, $ifaceNil))) { _v$2 = true; $s = 112; continue s; }
								_r$43 = reflect.Zero(kt); /* */ $s = 113; case 113: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
								_r$44 = $clone(_r$43, reflect.Value).OverflowInt(n); /* */ $s = 114; case 114: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
								_v$2 = _r$44; case 112:
								/* */ if (_v$2) { $s = 110; continue; }
								/* */ $s = 111; continue;
								/* if (_v$2) { */ case 110:
									d.saveError(new UnmarshalTypeError.ptr("number " + s, kt, new $Int64(0, (start + 1 >> 0)), "", ""));
									$s = -1; return;
								/* } */ case 111:
								_r$45 = reflect.ValueOf(n); /* */ $s = 115; case 115: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
								_r$46 = $clone(_r$45, reflect.Value).Convert(kt); /* */ $s = 116; case 116: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
								kv = _r$46;
								$s = 109; continue;
							/* } else if ((_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10)) || (_3 === (11)) || (_3 === (12))) { */ case 107:
								s$1 = $bytesToString(key);
								_tuple$3 = strconv.ParseUint(s$1, 10, 64);
								n$1 = _tuple$3[0];
								err$2 = _tuple$3[1];
								if (!($interfaceIsEqual(err$2, $ifaceNil))) { _v$3 = true; $s = 119; continue s; }
								_r$47 = reflect.Zero(kt); /* */ $s = 120; case 120: if($c) { $c = false; _r$47 = _r$47.$blk(); } if (_r$47 && _r$47.$blk !== undefined) { break s; }
								_r$48 = $clone(_r$47, reflect.Value).OverflowUint(n$1); /* */ $s = 121; case 121: if($c) { $c = false; _r$48 = _r$48.$blk(); } if (_r$48 && _r$48.$blk !== undefined) { break s; }
								_v$3 = _r$48; case 119:
								/* */ if (_v$3) { $s = 117; continue; }
								/* */ $s = 118; continue;
								/* if (_v$3) { */ case 117:
									d.saveError(new UnmarshalTypeError.ptr("number " + s$1, kt, new $Int64(0, (start + 1 >> 0)), "", ""));
									$s = -1; return;
								/* } */ case 118:
								_r$49 = reflect.ValueOf(n$1); /* */ $s = 122; case 122: if($c) { $c = false; _r$49 = _r$49.$blk(); } if (_r$49 && _r$49.$blk !== undefined) { break s; }
								_r$50 = $clone(_r$49, reflect.Value).Convert(kt); /* */ $s = 123; case 123: if($c) { $c = false; _r$50 = _r$50.$blk(); } if (_r$50 && _r$50.$blk !== undefined) { break s; }
								kv = _r$50;
								$s = 109; continue;
							/* } else { */ case 108:
								$panic(new $String("json: Unexpected key type"));
							/* } */ case 109:
						case 104:
					/* } */ case 95:
				case 91:
				$r = $clone(v, reflect.Value).SetMapIndex($clone(kv, reflect.Value), $clone(subv, reflect.Value)); /* */ $s = 124; case 124: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 89:
			_r$51 = d.scanWhile(9); /* */ $s = 125; case 125: if($c) { $c = false; _r$51 = _r$51.$blk(); } if (_r$51 && _r$51.$blk !== undefined) { break s; }
			op = _r$51;
			if (op === 5) {
				/* break; */ $s = 37; continue;
			}
			if (!((op === 4))) {
				d.error(errPhase);
			}
			d.errorContext.Struct = "";
			d.errorContext.Field = "";
		/* } */ $s = 36; continue; case 37:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.object }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._i = _i; $f._i$1 = _i$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$4 = _r$4; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$44 = _r$44; $f._r$45 = _r$45; $f._r$46 = _r$46; $f._r$47 = _r$47; $f._r$48 = _r$48; $f._r$49 = _r$49; $f._r$5 = _r$5; $f._r$50 = _r$50; $f._r$51 = _r$51; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.d = d; $f.destring = destring; $f.elemType = elemType; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.f = f; $f.ff = ff; $f.fields = fields; $f.i = i; $f.i$1 = i$1; $f.item = item; $f.key = key; $f.kt = kt; $f.kv = kv; $f.mapElem = mapElem; $f.n = n; $f.n$1 = n$1; $f.ok = ok; $f.op = op; $f.pv = pv; $f.qv = qv; $f.qv$1 = qv$1; $f.qv$2 = qv$2; $f.s = s; $f.s$1 = s$1; $f.start = start; $f.subv = subv; $f.t = t; $f.u = u; $f.ut = ut; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.object = function(v) { return this.$val.object(v); };
	decodeState.ptr.prototype.literal = function(v) {
		var $ptr, _r$3, d, op, start, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; d = $f.d; op = $f.op; start = $f.start; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		start = d.off - 1 >> 0;
		_r$3 = d.scanWhile(0); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		op = _r$3;
		d.off = d.off - (1) >> 0;
		d.scan.undo(op);
		$r = d.literalStore($subslice(d.data, start, d.off), $clone(v, reflect.Value), false); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.literal }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.d = d; $f.op = op; $f.start = start; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.literal = function(v) { return this.$val.literal(v); };
	decodeState.ptr.prototype.convertNumber = function(s) {
		var $ptr, _tuple, d, err, f, s;
		d = this;
		if (d.useNumber) {
			return [new Number(s), $ifaceNil];
		}
		_tuple = strconv.ParseFloat(s, 64);
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new UnmarshalTypeError.ptr("number " + s, reflect.TypeOf(new $Float64(0)), new $Int64(0, d.off), "", "")];
		}
		return [new $Float64(f), $ifaceNil];
	};
	decodeState.prototype.convertNumber = function(s) { return this.$val.convertNumber(s); };
	decodeState.ptr.prototype.literalStore = function(item, v, fromQuoted) {
		var $ptr, _1, _2, _3, _4, _5, _6, _arg, _arg$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, b, c, d, err, err$1, err$2, err$3, err$4, err$5, err$6, fromQuoted, isNull, item, n, n$1, n$2, n$3, n$4, ok, ok$1, pv, s, s$1, s$2, u, ut, v, val, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _arg = $f._arg; _arg$1 = $f._arg$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; b = $f.b; c = $f.c; d = $f.d; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; fromQuoted = $f.fromQuoted; isNull = $f.isNull; item = $f.item; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; n$3 = $f.n$3; n$4 = $f.n$4; ok = $f.ok; ok$1 = $f.ok$1; pv = $f.pv; s = $f.s; s$1 = $f.s$1; s$2 = $f.s$2; u = $f.u; ut = $f.ut; v = $f.v; val = $f.val; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* */ if (item.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (item.$length === 0) { */ case 1:
			_r$3 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, $clone(v, reflect.Value).Type()])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$r = d.saveError(_r$3); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		isNull = (0 >= item.$length ? ($throwRuntimeError("index out of range"), undefined) : item.$array[item.$offset + 0]) === 110;
		_r$4 = d.indirect($clone(v, reflect.Value), isNull); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		u = _tuple[0];
		ut = _tuple[1];
		pv = _tuple[2];
		/* */ if (!($interfaceIsEqual(u, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(u, $ifaceNil))) { */ case 6:
			_r$5 = u.UnmarshalJSON(item); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			err = _r$5;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.error(err);
			}
			$s = -1; return;
		/* } */ case 7:
		/* */ if (!($interfaceIsEqual(ut, $ifaceNil))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!($interfaceIsEqual(ut, $ifaceNil))) { */ case 9:
			/* */ if (!(((0 >= item.$length ? ($throwRuntimeError("index out of range"), undefined) : item.$array[item.$offset + 0]) === 34))) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (!(((0 >= item.$length ? ($throwRuntimeError("index out of range"), undefined) : item.$array[item.$offset + 0]) === 34))) { */ case 11:
				/* */ if (fromQuoted) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (fromQuoted) { */ case 13:
					_r$6 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, $clone(v, reflect.Value).Type()])); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$r = d.saveError(_r$6); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 15; continue;
				/* } else { */ case 14:
					val = "";
					_1 = (0 >= item.$length ? ($throwRuntimeError("index out of range"), undefined) : item.$array[item.$offset + 0]);
					if (_1 === (110)) {
						val = "null";
					} else if ((_1 === (116)) || (_1 === (102))) {
						val = "bool";
					} else {
						val = "number";
					}
					d.saveError(new UnmarshalTypeError.ptr(val, $clone(v, reflect.Value).Type(), new $Int64(0, d.off), "", ""));
				/* } */ case 15:
				$s = -1; return;
			/* } */ case 12:
			_tuple$1 = unquoteBytes(item);
			s = _tuple$1[0];
			ok = _tuple$1[1];
			/* */ if (!ok) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (!ok) { */ case 18:
				/* */ if (fromQuoted) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (fromQuoted) { */ case 20:
					_r$7 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, $clone(v, reflect.Value).Type()])); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$r = d.error(_r$7); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 22; continue;
				/* } else { */ case 21:
					d.error(errPhase);
				/* } */ case 22:
			/* } */ case 19:
			_r$8 = ut.UnmarshalText(s); /* */ $s = 25; case 25: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			err$1 = _r$8;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				d.error(err$1);
			}
			$s = -1; return;
		/* } */ case 10:
		v = pv;
			c = (0 >= item.$length ? ($throwRuntimeError("index out of range"), undefined) : item.$array[item.$offset + 0]);
			_2 = c;
			/* */ if (_2 === (110)) { $s = 27; continue; }
			/* */ if ((_2 === (116)) || (_2 === (102))) { $s = 28; continue; }
			/* */ if (_2 === (34)) { $s = 29; continue; }
			/* */ $s = 30; continue;
			/* if (_2 === (110)) { */ case 27:
				/* */ if (fromQuoted && !($bytesToString(item) === "null")) { $s = 32; continue; }
				/* */ $s = 33; continue;
				/* if (fromQuoted && !($bytesToString(item) === "null")) { */ case 32:
					_r$9 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, $clone(v, reflect.Value).Type()])); /* */ $s = 34; case 34: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					$r = d.saveError(_r$9); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 26; continue;
				/* } */ case 33:
					_3 = $clone(v, reflect.Value).Kind();
					/* */ if ((_3 === (20)) || (_3 === (22)) || (_3 === (21)) || (_3 === (23))) { $s = 37; continue; }
					/* */ $s = 38; continue;
					/* if ((_3 === (20)) || (_3 === (22)) || (_3 === (21)) || (_3 === (23))) { */ case 37:
						_r$10 = reflect.Zero($clone(v, reflect.Value).Type()); /* */ $s = 39; case 39: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						$r = $clone(v, reflect.Value).Set($clone(_r$10, reflect.Value)); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 38:
				case 36:
				$s = 31; continue;
			/* } else if ((_2 === (116)) || (_2 === (102))) { */ case 28:
				value = (0 >= item.$length ? ($throwRuntimeError("index out of range"), undefined) : item.$array[item.$offset + 0]) === 116;
				/* */ if (fromQuoted && !($bytesToString(item) === "true") && !($bytesToString(item) === "false")) { $s = 41; continue; }
				/* */ $s = 42; continue;
				/* if (fromQuoted && !($bytesToString(item) === "true") && !($bytesToString(item) === "false")) { */ case 41:
					_r$11 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, $clone(v, reflect.Value).Type()])); /* */ $s = 43; case 43: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					$r = d.saveError(_r$11); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 26; continue;
				/* } */ case 42:
					_4 = $clone(v, reflect.Value).Kind();
					/* */ if (_4 === (1)) { $s = 46; continue; }
					/* */ if (_4 === (20)) { $s = 47; continue; }
					/* */ if (fromQuoted) { $s = 48; continue; }
					/* */ $s = 49; continue;
					/* if (_4 === (1)) { */ case 46:
						$clone(v, reflect.Value).SetBool(value);
						$s = 50; continue;
					/* } else if (_4 === (20)) { */ case 47:
						_r$12 = $clone(v, reflect.Value).NumMethod(); /* */ $s = 54; case 54: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						/* */ if (_r$12 === 0) { $s = 51; continue; }
						/* */ $s = 52; continue;
						/* if (_r$12 === 0) { */ case 51:
							_r$13 = reflect.ValueOf(new $Bool(value)); /* */ $s = 55; case 55: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
							$r = $clone(v, reflect.Value).Set($clone(_r$13, reflect.Value)); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 53; continue;
						/* } else { */ case 52:
							d.saveError(new UnmarshalTypeError.ptr("bool", $clone(v, reflect.Value).Type(), new $Int64(0, d.off), "", ""));
						/* } */ case 53:
						$s = 50; continue;
					/* } else if (fromQuoted) { */ case 48:
						_r$14 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, $clone(v, reflect.Value).Type()])); /* */ $s = 57; case 57: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						$r = d.saveError(_r$14); /* */ $s = 58; case 58: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 50; continue;
					/* } else { */ case 49:
						d.saveError(new UnmarshalTypeError.ptr("bool", $clone(v, reflect.Value).Type(), new $Int64(0, d.off), "", ""));
					/* } */ case 50:
				case 45:
				$s = 31; continue;
			/* } else if (_2 === (34)) { */ case 29:
				_tuple$2 = unquoteBytes(item);
				s$1 = _tuple$2[0];
				ok$1 = _tuple$2[1];
				/* */ if (!ok$1) { $s = 59; continue; }
				/* */ $s = 60; continue;
				/* if (!ok$1) { */ case 59:
					/* */ if (fromQuoted) { $s = 61; continue; }
					/* */ $s = 62; continue;
					/* if (fromQuoted) { */ case 61:
						_r$15 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, $clone(v, reflect.Value).Type()])); /* */ $s = 64; case 64: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						$r = d.error(_r$15); /* */ $s = 65; case 65: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 63; continue;
					/* } else { */ case 62:
						d.error(errPhase);
					/* } */ case 63:
				/* } */ case 60:
					_5 = $clone(v, reflect.Value).Kind();
					/* */ if (_5 === (23)) { $s = 67; continue; }
					/* */ if (_5 === (24)) { $s = 68; continue; }
					/* */ if (_5 === (20)) { $s = 69; continue; }
					/* */ $s = 70; continue;
					/* if (_5 === (23)) { */ case 67:
						_r$16 = $clone(v, reflect.Value).Type().Elem(); /* */ $s = 74; case 74: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						_r$17 = _r$16.Kind(); /* */ $s = 75; case 75: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						/* */ if (!((_r$17 === 8))) { $s = 72; continue; }
						/* */ $s = 73; continue;
						/* if (!((_r$17 === 8))) { */ case 72:
							d.saveError(new UnmarshalTypeError.ptr("string", $clone(v, reflect.Value).Type(), new $Int64(0, d.off), "", ""));
							/* break; */ $s = 66; continue;
						/* } */ case 73:
						b = $makeSlice(sliceType$1, base64.StdEncoding.DecodedLen(s$1.$length));
						_tuple$3 = base64.StdEncoding.Decode(b, s$1);
						n = _tuple$3[0];
						err$2 = _tuple$3[1];
						if (!($interfaceIsEqual(err$2, $ifaceNil))) {
							d.saveError(err$2);
							/* break; */ $s = 66; continue;
						}
						$r = $clone(v, reflect.Value).SetBytes($subslice(b, 0, n)); /* */ $s = 76; case 76: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 71; continue;
					/* } else if (_5 === (24)) { */ case 68:
						$clone(v, reflect.Value).SetString($bytesToString(s$1));
						$s = 71; continue;
					/* } else if (_5 === (20)) { */ case 69:
						_r$18 = $clone(v, reflect.Value).NumMethod(); /* */ $s = 80; case 80: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
						/* */ if (_r$18 === 0) { $s = 77; continue; }
						/* */ $s = 78; continue;
						/* if (_r$18 === 0) { */ case 77:
							_r$19 = reflect.ValueOf(new $String($bytesToString(s$1))); /* */ $s = 81; case 81: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
							$r = $clone(v, reflect.Value).Set($clone(_r$19, reflect.Value)); /* */ $s = 82; case 82: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 79; continue;
						/* } else { */ case 78:
							d.saveError(new UnmarshalTypeError.ptr("string", $clone(v, reflect.Value).Type(), new $Int64(0, d.off), "", ""));
						/* } */ case 79:
						$s = 71; continue;
					/* } else { */ case 70:
						d.saveError(new UnmarshalTypeError.ptr("string", $clone(v, reflect.Value).Type(), new $Int64(0, d.off), "", ""));
					/* } */ case 71:
				case 66:
				$s = 31; continue;
			/* } else { */ case 30:
				/* */ if (!((c === 45)) && (c < 48 || c > 57)) { $s = 83; continue; }
				/* */ $s = 84; continue;
				/* if (!((c === 45)) && (c < 48 || c > 57)) { */ case 83:
					/* */ if (fromQuoted) { $s = 85; continue; }
					/* */ $s = 86; continue;
					/* if (fromQuoted) { */ case 85:
						_r$20 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, $clone(v, reflect.Value).Type()])); /* */ $s = 88; case 88: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
						$r = d.error(_r$20); /* */ $s = 89; case 89: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 87; continue;
					/* } else { */ case 86:
						d.error(errPhase);
					/* } */ case 87:
				/* } */ case 84:
				s$2 = $bytesToString(item);
					_6 = $clone(v, reflect.Value).Kind();
					/* */ if (_6 === (20)) { $s = 91; continue; }
					/* */ if ((_6 === (2)) || (_6 === (3)) || (_6 === (4)) || (_6 === (5)) || (_6 === (6))) { $s = 92; continue; }
					/* */ if ((_6 === (7)) || (_6 === (8)) || (_6 === (9)) || (_6 === (10)) || (_6 === (11)) || (_6 === (12))) { $s = 93; continue; }
					/* */ if ((_6 === (13)) || (_6 === (14))) { $s = 94; continue; }
					/* */ $s = 95; continue;
					/* if (_6 === (20)) { */ case 91:
						_tuple$4 = d.convertNumber(s$2);
						n$1 = _tuple$4[0];
						err$3 = _tuple$4[1];
						if (!($interfaceIsEqual(err$3, $ifaceNil))) {
							d.saveError(err$3);
							/* break; */ $s = 90; continue;
						}
						_r$21 = $clone(v, reflect.Value).NumMethod(); /* */ $s = 99; case 99: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
						/* */ if (!((_r$21 === 0))) { $s = 97; continue; }
						/* */ $s = 98; continue;
						/* if (!((_r$21 === 0))) { */ case 97:
							d.saveError(new UnmarshalTypeError.ptr("number", $clone(v, reflect.Value).Type(), new $Int64(0, d.off), "", ""));
							/* break; */ $s = 90; continue;
						/* } */ case 98:
						_r$22 = reflect.ValueOf(n$1); /* */ $s = 100; case 100: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
						$r = $clone(v, reflect.Value).Set($clone(_r$22, reflect.Value)); /* */ $s = 101; case 101: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 96; continue;
					/* } else if ((_6 === (2)) || (_6 === (3)) || (_6 === (4)) || (_6 === (5)) || (_6 === (6))) { */ case 92:
						_tuple$5 = strconv.ParseInt(s$2, 10, 64);
						n$2 = _tuple$5[0];
						err$4 = _tuple$5[1];
						if (!($interfaceIsEqual(err$4, $ifaceNil)) || $clone(v, reflect.Value).OverflowInt(n$2)) {
							d.saveError(new UnmarshalTypeError.ptr("number " + s$2, $clone(v, reflect.Value).Type(), new $Int64(0, d.off), "", ""));
							/* break; */ $s = 90; continue;
						}
						$clone(v, reflect.Value).SetInt(n$2);
						$s = 96; continue;
					/* } else if ((_6 === (7)) || (_6 === (8)) || (_6 === (9)) || (_6 === (10)) || (_6 === (11)) || (_6 === (12))) { */ case 93:
						_tuple$6 = strconv.ParseUint(s$2, 10, 64);
						n$3 = _tuple$6[0];
						err$5 = _tuple$6[1];
						if (!($interfaceIsEqual(err$5, $ifaceNil)) || $clone(v, reflect.Value).OverflowUint(n$3)) {
							d.saveError(new UnmarshalTypeError.ptr("number " + s$2, $clone(v, reflect.Value).Type(), new $Int64(0, d.off), "", ""));
							/* break; */ $s = 90; continue;
						}
						$clone(v, reflect.Value).SetUint(n$3);
						$s = 96; continue;
					/* } else if ((_6 === (13)) || (_6 === (14))) { */ case 94:
						_arg = s$2;
						_r$23 = $clone(v, reflect.Value).Type().Bits(); /* */ $s = 102; case 102: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
						_arg$1 = _r$23;
						_r$24 = strconv.ParseFloat(_arg, _arg$1); /* */ $s = 103; case 103: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
						_tuple$7 = _r$24;
						n$4 = _tuple$7[0];
						err$6 = _tuple$7[1];
						if (!($interfaceIsEqual(err$6, $ifaceNil)) || $clone(v, reflect.Value).OverflowFloat(n$4)) {
							d.saveError(new UnmarshalTypeError.ptr("number " + s$2, $clone(v, reflect.Value).Type(), new $Int64(0, d.off), "", ""));
							/* break; */ $s = 90; continue;
						}
						$clone(v, reflect.Value).SetFloat(n$4);
						$s = 96; continue;
					/* } else { */ case 95:
						/* */ if (($clone(v, reflect.Value).Kind() === 24) && $interfaceIsEqual($clone(v, reflect.Value).Type(), numberType)) { $s = 104; continue; }
						/* */ $s = 105; continue;
						/* if (($clone(v, reflect.Value).Kind() === 24) && $interfaceIsEqual($clone(v, reflect.Value).Type(), numberType)) { */ case 104:
							$clone(v, reflect.Value).SetString(s$2);
							/* */ if (!isValidNumber(s$2)) { $s = 106; continue; }
							/* */ $s = 107; continue;
							/* if (!isValidNumber(s$2)) { */ case 106:
								_r$25 = fmt.Errorf("json: invalid number literal, trying to unmarshal %q into Number", new sliceType([item])); /* */ $s = 108; case 108: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
								$r = d.error(_r$25); /* */ $s = 109; case 109: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 107:
							/* break; */ $s = 90; continue;
						/* } */ case 105:
						/* */ if (fromQuoted) { $s = 110; continue; }
						/* */ $s = 111; continue;
						/* if (fromQuoted) { */ case 110:
							_r$26 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, $clone(v, reflect.Value).Type()])); /* */ $s = 113; case 113: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
							$r = d.error(_r$26); /* */ $s = 114; case 114: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 112; continue;
						/* } else { */ case 111:
							d.error(new UnmarshalTypeError.ptr("number", $clone(v, reflect.Value).Type(), new $Int64(0, d.off), "", ""));
						/* } */ case 112:
					/* } */ case 96:
				case 90:
			/* } */ case 31:
		case 26:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.literalStore }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.b = b; $f.c = c; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.fromQuoted = fromQuoted; $f.isNull = isNull; $f.item = item; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.n$3 = n$3; $f.n$4 = n$4; $f.ok = ok; $f.ok$1 = ok$1; $f.pv = pv; $f.s = s; $f.s$1 = s$1; $f.s$2 = s$2; $f.u = u; $f.ut = ut; $f.v = v; $f.val = val; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.literalStore = function(item, v, fromQuoted) { return this.$val.literalStore(item, v, fromQuoted); };
	decodeState.ptr.prototype.valueInterface = function() {
		var $ptr, _1, _r$3, _r$4, _r$5, _r$6, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
			_r$3 = d.scanWhile(9); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_1 = _r$3;
			/* */ if (_1 === (6)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (1)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (6)) { */ case 3:
				_r$4 = d.arrayInterface(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return _r$4;
			/* } else if (_1 === (2)) { */ case 4:
				_r$5 = d.objectInterface(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return new mapType$1(_r$5);
			/* } else if (_1 === (1)) { */ case 5:
				_r$6 = d.literalInterface(); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$s = -1; return _r$6;
			/* } else { */ case 6:
				d.error(errPhase);
				$panic(new $String("unreachable"));
			/* } */ case 7:
		case 1:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.valueInterface }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.valueInterface = function() { return this.$val.valueInterface(); };
	decodeState.ptr.prototype.arrayInterface = function() {
		var $ptr, _r$3, _r$4, _r$5, d, op, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; d = $f.d; op = $f.op; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		v = $makeSlice(sliceType, 0);
		/* while (true) { */ case 1:
			_r$3 = d.scanWhile(9); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			op = _r$3;
			if (op === 8) {
				/* break; */ $s = 2; continue;
			}
			d.off = d.off - (1) >> 0;
			d.scan.undo(op);
			_r$4 = d.valueInterface(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			v = $append(v, _r$4);
			_r$5 = d.scanWhile(9); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			op = _r$5;
			if (op === 8) {
				/* break; */ $s = 2; continue;
			}
			if (!((op === 7))) {
				d.error(errPhase);
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.arrayInterface }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.d = d; $f.op = op; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.arrayInterface = function() { return this.$val.arrayInterface(); };
	decodeState.ptr.prototype.objectInterface = function() {
		var $ptr, _key, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, d, item, key, m, ok, op, start, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; d = $f.d; item = $f.item; key = $f.key; m = $f.m; ok = $f.ok; op = $f.op; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		m = {};
		/* while (true) { */ case 1:
			_r$3 = d.scanWhile(9); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			op = _r$3;
			if (op === 5) {
				/* break; */ $s = 2; continue;
			}
			if (!((op === 1))) {
				d.error(errPhase);
			}
			start = d.off - 1 >> 0;
			_r$4 = d.scanWhile(0); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			op = _r$4;
			item = $subslice(d.data, start, (d.off - 1 >> 0));
			_tuple = unquote(item);
			key = _tuple[0];
			ok = _tuple[1];
			if (!ok) {
				d.error(errPhase);
			}
			/* */ if (op === 9) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (op === 9) { */ case 5:
				_r$5 = d.scanWhile(9); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				op = _r$5;
			/* } */ case 6:
			if (!((op === 3))) {
				d.error(errPhase);
			}
			_r$6 = d.valueInterface(); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_key = key; (m || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: _r$6 };
			_r$7 = d.scanWhile(9); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			op = _r$7;
			if (op === 5) {
				/* break; */ $s = 2; continue;
			}
			if (!((op === 4))) {
				d.error(errPhase);
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.objectInterface }; } $f.$ptr = $ptr; $f._key = _key; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f.d = d; $f.item = item; $f.key = key; $f.m = m; $f.ok = ok; $f.op = op; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.objectInterface = function() { return this.$val.objectInterface(); };
	decodeState.ptr.prototype.literalInterface = function() {
		var $ptr, _1, _r$3, _tuple, _tuple$1, c, d, err, item, n, ok, op, s, start, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; d = $f.d; err = $f.err; item = $f.item; n = $f.n; ok = $f.ok; op = $f.op; s = $f.s; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		start = d.off - 1 >> 0;
		_r$3 = d.scanWhile(0); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		op = _r$3;
		d.off = d.off - (1) >> 0;
		d.scan.undo(op);
		item = $subslice(d.data, start, d.off);
		c = (0 >= item.$length ? ($throwRuntimeError("index out of range"), undefined) : item.$array[item.$offset + 0]);
		_1 = c;
		if (_1 === (110)) {
			$s = -1; return $ifaceNil;
		} else if ((_1 === (116)) || (_1 === (102))) {
			$s = -1; return new $Bool((c === 116));
		} else if (_1 === (34)) {
			_tuple = unquote(item);
			s = _tuple[0];
			ok = _tuple[1];
			if (!ok) {
				d.error(errPhase);
			}
			$s = -1; return new $String(s);
		} else {
			if (!((c === 45)) && (c < 48 || c > 57)) {
				d.error(errPhase);
			}
			_tuple$1 = d.convertNumber($bytesToString(item));
			n = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.saveError(err);
			}
			$s = -1; return n;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.literalInterface }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.d = d; $f.err = err; $f.item = item; $f.n = n; $f.ok = ok; $f.op = op; $f.s = s; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.literalInterface = function() { return this.$val.literalInterface(); };
	getu4 = function(s) {
		var $ptr, _tuple, err, r, s;
		if (s.$length < 6 || !(((0 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 0]) === 92)) || !(((1 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 1]) === 117))) {
			return -1;
		}
		_tuple = strconv.ParseUint($bytesToString($subslice(s, 2, 6)), 16, 64);
		r = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return -1;
		}
		return (r.$low >> 0);
	};
	unquote = function(s) {
		var $ptr, _tuple, ok, s, t;
		t = "";
		ok = false;
		_tuple = unquoteBytes(s);
		s = _tuple[0];
		ok = _tuple[1];
		t = $bytesToString(s);
		return [t, ok];
	};
	unquoteBytes = function(s) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, b, c, c$1, dec, nb, ok, r, rr, rr$1, rr$2, rr1, s, size, size$1, t, w, x;
		t = sliceType$1.nil;
		ok = false;
		if (s.$length < 2 || !(((0 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 0]) === 34)) || !(((x = s.$length - 1 >> 0, ((x < 0 || x >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x])) === 34))) {
			return [t, ok];
		}
		s = $subslice(s, 1, (s.$length - 1 >> 0));
		r = 0;
		while (true) {
			if (!(r < s.$length)) { break; }
			c = ((r < 0 || r >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + r]);
			if ((c === 92) || (c === 34) || c < 32) {
				break;
			}
			if (c < 128) {
				r = r + (1) >> 0;
				continue;
			}
			_tuple = utf8.DecodeRune($subslice(s, r));
			rr = _tuple[0];
			size = _tuple[1];
			if ((rr === 65533) && (size === 1)) {
				break;
			}
			r = r + (size) >> 0;
		}
		if (r === s.$length) {
			_tmp = s;
			_tmp$1 = true;
			t = _tmp;
			ok = _tmp$1;
			return [t, ok];
		}
		b = $makeSlice(sliceType$1, (s.$length + 8 >> 0));
		w = $copySlice(b, $subslice(s, 0, r));
		while (true) {
			if (!(r < s.$length)) { break; }
			if (w >= (b.$length - 8 >> 0)) {
				nb = $makeSlice(sliceType$1, ($imul(((b.$length + 4 >> 0)), 2)));
				$copySlice(nb, $subslice(b, 0, w));
				b = nb;
			}
			c$1 = ((r < 0 || r >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + r]);
			if ((c$1 === 92)) {
				r = r + (1) >> 0;
				if (r >= s.$length) {
					return [t, ok];
				}
				switch (0) { default:
					_1 = ((r < 0 || r >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + r]);
					if ((_1 === (34)) || (_1 === (92)) || (_1 === (47)) || (_1 === (39))) {
						((w < 0 || w >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + w] = ((r < 0 || r >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + r]));
						r = r + (1) >> 0;
						w = w + (1) >> 0;
					} else if (_1 === (98)) {
						((w < 0 || w >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + w] = 8);
						r = r + (1) >> 0;
						w = w + (1) >> 0;
					} else if (_1 === (102)) {
						((w < 0 || w >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + w] = 12);
						r = r + (1) >> 0;
						w = w + (1) >> 0;
					} else if (_1 === (110)) {
						((w < 0 || w >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + w] = 10);
						r = r + (1) >> 0;
						w = w + (1) >> 0;
					} else if (_1 === (114)) {
						((w < 0 || w >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + w] = 13);
						r = r + (1) >> 0;
						w = w + (1) >> 0;
					} else if (_1 === (116)) {
						((w < 0 || w >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + w] = 9);
						r = r + (1) >> 0;
						w = w + (1) >> 0;
					} else if (_1 === (117)) {
						r = r - (1) >> 0;
						rr$1 = getu4($subslice(s, r));
						if (rr$1 < 0) {
							return [t, ok];
						}
						r = r + (6) >> 0;
						if (utf16.IsSurrogate(rr$1)) {
							rr1 = getu4($subslice(s, r));
							dec = utf16.DecodeRune(rr$1, rr1);
							if (!((dec === 65533))) {
								r = r + (6) >> 0;
								w = w + (utf8.EncodeRune($subslice(b, w), dec)) >> 0;
								break;
							}
							rr$1 = 65533;
						}
						w = w + (utf8.EncodeRune($subslice(b, w), rr$1)) >> 0;
					} else {
						return [t, ok];
					}
				}
			} else if (((c$1 === 34)) || (c$1 < 32)) {
				return [t, ok];
			} else if (c$1 < 128) {
				((w < 0 || w >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + w] = c$1);
				r = r + (1) >> 0;
				w = w + (1) >> 0;
			} else {
				_tuple$1 = utf8.DecodeRune($subslice(s, r));
				rr$2 = _tuple$1[0];
				size$1 = _tuple$1[1];
				r = r + (size$1) >> 0;
				w = w + (utf8.EncodeRune($subslice(b, w), rr$2)) >> 0;
			}
		}
		_tmp$2 = $subslice(b, 0, w);
		_tmp$3 = true;
		t = _tmp$2;
		ok = _tmp$3;
		return [t, ok];
	};
	isValidTag = function(s) {
		var $ptr, _i, _ref, _rune, c, s;
		if (s === "") {
			return false;
		}
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (strings.ContainsRune("!#$%&()*+-./:<=>?@[]^_{|}~ ", c)) {
			} else if (!unicode.IsLetter(c) && !unicode.IsDigit(c)) {
				return false;
			}
			_i += _rune[1];
		}
		return true;
	};
	fillField = function(f) {
		var $ptr, f;
		f.nameBytes = new sliceType$1($stringToBytes(f.name));
		f.equalFold = foldFunc(f.nameBytes);
		return f;
	};
	byIndex.prototype.Len = function() {
		var $ptr, x;
		x = this;
		return x.$length;
	};
	$ptrType(byIndex).prototype.Len = function() { return this.$get().Len(); };
	byIndex.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, x;
		x = this;
		_tmp = $clone(((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]), field);
		_tmp$1 = $clone(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), field);
		field.copy(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), _tmp);
		field.copy(((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]), _tmp$1);
	};
	$ptrType(byIndex).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	byIndex.prototype.Less = function(i, j) {
		var $ptr, _i, _ref, i, j, k, x, x$1, x$2, xik;
		x = this;
		_ref = ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]).index;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			k = _i;
			xik = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (k >= ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]).index.$length) {
				return false;
			}
			if (!((xik === (x$1 = ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]).index, ((k < 0 || k >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + k]))))) {
				return xik < (x$2 = ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]).index, ((k < 0 || k >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + k]));
			}
			_i++;
		}
		return ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]).index.$length < ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]).index.$length;
	};
	$ptrType(byIndex).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	typeFields = function(t) {
		var $ptr, _1, _entry, _entry$1, _entry$2, _entry$3, _i, _key, _key$1, _r$10, _r$11, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _v, _v$1, advance, count, current, dominant, f, fi, fields, fj, ft, i, i$1, index, name, name$1, next, nextCount, ok, opts, out, quoted, sf, t, tag, tagged, visited, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; _v$1 = $f._v$1; advance = $f.advance; count = $f.count; current = $f.current; dominant = $f.dominant; f = $f.f; fi = $f.fi; fields = $f.fields; fj = $f.fj; ft = $f.ft; i = $f.i; i$1 = $f.i$1; index = $f.index; name = $f.name; name$1 = $f.name$1; next = $f.next; nextCount = $f.nextCount; ok = $f.ok; opts = $f.opts; out = $f.out; quoted = $f.quoted; sf = $f.sf; t = $f.t; tag = $f.tag; tagged = $f.tagged; visited = $f.visited; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fields = [fields];
		current = new sliceType$3([]);
		next = new sliceType$3([new field.ptr("", sliceType$1.nil, $throwNilPointerError, false, sliceType$2.nil, t, false, false)]);
		count = $makeMap(reflect.Type.keyFor, []);
		nextCount = $makeMap(reflect.Type.keyFor, []);
		visited = $makeMap(reflect.Type.keyFor, []);
		fields[0] = sliceType$3.nil;
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next;
			_tmp$1 = $subslice(current, 0, 0);
			current = _tmp;
			next = _tmp$1;
			_tmp$2 = nextCount;
			_tmp$3 = $makeMap(reflect.Type.keyFor, []);
			count = _tmp$2;
			nextCount = _tmp$3;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				f = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), field);
				/* */ if ((_entry = visited[reflect.Type.keyFor(f.typ)], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((_entry = visited[reflect.Type.keyFor(f.typ)], _entry !== undefined ? _entry.v : false)) { */ case 5:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				_key = f.typ; (visited || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: true };
				i = 0;
				/* while (true) { */ case 7:
					_r$3 = f.typ.NumField(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* if (!(i < _r$3)) { break; } */ if(!(i < _r$3)) { $s = 8; continue; }
					_r$4 = f.typ.Field(i); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					sf = $clone(_r$4, reflect.StructField);
					/* */ if (!(sf.PkgPath === "") && !sf.Anonymous) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (!(sf.PkgPath === "") && !sf.Anonymous) { */ case 11:
						i = i + (1) >> 0;
						/* continue; */ $s = 7; continue;
					/* } */ case 12:
					tag = new reflect.StructTag(sf.Tag).Get("json");
					/* */ if (tag === "-") { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if (tag === "-") { */ case 13:
						i = i + (1) >> 0;
						/* continue; */ $s = 7; continue;
					/* } */ case 14:
					_tuple = parseTag(tag);
					name = _tuple[0];
					opts = _tuple[1];
					if (!isValidTag(name)) {
						name = "";
					}
					index = $makeSlice(sliceType$2, (f.index.$length + 1 >> 0));
					$copySlice(index, f.index);
					(x = f.index.$length, ((x < 0 || x >= index.$length) ? ($throwRuntimeError("index out of range"), undefined) : index.$array[index.$offset + x] = i));
					ft = sf.Type;
					_r$5 = ft.Name(); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					if (!(_r$5 === "")) { _v = false; $s = 17; continue s; }
					_r$6 = ft.Kind(); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_v = _r$6 === 22; case 17:
					/* */ if (_v) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (_v) { */ case 15:
						_r$7 = ft.Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						ft = _r$7;
					/* } */ case 16:
					quoted = false;
					/* */ if (new tagOptions(opts).Contains("string")) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (new tagOptions(opts).Contains("string")) { */ case 21:
							_r$8 = ft.Kind(); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
							_1 = _r$8;
							if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (13)) || (_1 === (14)) || (_1 === (24))) {
								quoted = true;
							}
						case 23:
					/* } */ case 22:
					if (!(name === "") || !sf.Anonymous) { _v$1 = true; $s = 27; continue s; }
					_r$9 = ft.Kind(); /* */ $s = 28; case 28: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_v$1 = !((_r$9 === 25)); case 27:
					/* */ if (_v$1) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (_v$1) { */ case 25:
						tagged = !(name === "");
						if (name === "") {
							name = sf.Name;
						}
						fields[0] = $append(fields[0], fillField(new field.ptr(name, sliceType$1.nil, $throwNilPointerError, tagged, index, ft, new tagOptions(opts).Contains("omitempty"), quoted)));
						if ((_entry$1 = count[reflect.Type.keyFor(f.typ)], _entry$1 !== undefined ? _entry$1.v : 0) > 1) {
							fields[0] = $append(fields[0], (x$1 = fields[0].$length - 1 >> 0, ((x$1 < 0 || x$1 >= fields[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : fields[0].$array[fields[0].$offset + x$1])));
						}
						i = i + (1) >> 0;
						/* continue; */ $s = 7; continue;
					/* } */ case 26:
					_key$1 = ft; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$1)] = { k: _key$1, v: (_entry$2 = nextCount[reflect.Type.keyFor(ft)], _entry$2 !== undefined ? _entry$2.v : 0) + (1) >> 0 };
					/* */ if ((_entry$3 = nextCount[reflect.Type.keyFor(ft)], _entry$3 !== undefined ? _entry$3.v : 0) === 1) { $s = 29; continue; }
					/* */ $s = 30; continue;
					/* if ((_entry$3 = nextCount[reflect.Type.keyFor(ft)], _entry$3 !== undefined ? _entry$3.v : 0) === 1) { */ case 29:
						_r$10 = ft.Name(); /* */ $s = 31; case 31: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						_r$11 = fillField(new field.ptr(_r$10, sliceType$1.nil, $throwNilPointerError, false, index, ft, false, false)); /* */ $s = 32; case 32: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						next = $append(next, _r$11);
					/* } */ case 30:
					i = i + (1) >> 0;
				/* } */ $s = 7; continue; case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
		/* } */ $s = 1; continue; case 2:
		$r = sort.Slice(fields[0], (function(fields) { return function(i$1, j) {
			var $ptr, i$1, j, x$2;
			x$2 = fields[0];
			if (!(((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]).name === ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j]).name)) {
				return ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]).name < ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j]).name;
			}
			if (!((((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]).index.$length === ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j]).index.$length))) {
				return ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]).index.$length < ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j]).index.$length;
			}
			if (!(((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]).tag === ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j]).tag)) {
				return ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]).tag;
			}
			return $subslice(new byIndex(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length).Less(i$1, j);
		}; })(fields)); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		out = $subslice(fields[0], 0, 0);
		_tmp$4 = 0;
		_tmp$5 = 0;
		advance = _tmp$4;
		i$1 = _tmp$5;
		/* while (true) { */ case 34:
			/* if (!(i$1 < fields[0].$length)) { break; } */ if(!(i$1 < fields[0].$length)) { $s = 35; continue; }
			fi = $clone(((i$1 < 0 || i$1 >= fields[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : fields[0].$array[fields[0].$offset + i$1]), field);
			name$1 = fi.name;
			advance = 1;
			while (true) {
				if (!((i$1 + advance >> 0) < fields[0].$length)) { break; }
				fj = $clone((x$2 = i$1 + advance >> 0, ((x$2 < 0 || x$2 >= fields[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : fields[0].$array[fields[0].$offset + x$2])), field);
				if (!(fj.name === name$1)) {
					break;
				}
				advance = advance + (1) >> 0;
			}
			if (advance === 1) {
				out = $append(out, fi);
				i$1 = i$1 + (advance) >> 0;
				/* continue; */ $s = 34; continue;
			}
			_tuple$1 = dominantField($subslice(fields[0], i$1, (i$1 + advance >> 0)));
			dominant = $clone(_tuple$1[0], field);
			ok = _tuple$1[1];
			if (ok) {
				out = $append(out, dominant);
			}
			i$1 = i$1 + (advance) >> 0;
		/* } */ $s = 34; continue; case 35:
		fields[0] = out;
		$r = sort.Sort($subslice(new byIndex(fields[0].$array), fields[0].$offset, fields[0].$offset + fields[0].$length)); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return fields[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: typeFields }; } $f.$ptr = $ptr; $f._1 = _1; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f._v$1 = _v$1; $f.advance = advance; $f.count = count; $f.current = current; $f.dominant = dominant; $f.f = f; $f.fi = fi; $f.fields = fields; $f.fj = fj; $f.ft = ft; $f.i = i; $f.i$1 = i$1; $f.index = index; $f.name = name; $f.name$1 = name$1; $f.next = next; $f.nextCount = nextCount; $f.ok = ok; $f.opts = opts; $f.out = out; $f.quoted = quoted; $f.sf = sf; $f.t = t; $f.tag = tag; $f.tagged = tagged; $f.visited = visited; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	dominantField = function(fields) {
		var $ptr, _i, _ref, f, fields, i, length, tagged;
		length = (0 >= fields.$length ? ($throwRuntimeError("index out of range"), undefined) : fields.$array[fields.$offset + 0]).index.$length;
		tagged = -1;
		_ref = fields;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			f = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), field);
			if (f.index.$length > length) {
				fields = $subslice(fields, 0, i);
				break;
			}
			if (f.tag) {
				if (tagged >= 0) {
					return [new field.ptr("", sliceType$1.nil, $throwNilPointerError, false, sliceType$2.nil, $ifaceNil, false, false), false];
				}
				tagged = i;
			}
			_i++;
		}
		if (tagged >= 0) {
			return [((tagged < 0 || tagged >= fields.$length) ? ($throwRuntimeError("index out of range"), undefined) : fields.$array[fields.$offset + tagged]), true];
		}
		if (fields.$length > 1) {
			return [new field.ptr("", sliceType$1.nil, $throwNilPointerError, false, sliceType$2.nil, $ifaceNil, false, false), false];
		}
		return [(0 >= fields.$length ? ($throwRuntimeError("index out of range"), undefined) : fields.$array[fields.$offset + 0]), true];
	};
	cachedTypeFields = function(t) {
		var $ptr, _entry, _entry$1, _i, _key, _key$1, _keys, _r$3, _ref, _tuple, _tuple$1, f, k, m, newM, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _keys = $f._keys; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; f = $f.f; k = $f.k; m = $f.m; newM = $f.newM; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(fieldCache.value.Load(), mapType$2, true);
		m = _tuple[0];
		f = (_entry = m[reflect.Type.keyFor(t)], _entry !== undefined ? _entry.v : sliceType$3.nil);
		if (!(f === sliceType$3.nil)) {
			$s = -1; return f;
		}
		_r$3 = typeFields(t); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		f = _r$3;
		if (f === sliceType$3.nil) {
			f = new sliceType$3([]);
		}
		fieldCache.mu.Lock();
		_tuple$1 = $assertType(fieldCache.value.Load(), mapType$2, true);
		m = _tuple$1[0];
		newM = (x = $keys(m).length + 1 >> 0, ((x < 0 || x > 2147483647) ? $throwRuntimeError("makemap: size out of range") : {}));
		_ref = m;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry$1 = _ref[_keys[_i]];
			if (_entry$1 === undefined) {
				_i++;
				continue;
			}
			k = _entry$1.k;
			v = _entry$1.v;
			_key = k; (newM || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: v };
			_i++;
		}
		_key$1 = t; (newM || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$1)] = { k: _key$1, v: f };
		fieldCache.value.Store(new mapType$2(newM));
		fieldCache.mu.Unlock();
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cachedTypeFields }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._keys = _keys; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.f = f; $f.k = k; $f.m = m; $f.newM = newM; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	foldFunc = function(s) {
		var $ptr, _i, _ref, b, nonLetter, s, special, upper;
		nonLetter = false;
		special = false;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b >= 128) {
				return bytes.EqualFold;
			}
			upper = (b & 223) >>> 0;
			if (upper < 65 || upper > 90) {
				nonLetter = true;
			} else if ((upper === 75) || (upper === 83)) {
				special = true;
			}
			_i++;
		}
		if (special) {
			return equalFoldRight;
		}
		if (nonLetter) {
			return asciiEqualFold;
		}
		return simpleLetterEqualFold;
	};
	equalFoldRight = function(s, t) {
		var $ptr, _1, _i, _ref, _tuple, s, sb, sbUpper, size, t, tb, tr;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			sb = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (t.$length === 0) {
				return false;
			}
			tb = (0 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 0]);
			if (tb < 128) {
				if (!((sb === tb))) {
					sbUpper = (sb & 223) >>> 0;
					if (65 <= sbUpper && sbUpper <= 90) {
						if (!((sbUpper === ((tb & 223) >>> 0)))) {
							return false;
						}
					} else {
						return false;
					}
				}
				t = $subslice(t, 1);
				_i++;
				continue;
			}
			_tuple = utf8.DecodeRune(t);
			tr = _tuple[0];
			size = _tuple[1];
			_1 = sb;
			if ((_1 === (115)) || (_1 === (83))) {
				if (!((tr === 383))) {
					return false;
				}
			} else if ((_1 === (107)) || (_1 === (75))) {
				if (!((tr === 8490))) {
					return false;
				}
			} else {
				return false;
			}
			t = $subslice(t, size);
			_i++;
		}
		if (t.$length > 0) {
			return false;
		}
		return true;
	};
	asciiEqualFold = function(s, t) {
		var $ptr, _i, _ref, i, s, sb, t, tb;
		if (!((s.$length === t.$length))) {
			return false;
		}
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			sb = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			tb = ((i < 0 || i >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + i]);
			if (sb === tb) {
				_i++;
				continue;
			}
			if ((97 <= sb && sb <= 122) || (65 <= sb && sb <= 90)) {
				if (!((((sb & 223) >>> 0) === ((tb & 223) >>> 0)))) {
					return false;
				}
			} else {
				return false;
			}
			_i++;
		}
		return true;
	};
	simpleLetterEqualFold = function(s, t) {
		var $ptr, _i, _ref, b, i, s, t;
		if (!((s.$length === t.$length))) {
			return false;
		}
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((((b & 223) >>> 0) === ((((i < 0 || i >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + i]) & 223) >>> 0)))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	nextValue = function(data, scan) {
		var $ptr, _1, _i, _r$3, _r$4, _r$5, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, data, err, i, rest, scan, v, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; c = $f.c; data = $f.data; err = $f.err; i = $f.i; rest = $f.rest; scan = $f.scan; v = $f.v; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = sliceType$1.nil;
		rest = sliceType$1.nil;
		err = $ifaceNil;
		scan.reset();
		_ref = data;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$3 = scan.step(scan, c); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			/* */ if (v >= 5) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (v >= 5) { */ case 4:
					_1 = v;
					/* */ if ((_1 === (5)) || (_1 === (8))) { $s = 7; continue; }
					/* */ if (_1 === (11)) { $s = 8; continue; }
					/* */ if (_1 === (10)) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if ((_1 === (5)) || (_1 === (8))) { */ case 7:
						_r$4 = scan.step(scan, 32); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						/* */ if (_r$4 === 10) { $s = 11; continue; }
						/* */ $s = 12; continue;
						/* if (_r$4 === 10) { */ case 11:
							_tmp = $subslice(data, 0, (i + 1 >> 0));
							_tmp$1 = $subslice(data, (i + 1 >> 0));
							_tmp$2 = $ifaceNil;
							value = _tmp;
							rest = _tmp$1;
							err = _tmp$2;
							$s = -1; return [value, rest, err];
						/* } */ case 12:
						$s = 10; continue;
					/* } else if (_1 === (11)) { */ case 8:
						_tmp$3 = sliceType$1.nil;
						_tmp$4 = sliceType$1.nil;
						_tmp$5 = scan.err;
						value = _tmp$3;
						rest = _tmp$4;
						err = _tmp$5;
						$s = -1; return [value, rest, err];
					/* } else if (_1 === (10)) { */ case 9:
						_tmp$6 = $subslice(data, 0, i);
						_tmp$7 = $subslice(data, i);
						_tmp$8 = $ifaceNil;
						value = _tmp$6;
						rest = _tmp$7;
						err = _tmp$8;
						$s = -1; return [value, rest, err];
					/* } */ case 10:
				case 6:
			/* } */ case 5:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$5 = scan.eof(); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		/* */ if (_r$5 === 11) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (_r$5 === 11) { */ case 14:
			_tmp$9 = sliceType$1.nil;
			_tmp$10 = sliceType$1.nil;
			_tmp$11 = scan.err;
			value = _tmp$9;
			rest = _tmp$10;
			err = _tmp$11;
			$s = -1; return [value, rest, err];
		/* } */ case 15:
		_tmp$12 = data;
		_tmp$13 = sliceType$1.nil;
		_tmp$14 = $ifaceNil;
		value = _tmp$12;
		rest = _tmp$13;
		err = _tmp$14;
		$s = -1; return [value, rest, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: nextValue }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f.c = c; $f.data = data; $f.err = err; $f.i = i; $f.rest = rest; $f.scan = scan; $f.v = v; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyntaxError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return e.msg;
	};
	SyntaxError.prototype.Error = function() { return this.$val.Error(); };
	scanner.ptr.prototype.reset = function() {
		var $ptr, s;
		s = this;
		s.step = stateBeginValue;
		s.parseState = $subslice(s.parseState, 0, 0);
		s.err = $ifaceNil;
		s.redo = false;
		s.endTop = false;
	};
	scanner.prototype.reset = function() { return this.$val.reset(); };
	scanner.ptr.prototype.eof = function() {
		var $ptr, _r$3, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!($interfaceIsEqual(s.err, $ifaceNil))) {
			$s = -1; return 11;
		}
		if (s.endTop) {
			$s = -1; return 10;
		}
		_r$3 = s.step(s, 32); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		if (s.endTop) {
			$s = -1; return 10;
		}
		if ($interfaceIsEqual(s.err, $ifaceNil)) {
			s.err = new SyntaxError.ptr("unexpected end of JSON input", s.bytes);
		}
		$s = -1; return 11;
		/* */ } return; } if ($f === undefined) { $f = { $blk: scanner.ptr.prototype.eof }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	scanner.prototype.eof = function() { return this.$val.eof(); };
	scanner.ptr.prototype.pushParseState = function(p) {
		var $ptr, p, s;
		s = this;
		s.parseState = $append(s.parseState, p);
	};
	scanner.prototype.pushParseState = function(p) { return this.$val.pushParseState(p); };
	scanner.ptr.prototype.popParseState = function() {
		var $ptr, n, s;
		s = this;
		n = s.parseState.$length - 1 >> 0;
		s.parseState = $subslice(s.parseState, 0, n);
		s.redo = false;
		if (n === 0) {
			s.step = stateEndTop;
			s.endTop = true;
		} else {
			s.step = stateEndValue;
		}
	};
	scanner.prototype.popParseState = function() { return this.$val.popParseState(); };
	isSpace = function(c) {
		var $ptr, c;
		return (c === 32) || (c === 9) || (c === 13) || (c === 10);
	};
	stateBeginValueOrEmpty = function(s, c) {
		var $ptr, c, s;
		if (c <= 32 && isSpace(c)) {
			return 9;
		}
		if (c === 93) {
			return stateEndValue(s, c);
		}
		return stateBeginValue(s, c);
	};
	stateBeginValue = function(s, c) {
		var $ptr, _1, c, s;
		if (c <= 32 && isSpace(c)) {
			return 9;
		}
		_1 = c;
		if (_1 === (123)) {
			s.step = stateBeginStringOrEmpty;
			s.pushParseState(0);
			return 2;
		} else if (_1 === (91)) {
			s.step = stateBeginValueOrEmpty;
			s.pushParseState(2);
			return 6;
		} else if (_1 === (34)) {
			s.step = stateInString;
			return 1;
		} else if (_1 === (45)) {
			s.step = stateNeg;
			return 1;
		} else if (_1 === (48)) {
			s.step = state0;
			return 1;
		} else if (_1 === (116)) {
			s.step = stateT;
			return 1;
		} else if (_1 === (102)) {
			s.step = stateF;
			return 1;
		} else if (_1 === (110)) {
			s.step = stateN;
			return 1;
		}
		if (49 <= c && c <= 57) {
			s.step = state1;
			return 1;
		}
		return s.error(c, "looking for beginning of value");
	};
	stateBeginStringOrEmpty = function(s, c) {
		var $ptr, c, n, s, x, x$1;
		if (c <= 32 && isSpace(c)) {
			return 9;
		}
		if (c === 125) {
			n = s.parseState.$length;
			(x = s.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = 1));
			return stateEndValue(s, c);
		}
		return stateBeginString(s, c);
	};
	stateBeginString = function(s, c) {
		var $ptr, c, s;
		if (c <= 32 && isSpace(c)) {
			return 9;
		}
		if (c === 34) {
			s.step = stateInString;
			return 1;
		}
		return s.error(c, "looking for beginning of object key string");
	};
	stateEndValue = function(s, c) {
		var $ptr, _1, c, n, ps, s, x, x$1, x$2, x$3, x$4, x$5;
		n = s.parseState.$length;
		if (n === 0) {
			s.step = stateEndTop;
			s.endTop = true;
			return stateEndTop(s, c);
		}
		if (c <= 32 && isSpace(c)) {
			s.step = stateEndValue;
			return 9;
		}
		ps = (x = s.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		_1 = ps;
		if (_1 === (0)) {
			if (c === 58) {
				(x$2 = s.parseState, x$3 = n - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3] = 1));
				s.step = stateBeginValue;
				return 3;
			}
			return s.error(c, "after object key");
		} else if (_1 === (1)) {
			if (c === 44) {
				(x$4 = s.parseState, x$5 = n - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5] = 0));
				s.step = stateBeginString;
				return 4;
			}
			if (c === 125) {
				s.popParseState();
				return 5;
			}
			return s.error(c, "after object key:value pair");
		} else if (_1 === (2)) {
			if (c === 44) {
				s.step = stateBeginValue;
				return 7;
			}
			if (c === 93) {
				s.popParseState();
				return 8;
			}
			return s.error(c, "after array element");
		}
		return s.error(c, "");
	};
	stateEndTop = function(s, c) {
		var $ptr, c, s;
		if (!((c === 32)) && !((c === 9)) && !((c === 13)) && !((c === 10))) {
			s.error(c, "after top-level value");
		}
		return 10;
	};
	stateInString = function(s, c) {
		var $ptr, c, s;
		if (c === 34) {
			s.step = stateEndValue;
			return 0;
		}
		if (c === 92) {
			s.step = stateInStringEsc;
			return 0;
		}
		if (c < 32) {
			return s.error(c, "in string literal");
		}
		return 0;
	};
	stateInStringEsc = function(s, c) {
		var $ptr, _1, c, s;
		_1 = c;
		if ((_1 === (98)) || (_1 === (102)) || (_1 === (110)) || (_1 === (114)) || (_1 === (116)) || (_1 === (92)) || (_1 === (47)) || (_1 === (34))) {
			s.step = stateInString;
			return 0;
		} else if (_1 === (117)) {
			s.step = stateInStringEscU;
			return 0;
		}
		return s.error(c, "in string escape code");
	};
	stateInStringEscU = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU1;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU1 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU12;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU12 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU123;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU123 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInString;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateNeg = function(s, c) {
		var $ptr, c, s;
		if (c === 48) {
			s.step = state0;
			return 0;
		}
		if (49 <= c && c <= 57) {
			s.step = state1;
			return 0;
		}
		return s.error(c, "in numeric literal");
	};
	state1 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57) {
			s.step = state1;
			return 0;
		}
		return state0(s, c);
	};
	state0 = function(s, c) {
		var $ptr, c, s;
		if (c === 46) {
			s.step = stateDot;
			return 0;
		}
		if ((c === 101) || (c === 69)) {
			s.step = stateE;
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateDot = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57) {
			s.step = stateDot0;
			return 0;
		}
		return s.error(c, "after decimal point in numeric literal");
	};
	stateDot0 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57) {
			return 0;
		}
		if ((c === 101) || (c === 69)) {
			s.step = stateE;
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateE = function(s, c) {
		var $ptr, c, s;
		if ((c === 43) || (c === 45)) {
			s.step = stateESign;
			return 0;
		}
		return stateESign(s, c);
	};
	stateESign = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57) {
			s.step = stateE0;
			return 0;
		}
		return s.error(c, "in exponent of numeric literal");
	};
	stateE0 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57) {
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateT = function(s, c) {
		var $ptr, c, s;
		if (c === 114) {
			s.step = stateTr;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'r')");
	};
	stateTr = function(s, c) {
		var $ptr, c, s;
		if (c === 117) {
			s.step = stateTru;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'u')");
	};
	stateTru = function(s, c) {
		var $ptr, c, s;
		if (c === 101) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'e')");
	};
	stateF = function(s, c) {
		var $ptr, c, s;
		if (c === 97) {
			s.step = stateFa;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'a')");
	};
	stateFa = function(s, c) {
		var $ptr, c, s;
		if (c === 108) {
			s.step = stateFal;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'l')");
	};
	stateFal = function(s, c) {
		var $ptr, c, s;
		if (c === 115) {
			s.step = stateFals;
			return 0;
		}
		return s.error(c, "in literal false (expecting 's')");
	};
	stateFals = function(s, c) {
		var $ptr, c, s;
		if (c === 101) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'e')");
	};
	stateN = function(s, c) {
		var $ptr, c, s;
		if (c === 117) {
			s.step = stateNu;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'u')");
	};
	stateNu = function(s, c) {
		var $ptr, c, s;
		if (c === 108) {
			s.step = stateNul;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'l')");
	};
	stateNul = function(s, c) {
		var $ptr, c, s;
		if (c === 108) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'l')");
	};
	stateError = function(s, c) {
		var $ptr, c, s;
		return 11;
	};
	scanner.ptr.prototype.error = function(c, context) {
		var $ptr, c, context, s;
		s = this;
		s.step = stateError;
		s.err = new SyntaxError.ptr("invalid character " + quoteChar(c) + " " + context, s.bytes);
		return 11;
	};
	scanner.prototype.error = function(c, context) { return this.$val.error(c, context); };
	quoteChar = function(c) {
		var $ptr, c, s;
		if (c === 39) {
			return "'\\''";
		}
		if (c === 34) {
			return "'\"'";
		}
		s = strconv.Quote($encodeRune(c));
		return "'" + $substring(s, 1, (s.length - 1 >> 0)) + "'";
	};
	scanner.ptr.prototype.undo = function(scanCode) {
		var $ptr, s, scanCode;
		s = this;
		if (s.redo) {
			$panic(new $String("json: invalid use of scanner"));
		}
		s.redoCode = scanCode;
		s.redoState = s.step;
		s.step = stateRedo;
		s.redo = true;
	};
	scanner.prototype.undo = function(scanCode) { return this.$val.undo(scanCode); };
	stateRedo = function(s, c) {
		var $ptr, c, s;
		s.redo = false;
		s.step = s.redoState;
		return s.redoCode;
	};
	NewDecoder = function(r) {
		var $ptr, r;
		return new Decoder.ptr(r, sliceType$1.nil, new decodeState.ptr(sliceType$1.nil, 0, new scanner.ptr($throwNilPointerError, false, sliceType$2.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0)), new scanner.ptr($throwNilPointerError, false, sliceType$2.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0)), new structType$2.ptr("", ""), $ifaceNil, false), 0, new scanner.ptr($throwNilPointerError, false, sliceType$2.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0)), $ifaceNil, 0, sliceType$2.nil);
	};
	$pkg.NewDecoder = NewDecoder;
	Decoder.ptr.prototype.UseNumber = function() {
		var $ptr, dec;
		dec = this;
		dec.d.useNumber = true;
	};
	Decoder.prototype.UseNumber = function() { return this.$val.UseNumber(); };
	Decoder.ptr.prototype.Decode = function(v) {
		var $ptr, _r$3, _r$4, _r$5, _tuple, dec, err, err$1, n, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; dec = $f.dec; err = $f.err; err$1 = $f.err$1; n = $f.n; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		if (!($interfaceIsEqual(dec.err, $ifaceNil))) {
			$s = -1; return dec.err;
		}
		_r$3 = dec.tokenPrepareForDecode(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err = _r$3;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		if (!dec.tokenValueAllowed()) {
			$s = -1; return new SyntaxError.ptr("not at beginning of value", new $Int64(0, 0));
		}
		_r$4 = dec.readValue(); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		n = _tuple[0];
		err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		dec.d.init($subslice(dec.buf, dec.scanp, (dec.scanp + n >> 0)));
		dec.scanp = dec.scanp + (n) >> 0;
		_r$5 = dec.d.unmarshal(v); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		err$1 = _r$5;
		dec.tokenValueEnd();
		$s = -1; return err$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.Decode }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.dec = dec; $f.err = err; $f.err$1 = err$1; $f.n = n; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.Decode = function(v) { return this.$val.Decode(v); };
	Decoder.ptr.prototype.Buffered = function() {
		var $ptr, dec;
		dec = this;
		return bytes.NewReader($subslice(dec.buf, dec.scanp));
	};
	Decoder.prototype.Buffered = function() { return this.$val.Buffered(); };
	Decoder.ptr.prototype.readValue = function() {
		var $ptr, _i, _r$3, _r$4, _r$5, _r$6, _ref, _v, c, dec, err, i, n, scanp, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _v = $f._v; c = $f.c; dec = $f.dec; err = $f.err; i = $f.i; n = $f.n; scanp = $f.scanp; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		dec.scan.reset();
		scanp = dec.scanp;
		err = $ifaceNil;
		/* while (true) { */ case 1:
			_ref = $subslice(dec.buf, scanp);
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				i = _i;
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				dec.scan.bytes = (x = dec.scan.bytes, x$1 = new $Int64(0, 1), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
				_r$3 = dec.scan.step(dec.scan, c); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				v = _r$3;
				if (v === 10) {
					scanp = scanp + (i) >> 0;
					/* break Input; */ $s = 2; continue s;
				}
				if (!((v === 5) || (v === 8))) { _v = false; $s = 8; continue s; }
				_r$4 = dec.scan.step(dec.scan, 32); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_v = _r$4 === 10; case 8:
				/* */ if (_v) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (_v) { */ case 6:
					scanp = scanp + ((i + 1 >> 0)) >> 0;
					/* break Input; */ $s = 2; continue s;
				/* } */ case 7:
				if (v === 11) {
					dec.err = dec.scan.err;
					$s = -1; return [0, dec.scan.err];
				}
				_i++;
			/* } */ $s = 3; continue; case 4:
			scanp = dec.buf.$length;
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 10:
				/* */ if ($interfaceIsEqual(err, io.EOF)) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if ($interfaceIsEqual(err, io.EOF)) { */ case 12:
					_r$5 = dec.scan.step(dec.scan, 32); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					/* */ if (_r$5 === 10) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (_r$5 === 10) { */ case 14:
						/* break Input; */ $s = 2; continue s;
					/* } */ case 15:
					if (nonSpace(dec.buf)) {
						err = io.ErrUnexpectedEOF;
					}
				/* } */ case 13:
				dec.err = err;
				$s = -1; return [0, err];
			/* } */ case 11:
			n = scanp - dec.scanp >> 0;
			_r$6 = dec.refill(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			err = _r$6;
			scanp = dec.scanp + n >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [scanp - dec.scanp >> 0, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.readValue }; } $f.$ptr = $ptr; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._v = _v; $f.c = c; $f.dec = dec; $f.err = err; $f.i = i; $f.n = n; $f.scanp = scanp; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.readValue = function() { return this.$val.readValue(); };
	Decoder.ptr.prototype.refill = function() {
		var $ptr, _r$3, _tuple, dec, err, n, n$1, newBuf, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _tuple = $f._tuple; dec = $f.dec; err = $f.err; n = $f.n; n$1 = $f.n$1; newBuf = $f.newBuf; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		if (dec.scanp > 0) {
			n = $copySlice(dec.buf, $subslice(dec.buf, dec.scanp));
			dec.buf = $subslice(dec.buf, 0, n);
			dec.scanp = 0;
		}
		if ((dec.buf.$capacity - dec.buf.$length >> 0) < 512) {
			newBuf = $makeSlice(sliceType$1, dec.buf.$length, (($imul(2, dec.buf.$capacity)) + 512 >> 0));
			$copySlice(newBuf, dec.buf);
			dec.buf = newBuf;
		}
		_r$3 = dec.r.Read($subslice(dec.buf, dec.buf.$length, dec.buf.$capacity)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n$1 = _tuple[0];
		err = _tuple[1];
		dec.buf = $subslice(dec.buf, 0, (dec.buf.$length + n$1 >> 0));
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.refill }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._tuple = _tuple; $f.dec = dec; $f.err = err; $f.n = n; $f.n$1 = n$1; $f.newBuf = newBuf; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.refill = function() { return this.$val.refill(); };
	nonSpace = function(b) {
		var $ptr, _i, _ref, b, c;
		_ref = b;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!isSpace(c)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Decoder.ptr.prototype.tokenPrepareForDecode = function() {
		var $ptr, _1, _r$3, _r$4, _tuple, _tuple$1, c, c$1, dec, err, err$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; c$1 = $f.c$1; dec = $f.dec; err = $f.err; err$1 = $f.err$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
			_1 = dec.tokenState;
			/* */ if (_1 === (3)) { $s = 2; continue; }
			/* */ if (_1 === (6)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (3)) { */ case 2:
				_r$3 = dec.peek(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple = _r$3;
				c = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return err;
				}
				if (!((c === 44))) {
					$s = -1; return new SyntaxError.ptr("expected comma after array element", new $Int64(0, 0));
				}
				dec.scanp = dec.scanp + (1) >> 0;
				dec.tokenState = 2;
				$s = 4; continue;
			/* } else if (_1 === (6)) { */ case 3:
				_r$4 = dec.peek(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$1 = _r$4;
				c$1 = _tuple$1[0];
				err$1 = _tuple$1[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
				}
				if (!((c$1 === 58))) {
					$s = -1; return new SyntaxError.ptr("expected colon after object key", new $Int64(0, 0));
				}
				dec.scanp = dec.scanp + (1) >> 0;
				dec.tokenState = 7;
			/* } */ case 4:
		case 1:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.tokenPrepareForDecode }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.c$1 = c$1; $f.dec = dec; $f.err = err; $f.err$1 = err$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.tokenPrepareForDecode = function() { return this.$val.tokenPrepareForDecode(); };
	Decoder.ptr.prototype.tokenValueAllowed = function() {
		var $ptr, _1, dec;
		dec = this;
		_1 = dec.tokenState;
		if ((_1 === (0)) || (_1 === (1)) || (_1 === (2)) || (_1 === (7))) {
			return true;
		}
		return false;
	};
	Decoder.prototype.tokenValueAllowed = function() { return this.$val.tokenValueAllowed(); };
	Decoder.ptr.prototype.tokenValueEnd = function() {
		var $ptr, _1, dec;
		dec = this;
		_1 = dec.tokenState;
		if ((_1 === (1)) || (_1 === (2))) {
			dec.tokenState = 3;
		} else if (_1 === (7)) {
			dec.tokenState = 8;
		}
	};
	Decoder.prototype.tokenValueEnd = function() { return this.$val.tokenValueEnd(); };
	Delim.prototype.String = function() {
		var $ptr, d;
		d = this.$val;
		return $encodeRune(d);
	};
	$ptrType(Delim).prototype.String = function() { return new Delim(this.$get()).String(); };
	Decoder.ptr.prototype.Token = function() {
		var $ptr, _1, _r$3, _r$4, _r$5, _r$6, _tuple, c, dec, err, err$1, err$2, old, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; c = $f.c; dec = $f.dec; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; old = $f.old; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		/* while (true) { */ case 1:
			x = [x];
			x$1 = [x$1];
			_r$3 = dec.peek(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			c = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [$ifaceNil, err];
			}
				_1 = c;
				/* */ if (_1 === (91)) { $s = 5; continue; }
				/* */ if (_1 === (93)) { $s = 6; continue; }
				/* */ if (_1 === (123)) { $s = 7; continue; }
				/* */ if (_1 === (125)) { $s = 8; continue; }
				/* */ if (_1 === (58)) { $s = 9; continue; }
				/* */ if (_1 === (44)) { $s = 10; continue; }
				/* */ if (_1 === (34)) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (_1 === (91)) { */ case 5:
					if (!dec.tokenValueAllowed()) {
						$s = -1; return dec.tokenError(c);
					}
					dec.scanp = dec.scanp + (1) >> 0;
					dec.tokenStack = $append(dec.tokenStack, dec.tokenState);
					dec.tokenState = 1;
					$s = -1; return [new Delim(91), $ifaceNil];
				/* } else if (_1 === (93)) { */ case 6:
					if (!((dec.tokenState === 1)) && !((dec.tokenState === 3))) {
						$s = -1; return dec.tokenError(c);
					}
					dec.scanp = dec.scanp + (1) >> 0;
					dec.tokenState = (x$2 = dec.tokenStack, x$3 = dec.tokenStack.$length - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]));
					dec.tokenStack = $subslice(dec.tokenStack, 0, (dec.tokenStack.$length - 1 >> 0));
					dec.tokenValueEnd();
					$s = -1; return [new Delim(93), $ifaceNil];
				/* } else if (_1 === (123)) { */ case 7:
					if (!dec.tokenValueAllowed()) {
						$s = -1; return dec.tokenError(c);
					}
					dec.scanp = dec.scanp + (1) >> 0;
					dec.tokenStack = $append(dec.tokenStack, dec.tokenState);
					dec.tokenState = 4;
					$s = -1; return [new Delim(123), $ifaceNil];
				/* } else if (_1 === (125)) { */ case 8:
					if (!((dec.tokenState === 4)) && !((dec.tokenState === 8))) {
						$s = -1; return dec.tokenError(c);
					}
					dec.scanp = dec.scanp + (1) >> 0;
					dec.tokenState = (x$4 = dec.tokenStack, x$5 = dec.tokenStack.$length - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5]));
					dec.tokenStack = $subslice(dec.tokenStack, 0, (dec.tokenStack.$length - 1 >> 0));
					dec.tokenValueEnd();
					$s = -1; return [new Delim(125), $ifaceNil];
				/* } else if (_1 === (58)) { */ case 9:
					if (!((dec.tokenState === 6))) {
						$s = -1; return dec.tokenError(c);
					}
					dec.scanp = dec.scanp + (1) >> 0;
					dec.tokenState = 7;
					/* continue; */ $s = 1; continue;
					$s = 13; continue;
				/* } else if (_1 === (44)) { */ case 10:
					/* */ if (dec.tokenState === 3) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (dec.tokenState === 3) { */ case 14:
						dec.scanp = dec.scanp + (1) >> 0;
						dec.tokenState = 2;
						/* continue; */ $s = 1; continue;
					/* } */ case 15:
					if (dec.tokenState === 8) {
						dec.scanp = dec.scanp + (1) >> 0;
						dec.tokenState = 5;
						/* continue; */ $s = 1; continue;
					}
					$s = -1; return dec.tokenError(c);
				/* } else if (_1 === (34)) { */ case 11:
					/* */ if ((dec.tokenState === 4) || (dec.tokenState === 5)) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if ((dec.tokenState === 4) || (dec.tokenState === 5)) { */ case 16:
						x[0] = "";
						old = dec.tokenState;
						dec.tokenState = 0;
						_r$4 = dec.Decode((x.$ptr || (x.$ptr = new ptrType$9(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, x)))); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						err$1 = _r$4;
						dec.tokenState = old;
						if (!($interfaceIsEqual(err$1, $ifaceNil))) {
							clearOffset(err$1);
							$s = -1; return [$ifaceNil, err$1];
						}
						dec.tokenState = 6;
						$s = -1; return [new $String(x[0]), $ifaceNil];
					/* } */ case 17:
					if (!dec.tokenValueAllowed()) {
						$s = -1; return dec.tokenError(c);
					}
					x$1[0] = $ifaceNil;
					_r$5 = dec.Decode((x$1.$ptr || (x$1.$ptr = new ptrType$10(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, x$1)))); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					err$2 = _r$5;
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						clearOffset(err$2);
						$s = -1; return [$ifaceNil, err$2];
					}
					$s = -1; return [x$1[0], $ifaceNil];
				/* } else { */ case 12:
					if (!dec.tokenValueAllowed()) {
						$s = -1; return dec.tokenError(c);
					}
					x$1[0] = $ifaceNil;
					_r$6 = dec.Decode((x$1.$ptr || (x$1.$ptr = new ptrType$10(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, x$1)))); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					err$2 = _r$6;
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						clearOffset(err$2);
						$s = -1; return [$ifaceNil, err$2];
					}
					$s = -1; return [x$1[0], $ifaceNil];
				/* } */ case 13:
			case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [$ifaceNil, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.Token }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.c = c; $f.dec = dec; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.old = old; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.Token = function() { return this.$val.Token(); };
	clearOffset = function(err) {
		var $ptr, _tuple, err, ok, s;
		_tuple = $assertType(err, ptrType$11, true);
		s = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			s.Offset = new $Int64(0, 0);
		}
	};
	Decoder.ptr.prototype.tokenError = function(c) {
		var $ptr, _1, c, context, dec;
		dec = this;
		context = "";
		_1 = dec.tokenState;
		if (_1 === (0)) {
			context = " looking for beginning of value";
		} else if ((_1 === (1)) || (_1 === (2)) || (_1 === (7))) {
			context = " looking for beginning of value";
		} else if (_1 === (3)) {
			context = " after array element";
		} else if (_1 === (5)) {
			context = " looking for beginning of object key string";
		} else if (_1 === (6)) {
			context = " after object key";
		} else if (_1 === (8)) {
			context = " after object key:value pair";
		}
		return [$ifaceNil, new SyntaxError.ptr("invalid character " + quoteChar(c) + " " + context, new $Int64(0, 0))];
	};
	Decoder.prototype.tokenError = function(c) { return this.$val.tokenError(c); };
	Decoder.ptr.prototype.More = function() {
		var $ptr, _r$3, _tuple, c, dec, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _tuple = $f._tuple; c = $f.c; dec = $f.dec; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		_r$3 = dec.peek(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		c = _tuple[0];
		err = _tuple[1];
		$s = -1; return $interfaceIsEqual(err, $ifaceNil) && !((c === 93)) && !((c === 125));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.More }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._tuple = _tuple; $f.c = c; $f.dec = dec; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.More = function() { return this.$val.More(); };
	Decoder.ptr.prototype.peek = function() {
		var $ptr, _r$3, c, dec, err, i, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; c = $f.c; dec = $f.dec; err = $f.err; i = $f.i; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		err = $ifaceNil;
		/* while (true) { */ case 1:
			i = dec.scanp;
			/* while (true) { */ case 3:
				/* if (!(i < dec.buf.$length)) { break; } */ if(!(i < dec.buf.$length)) { $s = 4; continue; }
				c = (x = dec.buf, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				if (isSpace(c)) {
					i = i + (1) >> 0;
					/* continue; */ $s = 3; continue;
				}
				dec.scanp = i;
				$s = -1; return [c, $ifaceNil];
			/* } */ $s = 3; continue; case 4:
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [0, err];
			}
			_r$3 = dec.refill(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			err = _r$3;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.peek }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.c = c; $f.dec = dec; $f.err = err; $f.i = i; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.peek = function() { return this.$val.peek(); };
	parseTag = function(tag) {
		var $ptr, idx, tag;
		idx = strings.Index(tag, ",");
		if (!((idx === -1))) {
			return [$substring(tag, 0, idx), $substring(tag, (idx + 1 >> 0))];
		}
		return [tag, ""];
	};
	tagOptions.prototype.Contains = function(optionName) {
		var $ptr, _tmp, _tmp$1, i, next, o, optionName, s;
		o = this.$val;
		if (o.length === 0) {
			return false;
		}
		s = o;
		while (true) {
			if (!(!(s === ""))) { break; }
			next = "";
			i = strings.Index(s, ",");
			if (i >= 0) {
				_tmp = $substring(s, 0, i);
				_tmp$1 = $substring(s, (i + 1 >> 0));
				s = _tmp;
				next = _tmp$1;
			}
			if (s === optionName) {
				return true;
			}
			s = next;
		}
		return false;
	};
	$ptrType(tagOptions).prototype.Contains = function(optionName) { return new tagOptions(this.$get()).Contains(optionName); };
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$13.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Number.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([], [$Float64, $error], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64, $error], false)}];
	ptrType$14.methods = [{prop: "unmarshal", name: "unmarshal", pkg: "encoding/json", typ: $funcType([$emptyInterface], [$error], false)}, {prop: "init", name: "init", pkg: "encoding/json", typ: $funcType([sliceType$1], [ptrType$14], false)}, {prop: "error", name: "error", pkg: "encoding/json", typ: $funcType([$error], [], false)}, {prop: "saveError", name: "saveError", pkg: "encoding/json", typ: $funcType([$error], [], false)}, {prop: "addErrorContext", name: "addErrorContext", pkg: "encoding/json", typ: $funcType([$error], [$error], false)}, {prop: "next", name: "next", pkg: "encoding/json", typ: $funcType([], [sliceType$1], false)}, {prop: "scanWhile", name: "scanWhile", pkg: "encoding/json", typ: $funcType([$Int], [$Int], false)}, {prop: "value", name: "value", pkg: "encoding/json", typ: $funcType([reflect.Value], [], false)}, {prop: "valueQuoted", name: "valueQuoted", pkg: "encoding/json", typ: $funcType([], [$emptyInterface], false)}, {prop: "indirect", name: "indirect", pkg: "encoding/json", typ: $funcType([reflect.Value, $Bool], [Unmarshaler, encoding.TextUnmarshaler, reflect.Value], false)}, {prop: "array", name: "array", pkg: "encoding/json", typ: $funcType([reflect.Value], [], false)}, {prop: "object", name: "object", pkg: "encoding/json", typ: $funcType([reflect.Value], [], false)}, {prop: "literal", name: "literal", pkg: "encoding/json", typ: $funcType([reflect.Value], [], false)}, {prop: "convertNumber", name: "convertNumber", pkg: "encoding/json", typ: $funcType([$String], [$emptyInterface, $error], false)}, {prop: "literalStore", name: "literalStore", pkg: "encoding/json", typ: $funcType([sliceType$1, reflect.Value, $Bool], [], false)}, {prop: "valueInterface", name: "valueInterface", pkg: "encoding/json", typ: $funcType([], [$emptyInterface], false)}, {prop: "arrayInterface", name: "arrayInterface", pkg: "encoding/json", typ: $funcType([], [sliceType], false)}, {prop: "objectInterface", name: "objectInterface", pkg: "encoding/json", typ: $funcType([], [mapType$1], false)}, {prop: "literalInterface", name: "literalInterface", pkg: "encoding/json", typ: $funcType([], [$emptyInterface], false)}];
	byIndex.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	ptrType$11.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$26.methods = [{prop: "reset", name: "reset", pkg: "encoding/json", typ: $funcType([], [], false)}, {prop: "eof", name: "eof", pkg: "encoding/json", typ: $funcType([], [$Int], false)}, {prop: "pushParseState", name: "pushParseState", pkg: "encoding/json", typ: $funcType([$Int], [], false)}, {prop: "popParseState", name: "popParseState", pkg: "encoding/json", typ: $funcType([], [], false)}, {prop: "error", name: "error", pkg: "encoding/json", typ: $funcType([$Uint8, $String], [$Int], false)}, {prop: "undo", name: "undo", pkg: "encoding/json", typ: $funcType([$Int], [], false)}];
	ptrType$27.methods = [{prop: "UseNumber", name: "UseNumber", pkg: "", typ: $funcType([], [], false)}, {prop: "Decode", name: "Decode", pkg: "", typ: $funcType([$emptyInterface], [$error], false)}, {prop: "Buffered", name: "Buffered", pkg: "", typ: $funcType([], [io.Reader], false)}, {prop: "readValue", name: "readValue", pkg: "encoding/json", typ: $funcType([], [$Int, $error], false)}, {prop: "refill", name: "refill", pkg: "encoding/json", typ: $funcType([], [$error], false)}, {prop: "tokenPrepareForDecode", name: "tokenPrepareForDecode", pkg: "encoding/json", typ: $funcType([], [$error], false)}, {prop: "tokenValueAllowed", name: "tokenValueAllowed", pkg: "encoding/json", typ: $funcType([], [$Bool], false)}, {prop: "tokenValueEnd", name: "tokenValueEnd", pkg: "encoding/json", typ: $funcType([], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([], [Token, $error], false)}, {prop: "tokenError", name: "tokenError", pkg: "encoding/json", typ: $funcType([$Uint8], [Token, $error], false)}, {prop: "More", name: "More", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "peek", name: "peek", pkg: "encoding/json", typ: $funcType([], [$Uint8, $error], false)}];
	Delim.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	tagOptions.methods = [{prop: "Contains", name: "Contains", pkg: "", typ: $funcType([$String], [$Bool], false)}];
	Unmarshaler.init([{prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$1], [$error], false)}]);
	UnmarshalTypeError.init("", [{prop: "Value", name: "Value", exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", exported: true, typ: reflect.Type, tag: ""}, {prop: "Offset", name: "Offset", exported: true, typ: $Int64, tag: ""}, {prop: "Struct", name: "Struct", exported: true, typ: $String, tag: ""}, {prop: "Field", name: "Field", exported: true, typ: $String, tag: ""}]);
	InvalidUnmarshalError.init("", [{prop: "Type", name: "Type", exported: true, typ: reflect.Type, tag: ""}]);
	decodeState.init("encoding/json", [{prop: "data", name: "data", exported: false, typ: sliceType$1, tag: ""}, {prop: "off", name: "off", exported: false, typ: $Int, tag: ""}, {prop: "scan", name: "scan", exported: false, typ: scanner, tag: ""}, {prop: "nextscan", name: "nextscan", exported: false, typ: scanner, tag: ""}, {prop: "errorContext", name: "errorContext", exported: false, typ: structType$2, tag: ""}, {prop: "savedError", name: "savedError", exported: false, typ: $error, tag: ""}, {prop: "useNumber", name: "useNumber", exported: false, typ: $Bool, tag: ""}]);
	unquotedValue.init("", []);
	Marshaler.init([{prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}]);
	field.init("encoding/json", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "nameBytes", name: "nameBytes", exported: false, typ: sliceType$1, tag: ""}, {prop: "equalFold", name: "equalFold", exported: false, typ: funcType, tag: ""}, {prop: "tag", name: "tag", exported: false, typ: $Bool, tag: ""}, {prop: "index", name: "index", exported: false, typ: sliceType$2, tag: ""}, {prop: "typ", name: "typ", exported: false, typ: reflect.Type, tag: ""}, {prop: "omitEmpty", name: "omitEmpty", exported: false, typ: $Bool, tag: ""}, {prop: "quoted", name: "quoted", exported: false, typ: $Bool, tag: ""}]);
	byIndex.init(field);
	SyntaxError.init("encoding/json", [{prop: "msg", name: "msg", exported: false, typ: $String, tag: ""}, {prop: "Offset", name: "Offset", exported: true, typ: $Int64, tag: ""}]);
	scanner.init("encoding/json", [{prop: "step", name: "step", exported: false, typ: funcType$1, tag: ""}, {prop: "endTop", name: "endTop", exported: false, typ: $Bool, tag: ""}, {prop: "parseState", name: "parseState", exported: false, typ: sliceType$2, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "redo", name: "redo", exported: false, typ: $Bool, tag: ""}, {prop: "redoCode", name: "redoCode", exported: false, typ: $Int, tag: ""}, {prop: "redoState", name: "redoState", exported: false, typ: funcType$1, tag: ""}, {prop: "bytes", name: "bytes", exported: false, typ: $Int64, tag: ""}]);
	Decoder.init("encoding/json", [{prop: "r", name: "r", exported: false, typ: io.Reader, tag: ""}, {prop: "buf", name: "buf", exported: false, typ: sliceType$1, tag: ""}, {prop: "d", name: "d", exported: false, typ: decodeState, tag: ""}, {prop: "scanp", name: "scanp", exported: false, typ: $Int, tag: ""}, {prop: "scan", name: "scan", exported: false, typ: scanner, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "tokenState", name: "tokenState", exported: false, typ: $Int, tag: ""}, {prop: "tokenStack", name: "tokenStack", exported: false, typ: sliceType$2, tag: ""}]);
	Token.init([]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = encoding.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = base64.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf16.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		fieldCache = new structType$1.ptr(new atomic.Value.ptr(new atomic.noCopy.ptr(), $ifaceNil), new nosync.Mutex.ptr(false));
		errPhase = errors.New("JSON decoder out of sync - data changing underfoot?");
		nullLiteral = new sliceType$1($stringToBytes("null"));
		_r = reflect.TypeOf($newDataPointer($ifaceNil, ptrType)).Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		textUnmarshalerType = _r;
		numberType = reflect.TypeOf(new Number(""));
		_r$1 = reflect.TypeOf($newDataPointer($ifaceNil, ptrType$1)).Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		marshalerType = _r$1;
		_r$2 = reflect.TypeOf($newDataPointer($ifaceNil, ptrType$2)).Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		textMarshalerType = _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bufio"] = (function() {
	var $pkg = {}, $init, bytes, errors, io, utf8, Reader, sliceType, ptrType, sliceType$1, errNegativeRead, errNegativeWrite, NewReaderSize, NewReader;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	io = $packages["io"];
	utf8 = $packages["unicode/utf8"];
	Reader = $pkg.Reader = $newType(0, $kindStruct, "bufio.Reader", true, "bufio", true, function(buf_, rd_, r_, w_, err_, lastByte_, lastRuneSize_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.rd = $ifaceNil;
			this.r = 0;
			this.w = 0;
			this.err = $ifaceNil;
			this.lastByte = 0;
			this.lastRuneSize = 0;
			return;
		}
		this.buf = buf_;
		this.rd = rd_;
		this.r = r_;
		this.w = w_;
		this.err = err_;
		this.lastByte = lastByte_;
		this.lastRuneSize = lastRuneSize_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Reader);
	sliceType$1 = $sliceType(sliceType);
	NewReaderSize = function(rd, size) {
		var $ptr, _tuple, b, ok, r, rd, size;
		_tuple = $assertType(rd, ptrType, true);
		b = _tuple[0];
		ok = _tuple[1];
		if (ok && b.buf.$length >= size) {
			return b;
		}
		if (size < 16) {
			size = 16;
		}
		r = new Reader.ptr(sliceType.nil, $ifaceNil, 0, 0, $ifaceNil, 0, 0);
		r.reset($makeSlice(sliceType, size), rd);
		return r;
	};
	$pkg.NewReaderSize = NewReaderSize;
	NewReader = function(rd) {
		var $ptr, rd;
		return NewReaderSize(rd, 4096);
	};
	$pkg.NewReader = NewReader;
	Reader.ptr.prototype.Reset = function(r) {
		var $ptr, b, r;
		b = this;
		b.reset(b.buf, r);
	};
	Reader.prototype.Reset = function(r) { return this.$val.Reset(r); };
	Reader.ptr.prototype.reset = function(buf, r) {
		var $ptr, b, buf, r;
		b = this;
		Reader.copy(b, new Reader.ptr(buf, r, 0, 0, $ifaceNil, -1, -1));
	};
	Reader.prototype.reset = function(buf, r) { return this.$val.reset(buf, r); };
	Reader.ptr.prototype.fill = function() {
		var $ptr, _r, _tuple, b, err, i, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; i = $f.i; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (b.r > 0) {
			$copySlice(b.buf, $subslice(b.buf, b.r, b.w));
			b.w = b.w - (b.r) >> 0;
			b.r = 0;
		}
		if (b.w >= b.buf.$length) {
			$panic(new $String("bufio: tried to fill full buffer"));
		}
		i = 100;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_r = b.rd.Read($subslice(b.buf, b.w)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err = _tuple[1];
			if (n < 0) {
				$panic(errNegativeRead);
			}
			b.w = b.w + (n) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				b.err = err;
				$s = -1; return;
			}
			if (n > 0) {
				$s = -1; return;
			}
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		b.err = io.ErrNoProgress;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.fill }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.i = i; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.fill = function() { return this.$val.fill(); };
	Reader.ptr.prototype.readErr = function() {
		var $ptr, b, err;
		b = this;
		err = b.err;
		b.err = $ifaceNil;
		return err;
	};
	Reader.prototype.readErr = function() { return this.$val.readErr(); };
	Reader.ptr.prototype.Peek = function(n) {
		var $ptr, avail, b, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; avail = $f.avail; b = $f.b; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (n < 0) {
			$s = -1; return [sliceType.nil, $pkg.ErrNegativeCount];
		}
		/* while (true) { */ case 1:
			/* if (!((b.w - b.r >> 0) < n && (b.w - b.r >> 0) < b.buf.$length && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!((b.w - b.r >> 0) < n && (b.w - b.r >> 0) < b.buf.$length && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		if (n > b.buf.$length) {
			$s = -1; return [$subslice(b.buf, b.r, b.w), $pkg.ErrBufferFull];
		}
		err = $ifaceNil;
		avail = b.w - b.r >> 0;
		if (avail < n) {
			n = avail;
			err = b.readErr();
			if ($interfaceIsEqual(err, $ifaceNil)) {
				err = $pkg.ErrBufferFull;
			}
		}
		$s = -1; return [$subslice(b.buf, b.r, (b.r + n >> 0)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Peek }; } $f.$ptr = $ptr; $f.avail = avail; $f.b = b; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Peek = function(n) { return this.$val.Peek(n); };
	Reader.ptr.prototype.Discard = function(n) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, discarded, err, n, remain, skip, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; b = $f.b; discarded = $f.discarded; err = $f.err; n = $f.n; remain = $f.remain; skip = $f.skip; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		discarded = 0;
		err = $ifaceNil;
		b = this;
		if (n < 0) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrNegativeCount;
			discarded = _tmp;
			err = _tmp$1;
			$s = -1; return [discarded, err];
		}
		if (n === 0) {
			$s = -1; return [discarded, err];
		}
		remain = n;
		/* while (true) { */ case 1:
			skip = b.Buffered();
			/* */ if (skip === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (skip === 0) { */ case 3:
				$r = b.fill(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				skip = b.Buffered();
			/* } */ case 4:
			if (skip > remain) {
				skip = remain;
			}
			b.r = b.r + (skip) >> 0;
			remain = remain - (skip) >> 0;
			if (remain === 0) {
				_tmp$2 = n;
				_tmp$3 = $ifaceNil;
				discarded = _tmp$2;
				err = _tmp$3;
				$s = -1; return [discarded, err];
			}
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$4 = n - remain >> 0;
				_tmp$5 = b.readErr();
				discarded = _tmp$4;
				err = _tmp$5;
				$s = -1; return [discarded, err];
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [discarded, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Discard }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.b = b; $f.discarded = discarded; $f.err = err; $f.n = n; $f.remain = remain; $f.skip = skip; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Discard = function(n) { return this.$val.Discard(n); };
	Reader.ptr.prototype.Read = function(p) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, b, err, n, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; err = $f.err; n = $f.n; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		b = this;
		n = p.$length;
		if (n === 0) {
			_tmp = 0;
			_tmp$1 = b.readErr();
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		/* */ if (b.r === b.w) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.r === b.w) { */ case 1:
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$2 = 0;
				_tmp$3 = b.readErr();
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
			/* */ if (p.$length >= b.buf.$length) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (p.$length >= b.buf.$length) { */ case 3:
				_r = b.rd.Read(p); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				n = _tuple[0];
				b.err = _tuple[1];
				if (n < 0) {
					$panic(errNegativeRead);
				}
				if (n > 0) {
					b.lastByte = ((x = n - 1 >> 0, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x])) >> 0);
					b.lastRuneSize = -1;
				}
				_tmp$4 = n;
				_tmp$5 = b.readErr();
				n = _tmp$4;
				err = _tmp$5;
				$s = -1; return [n, err];
			/* } */ case 4:
			b.r = 0;
			b.w = 0;
			_r$1 = b.rd.Read(b.buf); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			n = _tuple$1[0];
			b.err = _tuple$1[1];
			if (n < 0) {
				$panic(errNegativeRead);
			}
			if (n === 0) {
				_tmp$6 = 0;
				_tmp$7 = b.readErr();
				n = _tmp$6;
				err = _tmp$7;
				$s = -1; return [n, err];
			}
			b.w = b.w + (n) >> 0;
		/* } */ case 2:
		n = $copySlice(p, $subslice(b.buf, b.r, b.w));
		b.r = b.r + (n) >> 0;
		b.lastByte = ((x$1 = b.buf, x$2 = b.r - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) >> 0);
		b.lastRuneSize = -1;
		_tmp$8 = n;
		_tmp$9 = $ifaceNil;
		n = _tmp$8;
		err = _tmp$9;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.err = err; $f.n = n; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Read = function(p) { return this.$val.Read(p); };
	Reader.ptr.prototype.ReadByte = function() {
		var $ptr, b, c, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; c = $f.c; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		b.lastRuneSize = -1;
		/* while (true) { */ case 1:
			/* if (!(b.r === b.w)) { break; } */ if(!(b.r === b.w)) { $s = 2; continue; }
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				$s = -1; return [0, b.readErr()];
			}
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		c = (x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		b.r = b.r + (1) >> 0;
		b.lastByte = (c >> 0);
		$s = -1; return [c, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadByte }; } $f.$ptr = $ptr; $f.b = b; $f.c = c; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var $ptr, b, x, x$1;
		b = this;
		if (b.lastByte < 0 || (b.r === 0) && b.w > 0) {
			return $pkg.ErrInvalidUnreadByte;
		}
		if (b.r > 0) {
			b.r = b.r - (1) >> 0;
		} else {
			b.w = 1;
		}
		(x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = (b.lastByte << 24 >>> 24)));
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, b, err, r, size, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; b = $f.b; err = $f.err; r = $f.r; size = $f.size; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			/* if (!((b.r + 4 >> 0) > b.w && !utf8.FullRune($subslice(b.buf, b.r, b.w)) && $interfaceIsEqual(b.err, $ifaceNil) && (b.w - b.r >> 0) < b.buf.$length)) { break; } */ if(!((b.r + 4 >> 0) > b.w && !utf8.FullRune($subslice(b.buf, b.r, b.w)) && $interfaceIsEqual(b.err, $ifaceNil) && (b.w - b.r >> 0) < b.buf.$length)) { $s = 2; continue; }
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		b.lastRuneSize = -1;
		if (b.r === b.w) {
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = b.readErr();
			r = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			$s = -1; return [r, size, err];
		}
		_tmp$3 = ((x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) >> 0);
		_tmp$4 = 1;
		r = _tmp$3;
		size = _tmp$4;
		if (r >= 128) {
			_tuple = utf8.DecodeRune($subslice(b.buf, b.r, b.w));
			r = _tuple[0];
			size = _tuple[1];
		}
		b.r = b.r + (size) >> 0;
		b.lastByte = ((x$2 = b.buf, x$3 = b.r - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])) >> 0);
		b.lastRuneSize = size;
		_tmp$5 = r;
		_tmp$6 = size;
		_tmp$7 = $ifaceNil;
		r = _tmp$5;
		size = _tmp$6;
		err = _tmp$7;
		$s = -1; return [r, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadRune }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.r = r; $f.size = size; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var $ptr, b;
		b = this;
		if (b.lastRuneSize < 0 || b.r < b.lastRuneSize) {
			return $pkg.ErrInvalidUnreadRune;
		}
		b.r = b.r - (b.lastRuneSize) >> 0;
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Buffered = function() {
		var $ptr, b;
		b = this;
		return b.w - b.r >> 0;
	};
	Reader.prototype.Buffered = function() { return this.$val.Buffered(); };
	Reader.ptr.prototype.ReadSlice = function(delim) {
		var $ptr, b, delim, err, i, i$1, line, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; delim = $f.delim; err = $f.err; i = $f.i; i$1 = $f.i$1; line = $f.line; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			i = bytes.IndexByte($subslice(b.buf, b.r, b.w), delim);
			if (i >= 0) {
				line = $subslice(b.buf, b.r, ((b.r + i >> 0) + 1 >> 0));
				b.r = b.r + ((i + 1 >> 0)) >> 0;
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				line = $subslice(b.buf, b.r, b.w);
				b.r = b.w;
				err = b.readErr();
				/* break; */ $s = 2; continue;
			}
			if (b.Buffered() >= b.buf.$length) {
				b.r = b.w;
				line = b.buf;
				err = $pkg.ErrBufferFull;
				/* break; */ $s = 2; continue;
			}
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		i$1 = line.$length - 1 >> 0;
		if (i$1 >= 0) {
			b.lastByte = (((i$1 < 0 || i$1 >= line.$length) ? ($throwRuntimeError("index out of range"), undefined) : line.$array[line.$offset + i$1]) >> 0);
			b.lastRuneSize = -1;
		}
		$s = -1; return [line, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadSlice }; } $f.$ptr = $ptr; $f.b = b; $f.delim = delim; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.line = line; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadSlice = function(delim) { return this.$val.ReadSlice(delim); };
	Reader.ptr.prototype.ReadLine = function() {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tuple, b, drop, err, isPrefix, line, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; b = $f.b; drop = $f.drop; err = $f.err; isPrefix = $f.isPrefix; line = $f.line; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		isPrefix = false;
		err = $ifaceNil;
		b = this;
		_r = b.ReadSlice(10); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		line = _tuple[0];
		err = _tuple[1];
		if ($interfaceIsEqual(err, $pkg.ErrBufferFull)) {
			if (line.$length > 0 && ((x = line.$length - 1 >> 0, ((x < 0 || x >= line.$length) ? ($throwRuntimeError("index out of range"), undefined) : line.$array[line.$offset + x])) === 13)) {
				if (b.r === 0) {
					$panic(new $String("bufio: tried to rewind past start of buffer"));
				}
				b.r = b.r - (1) >> 0;
				line = $subslice(line, 0, (line.$length - 1 >> 0));
			}
			_tmp = line;
			_tmp$1 = true;
			_tmp$2 = $ifaceNil;
			line = _tmp;
			isPrefix = _tmp$1;
			err = _tmp$2;
			$s = -1; return [line, isPrefix, err];
		}
		if (line.$length === 0) {
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				line = sliceType.nil;
			}
			$s = -1; return [line, isPrefix, err];
		}
		err = $ifaceNil;
		if ((x$1 = line.$length - 1 >> 0, ((x$1 < 0 || x$1 >= line.$length) ? ($throwRuntimeError("index out of range"), undefined) : line.$array[line.$offset + x$1])) === 10) {
			drop = 1;
			if (line.$length > 1 && ((x$2 = line.$length - 2 >> 0, ((x$2 < 0 || x$2 >= line.$length) ? ($throwRuntimeError("index out of range"), undefined) : line.$array[line.$offset + x$2])) === 13)) {
				drop = 2;
			}
			line = $subslice(line, 0, (line.$length - drop >> 0));
		}
		$s = -1; return [line, isPrefix, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadLine }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f.b = b; $f.drop = drop; $f.err = err; $f.isPrefix = isPrefix; $f.line = line; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadLine = function() { return this.$val.ReadLine(); };
	Reader.ptr.prototype.ReadBytes = function(delim) {
		var $ptr, _i, _i$1, _r, _ref, _ref$1, _tuple, b, buf, buf$1, delim, e, err, frag, full, i, i$1, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; b = $f.b; buf = $f.buf; buf$1 = $f.buf$1; delim = $f.delim; e = $f.e; err = $f.err; frag = $f.frag; full = $f.full; i = $f.i; i$1 = $f.i$1; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		frag = sliceType.nil;
		full = sliceType$1.nil;
		err = $ifaceNil;
		/* while (true) { */ case 1:
			e = $ifaceNil;
			_r = b.ReadSlice(delim); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			frag = _tuple[0];
			e = _tuple[1];
			if ($interfaceIsEqual(e, $ifaceNil)) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(e, $pkg.ErrBufferFull))) {
				err = e;
				/* break; */ $s = 2; continue;
			}
			buf = $makeSlice(sliceType, frag.$length);
			$copySlice(buf, frag);
			full = $append(full, buf);
		/* } */ $s = 1; continue; case 2:
		n = 0;
		_ref = full;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			n = n + (((i < 0 || i >= full.$length) ? ($throwRuntimeError("index out of range"), undefined) : full.$array[full.$offset + i]).$length) >> 0;
			_i++;
		}
		n = n + (frag.$length) >> 0;
		buf$1 = $makeSlice(sliceType, n);
		n = 0;
		_ref$1 = full;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			n = n + ($copySlice($subslice(buf$1, n), ((i$1 < 0 || i$1 >= full.$length) ? ($throwRuntimeError("index out of range"), undefined) : full.$array[full.$offset + i$1]))) >> 0;
			_i$1++;
		}
		$copySlice($subslice(buf$1, n), frag);
		$s = -1; return [buf$1, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadBytes }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.buf$1 = buf$1; $f.delim = delim; $f.e = e; $f.err = err; $f.frag = frag; $f.full = full; $f.i = i; $f.i$1 = i$1; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Reader.ptr.prototype.ReadString = function(delim) {
		var $ptr, _r, _tuple, b, bytes$1, delim, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; bytes$1 = $f.bytes$1; delim = $f.delim; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = b.ReadBytes(delim); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		$s = -1; return [$bytesToString(bytes$1), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadString }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.bytes$1 = bytes$1; $f.delim = delim; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, b, err, err$1, err$2, err$3, m, m$1, m$2, n, ok, ok$1, r, w, w$1, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; m = $f.m; m$1 = $f.m$1; m$2 = $f.m$2; n = $f.n; ok = $f.ok; ok$1 = $f.ok$1; r = $f.r; w = $f.w; w$1 = $f.w$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		_r = b.writeBuf(w); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [n, err];
		}
		_tuple$1 = $assertType(b.rd, io.WriterTo, true);
		r = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = r.WriteTo(w); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$2 = _r$1;
			m = _tuple$2[0];
			err$1 = _tuple$2[1];
			n = (x = m, new $Int64(n.$high + x.$high, n.$low + x.$low));
			_tmp = n;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		/* } */ case 3:
		_tuple$3 = $assertType(w, io.ReaderFrom, true);
		w$1 = _tuple$3[0];
		ok$1 = _tuple$3[1];
		/* */ if (ok$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (ok$1) { */ case 5:
			_r$2 = w$1.ReadFrom(b.rd); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$4 = _r$2;
			m$1 = _tuple$4[0];
			err$2 = _tuple$4[1];
			n = (x$1 = m$1, new $Int64(n.$high + x$1.$high, n.$low + x$1.$low));
			_tmp$2 = n;
			_tmp$3 = err$2;
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		/* } */ case 6:
		/* */ if ((b.w - b.r >> 0) < b.buf.$length) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ((b.w - b.r >> 0) < b.buf.$length) { */ case 8:
			$r = b.fill(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		/* while (true) { */ case 11:
			/* if (!(b.r < b.w)) { break; } */ if(!(b.r < b.w)) { $s = 12; continue; }
			_r$3 = b.writeBuf(w); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$5 = _r$3;
			m$2 = _tuple$5[0];
			err$3 = _tuple$5[1];
			n = (x$2 = m$2, new $Int64(n.$high + x$2.$high, n.$low + x$2.$low));
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				_tmp$4 = n;
				_tmp$5 = err$3;
				n = _tmp$4;
				err = _tmp$5;
				$s = -1; return [n, err];
			}
			$r = b.fill(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 11; continue; case 12:
		if ($interfaceIsEqual(b.err, io.EOF)) {
			b.err = $ifaceNil;
		}
		_tmp$6 = n;
		_tmp$7 = b.readErr();
		n = _tmp$6;
		err = _tmp$7;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.m = m; $f.m$1 = m$1; $f.m$2 = m$2; $f.n = n; $f.ok = ok; $f.ok$1 = ok$1; $f.r = r; $f.w = w; $f.w$1 = w$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.writeBuf = function(w) {
		var $ptr, _r, _tuple, b, err, n, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = w.Write($subslice(b.buf, b.r, b.w)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (n < 0) {
			$panic(errNegativeWrite);
		}
		b.r = b.r + (n) >> 0;
		$s = -1; return [new $Int64(0, n), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.writeBuf }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.writeBuf = function(w) { return this.$val.writeBuf(w); };
	ptrType.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader], [], false)}, {prop: "reset", name: "reset", pkg: "bufio", typ: $funcType([sliceType, io.Reader], [], false)}, {prop: "fill", name: "fill", pkg: "bufio", typ: $funcType([], [], false)}, {prop: "readErr", name: "readErr", pkg: "bufio", typ: $funcType([], [$error], false)}, {prop: "Peek", name: "Peek", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Discard", name: "Discard", pkg: "", typ: $funcType([$Int], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Buffered", name: "Buffered", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ReadSlice", name: "ReadSlice", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadLine", name: "ReadLine", pkg: "", typ: $funcType([], [sliceType, $Bool, $error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "writeBuf", name: "writeBuf", pkg: "bufio", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	Reader.init("bufio", [{prop: "buf", name: "buf", exported: false, typ: sliceType, tag: ""}, {prop: "rd", name: "rd", exported: false, typ: io.Reader, tag: ""}, {prop: "r", name: "r", exported: false, typ: $Int, tag: ""}, {prop: "w", name: "w", exported: false, typ: $Int, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "lastByte", name: "lastByte", exported: false, typ: $Int, tag: ""}, {prop: "lastRuneSize", name: "lastRuneSize", exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrInvalidUnreadByte = errors.New("bufio: invalid use of UnreadByte");
		$pkg.ErrInvalidUnreadRune = errors.New("bufio: invalid use of UnreadRune");
		$pkg.ErrBufferFull = errors.New("bufio: buffer full");
		$pkg.ErrNegativeCount = errors.New("bufio: negative count");
		errNegativeRead = errors.New("bufio: reader returned negative count from Read");
		errNegativeWrite = errors.New("bufio: writer returned negative count from Write");
		$pkg.ErrTooLong = errors.New("bufio.Scanner: token too long");
		$pkg.ErrNegativeAdvance = errors.New("bufio.Scanner: SplitFunc returns negative advance count");
		$pkg.ErrAdvanceTooFar = errors.New("bufio.Scanner: SplitFunc returns advance count beyond input");
		$pkg.ErrFinalToken = errors.New("final token");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["path/filepath"] = (function() {
	var $pkg = {}, $init, errors, os, runtime, sort, strings, utf8;
	errors = $packages["errors"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	utf8 = $packages["unicode/utf8"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrBadPattern = errors.New("syntax error in pattern");
		$pkg.SkipDir = errors.New("skip this directory");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io/ioutil"] = (function() {
	var $pkg = {}, $init, bytes, io, os, filepath, sort, strconv, sync, time, nopCloser, devNull, sliceType, sliceType$1, ptrType, blackHolePool, readAll, ReadAll, NopCloser;
	bytes = $packages["bytes"];
	io = $packages["io"];
	os = $packages["os"];
	filepath = $packages["path/filepath"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	time = $packages["time"];
	nopCloser = $pkg.nopCloser = $newType(0, $kindStruct, "ioutil.nopCloser", true, "io/ioutil", false, function(Reader_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Reader = $ifaceNil;
			return;
		}
		this.Reader = Reader_;
	});
	devNull = $pkg.devNull = $newType(4, $kindInt, "ioutil.devNull", true, "io/ioutil", false, null);
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Uint8);
	ptrType = $ptrType(sliceType$1);
	readAll = function(r, capacity) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, b, buf, capacity, err, r, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; buf = $f.buf; capacity = $f.capacity; err = $f.err; r = $f.r; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		b = sliceType$1.nil;
		err[0] = $ifaceNil;
		buf = bytes.NewBuffer($makeSlice(sliceType$1, 0, $flatten64(capacity)));
		$deferred.push([(function(err) { return function() {
			var $ptr, _tuple, e, ok, panicErr;
			e = $recover();
			if ($interfaceIsEqual(e, $ifaceNil)) {
				return;
			}
			_tuple = $assertType(e, $error, true);
			panicErr = _tuple[0];
			ok = _tuple[1];
			if (ok && $interfaceIsEqual(panicErr, bytes.ErrTooLarge)) {
				err[0] = panicErr;
			} else {
				$panic(e);
			}
		}; })(err), []]);
		_r = buf.ReadFrom(r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err[0] = _tuple[1];
		_tmp = buf.Bytes();
		_tmp$1 = err[0];
		b = _tmp;
		err[0] = _tmp$1;
		$s = -1; return [b, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [b, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: readAll }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.capacity = capacity; $f.err = err; $f.r = r; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ReadAll = function(r) {
		var $ptr, _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = readAll(r, new $Int64(0, 512)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadAll }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadAll = ReadAll;
	nopCloser.ptr.prototype.Close = function() {
		var $ptr;
		return $ifaceNil;
	};
	nopCloser.prototype.Close = function() { return this.$val.Close(); };
	NopCloser = function(r) {
		var $ptr, r, x;
		return (x = new nopCloser.ptr(r), new x.constructor.elem(x));
	};
	$pkg.NopCloser = NopCloser;
	devNull.prototype.Write = function(p) {
		var $ptr, p;
		return [p.$length, $ifaceNil];
	};
	$ptrType(devNull).prototype.Write = function(p) { return new devNull(this.$get()).Write(p); };
	devNull.prototype.WriteString = function(s) {
		var $ptr, s;
		return [s.length, $ifaceNil];
	};
	$ptrType(devNull).prototype.WriteString = function(s) { return new devNull(this.$get()).WriteString(s); };
	devNull.prototype.ReadFrom = function(r) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tuple, bufp, err, n, r, readSize, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; bufp = $f.bufp; err = $f.err; n = $f.n; r = $f.r; readSize = $f.readSize; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		_r = blackHolePool.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		bufp = $assertType(_r, ptrType);
		readSize = 0;
		/* while (true) { */ case 2:
			_r$1 = r.Read(bufp.$get()); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			readSize = _tuple[0];
			err = _tuple[1];
			n = (x = new $Int64(0, readSize), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				blackHolePool.Put(bufp);
				if ($interfaceIsEqual(err, io.EOF)) {
					_tmp = n;
					_tmp$1 = $ifaceNil;
					n = _tmp;
					err = _tmp$1;
					$s = -1; return [n, err];
				}
				$s = -1; return [n, err];
			}
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: devNull.prototype.ReadFrom }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.bufp = bufp; $f.err = err; $f.n = n; $f.r = r; $f.readSize = readSize; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(devNull).prototype.ReadFrom = function(r) { return new devNull(this.$get()).ReadFrom(r); };
	nopCloser.methods = [{prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	devNull.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}];
	nopCloser.init("", [{prop: "Reader", name: "", exported: true, typ: io.Reader, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		blackHolePool = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			var $ptr, b, b$24ptr;
			b = $makeSlice(sliceType$1, 8192);
			return (b$24ptr || (b$24ptr = new ptrType(function() { return b; }, function($v) { b = $subslice(new sliceType$1($v.$array), $v.$offset, $v.$offset + $v.$length); })));
		}));
		$pkg.Discard = new devNull(0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["log"] = (function() {
	var $pkg = {}, $init, fmt, nosync, io, os, runtime, time, Logger, sliceType, arrayType, ptrType, sliceType$1, ptrType$1, std, New, itoa, Printf, Println, Fatal;
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	time = $packages["time"];
	Logger = $pkg.Logger = $newType(0, $kindStruct, "log.Logger", true, "log", true, function(mu_, prefix_, flag_, out_, buf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mu = new nosync.Mutex.ptr(false);
			this.prefix = "";
			this.flag = 0;
			this.out = $ifaceNil;
			this.buf = sliceType.nil;
			return;
		}
		this.mu = mu_;
		this.prefix = prefix_;
		this.flag = flag_;
		this.out = out_;
		this.buf = buf_;
	});
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 20);
	ptrType = $ptrType(sliceType);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(Logger);
	New = function(out, prefix, flag) {
		var $ptr, flag, out, prefix;
		return new Logger.ptr(new nosync.Mutex.ptr(false), prefix, flag, out, sliceType.nil);
	};
	$pkg.New = New;
	Logger.ptr.prototype.SetOutput = function(w) {
		var $ptr, l, w, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.out = w;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetOutput = function(w) { return this.$val.SetOutput(w); };
	itoa = function(buf, i, wid) {
		var $ptr, _q, b, bp, buf, i, q, wid;
		b = arrayType.zero();
		bp = 19;
		while (true) {
			if (!(i >= 10 || wid > 1)) { break; }
			wid = wid - (1) >> 0;
			q = (_q = i / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			((bp < 0 || bp >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[bp] = (((48 + i >> 0) - ($imul(q, 10)) >> 0) << 24 >>> 24));
			bp = bp - (1) >> 0;
			i = q;
		}
		((bp < 0 || bp >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[bp] = ((48 + i >> 0) << 24 >>> 24));
		buf.$set($appendSlice(buf.$get(), $subslice(new sliceType(b), bp)));
	};
	Logger.ptr.prototype.formatHeader = function(buf, t, file, line) {
		var $ptr, _q, _r, _r$1, _tuple, _tuple$1, buf, day, file, hour, i, l, line, min, month, sec, short$1, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buf = $f.buf; day = $f.day; file = $f.file; hour = $f.hour; i = $f.i; l = $f.l; line = $f.line; min = $f.min; month = $f.month; sec = $f.sec; short$1 = $f.short$1; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		buf.$set($appendSlice(buf.$get(), l.prefix));
		if (!(((l.flag & 32) === 0))) {
			time.Time.copy(t, $clone(t, time.Time).UTC());
		}
		/* */ if (!(((l.flag & 7) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(((l.flag & 7) === 0))) { */ case 1:
			/* */ if (!(((l.flag & 1) === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(((l.flag & 1) === 0))) { */ case 3:
				_r = $clone(t, time.Time).Date(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				year = _tuple[0];
				month = _tuple[1];
				day = _tuple[2];
				itoa(buf, year, 4);
				buf.$set($append(buf.$get(), 47));
				itoa(buf, (month >> 0), 2);
				buf.$set($append(buf.$get(), 47));
				itoa(buf, day, 2);
				buf.$set($append(buf.$get(), 32));
			/* } */ case 4:
			/* */ if (!(((l.flag & 6) === 0))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(((l.flag & 6) === 0))) { */ case 6:
				_r$1 = $clone(t, time.Time).Clock(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1;
				hour = _tuple$1[0];
				min = _tuple$1[1];
				sec = _tuple$1[2];
				itoa(buf, hour, 2);
				buf.$set($append(buf.$get(), 58));
				itoa(buf, min, 2);
				buf.$set($append(buf.$get(), 58));
				itoa(buf, sec, 2);
				if (!(((l.flag & 4) === 0))) {
					buf.$set($append(buf.$get(), 46));
					itoa(buf, (_q = $clone(t, time.Time).Nanosecond() / 1000, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), 6);
				}
				buf.$set($append(buf.$get(), 32));
			/* } */ case 7:
		/* } */ case 2:
		if (!(((l.flag & 24) === 0))) {
			if (!(((l.flag & 16) === 0))) {
				short$1 = file;
				i = file.length - 1 >> 0;
				while (true) {
					if (!(i > 0)) { break; }
					if (file.charCodeAt(i) === 47) {
						short$1 = $substring(file, (i + 1 >> 0));
						break;
					}
					i = i - (1) >> 0;
				}
				file = short$1;
			}
			buf.$set($appendSlice(buf.$get(), file));
			buf.$set($append(buf.$get(), 58));
			itoa(buf, line, -1);
			buf.$set($appendSlice(buf.$get(), ": "));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.formatHeader }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.day = day; $f.file = file; $f.hour = hour; $f.i = i; $f.l = l; $f.line = line; $f.min = min; $f.month = month; $f.sec = sec; $f.short$1 = short$1; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.formatHeader = function(buf, t, file, line) { return this.$val.formatHeader(buf, t, file, line); };
	Logger.ptr.prototype.Output = function(calldepth, s) {
		var $ptr, _r, _tuple, _tuple$1, calldepth, err, file, l, line, now, ok, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; calldepth = $f.calldepth; err = $f.err; file = $f.file; l = $f.l; line = $f.line; now = $f.now; ok = $f.ok; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		now = $clone(time.Now(), time.Time);
		file = "";
		line = 0;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		if (!(((l.flag & 24) === 0))) {
			l.mu.Unlock();
			ok = false;
			_tuple = runtime.Caller(calldepth);
			file = _tuple[1];
			line = _tuple[2];
			ok = _tuple[3];
			if (!ok) {
				file = "???";
				line = 0;
			}
			l.mu.Lock();
		}
		l.buf = $subslice(l.buf, 0, 0);
		$r = l.formatHeader((l.$ptr_buf || (l.$ptr_buf = new ptrType(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, l))), $clone(now, time.Time), file, line); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		l.buf = $appendSlice(l.buf, s);
		if ((s.length === 0) || !((s.charCodeAt((s.length - 1 >> 0)) === 10))) {
			l.buf = $append(l.buf, 10);
		}
		_r = l.out.Write(l.buf); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		err = _tuple$1[1];
		$s = -1; return err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Output }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.calldepth = calldepth; $f.err = err; $f.file = file; $f.l = l; $f.line = line; $f.now = now; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Logger.prototype.Output = function(calldepth, s) { return this.$val.Output(calldepth, s); };
	Logger.ptr.prototype.Printf = function(format, v) {
		var $ptr, _arg, _r, _r$1, format, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Printf }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Printf = function(format, v) { return this.$val.Printf(format, v); };
	Logger.ptr.prototype.Print = function(v) {
		var $ptr, _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Print }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Print = function(v) { return this.$val.Print(v); };
	Logger.ptr.prototype.Println = function(v) {
		var $ptr, _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Println }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Println = function(v) { return this.$val.Println(v); };
	Logger.ptr.prototype.Fatal = function(v) {
		var $ptr, _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatal }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatal = function(v) { return this.$val.Fatal(v); };
	Logger.ptr.prototype.Fatalf = function(format, v) {
		var $ptr, _arg, _r, _r$1, format, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatalf }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatalf = function(format, v) { return this.$val.Fatalf(format, v); };
	Logger.ptr.prototype.Fatalln = function(v) {
		var $ptr, _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatalln }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatalln = function(v) { return this.$val.Fatalln(v); };
	Logger.ptr.prototype.Panic = function(v) {
		var $ptr, _r, _r$1, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panic }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panic = function(v) { return this.$val.Panic(v); };
	Logger.ptr.prototype.Panicf = function(format, v) {
		var $ptr, _r, _r$1, format, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panicf }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panicf = function(format, v) { return this.$val.Panicf(format, v); };
	Logger.ptr.prototype.Panicln = function(v) {
		var $ptr, _r, _r$1, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panicln }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panicln = function(v) { return this.$val.Panicln(v); };
	Logger.ptr.prototype.Flags = function() {
		var $ptr, l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		return l.flag;
		/* */ } catch(err) { $err = err; return 0; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.Flags = function() { return this.$val.Flags(); };
	Logger.ptr.prototype.SetFlags = function(flag) {
		var $ptr, flag, l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.flag = flag;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetFlags = function(flag) { return this.$val.SetFlags(flag); };
	Logger.ptr.prototype.Prefix = function() {
		var $ptr, l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		return l.prefix;
		/* */ } catch(err) { $err = err; return ""; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.Prefix = function() { return this.$val.Prefix(); };
	Logger.ptr.prototype.SetPrefix = function(prefix) {
		var $ptr, l, prefix, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.prefix = prefix;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetPrefix = function(prefix) { return this.$val.SetPrefix(prefix); };
	Printf = function(format, v) {
		var $ptr, _arg, _r, _r$1, format, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = std.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Printf }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Printf = Printf;
	Println = function(v) {
		var $ptr, _arg, _r, _r$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = std.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Println }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Println = Println;
	Fatal = function(v) {
		var $ptr, _arg, _r, _r$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = std.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fatal }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fatal = Fatal;
	ptrType$1.methods = [{prop: "SetOutput", name: "SetOutput", pkg: "", typ: $funcType([io.Writer], [], false)}, {prop: "formatHeader", name: "formatHeader", pkg: "log", typ: $funcType([ptrType, time.Time, $String, $Int], [], false)}, {prop: "Output", name: "Output", pkg: "", typ: $funcType([$Int, $String], [$error], false)}, {prop: "Printf", name: "Printf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Print", name: "Print", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Println", name: "Println", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Fatal", name: "Fatal", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Fatalf", name: "Fatalf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Fatalln", name: "Fatalln", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Panic", name: "Panic", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Panicf", name: "Panicf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Panicln", name: "Panicln", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Flags", name: "Flags", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetFlags", name: "SetFlags", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Prefix", name: "Prefix", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetPrefix", name: "SetPrefix", pkg: "", typ: $funcType([$String], [], false)}];
	Logger.init("log", [{prop: "mu", name: "mu", exported: false, typ: nosync.Mutex, tag: ""}, {prop: "prefix", name: "prefix", exported: false, typ: $String, tag: ""}, {prop: "flag", name: "flag", exported: false, typ: $Int, tag: ""}, {prop: "out", name: "out", exported: false, typ: io.Writer, tag: ""}, {prop: "buf", name: "buf", exported: false, typ: sliceType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		std = New(os.Stderr, "", 3);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/nettrace"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/singleflight"] = (function() {
	var $pkg = {}, $init, sync;
	sync = $packages["sync"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = sync.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math/rand"] = (function() {
	var $pkg = {}, $init, nosync, math, Source, Source64, Rand, lockedSource, rngSource, arrayType, ptrType, ptrType$1, sliceType, ptrType$2, ptrType$3, sliceType$1, ptrType$5, ke, we, fe, kn, wn, fn, globalRand, rng_cooked, absInt32, NewSource, New, read, seedrand;
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	math = $packages["math"];
	Source = $pkg.Source = $newType(8, $kindInterface, "rand.Source", true, "math/rand", true, null);
	Source64 = $pkg.Source64 = $newType(8, $kindInterface, "rand.Source64", true, "math/rand", true, null);
	Rand = $pkg.Rand = $newType(0, $kindStruct, "rand.Rand", true, "math/rand", true, function(src_, s64_, readVal_, readPos_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.src = $ifaceNil;
			this.s64 = $ifaceNil;
			this.readVal = new $Int64(0, 0);
			this.readPos = 0;
			return;
		}
		this.src = src_;
		this.s64 = s64_;
		this.readVal = readVal_;
		this.readPos = readPos_;
	});
	lockedSource = $pkg.lockedSource = $newType(0, $kindStruct, "rand.lockedSource", true, "math/rand", false, function(lk_, src_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lk = new nosync.Mutex.ptr(false);
			this.src = $ifaceNil;
			return;
		}
		this.lk = lk_;
		this.src = src_;
	});
	rngSource = $pkg.rngSource = $newType(0, $kindStruct, "rand.rngSource", true, "math/rand", false, function(tap_, feed_, vec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.tap = 0;
			this.feed = 0;
			this.vec = arrayType.zero();
			return;
		}
		this.tap = tap_;
		this.feed = feed_;
		this.vec = vec_;
	});
	arrayType = $arrayType($Int64, 607);
	ptrType = $ptrType(lockedSource);
	ptrType$1 = $ptrType($Int8);
	sliceType = $sliceType($Int);
	ptrType$2 = $ptrType($Int64);
	ptrType$3 = $ptrType(Rand);
	sliceType$1 = $sliceType($Uint8);
	ptrType$5 = $ptrType(rngSource);
	Rand.ptr.prototype.ExpFloat64 = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, i, j, r, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; j = $f.j; r = $f.r; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* while (true) { */ case 1:
			_r = r.Uint32(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = _r;
			i = (j & 255) >>> 0;
			x = j * ((i < 0 || i >= we.length) ? ($throwRuntimeError("index out of range"), undefined) : we[i]);
			if (j < ((i < 0 || i >= ke.length) ? ($throwRuntimeError("index out of range"), undefined) : ke[i])) {
				$s = -1; return x;
			}
			/* */ if (i === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i === 0) { */ case 4:
				_r$1 = r.Float64(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = math.Log(_r$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return 7.69711747013105 - _r$2;
			/* } */ case 5:
			_r$3 = r.Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if ($fround(((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]) + $fround($fround(_r$3) * ($fround((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[x$1])) - ((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]))))) < $fround(math.Exp(-x))) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ($fround(((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]) + $fround($fround(_r$3) * ($fround((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[x$1])) - ((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]))))) < $fround(math.Exp(-x))) { */ case 8:
				$s = -1; return x;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.ExpFloat64 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.j = j; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.ExpFloat64 = function() { return this.$val.ExpFloat64(); };
	absInt32 = function(i) {
		var $ptr, i;
		if (i < 0) {
			return (-i >>> 0);
		}
		return (i >>> 0);
	};
	Rand.ptr.prototype.NormFloat64 = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, i, j, r, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; i = $f.i; j = $f.j; r = $f.r; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* while (true) { */ case 1:
			_r = r.Uint32(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = (_r >> 0);
			i = j & 127;
			x = j * ((i < 0 || i >= wn.length) ? ($throwRuntimeError("index out of range"), undefined) : wn[i]);
			if (absInt32(j) < ((i < 0 || i >= kn.length) ? ($throwRuntimeError("index out of range"), undefined) : kn[i])) {
				$s = -1; return x;
			}
			/* */ if (i === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i === 0) { */ case 4:
				/* while (true) { */ case 6:
					_r$1 = r.Float64(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = math.Log(_r$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					x = -_r$2 * 0.29047645161474317;
					_r$3 = r.Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = math.Log(_r$3); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					y = -_r$4;
					if (y + y >= x * x) {
						/* break; */ $s = 7; continue;
					}
				/* } */ $s = 6; continue; case 7:
				if (j > 0) {
					$s = -1; return 3.442619855899 + x;
				}
				$s = -1; return -3.442619855899 - x;
			/* } */ case 5:
			_r$5 = r.Float64(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if ($fround(((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]) + $fround($fround(_r$5) * ($fround((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[x$1])) - ((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]))))) < $fround(math.Exp(-0.5 * x * x))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if ($fround(((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]) + $fround($fround(_r$5) * ($fround((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[x$1])) - ((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]))))) < $fround(math.Exp(-0.5 * x * x))) { */ case 12:
				$s = -1; return x;
			/* } */ case 13:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.NormFloat64 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.i = i; $f.j = j; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.NormFloat64 = function() { return this.$val.NormFloat64(); };
	NewSource = function(seed) {
		var $ptr, rng, seed;
		rng = new rngSource.ptr(0, 0, arrayType.zero());
		rng.Seed(seed);
		return rng;
	};
	$pkg.NewSource = NewSource;
	New = function(src) {
		var $ptr, _tuple, s64, src;
		_tuple = $assertType(src, Source64, true);
		s64 = _tuple[0];
		return new Rand.ptr(src, s64, new $Int64(0, 0), 0);
	};
	$pkg.New = New;
	Rand.ptr.prototype.Seed = function(seed) {
		var $ptr, _tuple, lk, ok, r, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; lk = $f.lk; ok = $f.ok; r = $f.r; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_tuple = $assertType(r.src, ptrType, true);
		lk = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			$r = lk.seedPos(seed, (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$1(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		$r = r.src.Seed(seed); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r.readPos = 0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Seed }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f.lk = lk; $f.ok = ok; $f.r = r; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	Rand.ptr.prototype.Int63 = function() {
		var $ptr, _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.src.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int63 }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int63 = function() { return this.$val.Int63(); };
	Rand.ptr.prototype.Uint32 = function() {
		var $ptr, _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return ($shiftRightInt64(_r, 31).$low >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Uint32 }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Uint32 = function() { return this.$val.Uint32(); };
	Rand.ptr.prototype.Uint64 = function() {
		var $ptr, _r, _r$1, _r$2, r, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; r = $f.r; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* */ if (!($interfaceIsEqual(r.s64, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(r.s64, $ifaceNil))) { */ case 1:
			_r = r.s64.Uint64(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = r.Int63(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = r.Int63(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return (x = $shiftRightUint64((x$1 = _r$1, new $Uint64(x$1.$high, x$1.$low)), 31), x$2 = $shiftLeft64((x$3 = _r$2, new $Uint64(x$3.$high, x$3.$low)), 32), new $Uint64(x.$high | x$2.$high, (x.$low | x$2.$low) >>> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Uint64 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Rand.ptr.prototype.Int31 = function() {
		var $ptr, _r, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return ((x = $shiftRightInt64(_r, 32), x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int31 }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int31 = function() { return this.$val.Int31(); };
	Rand.ptr.prototype.Int = function() {
		var $ptr, _r, r, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		u = (_r.$low >>> 0);
		$s = -1; return (((u << 1 >>> 0) >>> 1 >>> 0) >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int = function() { return this.$val.Int(); };
	Rand.ptr.prototype.Int63n = function(n) {
		var $ptr, _r, _r$1, _r$2, max, n, r, v, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; max = $f.max; n = $f.n; r = $f.r; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if ((n.$high < 0 || (n.$high === 0 && n.$low <= 0))) {
			$panic(new $String("invalid argument to Int63n"));
		}
		/* */ if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) { */ case 1:
			_r = r.Int63(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return (x$2 = _r, x$3 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		/* } */ case 2:
		max = (x$4 = (x$5 = $div64(new $Uint64(2147483648, 0), new $Uint64(n.$high, n.$low), true), new $Uint64(2147483647 - x$5.$high, 4294967295 - x$5.$low)), new $Int64(x$4.$high, x$4.$low));
		_r$1 = r.Int63(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		v = _r$1;
		/* while (true) { */ case 5:
			/* if (!((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low)))) { break; } */ if(!((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low)))) { $s = 6; continue; }
			_r$2 = r.Int63(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			v = _r$2;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return $div64(v, n, true);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int63n }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.max = max; $f.n = n; $f.r = r; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int63n = function(n) { return this.$val.Int63n(n); };
	Rand.ptr.prototype.Int31n = function(n) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, max, n, r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; max = $f.max; n = $f.n; r = $f.r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Int31n"));
		}
		/* */ if ((n & ((n - 1 >> 0))) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((n & ((n - 1 >> 0))) === 0) { */ case 1:
			_r = r.Int31(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r & ((n - 1 >> 0));
		/* } */ case 2:
		max = ((2147483647 - (_r$1 = 2147483648 % (n >>> 0), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >>> 0) >> 0);
		_r$2 = r.Int31(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		v = _r$2;
		/* while (true) { */ case 5:
			/* if (!(v > max)) { break; } */ if(!(v > max)) { $s = 6; continue; }
			_r$3 = r.Int31(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return (_r$4 = v % n, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int31n }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.max = max; $f.n = n; $f.r = r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int31n = function(n) { return this.$val.Int31n(n); };
	Rand.ptr.prototype.Intn = function(n) {
		var $ptr, _r, _r$1, n, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; n = $f.n; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Intn"));
		}
		/* */ if (n <= 2147483647) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n <= 2147483647) { */ case 1:
			_r = r.Int31n((n >> 0)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return (_r >> 0);
		/* } */ case 2:
		_r$1 = r.Int63n(new $Int64(0, n)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return ((x = _r$1, x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Intn }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.n = n; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Intn = function(n) { return this.$val.Intn(n); };
	Rand.ptr.prototype.Float64 = function() {
		var $ptr, _r, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* again: */ case 1:
		_r = r.Int63(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = $flatten64(_r) / 9.223372036854776e+18;
		/* */ if (f === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (f === 1) { */ case 3:
			/* goto again */ $s = 1; continue;
		/* } */ case 4:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Float64 }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Float64 = function() { return this.$val.Float64(); };
	Rand.ptr.prototype.Float32 = function() {
		var $ptr, _r, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* again: */ case 1:
		_r = r.Float64(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = $fround(_r);
		/* */ if (f === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (f === 1) { */ case 3:
			/* goto again */ $s = 1; continue;
		/* } */ case 4:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Float32 }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Float32 = function() { return this.$val.Float32(); };
	Rand.ptr.prototype.Perm = function(n) {
		var $ptr, _r, i, j, m, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; j = $f.j; m = $f.m; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		m = $makeSlice(sliceType, n);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_r = r.Intn(i + 1 >> 0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = _r;
			((i < 0 || i >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + i] = ((j < 0 || j >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + j]));
			((j < 0 || j >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + j] = i);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Perm }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.j = j; $f.m = m; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Perm = function(n) { return this.$val.Perm(n); };
	Rand.ptr.prototype.Read = function(p) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, _tuple$2, err, lk, n, ok, p, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; lk = $f.lk; n = $f.n; ok = $f.ok; p = $f.p; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		_tuple = $assertType(r.src, ptrType, true);
		lk = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = lk.read(p, (r.$ptr_readVal || (r.$ptr_readVal = new ptrType$2(function() { return this.$target.readVal; }, function($v) { this.$target.readVal = $v; }, r))), (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$1(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r)))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			n = _tuple$1[0];
			err = _tuple$1[1];
			$s = -1; return [n, err];
		/* } */ case 2:
		_r$1 = read(p, $methodVal(r, "Int63"), (r.$ptr_readVal || (r.$ptr_readVal = new ptrType$2(function() { return this.$target.readVal; }, function($v) { this.$target.readVal = $v; }, r))), (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$1(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r)))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$2 = _r$1;
		n = _tuple$2[0];
		err = _tuple$2[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.lk = lk; $f.n = n; $f.ok = ok; $f.p = p; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Read = function(p) { return this.$val.Read(p); };
	read = function(p, int63, readVal, readPos) {
		var $ptr, _r, err, int63, n, p, pos, readPos, readVal, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; err = $f.err; int63 = $f.int63; n = $f.n; p = $f.p; pos = $f.pos; readPos = $f.readPos; readVal = $f.readVal; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		pos = readPos.$get();
		val = readVal.$get();
		n = 0;
		/* while (true) { */ case 1:
			/* if (!(n < p.$length)) { break; } */ if(!(n < p.$length)) { $s = 2; continue; }
			/* */ if (pos === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (pos === 0) { */ case 3:
				_r = int63(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				val = _r;
				pos = 7;
			/* } */ case 4:
			((n < 0 || n >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + n] = (val.$low << 24 >>> 24));
			val = $shiftRightInt64(val, (8));
			pos = pos - (1) << 24 >> 24;
			n = n + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		readPos.$set(pos);
		readVal.$set(val);
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: read }; } $f.$ptr = $ptr; $f._r = _r; $f.err = err; $f.int63 = int63; $f.n = n; $f.p = p; $f.pos = pos; $f.readPos = readPos; $f.readVal = readVal; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.ptr.prototype.Int63 = function() {
		var $ptr, _r, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		r = this;
		r.lk.Lock();
		_r = r.src.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		r.lk.Unlock();
		$s = -1; return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Int63 }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Int63 = function() { return this.$val.Int63(); };
	lockedSource.ptr.prototype.Uint64 = function() {
		var $ptr, _r, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Uint64(0, 0);
		r = this;
		r.lk.Lock();
		_r = r.src.Uint64(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		r.lk.Unlock();
		$s = -1; return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Uint64 }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Uint64 = function() { return this.$val.Uint64(); };
	lockedSource.ptr.prototype.Seed = function(seed) {
		var $ptr, r, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		r.lk.Lock();
		$r = r.src.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r.lk.Unlock();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Seed }; } $f.$ptr = $ptr; $f.r = r; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	lockedSource.ptr.prototype.seedPos = function(seed, readPos) {
		var $ptr, r, readPos, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; readPos = $f.readPos; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		r.lk.Lock();
		$r = r.src.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		readPos.$set(0);
		r.lk.Unlock();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.seedPos }; } $f.$ptr = $ptr; $f.r = r; $f.readPos = readPos; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.seedPos = function(seed, readPos) { return this.$val.seedPos(seed, readPos); };
	lockedSource.ptr.prototype.read = function(p, readVal, readPos) {
		var $ptr, _r, _tuple, err, n, p, r, readPos, readVal, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; n = $f.n; p = $f.p; r = $f.r; readPos = $f.readPos; readVal = $f.readVal; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		r.lk.Lock();
		_r = read(p, $methodVal(r.src, "Int63"), readVal, readPos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		r.lk.Unlock();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.read }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.n = n; $f.p = p; $f.r = r; $f.readPos = readPos; $f.readVal = readVal; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.read = function(p, readVal, readPos) { return this.$val.read(p, readVal, readPos); };
	seedrand = function(x) {
		var $ptr, _q, _r, hi, lo, x;
		hi = (_q = x / 44488, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		lo = (_r = x % 44488, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		x = ($imul(48271, lo)) - ($imul(3399, hi)) >> 0;
		if (x < 0) {
			x = x + (2147483647) >> 0;
		}
		return x;
	};
	rngSource.ptr.prototype.Seed = function(seed) {
		var $ptr, i, rng, seed, u, x, x$1, x$2, x$3, x$4, x$5;
		rng = this;
		rng.tap = 0;
		rng.feed = 334;
		seed = $div64(seed, new $Int64(0, 2147483647), true);
		if ((seed.$high < 0 || (seed.$high === 0 && seed.$low < 0))) {
			seed = (x = new $Int64(0, 2147483647), new $Int64(seed.$high + x.$high, seed.$low + x.$low));
		}
		if ((seed.$high === 0 && seed.$low === 0)) {
			seed = new $Int64(0, 89482311);
		}
		x$1 = ((seed.$low + ((seed.$high >> 31) * 4294967296)) >> 0);
		i = -20;
		while (true) {
			if (!(i < 607)) { break; }
			x$1 = seedrand(x$1);
			if (i >= 0) {
				u = new $Int64(0, 0);
				u = $shiftLeft64(new $Int64(0, x$1), 40);
				x$1 = seedrand(x$1);
				u = (x$2 = $shiftLeft64(new $Int64(0, x$1), 20), new $Int64(u.$high ^ x$2.$high, (u.$low ^ x$2.$low) >>> 0));
				x$1 = seedrand(x$1);
				u = (x$3 = new $Int64(0, x$1), new $Int64(u.$high ^ x$3.$high, (u.$low ^ x$3.$low) >>> 0));
				u = (x$4 = ((i < 0 || i >= rng_cooked.length) ? ($throwRuntimeError("index out of range"), undefined) : rng_cooked[i]), new $Int64(u.$high ^ x$4.$high, (u.$low ^ x$4.$low) >>> 0));
				(x$5 = rng.vec, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i] = u));
			}
			i = i + (1) >> 0;
		}
	};
	rngSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	rngSource.ptr.prototype.Int63 = function() {
		var $ptr, rng, x, x$1;
		rng = this;
		return (x = (x$1 = rng.Uint64(), new $Uint64(x$1.$high & 2147483647, (x$1.$low & 4294967295) >>> 0)), new $Int64(x.$high, x.$low));
	};
	rngSource.prototype.Int63 = function() { return this.$val.Int63(); };
	rngSource.ptr.prototype.Uint64 = function() {
		var $ptr, rng, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		rng = this;
		rng.tap = rng.tap - (1) >> 0;
		if (rng.tap < 0) {
			rng.tap = rng.tap + (607) >> 0;
		}
		rng.feed = rng.feed - (1) >> 0;
		if (rng.feed < 0) {
			rng.feed = rng.feed + (607) >> 0;
		}
		x$6 = (x = (x$1 = rng.vec, x$2 = rng.feed, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])), x$3 = (x$4 = rng.vec, x$5 = rng.tap, ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5])), new $Int64(x.$high + x$3.$high, x.$low + x$3.$low));
		(x$7 = rng.vec, x$8 = rng.feed, ((x$8 < 0 || x$8 >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[x$8] = x$6));
		return new $Uint64(x$6.$high, x$6.$low);
	};
	rngSource.prototype.Uint64 = function() { return this.$val.Uint64(); };
	ptrType$3.methods = [{prop: "ExpFloat64", name: "ExpFloat64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "NormFloat64", name: "NormFloat64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Int31", name: "Int31", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int63n", name: "Int63n", pkg: "", typ: $funcType([$Int64], [$Int64], false)}, {prop: "Int31n", name: "Int31n", pkg: "", typ: $funcType([$Int32], [$Int32], false)}, {prop: "Intn", name: "Intn", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Float32", name: "Float32", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}];
	ptrType.methods = [{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "seedPos", name: "seedPos", pkg: "math/rand", typ: $funcType([$Int64, ptrType$1], [], false)}, {prop: "read", name: "read", pkg: "math/rand", typ: $funcType([sliceType$1, ptrType$2, ptrType$1], [$Int, $error], false)}];
	ptrType$5.methods = [{prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}];
	Source.init([{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}]);
	Source64.init([{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}]);
	Rand.init("math/rand", [{prop: "src", name: "src", exported: false, typ: Source, tag: ""}, {prop: "s64", name: "s64", exported: false, typ: Source64, tag: ""}, {prop: "readVal", name: "readVal", exported: false, typ: $Int64, tag: ""}, {prop: "readPos", name: "readPos", exported: false, typ: $Int8, tag: ""}]);
	lockedSource.init("math/rand", [{prop: "lk", name: "lk", exported: false, typ: nosync.Mutex, tag: ""}, {prop: "src", name: "src", exported: false, typ: Source64, tag: ""}]);
	rngSource.init("math/rand", [{prop: "tap", name: "tap", exported: false, typ: $Int, tag: ""}, {prop: "feed", name: "feed", exported: false, typ: $Int, tag: ""}, {prop: "vec", name: "vec", exported: false, typ: arrayType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = nosync.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ke = $toNativeArray($kindUint32, [3801129273, 0, 2615860924, 3279400049, 3571300752, 3733536696, 3836274812, 3906990442, 3958562475, 3997804264, 4028649213, 4053523342, 4074002619, 4091154507, 4105727352, 4118261130, 4129155133, 4138710916, 4147160435, 4154685009, 4161428406, 4167506077, 4173011791, 4178022498, 4182601930, 4186803325, 4190671498, 4194244443, 4197554582, 4200629752, 4203493986, 4206168142, 4208670408, 4211016720, 4213221098, 4215295924, 4217252177, 4219099625, 4220846988, 4222502074, 4224071896, 4225562770, 4226980400, 4228329951, 4229616109, 4230843138, 4232014925, 4233135020, 4234206673, 4235232866, 4236216336, 4237159604, 4238064994, 4238934652, 4239770563, 4240574564, 4241348362, 4242093539, 4242811568, 4243503822, 4244171579, 4244816032, 4245438297, 4246039419, 4246620374, 4247182079, 4247725394, 4248251127, 4248760037, 4249252839, 4249730206, 4250192773, 4250641138, 4251075867, 4251497493, 4251906522, 4252303431, 4252688672, 4253062674, 4253425844, 4253778565, 4254121205, 4254454110, 4254777611, 4255092022, 4255397640, 4255694750, 4255983622, 4256264513, 4256537670, 4256803325, 4257061702, 4257313014, 4257557464, 4257795244, 4258026541, 4258251531, 4258470383, 4258683258, 4258890309, 4259091685, 4259287526, 4259477966, 4259663135, 4259843154, 4260018142, 4260188212, 4260353470, 4260514019, 4260669958, 4260821380, 4260968374, 4261111028, 4261249421, 4261383632, 4261513736, 4261639802, 4261761900, 4261880092, 4261994441, 4262105003, 4262211835, 4262314988, 4262414513, 4262510454, 4262602857, 4262691764, 4262777212, 4262859239, 4262937878, 4263013162, 4263085118, 4263153776, 4263219158, 4263281289, 4263340187, 4263395872, 4263448358, 4263497660, 4263543789, 4263586755, 4263626565, 4263663224, 4263696735, 4263727099, 4263754314, 4263778377, 4263799282, 4263817020, 4263831582, 4263842955, 4263851124, 4263856071, 4263857776, 4263856218, 4263851370, 4263843206, 4263831695, 4263816804, 4263798497, 4263776735, 4263751476, 4263722676, 4263690284, 4263654251, 4263614520, 4263571032, 4263523724, 4263472530, 4263417377, 4263358192, 4263294892, 4263227394, 4263155608, 4263079437, 4262998781, 4262913534, 4262823581, 4262728804, 4262629075, 4262524261, 4262414220, 4262298801, 4262177846, 4262051187, 4261918645, 4261780032, 4261635148, 4261483780, 4261325704, 4261160681, 4260988457, 4260808763, 4260621313, 4260425802, 4260221905, 4260009277, 4259787550, 4259556329, 4259315195, 4259063697, 4258801357, 4258527656, 4258242044, 4257943926, 4257632664, 4257307571, 4256967906, 4256612870, 4256241598, 4255853155, 4255446525, 4255020608, 4254574202, 4254106002, 4253614578, 4253098370, 4252555662, 4251984571, 4251383021, 4250748722, 4250079132, 4249371435, 4248622490, 4247828790, 4246986404, 4246090910, 4245137315, 4244119963, 4243032411, 4241867296, 4240616155, 4239269214, 4237815118, 4236240596, 4234530035, 4232664930, 4230623176, 4228378137, 4225897409, 4223141146, 4220059768, 4216590757, 4212654085, 4208145538, 4202926710, 4196809522, 4189531420, 4180713890, 4169789475, 4155865042, 4137444620, 4111806704, 4073393724, 4008685917, 3873074895]);
		we = $toNativeArray($kindFloat32, [2.0249555365836613e-09, 1.4866739783681027e-11, 2.4409616689036184e-11, 3.1968806074589295e-11, 3.844677007314168e-11, 4.42282044321729e-11, 4.951644302919611e-11, 5.443358958023836e-11, 5.905943789574764e-11, 6.34494193296753e-11, 6.764381416113352e-11, 7.167294535648239e-11, 7.556032188826833e-11, 7.932458162551725e-11, 8.298078890689453e-11, 8.654132271912474e-11, 9.001651507523079e-11, 9.341507428706208e-11, 9.674443190998971e-11, 1.0001099254308699e-10, 1.0322031424037093e-10, 1.0637725422757427e-10, 1.0948611461891744e-10, 1.1255067711157807e-10, 1.1557434870246297e-10, 1.1856014781042035e-10, 1.2151082917633005e-10, 1.2442885610752796e-10, 1.2731647680563896e-10, 1.3017574518325858e-10, 1.330085347417409e-10, 1.3581656632677408e-10, 1.386014220061682e-10, 1.413645728254309e-10, 1.4410737880776736e-10, 1.4683107507629245e-10, 1.4953686899854546e-10, 1.522258291641876e-10, 1.5489899640730442e-10, 1.575573282952547e-10, 1.6020171300645814e-10, 1.628330109637588e-10, 1.6545202707884954e-10, 1.68059510752272e-10, 1.7065616975120435e-10, 1.73242697965037e-10, 1.758197337720091e-10, 1.783878739169964e-10, 1.8094774290045024e-10, 1.834998542005195e-10, 1.8604476292871652e-10, 1.8858298256319017e-10, 1.9111498494872592e-10, 1.9364125580789704e-10, 1.9616222535212557e-10, 1.9867835154840918e-10, 2.011900368525943e-10, 2.0369768372052732e-10, 2.062016807302669e-10, 2.0870240258208383e-10, 2.1120022397624894e-10, 2.136955057352452e-10, 2.1618855317040442e-10, 2.1867974098199738e-10, 2.2116936060356807e-10, 2.2365774510202385e-10, 2.2614519978869652e-10, 2.2863201609713002e-10, 2.3111849933865614e-10, 2.3360494094681883e-10, 2.3609159072179864e-10, 2.3857874009713953e-10, 2.4106666662859766e-10, 2.4355562011635357e-10, 2.460458781161634e-10, 2.485376904282077e-10, 2.5103127909709144e-10, 2.5352694943414633e-10, 2.560248957284017e-10, 2.585253955356137e-10, 2.610286709003873e-10, 2.6353494386732734e-10, 2.6604446423661443e-10, 2.6855745405285347e-10, 2.71074163116225e-10, 2.7359478571575835e-10, 2.7611959940720965e-10, 2.786487707240326e-10, 2.8118254946640775e-10, 2.8372118543451563e-10, 2.8626484516180994e-10, 2.8881380620404684e-10, 2.9136826285025563e-10, 2.9392840938946563e-10, 2.96494523377433e-10, 2.990667713476114e-10, 3.016454031001814e-10, 3.042306406797479e-10, 3.068226783753403e-10, 3.09421765987139e-10, 3.12028125559749e-10, 3.1464195138219964e-10, 3.17263521010247e-10, 3.1989300097734485e-10, 3.225306410836737e-10, 3.2517669112941405e-10, 3.2783134540359526e-10, 3.3049485370639786e-10, 3.3316743808242677e-10, 3.3584937608743815e-10, 3.385408342548857e-10, 3.4124211789610115e-10, 3.4395342130011386e-10, 3.4667499426710435e-10, 3.494071143528288e-10, 3.521500313574677e-10, 3.54903967325626e-10, 3.576691720574843e-10, 3.6044595086437425e-10, 3.632345535464765e-10, 3.660352021483959e-10, 3.688482297370399e-10, 3.716738583570134e-10, 3.7451239331964814e-10, 3.773641121807003e-10, 3.802292924959261e-10, 3.831082673322328e-10, 3.8600128648980103e-10, 3.8890865527996255e-10, 3.9183070676962473e-10, 3.9476774627011935e-10, 3.977200790927782e-10, 4.006880383045086e-10, 4.0367195697221803e-10, 4.066721681628138e-10, 4.0968900494320337e-10, 4.127228558914453e-10, 4.15774054074447e-10, 4.188429603146915e-10, 4.2192993543466173e-10, 4.25035395767992e-10, 4.2815970213716525e-10, 4.313032986313914e-10, 4.3446651831757777e-10, 4.376498607960855e-10, 4.408536868893975e-10, 4.4407846844229937e-10, 4.4732464954400086e-10, 4.5059267428371186e-10, 4.538830145062178e-10, 4.5719619756745544e-10, 4.605326675566346e-10, 4.638929240741163e-10, 4.672775499869886e-10, 4.706869893844612e-10, 4.74121908400349e-10, 4.775827511238617e-10, 4.810701836888143e-10, 4.845848167178701e-10, 4.881271498113904e-10, 4.916979601254923e-10, 4.952977472605369e-10, 4.989272883726414e-10, 5.025872495956207e-10, 5.062783525744408e-10, 5.100013189540675e-10, 5.13756870379467e-10, 5.175458395179078e-10, 5.21369003525507e-10, 5.252272505806843e-10, 5.29121357839557e-10, 5.330522134805449e-10, 5.3702081670437e-10, 5.41028055689452e-10, 5.450749851476644e-10, 5.491624932574268e-10, 5.532918012640664e-10, 5.574638528571541e-10, 5.616799247931681e-10, 5.659410717839819e-10, 5.702485705860738e-10, 5.746036979559221e-10, 5.790077306500052e-10, 5.83462111958255e-10, 5.879682296594524e-10, 5.925275825546805e-10, 5.971417249561739e-10, 6.01812211176167e-10, 6.065408175714992e-10, 6.113292094767075e-10, 6.16179329782085e-10, 6.21092954844471e-10, 6.260721940876124e-10, 6.311191569352559e-10, 6.362359528111483e-10, 6.414249686947926e-10, 6.466885360545405e-10, 6.520292639144998e-10, 6.574497612987784e-10, 6.629528592760892e-10, 6.685415554485985e-10, 6.742187919073217e-10, 6.799880103436351e-10, 6.858525969377638e-10, 6.918161599145378e-10, 6.978825850545434e-10, 7.040559801829716e-10, 7.103406751696184e-10, 7.167412219288849e-10, 7.232625609532306e-10, 7.2990985477972e-10, 7.366885990123251e-10, 7.436047333442275e-10, 7.506645305355164e-10, 7.57874762946642e-10, 7.652426470272644e-10, 7.727759543385559e-10, 7.804830115532013e-10, 7.883728114777e-10, 7.964550685635174e-10, 8.047402189070851e-10, 8.132396422944055e-10, 8.219657177122031e-10, 8.309318788590758e-10, 8.401527806789488e-10, 8.496445214056791e-10, 8.594246980742071e-10, 8.695127395874636e-10, 8.799300732498239e-10, 8.90700457834015e-10, 9.01850316648023e-10, 9.134091816243028e-10, 9.254100818978372e-10, 9.37890431984556e-10, 9.508922538259412e-10, 9.64463842123564e-10, 9.78660263939446e-10, 9.935448019859905e-10, 1.0091912860943353e-09, 1.0256859805934937e-09, 1.0431305819125214e-09, 1.0616465484503124e-09, 1.0813799855569073e-09, 1.1025096391392708e-09, 1.1252564435793033e-09, 1.149898620766976e-09, 1.176793218427008e-09, 1.2064089727203964e-09, 1.2393785997488749e-09, 1.2765849488616254e-09, 1.319313880365769e-09, 1.36954347862428e-09, 1.4305497897382224e-09, 1.5083649884672923e-09, 1.6160853766322703e-09, 1.7921247819074893e-09]);
		fe = $toNativeArray($kindFloat32, [1, 0.9381436705589294, 0.900469958782196, 0.8717043399810791, 0.847785472869873, 0.8269932866096497, 0.8084216713905334, 0.7915276288986206, 0.7759568691253662, 0.7614634037017822, 0.7478685975074768, 0.7350381016731262, 0.7228676676750183, 0.7112747430801392, 0.7001926302909851, 0.6895664930343628, 0.6793505549430847, 0.669506311416626, 0.6600008606910706, 0.6508058309555054, 0.6418967247009277, 0.633251965045929, 0.62485271692276, 0.6166821718215942, 0.608725368976593, 0.6009689569473267, 0.5934008955955505, 0.5860103368759155, 0.5787873864173889, 0.5717230439186096, 0.5648092031478882, 0.5580382943153381, 0.5514034032821655, 0.5448982119560242, 0.5385168790817261, 0.5322538614273071, 0.526104211807251, 0.5200631618499756, 0.5141264200210571, 0.5082897543907166, 0.5025495290756226, 0.4969019889831543, 0.4913438558578491, 0.4858720004558563, 0.48048335313796997, 0.4751752018928528, 0.4699448347091675, 0.4647897481918335, 0.4597076177597046, 0.4546961486339569, 0.4497532546520233, 0.44487687945365906, 0.4400651156902313, 0.4353161156177521, 0.4306281507015228, 0.42599955201148987, 0.42142874002456665, 0.4169141948223114, 0.4124544560909271, 0.40804818272590637, 0.4036940038204193, 0.39939069747924805, 0.3951369822025299, 0.39093172550201416, 0.38677382469177246, 0.38266217708587646, 0.378595769405365, 0.37457355856895447, 0.37059465050697327, 0.366658091545105, 0.362762987613678, 0.358908474445343, 0.35509374737739563, 0.35131800174713135, 0.3475804924964905, 0.34388044476509094, 0.34021714329719543, 0.33658990263938904, 0.3329980671405792, 0.3294409513473511, 0.32591795921325684, 0.32242849469184875, 0.3189719021320343, 0.3155476748943329, 0.31215524673461914, 0.3087940812110901, 0.30546361207962036, 0.30216339230537415, 0.29889291524887085, 0.29565170407295227, 0.2924392819404602, 0.2892552316188812, 0.28609907627105713, 0.2829704284667969, 0.27986884117126465, 0.2767939269542694, 0.2737452983856201, 0.2707225978374481, 0.26772540807724, 0.26475343108177185, 0.2618062496185303, 0.258883535861969, 0.2559850215911865, 0.25311028957366943, 0.25025907158851624, 0.24743106961250305, 0.2446259707212448, 0.24184346199035645, 0.23908329010009766, 0.23634515702724457, 0.2336287796497345, 0.23093391954898834, 0.22826029360294342, 0.22560766339302063, 0.22297576069831848, 0.22036437690258026, 0.21777324378490448, 0.21520215272903442, 0.212650865316391, 0.21011915802955627, 0.20760682225227356, 0.20511364936828613, 0.20263944566249847, 0.20018397271633148, 0.19774706661701202, 0.1953285187482834, 0.19292815029621124, 0.19054576754570007, 0.18818120658397675, 0.18583425879478455, 0.18350479006767273, 0.18119260668754578, 0.17889754474163055, 0.17661945521831512, 0.17435817420482635, 0.1721135377883911, 0.16988539695739746, 0.16767361760139465, 0.16547803580760956, 0.16329853236675262, 0.16113494336605072, 0.1589871346950531, 0.15685498714447021, 0.15473836660385132, 0.15263713896274567, 0.1505511850118637, 0.1484803706407547, 0.14642459154129028, 0.1443837285041809, 0.14235764741897583, 0.1403462439775467, 0.13834942877292633, 0.136367067694664, 0.13439907133579254, 0.1324453204870224, 0.1305057406425476, 0.12858019769191742, 0.12666863203048706, 0.12477091699838638, 0.12288697808980942, 0.1210167184472084, 0.11916005611419678, 0.11731690168380737, 0.11548716574907303, 0.11367076635360718, 0.11186762899160385, 0.11007767915725708, 0.1083008274435997, 0.10653700679540634, 0.10478614270687103, 0.1030481606721878, 0.10132300108671188, 0.0996105819940567, 0.09791085124015808, 0.09622374176979065, 0.09454918652772903, 0.09288713335990906, 0.09123751521110535, 0.08960027992725372, 0.08797537535429001, 0.08636274188756943, 0.0847623273730278, 0.08317409455776215, 0.08159798383712769, 0.08003395050764084, 0.07848194986581802, 0.07694194465875626, 0.07541389018297195, 0.07389774918556213, 0.07239348441362381, 0.070901058614254, 0.06942043453454971, 0.06795158982276917, 0.06649449467658997, 0.06504911929368973, 0.06361543387174606, 0.06219341605901718, 0.06078304722905159, 0.0593843050301075, 0.05799717456102371, 0.05662164092063904, 0.05525768920779228, 0.05390531197190285, 0.05256449431180954, 0.05123523622751236, 0.04991753399372101, 0.04861138388514519, 0.047316793352365494, 0.04603376239538193, 0.044762298464775085, 0.04350241273641586, 0.04225412383675575, 0.04101744294166565, 0.039792392402887344, 0.03857899457216263, 0.03737728297710419, 0.03618728369474411, 0.03500903770327568, 0.03384258225560188, 0.0326879620552063, 0.031545232981443405, 0.030414443463087082, 0.0292956605553627, 0.028188949450850487, 0.027094384655356407, 0.02601204626262188, 0.024942025542259216, 0.023884421214461327, 0.022839335724711418, 0.021806888282299042, 0.020787203684449196, 0.019780423492193222, 0.018786700442433357, 0.017806200310587883, 0.016839107498526573, 0.015885621309280396, 0.014945968054234982, 0.01402039173990488, 0.013109165243804455, 0.012212592177093029, 0.011331013403832912, 0.010464809834957123, 0.009614413604140282, 0.008780314587056637, 0.007963077165186405, 0.007163353264331818, 0.0063819061033427715, 0.005619642324745655, 0.004877655766904354, 0.004157294984906912, 0.003460264764726162, 0.0027887988835573196, 0.0021459676790982485, 0.001536299823783338, 0.0009672692976891994, 0.0004541343660093844]);
		kn = $toNativeArray($kindUint32, [1991057938, 0, 1611602771, 1826899878, 1918584482, 1969227037, 2001281515, 2023368125, 2039498179, 2051788381, 2061460127, 2069267110, 2075699398, 2081089314, 2085670119, 2089610331, 2093034710, 2096037586, 2098691595, 2101053571, 2103168620, 2105072996, 2106796166, 2108362327, 2109791536, 2111100552, 2112303493, 2113412330, 2114437283, 2115387130, 2116269447, 2117090813, 2117856962, 2118572919, 2119243101, 2119871411, 2120461303, 2121015852, 2121537798, 2122029592, 2122493434, 2122931299, 2123344971, 2123736059, 2124106020, 2124456175, 2124787725, 2125101763, 2125399283, 2125681194, 2125948325, 2126201433, 2126441213, 2126668298, 2126883268, 2127086657, 2127278949, 2127460589, 2127631985, 2127793506, 2127945490, 2128088244, 2128222044, 2128347141, 2128463758, 2128572095, 2128672327, 2128764606, 2128849065, 2128925811, 2128994934, 2129056501, 2129110560, 2129157136, 2129196237, 2129227847, 2129251929, 2129268426, 2129277255, 2129278312, 2129271467, 2129256561, 2129233410, 2129201800, 2129161480, 2129112170, 2129053545, 2128985244, 2128906855, 2128817916, 2128717911, 2128606255, 2128482298, 2128345305, 2128194452, 2128028813, 2127847342, 2127648860, 2127432031, 2127195339, 2126937058, 2126655214, 2126347546, 2126011445, 2125643893, 2125241376, 2124799783, 2124314271, 2123779094, 2123187386, 2122530867, 2121799464, 2120980787, 2120059418, 2119015917, 2117825402, 2116455471, 2114863093, 2112989789, 2110753906, 2108037662, 2104664315, 2100355223, 2094642347, 2086670106, 2074676188, 2054300022, 2010539237]);
		wn = $toNativeArray($kindFloat32, [1.7290404663583558e-09, 1.2680928529462676e-10, 1.689751810696194e-10, 1.9862687883343e-10, 2.223243117382978e-10, 2.4244936613904144e-10, 2.601613091623989e-10, 2.761198769629658e-10, 2.9073962681813725e-10, 3.042996965518796e-10, 3.169979556627567e-10, 3.289802041894774e-10, 3.4035738116777736e-10, 3.5121602848242617e-10, 3.61625090983253e-10, 3.7164057942185025e-10, 3.813085680537398e-10, 3.906675816178762e-10, 3.997501218933053e-10, 4.0858399996679395e-10, 4.1719308563337165e-10, 4.255982233303257e-10, 4.3381759295968436e-10, 4.4186720948857783e-10, 4.497613115272969e-10, 4.57512583373898e-10, 4.6513240481438345e-10, 4.726310454117311e-10, 4.800177477726209e-10, 4.873009773476156e-10, 4.944885056978876e-10, 5.015873272284921e-10, 5.086040477664255e-10, 5.155446070048697e-10, 5.224146670812502e-10, 5.292193350214802e-10, 5.359634958068682e-10, 5.426517013518151e-10, 5.492881705038144e-10, 5.558769555769061e-10, 5.624218868405251e-10, 5.689264614971989e-10, 5.75394121238304e-10, 5.818281967329142e-10, 5.882316855831959e-10, 5.946076964136182e-10, 6.009590047817426e-10, 6.072883862451306e-10, 6.135985053390414e-10, 6.19892026598734e-10, 6.261713370037114e-10, 6.324390455780815e-10, 6.386973727678935e-10, 6.449488165749528e-10, 6.511955974453087e-10, 6.574400468473129e-10, 6.636843297158634e-10, 6.699307220081607e-10, 6.761814441702541e-10, 6.824387166481927e-10, 6.887046488657234e-10, 6.949815167800466e-10, 7.012714853260604e-10, 7.075767749498141e-10, 7.13899661608508e-10, 7.202424212593428e-10, 7.266072743483676e-10, 7.329966078550854e-10, 7.394128087589991e-10, 7.458582640396116e-10, 7.523354716987285e-10, 7.588469852493063e-10, 7.653954137154528e-10, 7.719834771435785e-10, 7.786139510912449e-10, 7.852897221383159e-10, 7.920137878869582e-10, 7.987892014504894e-10, 8.056192379868321e-10, 8.125072836762115e-10, 8.194568912323064e-10, 8.264716688799467e-10, 8.3355555791087e-10, 8.407127216614185e-10, 8.479473234679347e-10, 8.552640262671218e-10, 8.626675485068347e-10, 8.701631637464402e-10, 8.777562010564566e-10, 8.854524335966119e-10, 8.932581896381464e-10, 9.011799639857543e-10, 9.092249730890956e-10, 9.174008219758889e-10, 9.25715837318819e-10, 9.341788453909317e-10, 9.42799727177146e-10, 9.515889187738935e-10, 9.605578554783278e-10, 9.697193048552322e-10, 9.790869226478094e-10, 9.886760299337993e-10, 9.985036131254788e-10, 1.008588212947359e-09, 1.0189509236369076e-09, 1.0296150598776421e-09, 1.040606933955246e-09, 1.0519566329136865e-09, 1.0636980185552147e-09, 1.0758701707302976e-09, 1.0885182755160372e-09, 1.101694735439196e-09, 1.115461056855338e-09, 1.1298901814171813e-09, 1.1450695946990663e-09, 1.1611052119775422e-09, 1.178127595480305e-09, 1.1962995039027646e-09, 1.2158286599728285e-09, 1.2369856250415978e-09, 1.2601323318151003e-09, 1.2857697129220469e-09, 1.3146201904845611e-09, 1.3477839955200466e-09, 1.3870635751089821e-09, 1.43574030442295e-09, 1.5008658760251592e-09, 1.6030947680434338e-09]);
		fn = $toNativeArray($kindFloat32, [1, 0.963599681854248, 0.9362826943397522, 0.9130436182022095, 0.8922816514968872, 0.8732430338859558, 0.8555005788803101, 0.8387836217880249, 0.8229072093963623, 0.8077383041381836, 0.7931770086288452, 0.7791460752487183, 0.7655841708183289, 0.7524415850639343, 0.7396772503852844, 0.7272568941116333, 0.7151514887809753, 0.7033361196517944, 0.6917891502380371, 0.6804918646812439, 0.6694276928901672, 0.6585819721221924, 0.6479418277740479, 0.6374954581260681, 0.6272324919700623, 0.6171433925628662, 0.6072195172309875, 0.5974531769752502, 0.5878370404243469, 0.5783646702766418, 0.5690299868583679, 0.5598273873329163, 0.550751805305481, 0.5417983531951904, 0.5329626798629761, 0.5242405533790588, 0.5156282186508179, 0.5071220397949219, 0.49871864914894104, 0.4904148280620575, 0.48220765590667725, 0.47409430146217346, 0.466072142124176, 0.45813870429992676, 0.45029163360595703, 0.44252872467041016, 0.4348478317260742, 0.42724698781967163, 0.41972434520721436, 0.41227802634239197, 0.40490642189979553, 0.39760786294937134, 0.3903807997703552, 0.3832238018512726, 0.3761354684829712, 0.3691144585609436, 0.36215949058532715, 0.3552693724632263, 0.3484429717063904, 0.3416791558265686, 0.33497685194015503, 0.32833510637283325, 0.3217529058456421, 0.3152293860912323, 0.30876362323760986, 0.3023548424243927, 0.2960021495819092, 0.2897048592567444, 0.28346219658851624, 0.2772735059261322, 0.271138072013855, 0.2650552988052368, 0.25902456045150757, 0.25304529070854187, 0.24711695313453674, 0.24123899638652802, 0.23541094362735748, 0.22963231801986694, 0.22390270233154297, 0.21822164952754974, 0.21258877217769623, 0.20700371265411377, 0.20146611332893372, 0.1959756463766098, 0.19053204357624054, 0.18513499200344086, 0.17978426814079285, 0.1744796335697174, 0.16922089457511902, 0.16400785744190216, 0.1588403731584549, 0.15371830761432648, 0.14864157140254974, 0.14361007511615753, 0.13862377405166626, 0.13368265330791473, 0.12878671288490295, 0.12393598258495331, 0.11913054436445236, 0.11437050998210907, 0.10965602099895477, 0.1049872562289238, 0.10036443918943405, 0.09578784555196762, 0.09125780314207077, 0.08677466958761215, 0.08233889937400818, 0.07795098423957825, 0.07361150532960892, 0.06932111829519272, 0.06508058309555054, 0.06089077144861221, 0.05675266310572624, 0.05266740173101425, 0.048636294901371, 0.044660862535238266, 0.040742866694927216, 0.03688438981771469, 0.03308788686990738, 0.029356317594647408, 0.025693291798233986, 0.02210330404341221, 0.018592102453112602, 0.015167297795414925, 0.011839478276669979, 0.0086244847625494, 0.005548994988203049, 0.0026696291752159595]);
		rng_cooked = $toNativeArray($kindInt64, [new $Int64(-973649357, 3952672746), new $Int64(-1065661887, 3130416987), new $Int64(324977939, 3414273807), new $Int64(1241840476, 2806224363), new $Int64(-1477934308, 1997590414), new $Int64(2103305448, 2402795971), new $Int64(1663160183, 1140819369), new $Int64(1120601685, 1788868961), new $Int64(1848035537, 1089001426), new $Int64(1235702047, 873593504), new $Int64(1911387977, 581324885), new $Int64(-1654874170, 1609182556), new $Int64(1069394745, 1241596776), new $Int64(1895445337, 1771189259), new $Int64(-1374618802, 3467012610), new $Int64(-140526423, 2344407434), new $Int64(-1745367887, 782467244), new $Int64(26335124, 3404933915), new $Int64(1063924276, 618867887), new $Int64(-968700782, 520164395), new $Int64(-1591572833, 1341358184), new $Int64(-1515085039, 665794848), new $Int64(1527227641, 3183648150), new $Int64(1781176124, 696329606), new $Int64(1789146075, 4151988961), new $Int64(-2087444114, 998951326), new $Int64(-612324923, 1364957564), new $Int64(63173359, 4090230633), new $Int64(-1498029007, 4009697548), new $Int64(248009524, 2569622517), new $Int64(778703922, 3742421481), new $Int64(-1109106023, 1506914633), new $Int64(1738099768, 1983412561), new $Int64(236311649, 1436266083), new $Int64(-1111517500, 3922894967), new $Int64(-1336974714, 1792680179), new $Int64(563141142, 1188796351), new $Int64(1349617468, 405968250), new $Int64(1044074554, 433754187), new $Int64(870549669, 4073162024), new $Int64(-1094251604, 433121399), new $Int64(2451824, 4162580594), new $Int64(-137262572, 4132415622), new $Int64(-1536231048, 3033822028), new $Int64(2016407895, 824682382), new $Int64(2366218, 3583765414), new $Int64(-624604839, 535386927), new $Int64(1637219058, 2286693689), new $Int64(1453075389, 2968466525), new $Int64(193683513, 1351410206), new $Int64(-283806096, 1412813499), new $Int64(492736522, 4126267639), new $Int64(512765208, 2105529399), new $Int64(2132966268, 2413882233), new $Int64(947457634, 32226200), new $Int64(1149341356, 2032329073), new $Int64(106485445, 1356518208), new $Int64(-2067810156, 3430061722), new $Int64(-1484435135, 3820169661), new $Int64(-1665985194, 2981816134), new $Int64(1017155588, 4184371017), new $Int64(206574701, 2119206761), new $Int64(-852109057, 2472200560), new $Int64(-560457548, 2853524696), new $Int64(1307803389, 1681119904), new $Int64(-174986835, 95608918), new $Int64(392686347, 3690479145), new $Int64(-1205570926, 1397922290), new $Int64(-1159314025, 1516129515), new $Int64(-320178155, 1547420459), new $Int64(1311333971, 1470949486), new $Int64(-1953469798, 1336785672), new $Int64(-45086614, 4131677129), new $Int64(-1392278100, 4246329084), new $Int64(-1142500187, 3788585631), new $Int64(-66478285, 3080389532), new $Int64(-646438364, 2215402037), new $Int64(391002300, 1171593935), new $Int64(1408774047, 1423855166), new $Int64(-519177718, 2276716302), new $Int64(-368453140, 2068027241), new $Int64(1369359303, 3427553297), new $Int64(189241615, 3289637845), new $Int64(1057480830, 3486407650), new $Int64(-1512910664, 3071877822), new $Int64(1159653919, 3363620705), new $Int64(-934256930, 4159821533), new $Int64(-76621938, 1894661), new $Int64(-674493898, 1156868282), new $Int64(348271067, 776219088), new $Int64(-501428838, 2425634259), new $Int64(1716021749, 680510161), new $Int64(-574263456, 1310101429), new $Int64(1095885995, 2964454134), new $Int64(-325695512, 3467098407), new $Int64(1990672920, 2109628894), new $Int64(-2139648704, 1232604732), new $Int64(-1838070714, 3261916179), new $Int64(1699175360, 434597899), new $Int64(235436061, 1624796439), new $Int64(-1626402839, 3589632480), new $Int64(1198416575, 864579159), new $Int64(-1938748161, 1380889830), new $Int64(619206309, 2654509477), new $Int64(1419738251, 1468209306), new $Int64(-1744284772, 100794388), new $Int64(-1191421458, 2991674471), new $Int64(-208666741, 2224662036), new $Int64(-173659161, 977097250), new $Int64(1351320195, 726419512), new $Int64(-183459897, 1747974366), new $Int64(-753095183, 1556430604), new $Int64(-1049492215, 1080776742), new $Int64(-385846958, 280794874), new $Int64(117767733, 919835643), new $Int64(-967009426, 3434019658), new $Int64(-1951414480, 2461941785), new $Int64(133215641, 3615001066), new $Int64(417204809, 3103414427), new $Int64(790056561, 3380809712), new $Int64(-1267681408, 2724693469), new $Int64(547796833, 598827710), new $Int64(-1846559452, 3452273442), new $Int64(-75778224, 649274915), new $Int64(-801301329, 2585724112), new $Int64(-1510934263, 3165579553), new $Int64(1185578221, 2635894283), new $Int64(-52910178, 2053289721), new $Int64(985976581, 3169337108), new $Int64(1170569632, 144717764), new $Int64(1079216270, 1383666384), new $Int64(-124804942, 681540375), new $Int64(1375448925, 537050586), new $Int64(-1964768344, 315246468), new $Int64(226402871, 849323088), new $Int64(-885062465, 45543944), new $Int64(-946445250, 2319052083), new $Int64(-40708194, 3613090841), new $Int64(560472520, 2992171180), new $Int64(-381863169, 2068244785), new $Int64(917538188, 4239862634), new $Int64(-1369555809, 3892253031), new $Int64(720683925, 958186149), new $Int64(-423297785, 1877702262), new $Int64(1357886971, 837674867), new $Int64(1837048883, 1507589294), new $Int64(1905518400, 873336795), new $Int64(-1879761037, 2764496274), new $Int64(-1806480530, 4196182374), new $Int64(-1066765755, 550964545), new $Int64(818747069, 420611474), new $Int64(-1924830376, 204265180), new $Int64(1549974541, 1787046383), new $Int64(1215581865, 3102292318), new $Int64(418321538, 1552199393), new $Int64(1243493047, 980542004), new $Int64(267284263, 3293718720), new $Int64(1179528763, 3771917473), new $Int64(599484404, 2195808264), new $Int64(252818753, 3894702887), new $Int64(-1367475956, 2099949527), new $Int64(1424094358, 338442522), new $Int64(490737398, 637158004), new $Int64(-1727621530, 281976339), new $Int64(574970164, 3619802330), new $Int64(-431930823, 3084554784), new $Int64(-1264611183, 4129772886), new $Int64(-2104399043, 1680378557), new $Int64(-1621962591, 3339087776), new $Int64(1680500332, 4220317857), new $Int64(-1935828963, 2959322499), new $Int64(1675600481, 1488354890), new $Int64(-834863562, 3958162143), new $Int64(-1226511573, 2773705983), new $Int64(1876039582, 225908689), new $Int64(-1183735113, 908216283), new $Int64(-605696219, 3574646075), new $Int64(-1827723091, 1936937569), new $Int64(1519770881, 75492235), new $Int64(816689472, 1935193178), new $Int64(2142521206, 2018250883), new $Int64(455141620, 3943126022), new $Int64(-601399488, 3066544345), new $Int64(1932392669, 2793082663), new $Int64(-1239009361, 3297036421), new $Int64(1640597065, 2206987825), new $Int64(-553246738, 807894872), new $Int64(-1781325307, 766252117), new $Int64(2060649606, 3833114345), new $Int64(845619743, 1255067973), new $Int64(1201145605, 741697208), new $Int64(-1476242608, 2810093753), new $Int64(1109032642, 4229340371), new $Int64(1462188720, 1361684224), new $Int64(-1159399429, 1906263026), new $Int64(475781207, 3904421704), new $Int64(-623537128, 1769075545), new $Int64(1062308525, 2621599764), new $Int64(1279509432, 3431891480), new $Int64(-1742751146, 1871896503), new $Int64(128756421, 1412808876), new $Int64(1605404688, 952876175), new $Int64(-230443691, 1824438899), new $Int64(1662295856, 1005035476), new $Int64(-156574141, 527508597), new $Int64(1288873303, 3066806859), new $Int64(565995893, 3244940914), new $Int64(-889746188, 209092916), new $Int64(-247669406, 1242699167), new $Int64(-713830396, 456723774), new $Int64(1776978905, 1001252870), new $Int64(1468772157, 2026725874), new $Int64(857254202, 2137562569), new $Int64(765939740, 3183366709), new $Int64(1533887628, 2612072960), new $Int64(56977098, 1727148468), new $Int64(-1197583895, 3803658212), new $Int64(1883670356, 479946959), new $Int64(685713571, 1562982345), new $Int64(-1946242443, 1766109365), new $Int64(700596547, 3257093788), new $Int64(-184714929, 2365720207), new $Int64(93384808, 3742754173), new $Int64(-458385235, 2878193673), new $Int64(1096135042, 2174002182), new $Int64(-834260953, 3573511231), new $Int64(-754572527, 1760299077), new $Int64(-1375627191, 2260779833), new $Int64(-866019274, 1452805722), new $Int64(-1229671918, 2940011802), new $Int64(1890251082, 1886183802), new $Int64(893897673, 2514369088), new $Int64(1644345561, 3924317791), new $Int64(-1974867432, 500935732), new $Int64(1403501753, 676580929), new $Int64(-1565912283, 1184984890), new $Int64(-691968413, 1271474274), new $Int64(-1828754738, 3163791473), new $Int64(2051027584, 2842487377), new $Int64(1511537551, 2170968612), new $Int64(573262976, 3535856740), new $Int64(-2053227187, 1488599718), new $Int64(-1180531831, 3408913763), new $Int64(-2086531912, 2501050084), new $Int64(-875130448, 1639124157), new $Int64(-2009482504, 4088176393), new $Int64(1574896563, 3989947576), new $Int64(-165243708, 3414355209), new $Int64(-792329287, 2275136352), new $Int64(-2057774345, 2151835223), new $Int64(-931144933, 1654534827), new $Int64(-679921451, 377892833), new $Int64(-482716010, 660204544), new $Int64(85706799, 390828249), new $Int64(-1422172693, 3402783878), new $Int64(-1468634160, 3717936603), new $Int64(1113532086, 2211058823), new $Int64(1564224320, 2692150867), new $Int64(1952770442, 1928910388), new $Int64(788716862, 3931011137), new $Int64(1083670504, 1112701047), new $Int64(-68150572, 2452299106), new $Int64(-896164822, 2337204777), new $Int64(1774877857, 273889282), new $Int64(1798719843, 1462008793), new $Int64(2138834788, 1554494002), new $Int64(-1194967131, 182675323), new $Int64(-1598554764, 1882802136), new $Int64(589279648, 3700220025), new $Int64(381039426, 3083431543), new $Int64(-851859191, 3622207527), new $Int64(338126939, 432729309), new $Int64(-1667470126, 2391914317), new $Int64(-1849558151, 235747924), new $Int64(2120733629, 3088823825), new $Int64(-745079795, 2314658321), new $Int64(1165929723, 2957634338), new $Int64(501323675, 4117056981), new $Int64(1564699815, 1482500298), new $Int64(-740826490, 840489337), new $Int64(799522364, 3483178565), new $Int64(532129761, 2074004656), new $Int64(724246478, 3643392642), new $Int64(-665153481, 1583624461), new $Int64(-885822954, 287473085), new $Int64(1667835381, 3136843981), new $Int64(1138806821, 1266970974), new $Int64(135185781, 1998688839), new $Int64(392094735, 1492900209), new $Int64(1031326774, 1538112737), new $Int64(-2070568842, 2207265429), new $Int64(-1886797613, 963263315), new $Int64(1671145500, 2295892134), new $Int64(1068469660, 2002560897), new $Int64(-356250305, 1369254035), new $Int64(33436120, 3353312708), new $Int64(57507843, 947771099), new $Int64(-1945755145, 1747061399), new $Int64(1507240140, 2047354631), new $Int64(720000810, 4165367136), new $Int64(479265078, 3388864963), new $Int64(-952181250, 286492130), new $Int64(2045622690, 2795735007), new $Int64(-715730566, 3703961339), new $Int64(-148436487, 1797825479), new $Int64(1429039600, 1116589674), new $Int64(-1665420098, 2593309206), new $Int64(1329049334, 3404995677), new $Int64(-750579440, 3453462936), new $Int64(1014767077, 3016498634), new $Int64(75698599, 1650371545), new $Int64(1592007860, 212344364), new $Int64(1127766888, 3843932156), new $Int64(-748019856, 3573129983), new $Int64(-890581831, 665897820), new $Int64(1071492673, 1675628772), new $Int64(243225682, 2831752928), new $Int64(2120298836, 1486294219), new $Int64(-1954407413, 268782709), new $Int64(-1002123503, 4186179080), new $Int64(624342951, 1613720397), new $Int64(857179861, 2703686015), new $Int64(-911618704, 2205342611), new $Int64(-672703993, 1411666394), new $Int64(-1528454899, 677744900), new $Int64(-1876628533, 4172867247), new $Int64(135494707, 2163418403), new $Int64(849547544, 2841526879), new $Int64(-1117516959, 1082141470), new $Int64(-1770111792, 4046134367), new $Int64(51415528, 2142943655), new $Int64(-249824333, 3124627521), new $Int64(998228909, 219992939), new $Int64(-1078790951, 1756846531), new $Int64(1283749206, 1225118210), new $Int64(-525858006, 1647770243), new $Int64(-2035959705, 444807907), new $Int64(2036369448, 3952076173), new $Int64(53201823, 1461839639), new $Int64(315761893, 3699250910), new $Int64(702974850, 1373688981), new $Int64(734022261, 147523747), new $Int64(-2047330906, 1211276581), new $Int64(1294440951, 2548832680), new $Int64(1144696256, 1995631888), new $Int64(-1992983070, 2011457303), new $Int64(-1351022674, 3057425772), new $Int64(667839456, 81484597), new $Int64(-1681980888, 3646681560), new $Int64(-1372462725, 635548515), new $Int64(602489502, 2508044581), new $Int64(-1794220117, 1014917157), new $Int64(719992433, 3214891315), new $Int64(-1294799037, 959582252), new $Int64(226415134, 3347040449), new $Int64(-362868096, 4102971975), new $Int64(397887437, 4078022210), new $Int64(-536803826, 2851767182), new $Int64(-1398321012, 1540160644), new $Int64(-1549098876, 1057290595), new $Int64(-112592988, 3907769253), new $Int64(579300318, 4248952684), new $Int64(-1054576049, 132554364), new $Int64(-1085862414, 1029351092), new $Int64(697840928, 2583007416), new $Int64(298619124, 1486185789), new $Int64(55905697, 2871589073), new $Int64(2017643612, 723203291), new $Int64(146250550, 2494333952), new $Int64(-1082993397, 2230939180), new $Int64(-1804568072, 3943232912), new $Int64(1768732449, 2181367922), new $Int64(-729261111, 2889274791), new $Int64(1824032949, 2046728161), new $Int64(1653899792, 1376052477), new $Int64(1022327048, 381236993), new $Int64(-1113097690, 3188942166), new $Int64(-74480109, 350070824), new $Int64(144881592, 61758415), new $Int64(-741824226, 3492950336), new $Int64(-2030042720, 3093818430), new $Int64(-453590535, 2962480613), new $Int64(-1912050708, 3154871160), new $Int64(-1636478569, 3228564679), new $Int64(610731502, 888276216), new $Int64(-946702974, 3574998604), new $Int64(-1277068380, 1967526716), new $Int64(-1556147941, 1554691298), new $Int64(-1573024234, 339944798), new $Int64(1223764147, 1154515356), new $Int64(1825645307, 967516237), new $Int64(1546195135, 596588202), new $Int64(-1867600880, 3764362170), new $Int64(-1655392592, 266611402), new $Int64(-393255880, 2047856075), new $Int64(-1000726433, 21444105), new $Int64(-949424754, 3065563181), new $Int64(-232418803, 1140663212), new $Int64(633187674, 2323741028), new $Int64(2126290159, 3103873707), new $Int64(1008658319, 2766828349), new $Int64(-485587503, 1970872996), new $Int64(1628585413, 3766615585), new $Int64(-595148528, 2036813414), new $Int64(-1994877121, 3105536507), new $Int64(13954645, 3396176938), new $Int64(-721402003, 1377154485), new $Int64(-61839181, 3807014186), new $Int64(543009040, 3710110597), new $Int64(-1751425519, 916420443), new $Int64(734556788, 2103831255), new $Int64(-1766161494, 717331943), new $Int64(-1574598896, 3550505941), new $Int64(45939673, 378749927), new $Int64(-1997615719, 611017331), new $Int64(592130075, 758907650), new $Int64(1012992349, 154266815), new $Int64(-1040454942, 1407468696), new $Int64(-1678191250, 970098704), new $Int64(-285057486, 1971660656), new $Int64(998365243, 3332747885), new $Int64(1947089649, 1935189867), new $Int64(1510248801, 203520055), new $Int64(-1305165746, 3916463034), new $Int64(-388598655, 3474113316), new $Int64(1036101639, 316544223), new $Int64(-1773744891, 1650844677), new $Int64(-907191419, 4267565603), new $Int64(-1070275024, 2501167616), new $Int64(-1520651863, 3929401789), new $Int64(-2091360852, 337170252), new $Int64(-960502090, 2061966842), new $Int64(-304190848, 2508461464), new $Int64(-1941471116, 2791377107), new $Int64(1240791848, 1227227588), new $Int64(1813978778, 1709681848), new $Int64(1153692192, 3768820575), new $Int64(-1002297449, 2887126398), new $Int64(-1447111334, 296561685), new $Int64(700300844, 3729960077), new $Int64(-1572311344, 372833036), new $Int64(2078875613, 2409779288), new $Int64(1829161290, 555274064), new $Int64(-1105595719, 4239804901), new $Int64(1839403216, 3723486978), new $Int64(-1649093095, 2145871984), new $Int64(-1582765715, 3565480803), new $Int64(-1568653827, 2197313814), new $Int64(974785092, 3613674566), new $Int64(438638731, 3042093666), new $Int64(-96556264, 3324034321), new $Int64(869420878, 3708873369), new $Int64(946682149, 1698090092), new $Int64(1618900382, 4213940712), new $Int64(-1843479747, 2087477361), new $Int64(-1766167800, 2407950639), new $Int64(-1296225558, 3942568569), new $Int64(-1223900450, 4088074412), new $Int64(723260036, 2964773675), new $Int64(-673921829, 1539178386), new $Int64(1062961552, 2694849566), new $Int64(460977733, 2120273838), new $Int64(-1604570740, 2484608657), new $Int64(880846449, 2956190677), new $Int64(1970902366, 4223313749), new $Int64(662161910, 3502682327), new $Int64(705634754, 4133891139), new $Int64(-1031359300, 1166449596), new $Int64(1038247601, 3362705993), new $Int64(93734798, 3892921029), new $Int64(1876124043, 786869787), new $Int64(1057490746, 1046342263), new $Int64(242763728, 493777327), new $Int64(-853573201, 3304827646), new $Int64(616460742, 125356352), new $Int64(499300063, 74094113), new $Int64(-795586925, 2500816079), new $Int64(-490248444, 514015239), new $Int64(1377565129, 543520454), new $Int64(-2039776725, 3614531153), new $Int64(2056746300, 2356753985), new $Int64(1390062617, 2018141668), new $Int64(131272971, 2087974891), new $Int64(-1502927041, 3166972343), new $Int64(372256200, 1517638666), new $Int64(-935275664, 173466846), new $Int64(-695774461, 4241513471), new $Int64(-1413550842, 2783126920), new $Int64(1972004134, 4167264826), new $Int64(29260506, 3907395640), new $Int64(-910901561, 1539634186), new $Int64(-595957298, 178241987), new $Int64(-113277636, 182168164), new $Int64(-1102530459, 2386154934), new $Int64(1379126408, 4077374341), new $Int64(-2114679722, 1732699140), new $Int64(-421057745, 1041306002), new $Int64(1860414813, 2068001749), new $Int64(1005320202, 3208962910), new $Int64(844054010, 697710380), new $Int64(-1509359403, 2228431183), new $Int64(-810313977, 3554678728), new $Int64(-750989047, 173470263), new $Int64(-85886265, 3848297795), new $Int64(-926936977, 246236185), new $Int64(-1984190461, 2066374846), new $Int64(1771673660, 312890749), new $Int64(703378057, 3573310289), new $Int64(-598851901, 143166754), new $Int64(613554316, 2081511079), new $Int64(1197802104, 486038032), new $Int64(-1906483789, 2982218564), new $Int64(364901986, 1000939191), new $Int64(1902782651, 2750454885), new $Int64(-671844857, 3375313137), new $Int64(-1643868040, 881302957), new $Int64(-1508784745, 2514186393), new $Int64(-1703622845, 360024739), new $Int64(1399671872, 292500025), new $Int64(1381210821, 2276300752), new $Int64(521803381, 4069087683), new $Int64(-1938982667, 1637778212), new $Int64(720490469, 1676670893), new $Int64(1067262482, 3855174429), new $Int64(2114075974, 2067248671), new $Int64(-89426259, 2884561259), new $Int64(-805741095, 2456511185), new $Int64(983726246, 561175414), new $Int64(-1719489563, 432588903), new $Int64(885133709, 4059399550), new $Int64(-93096266, 1075014784), new $Int64(-1733832628, 2728058415), new $Int64(1839142064, 1299703678), new $Int64(1262333188, 2347583393), new $Int64(1285481956, 2468164145), new $Int64(-1158354011, 1140014346), new $Int64(2033889184, 1936972070), new $Int64(-1737578993, 3870530098), new $Int64(-484494257, 1717789158), new $Int64(-232997156, 1153452491), new $Int64(-990424416, 3948827651), new $Int64(-1357145630, 2101413152), new $Int64(1495744672, 3854091229), new $Int64(83644069, 4215565463), new $Int64(-1385277313, 1202710438), new $Int64(-564909037, 2072216740), new $Int64(705690639, 2066751068), new $Int64(-2113583312, 173902580), new $Int64(-741983806, 142459001), new $Int64(172391592, 1889151926), new $Int64(-498943125, 3034199774), new $Int64(1618587731, 516490102), new $Int64(93114264, 3692577783), new $Int64(-2078821353, 2953948865), new $Int64(-320938673, 4041040923), new $Int64(-1942517976, 592046130), new $Int64(-705643640, 384297211), new $Int64(-2051649464, 265863924), new $Int64(2101717619, 1333136237), new $Int64(1499611781, 1406273556), new $Int64(1074670496, 426305476), new $Int64(125704633, 2750898176), new $Int64(488068495, 1633944332), new $Int64(2037723464, 3236349343), new $Int64(-1703423246, 4013676611), new $Int64(1718532237, 2265047407), new $Int64(1433593806, 875071080), new $Int64(-343047503, 1418843655), new $Int64(2009228711, 451657300), new $Int64(1229446621, 1866374663), new $Int64(1653472867, 1551455622), new $Int64(577191481, 3560962459), new $Int64(1669204077, 3347903778), new $Int64(-298327194, 2675874918), new $Int64(-1831355577, 2762991672), new $Int64(530492383, 3689068477), new $Int64(844089962, 4071997905), new $Int64(1508155730, 1381702441), new $Int64(2089931018, 2373284878), new $Int64(-864267462, 2143983064), new $Int64(308739063, 1938207195), new $Int64(1754949306, 1188152253), new $Int64(1272345009, 615870490), new $Int64(742653194, 2662252621), new $Int64(1477718295, 3839976789), new $Int64(-2091334213, 306752547), new $Int64(-1426688067, 2162363077), new $Int64(-57052633, 2767224719), new $Int64(-1471624099, 2628837712), new $Int64(1678405918, 2967771969), new $Int64(1694285728, 499792248), new $Int64(-1744131281, 4285253508), new $Int64(962357072, 2856511070), new $Int64(679471692, 2526409716), new $Int64(-1793706473, 1240875658), new $Int64(-914893422, 2577342868), new $Int64(-1001298215, 4136853496), new $Int64(-1477114974, 2403540137), new $Int64(1372824515, 1371410668), new $Int64(-176562048, 371758825), new $Int64(-441063112, 1528834084), new $Int64(-71688630, 1504757260), new $Int64(-1461820072, 699052551), new $Int64(-505543539, 3347789870), new $Int64(1951619734, 3430604759), new $Int64(2119672219, 1935601723), new $Int64(966789690, 834676166)]);
		globalRand = New(new lockedSource.ptr(new nosync.Mutex.ptr(false), $assertType(NewSource(new $Int64(0, 1)), Source64)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["vendor/golang_org/x/net/route"] = (function() {
	var $pkg = {}, $init, errors, os, runtime, syscall, Addr, LinkAddr, Inet4Addr, Inet6Addr, DefaultAddr, binaryLittleEndian, binaryBigEndian, InterfaceMessage, InterfaceAddrMessage, InterfaceMulticastAddrMessage, Message, Sys, SysType, RouteMessage, RIBType, wireFormat, RouteMetrics, InterfaceMetrics, ptrType, sliceType, arrayType, arrayType$1, arrayType$2, sliceType$1, sliceType$2, sliceType$3, sliceType$4, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$11, ptrType$12, ptrType$13, ptrType$14, littleEndian, bigEndian, errUnsupportedMessage, errMessageMismatch, errMessageTooShort, errInvalidMessage, errInvalidAddr, nativeEndian, kernelAlign, parseFns, zero, zero$24ptr, parseLinkAddr, parseKernelLinkAddr, parseInetAddr, parseKernelInetAddr, parseDefaultAddr, parseAddrs, ParseRIB, FetchRIB, init, roundup, probeRoutingStack, keepAlive, sysctl;
	errors = $packages["errors"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	syscall = $packages["syscall"];
	Addr = $pkg.Addr = $newType(8, $kindInterface, "route.Addr", true, "vendor/golang_org/x/net/route", true, null);
	LinkAddr = $pkg.LinkAddr = $newType(0, $kindStruct, "route.LinkAddr", true, "vendor/golang_org/x/net/route", true, function(Index_, Name_, Addr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Index = 0;
			this.Name = "";
			this.Addr = sliceType.nil;
			return;
		}
		this.Index = Index_;
		this.Name = Name_;
		this.Addr = Addr_;
	});
	Inet4Addr = $pkg.Inet4Addr = $newType(0, $kindStruct, "route.Inet4Addr", true, "vendor/golang_org/x/net/route", true, function(IP_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.IP = arrayType.zero();
			return;
		}
		this.IP = IP_;
	});
	Inet6Addr = $pkg.Inet6Addr = $newType(0, $kindStruct, "route.Inet6Addr", true, "vendor/golang_org/x/net/route", true, function(IP_, ZoneID_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.IP = arrayType$1.zero();
			this.ZoneID = 0;
			return;
		}
		this.IP = IP_;
		this.ZoneID = ZoneID_;
	});
	DefaultAddr = $pkg.DefaultAddr = $newType(0, $kindStruct, "route.DefaultAddr", true, "vendor/golang_org/x/net/route", true, function(af_, Raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.af = 0;
			this.Raw = sliceType.nil;
			return;
		}
		this.af = af_;
		this.Raw = Raw_;
	});
	binaryLittleEndian = $pkg.binaryLittleEndian = $newType(0, $kindStruct, "route.binaryLittleEndian", true, "vendor/golang_org/x/net/route", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	binaryBigEndian = $pkg.binaryBigEndian = $newType(0, $kindStruct, "route.binaryBigEndian", true, "vendor/golang_org/x/net/route", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	InterfaceMessage = $pkg.InterfaceMessage = $newType(0, $kindStruct, "route.InterfaceMessage", true, "vendor/golang_org/x/net/route", true, function(Version_, Type_, Flags_, Index_, Name_, Addrs_, extOff_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Version = 0;
			this.Type = 0;
			this.Flags = 0;
			this.Index = 0;
			this.Name = "";
			this.Addrs = sliceType$1.nil;
			this.extOff = 0;
			this.raw = sliceType.nil;
			return;
		}
		this.Version = Version_;
		this.Type = Type_;
		this.Flags = Flags_;
		this.Index = Index_;
		this.Name = Name_;
		this.Addrs = Addrs_;
		this.extOff = extOff_;
		this.raw = raw_;
	});
	InterfaceAddrMessage = $pkg.InterfaceAddrMessage = $newType(0, $kindStruct, "route.InterfaceAddrMessage", true, "vendor/golang_org/x/net/route", true, function(Version_, Type_, Flags_, Index_, Addrs_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Version = 0;
			this.Type = 0;
			this.Flags = 0;
			this.Index = 0;
			this.Addrs = sliceType$1.nil;
			this.raw = sliceType.nil;
			return;
		}
		this.Version = Version_;
		this.Type = Type_;
		this.Flags = Flags_;
		this.Index = Index_;
		this.Addrs = Addrs_;
		this.raw = raw_;
	});
	InterfaceMulticastAddrMessage = $pkg.InterfaceMulticastAddrMessage = $newType(0, $kindStruct, "route.InterfaceMulticastAddrMessage", true, "vendor/golang_org/x/net/route", true, function(Version_, Type_, Flags_, Index_, Addrs_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Version = 0;
			this.Type = 0;
			this.Flags = 0;
			this.Index = 0;
			this.Addrs = sliceType$1.nil;
			this.raw = sliceType.nil;
			return;
		}
		this.Version = Version_;
		this.Type = Type_;
		this.Flags = Flags_;
		this.Index = Index_;
		this.Addrs = Addrs_;
		this.raw = raw_;
	});
	Message = $pkg.Message = $newType(8, $kindInterface, "route.Message", true, "vendor/golang_org/x/net/route", true, null);
	Sys = $pkg.Sys = $newType(8, $kindInterface, "route.Sys", true, "vendor/golang_org/x/net/route", true, null);
	SysType = $pkg.SysType = $newType(4, $kindInt, "route.SysType", true, "vendor/golang_org/x/net/route", true, null);
	RouteMessage = $pkg.RouteMessage = $newType(0, $kindStruct, "route.RouteMessage", true, "vendor/golang_org/x/net/route", true, function(Version_, Type_, Flags_, Index_, Addrs_, extOff_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Version = 0;
			this.Type = 0;
			this.Flags = 0;
			this.Index = 0;
			this.Addrs = sliceType$1.nil;
			this.extOff = 0;
			this.raw = sliceType.nil;
			return;
		}
		this.Version = Version_;
		this.Type = Type_;
		this.Flags = Flags_;
		this.Index = Index_;
		this.Addrs = Addrs_;
		this.extOff = extOff_;
		this.raw = raw_;
	});
	RIBType = $pkg.RIBType = $newType(4, $kindInt, "route.RIBType", true, "vendor/golang_org/x/net/route", true, null);
	wireFormat = $pkg.wireFormat = $newType(0, $kindStruct, "route.wireFormat", true, "vendor/golang_org/x/net/route", false, function(extOff_, bodyOff_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.extOff = 0;
			this.bodyOff = 0;
			return;
		}
		this.extOff = extOff_;
		this.bodyOff = bodyOff_;
	});
	RouteMetrics = $pkg.RouteMetrics = $newType(0, $kindStruct, "route.RouteMetrics", true, "vendor/golang_org/x/net/route", true, function(PathMTU_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.PathMTU = 0;
			return;
		}
		this.PathMTU = PathMTU_;
	});
	InterfaceMetrics = $pkg.InterfaceMetrics = $newType(0, $kindStruct, "route.InterfaceMetrics", true, "vendor/golang_org/x/net/route", true, function(Type_, MTU_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = 0;
			this.MTU = 0;
			return;
		}
		this.Type = Type_;
		this.MTU = MTU_;
	});
	ptrType = $ptrType(LinkAddr);
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 16);
	arrayType$2 = $arrayType(Addr, 8);
	sliceType$1 = $sliceType(Addr);
	sliceType$2 = $sliceType(Sys);
	sliceType$3 = $sliceType(Message);
	sliceType$4 = $sliceType($Int32);
	ptrType$1 = $ptrType($Uint8);
	ptrType$2 = $ptrType($Uintptr);
	ptrType$3 = $ptrType($Uint32);
	ptrType$4 = $ptrType(Inet4Addr);
	ptrType$5 = $ptrType(Inet6Addr);
	ptrType$6 = $ptrType(DefaultAddr);
	ptrType$7 = $ptrType(InterfaceMessage);
	ptrType$8 = $ptrType(InterfaceAddrMessage);
	ptrType$9 = $ptrType(InterfaceMulticastAddrMessage);
	ptrType$11 = $ptrType(RouteMessage);
	ptrType$12 = $ptrType(wireFormat);
	ptrType$13 = $ptrType(RouteMetrics);
	ptrType$14 = $ptrType(InterfaceMetrics);
	LinkAddr.ptr.prototype.Family = function() {
		var $ptr, a;
		a = this;
		return 18;
	};
	LinkAddr.prototype.Family = function() { return this.$val.Family(); };
	parseLinkAddr = function(b) {
		var $ptr, _r, _tuple, a, b, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; b = $f.b; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (b.$length < 8) {
			$s = -1; return [$ifaceNil, errInvalidAddr];
		}
		_tuple = parseKernelLinkAddr(18, $subslice(b, 4));
		a = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, err];
		}
		_r = nativeEndian.Uint16($subslice(b, 2, 4)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$assertType(a, ptrType).Index = (_r >> 0);
		$s = -1; return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseLinkAddr }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseKernelLinkAddr = function(param, b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, addr, alen, b, data, l, name, nlen, param, slen;
		_tmp = ((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >> 0);
		_tmp$1 = ((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >> 0);
		_tmp$2 = ((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >> 0);
		nlen = _tmp;
		alen = _tmp$1;
		slen = _tmp$2;
		if (nlen === 255) {
			nlen = 0;
		}
		if (alen === 255) {
			alen = 0;
		}
		if (slen === 255) {
			slen = 0;
		}
		l = ((4 + nlen >> 0) + alen >> 0) + slen >> 0;
		if (b.$length < l) {
			return [0, $ifaceNil, errInvalidAddr];
		}
		data = $subslice(b, 4);
		name = "";
		addr = sliceType.nil;
		if (nlen > 0) {
			name = $bytesToString($subslice(data, 0, nlen));
			data = $subslice(data, nlen);
		}
		if (alen > 0) {
			addr = $subslice(data, 0, alen);
			data = $subslice(data, alen);
		}
		return [l, new LinkAddr.ptr(0, name, addr), $ifaceNil];
	};
	Inet4Addr.ptr.prototype.Family = function() {
		var $ptr, a;
		a = this;
		return 2;
	};
	Inet4Addr.prototype.Family = function() { return this.$val.Family(); };
	Inet6Addr.ptr.prototype.Family = function() {
		var $ptr, a;
		a = this;
		return 30;
	};
	Inet6Addr.prototype.Family = function() { return this.$val.Family(); };
	parseInetAddr = function(af, b) {
		var $ptr, _1, _r, _tmp, _tmp$1, a, a$1, af, b, id, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; a = $f.a; a$1 = $f.a$1; af = $f.af; b = $f.b; id = $f.id; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = af;
			/* */ if (_1 === (2)) { $s = 2; continue; }
			/* */ if (_1 === (30)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (2)) { */ case 2:
				if (b.$length < 16) {
					$s = -1; return [$ifaceNil, errInvalidAddr];
				}
				a = new Inet4Addr.ptr(arrayType.zero());
				$copySlice(new sliceType(a.IP), $subslice(b, 4, 8));
				$s = -1; return [a, $ifaceNil];
			/* } else if (_1 === (30)) { */ case 3:
				if (b.$length < 28) {
					$s = -1; return [$ifaceNil, errInvalidAddr];
				}
				_r = nativeEndian.Uint32($subslice(b, 24, 28)); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				a$1 = new Inet6Addr.ptr(arrayType$1.zero(), (_r >> 0));
				$copySlice(new sliceType(a$1.IP), $subslice(b, 8, 24));
				if ((a$1.IP[0] === 254) && (((a$1.IP[1] & 192) >>> 0) === 128) || (a$1.IP[0] === 255) && ((((a$1.IP[1] & 15) >>> 0) === 1) || (((a$1.IP[1] & 15) >>> 0) === 2))) {
					id = ($clone(bigEndian, binaryBigEndian).Uint16($subslice(new sliceType(a$1.IP), 2, 4)) >> 0);
					if (!((id === 0))) {
						a$1.ZoneID = id;
						_tmp = 0;
						_tmp$1 = 0;
						a$1.IP[2] = _tmp;
						a$1.IP[3] = _tmp$1;
					}
				}
				$s = -1; return [a$1, $ifaceNil];
			/* } else { */ case 4:
				$s = -1; return [$ifaceNil, errInvalidAddr];
			/* } */ case 5:
		case 1:
		$s = -1; return [$ifaceNil, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseInetAddr }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.a = a; $f.a$1 = a$1; $f.af = af; $f.b = b; $f.id = id; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseKernelInetAddr = function(af, b) {
		var $ptr, a, a$1, a$2, a$3, af, b, l;
		l = ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >> 0);
		if (true) {
			if ((l === 0) || b.$length > roundup(l)) {
				l = roundup(l);
			}
		} else {
			l = roundup(l);
		}
		if (b.$length < l) {
			return [0, $ifaceNil, errInvalidAddr];
		}
		if (((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 28)) {
			a = new Inet6Addr.ptr(arrayType$1.zero(), 0);
			$copySlice(new sliceType(a.IP), $subslice(b, 8, 24));
			return [((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >> 0), a, $ifaceNil];
		} else if ((af === 30)) {
			a$1 = new Inet6Addr.ptr(arrayType$1.zero(), 0);
			if ((l - 1 >> 0) < 8) {
				$copySlice(new sliceType(a$1.IP), $subslice(b, 1, l));
			} else {
				$copySlice(new sliceType(a$1.IP), $subslice(b, (l - 8 >> 0), l));
			}
			return [((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >> 0), a$1, $ifaceNil];
		} else if (((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) === 16)) {
			a$2 = new Inet4Addr.ptr(arrayType.zero());
			$copySlice(new sliceType(a$2.IP), $subslice(b, 4, 8));
			return [((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >> 0), a$2, $ifaceNil];
		} else {
			a$3 = new Inet4Addr.ptr(arrayType.zero());
			if ((l - 1 >> 0) < 4) {
				$copySlice(new sliceType(a$3.IP), $subslice(b, 1, l));
			} else {
				$copySlice(new sliceType(a$3.IP), $subslice(b, (l - 4 >> 0), l));
			}
			return [((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >> 0), a$3, $ifaceNil];
		}
	};
	DefaultAddr.ptr.prototype.Family = function() {
		var $ptr, a;
		a = this;
		return a.af;
	};
	DefaultAddr.prototype.Family = function() { return this.$val.Family(); };
	parseDefaultAddr = function(b) {
		var $ptr, a, b;
		if (b.$length < 2 || b.$length < ((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >> 0)) {
			return [$ifaceNil, errInvalidAddr];
		}
		a = new DefaultAddr.ptr(((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >> 0), $subslice(b, 0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])));
		return [a, $ifaceNil];
	};
	parseAddrs = function(attrs, fn, b) {
		var $ptr, _1, _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, _tuple$3, a, a$1, a$2, a$3, af, as, attrs, b, err, err$1, err$2, err$3, fn, i, l, l$1, l$2, l$3, ll, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; a = $f.a; a$1 = $f.a$1; a$2 = $f.a$2; a$3 = $f.a$3; af = $f.af; as = $f.as; attrs = $f.attrs; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; fn = $f.fn; i = $f.i; l = $f.l; l$1 = $f.l$1; l$2 = $f.l$2; l$3 = $f.l$3; ll = $f.ll; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		as = arrayType$2.zero();
		af = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 8 && b.$length >= roundup(0))) { break; } */ if(!(i < 8 && b.$length >= roundup(0))) { $s = 2; continue; }
			/* */ if (((attrs & (((y = i, y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (((attrs & (((y = i, y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0) { */ case 3:
				i = i + (1) >>> 0;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			/* */ if (i <= 7) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (i <= 7) { */ case 5:
					_1 = (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]);
					/* */ if (_1 === (18)) { $s = 9; continue; }
					/* */ if ((_1 === (2)) || (_1 === (30))) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (_1 === (18)) { */ case 9:
						_r = parseLinkAddr(b); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						_tuple = _r;
						a = _tuple[0];
						err = _tuple[1];
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							$s = -1; return [sliceType$1.nil, err];
						}
						((i < 0 || i >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[i] = a);
						l = roundup(((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >> 0));
						if (b.$length < l) {
							$s = -1; return [sliceType$1.nil, errMessageTooShort];
						}
						b = $subslice(b, l);
						$s = 12; continue;
					/* } else if ((_1 === (2)) || (_1 === (30))) { */ case 10:
						af = ((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >> 0);
						_r$1 = parseInetAddr(af, b); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_tuple$1 = _r$1;
						a$1 = _tuple$1[0];
						err$1 = _tuple$1[1];
						if (!($interfaceIsEqual(err$1, $ifaceNil))) {
							$s = -1; return [sliceType$1.nil, err$1];
						}
						((i < 0 || i >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[i] = a$1);
						l$1 = roundup(((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >> 0));
						if (b.$length < l$1) {
							$s = -1; return [sliceType$1.nil, errMessageTooShort];
						}
						b = $subslice(b, l$1);
						$s = 12; continue;
					/* } else { */ case 11:
						_r$2 = fn(af, b); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_tuple$2 = _r$2;
						l$2 = _tuple$2[0];
						a$2 = _tuple$2[1];
						err$2 = _tuple$2[2];
						if (!($interfaceIsEqual(err$2, $ifaceNil))) {
							$s = -1; return [sliceType$1.nil, err$2];
						}
						((i < 0 || i >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[i] = a$2);
						ll = roundup(l$2);
						if (b.$length < ll) {
							b = $subslice(b, l$2);
						} else {
							b = $subslice(b, ll);
						}
					/* } */ case 12:
				case 8:
				$s = 7; continue;
			/* } else { */ case 6:
				_tuple$3 = parseDefaultAddr(b);
				a$3 = _tuple$3[0];
				err$3 = _tuple$3[1];
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					$s = -1; return [sliceType$1.nil, err$3];
				}
				((i < 0 || i >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[i] = a$3);
				l$3 = roundup(((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >> 0));
				if (b.$length < l$3) {
					$s = -1; return [sliceType$1.nil, errMessageTooShort];
				}
				b = $subslice(b, l$3);
			/* } */ case 7:
			i = i + (1) >>> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [new sliceType$1(as), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseAddrs }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.a = a; $f.a$1 = a$1; $f.a$2 = a$2; $f.a$3 = a$3; $f.af = af; $f.as = as; $f.attrs = attrs; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.fn = fn; $f.i = i; $f.l = l; $f.l$1 = l$1; $f.l$2 = l$2; $f.l$3 = l$3; $f.ll = ll; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	binaryLittleEndian.ptr.prototype.Uint16 = function(b) {
		var $ptr, b;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		return (((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) << 16 >>> 16) | (((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) << 16 >>> 16) << 8 << 16 >>> 16)) >>> 0;
	};
	binaryLittleEndian.prototype.Uint16 = function(b) { return this.$val.Uint16(b); };
	binaryLittleEndian.ptr.prototype.PutUint16 = function(b, v) {
		var $ptr, b, v;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (v << 24 >>> 24));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = ((v >>> 8 << 16 >>> 16) << 24 >>> 24));
	};
	binaryLittleEndian.prototype.PutUint16 = function(b, v) { return this.$val.PutUint16(b, v); };
	binaryLittleEndian.ptr.prototype.Uint32 = function(b) {
		var $ptr, b;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		return (((((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0) | (((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0) << 8 >>> 0)) >>> 0) | (((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0) << 16 >>> 0)) >>> 0) | (((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0) << 24 >>> 0)) >>> 0;
	};
	binaryLittleEndian.prototype.Uint32 = function(b) { return this.$val.Uint32(b); };
	binaryLittleEndian.ptr.prototype.PutUint32 = function(b, v) {
		var $ptr, b, v;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (v << 24 >>> 24));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = ((v >>> 8 >>> 0) << 24 >>> 24));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = ((v >>> 16 >>> 0) << 24 >>> 24));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = ((v >>> 24 >>> 0) << 24 >>> 24));
	};
	binaryLittleEndian.prototype.PutUint32 = function(b, v) { return this.$val.PutUint32(b, v); };
	binaryLittleEndian.ptr.prototype.Uint64 = function(b) {
		var $ptr, b, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		return (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])), x$7 = $shiftLeft64(new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1])), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64(new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2])), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64(new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3])), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64(new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4])), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64(new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5])), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64(new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6])), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64(new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7])), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
	};
	binaryLittleEndian.prototype.Uint64 = function(b) { return this.$val.Uint64(b); };
	binaryBigEndian.ptr.prototype.Uint16 = function(b) {
		var $ptr, b;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		return (((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) << 16 >>> 16) | (((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) << 16 >>> 16) << 8 << 16 >>> 16)) >>> 0;
	};
	binaryBigEndian.prototype.Uint16 = function(b) { return this.$val.Uint16(b); };
	binaryBigEndian.ptr.prototype.PutUint16 = function(b, v) {
		var $ptr, b, v;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = ((v >>> 8 << 16 >>> 16) << 24 >>> 24));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (v << 24 >>> 24));
	};
	binaryBigEndian.prototype.PutUint16 = function(b, v) { return this.$val.PutUint16(b, v); };
	binaryBigEndian.ptr.prototype.Uint32 = function(b) {
		var $ptr, b;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		return (((((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0) | (((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0) << 8 >>> 0)) >>> 0) | (((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0) << 16 >>> 0)) >>> 0) | (((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0) << 24 >>> 0)) >>> 0;
	};
	binaryBigEndian.prototype.Uint32 = function(b) { return this.$val.Uint32(b); };
	binaryBigEndian.ptr.prototype.PutUint32 = function(b, v) {
		var $ptr, b, v;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = ((v >>> 24 >>> 0) << 24 >>> 24));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = ((v >>> 16 >>> 0) << 24 >>> 24));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = ((v >>> 8 >>> 0) << 24 >>> 24));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = (v << 24 >>> 24));
	};
	binaryBigEndian.prototype.PutUint32 = function(b, v) { return this.$val.PutUint32(b, v); };
	binaryBigEndian.ptr.prototype.Uint64 = function(b) {
		var $ptr, b, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		return (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7])), x$7 = $shiftLeft64(new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6])), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64(new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5])), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64(new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4])), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64(new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3])), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64(new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2])), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64(new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1])), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64(new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
	};
	binaryBigEndian.prototype.Uint64 = function(b) { return this.$val.Uint64(b); };
	InterfaceAddrMessage.ptr.prototype.Sys = function() {
		var $ptr, m;
		m = this;
		return sliceType$2.nil;
	};
	InterfaceAddrMessage.prototype.Sys = function() { return this.$val.Sys(); };
	InterfaceMulticastAddrMessage.ptr.prototype.Sys = function() {
		var $ptr, m;
		m = this;
		return sliceType$2.nil;
	};
	InterfaceMulticastAddrMessage.prototype.Sys = function() { return this.$val.Sys(); };
	wireFormat.ptr.prototype.parseInterfaceMessage = function(param, b) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tuple, a, attrs, b, err, l, m, param, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; a = $f.a; attrs = $f.attrs; b = $f.b; err = $f.err; l = $f.l; m = $f.m; param = $f.param; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		if (b.$length < w.bodyOff) {
			$s = -1; return [$ifaceNil, errMessageTooShort];
		}
		_r = nativeEndian.Uint16($subslice(b, 0, 2)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = (_r >> 0);
		if (b.$length < l) {
			$s = -1; return [$ifaceNil, errInvalidMessage];
		}
		_r$1 = nativeEndian.Uint32($subslice(b, 4, 8)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		attrs = (_r$1 >>> 0);
		if (((attrs & 16) >>> 0) === 0) {
			$s = -1; return [$ifaceNil, $ifaceNil];
		}
		_r$2 = nativeEndian.Uint32($subslice(b, 8, 12)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = nativeEndian.Uint16($subslice(b, 12, 14)); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		m = new InterfaceMessage.ptr(((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >> 0), ((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >> 0), (_r$2 >> 0), (_r$3 >> 0), "", $makeSlice(sliceType$1, 8), w.extOff, $subslice(b, 0, l));
		_r$4 = parseLinkAddr($subslice(b, w.bodyOff)); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		a = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, err];
		}
		(x = m.Addrs, (4 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 4] = a));
		m.Name = $assertType(a, ptrType).Name;
		$s = -1; return [m, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: wireFormat.ptr.prototype.parseInterfaceMessage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.a = a; $f.attrs = attrs; $f.b = b; $f.err = err; $f.l = l; $f.m = m; $f.param = param; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	wireFormat.prototype.parseInterfaceMessage = function(param, b) { return this.$val.parseInterfaceMessage(param, b); };
	wireFormat.ptr.prototype.parseInterfaceAddrMessage = function(param, b) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, b, err, l, m, param, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; b = $f.b; err = $f.err; l = $f.l; m = $f.m; param = $f.param; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		if (b.$length < w.bodyOff) {
			$s = -1; return [$ifaceNil, errMessageTooShort];
		}
		_r = nativeEndian.Uint16($subslice(b, 0, 2)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = (_r >> 0);
		if (b.$length < l) {
			$s = -1; return [$ifaceNil, errInvalidMessage];
		}
		_r$1 = nativeEndian.Uint32($subslice(b, 8, 12)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		m = new InterfaceAddrMessage.ptr(((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >> 0), ((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >> 0), (_r$1 >> 0), 0, sliceType$1.nil, $subslice(b, 0, l));
		/* */ if (false) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (false) { */ case 3:
			_r$2 = nativeEndian.Uint16($subslice(b, 16, 18)); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			m.Index = (_r$2 >> 0);
			$s = 5; continue;
		/* } else { */ case 4:
			_r$3 = nativeEndian.Uint16($subslice(b, 12, 14)); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			m.Index = (_r$3 >> 0);
		/* } */ case 5:
		err = $ifaceNil;
		_r$4 = nativeEndian.Uint32($subslice(b, 4, 8)); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = parseAddrs((_r$4 >>> 0), parseKernelInetAddr, $subslice(b, w.bodyOff)); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple = _r$5;
		m.Addrs = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, err];
		}
		$s = -1; return [m, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: wireFormat.ptr.prototype.parseInterfaceAddrMessage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.l = l; $f.m = m; $f.param = param; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	wireFormat.prototype.parseInterfaceAddrMessage = function(param, b) { return this.$val.parseInterfaceAddrMessage(param, b); };
	wireFormat.ptr.prototype.parseInterfaceMulticastAddrMessage = function(param, b) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tuple, b, err, l, m, param, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; b = $f.b; err = $f.err; l = $f.l; m = $f.m; param = $f.param; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		if (b.$length < w.bodyOff) {
			$s = -1; return [$ifaceNil, errMessageTooShort];
		}
		_r = nativeEndian.Uint16($subslice(b, 0, 2)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = (_r >> 0);
		if (b.$length < l) {
			$s = -1; return [$ifaceNil, errInvalidMessage];
		}
		_r$1 = nativeEndian.Uint32($subslice(b, 8, 12)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = nativeEndian.Uint16($subslice(b, 12, 14)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		m = new InterfaceMulticastAddrMessage.ptr(((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >> 0), ((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >> 0), (_r$1 >> 0), (_r$2 >> 0), sliceType$1.nil, $subslice(b, 0, l));
		err = $ifaceNil;
		_r$3 = nativeEndian.Uint32($subslice(b, 4, 8)); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = parseAddrs((_r$3 >>> 0), parseKernelInetAddr, $subslice(b, w.bodyOff)); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		m.Addrs = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, err];
		}
		$s = -1; return [m, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: wireFormat.ptr.prototype.parseInterfaceMulticastAddrMessage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.l = l; $f.m = m; $f.param = param; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	wireFormat.prototype.parseInterfaceMulticastAddrMessage = function(param, b) { return this.$val.parseInterfaceMulticastAddrMessage(param, b); };
	ParseRIB = function(typ, b) {
		var $ptr, _entry, _r, _r$1, _tmp, _tmp$1, _tuple, _tuple$1, b, err, fn, l, m, msgs, mtyp, nmsgs, nskips, ok, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; err = $f.err; fn = $f.fn; l = $f.l; m = $f.m; msgs = $f.msgs; mtyp = $f.mtyp; nmsgs = $f.nmsgs; nskips = $f.nskips; ok = $f.ok; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!new RIBType(typ).parseable()) {
			$s = -1; return [sliceType$3.nil, errUnsupportedMessage];
		}
		msgs = sliceType$3.nil;
		_tmp = 0;
		_tmp$1 = 0;
		nmsgs = _tmp;
		nskips = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(b.$length > 4)) { break; } */ if(!(b.$length > 4)) { $s = 2; continue; }
			nmsgs = nmsgs + (1) >> 0;
			_r = nativeEndian.Uint16($subslice(b, 0, 2)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = (_r >> 0);
			if (l === 0) {
				$s = -1; return [sliceType$3.nil, errInvalidMessage];
			}
			if (b.$length < l) {
				$s = -1; return [sliceType$3.nil, errMessageTooShort];
			}
			/* */ if (!(((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) === 5))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!(((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) === 5))) { */ case 4:
				b = $subslice(b, l);
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			mtyp = ((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >> 0);
			_tuple = (_entry = parseFns[$Int.keyFor(mtyp)], _entry !== undefined ? [_entry.v, true] : [$throwNilPointerError, false]);
			fn = _tuple[0];
			ok = _tuple[1];
			/* */ if (!ok) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!ok) { */ case 6:
				nskips = nskips + (1) >> 0;
				$s = 8; continue;
			/* } else { */ case 7:
				_r$1 = fn(typ, b); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1;
				m = _tuple$1[0];
				err = _tuple$1[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [sliceType$3.nil, err];
				}
				if ($interfaceIsEqual(m, $ifaceNil)) {
					nskips = nskips + (1) >> 0;
				} else {
					msgs = $append(msgs, m);
				}
			/* } */ case 8:
			b = $subslice(b, l);
		/* } */ $s = 1; continue; case 2:
		if (!((nmsgs === (msgs.$length + nskips >> 0)))) {
			$s = -1; return [sliceType$3.nil, errMessageMismatch];
		}
		$s = -1; return [msgs, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParseRIB }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.err = err; $f.fn = fn; $f.l = l; $f.m = m; $f.msgs = msgs; $f.mtyp = mtyp; $f.nmsgs = nmsgs; $f.nskips = nskips; $f.ok = ok; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ParseRIB = ParseRIB;
	FetchRIB = function(af, typ, arg) {
		var $ptr, af, arg, b, err, err$1, mib, n, n$24ptr, typ;
		mib = $toNativeArray($kindInt32, [4, 17, 0, (af >> 0), (typ >> 0), (arg >> 0)]);
		n = 0;
		err = sysctl(new sliceType$4(mib), ptrType$1.nil, (n$24ptr || (n$24ptr = new ptrType$2(function() { return n; }, function($v) { n = $v; }))), ptrType$1.nil, 0);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [sliceType.nil, os.NewSyscallError("sysctl", err)];
		}
		if (n === 0) {
			return [sliceType.nil, $ifaceNil];
		}
		b = $makeSlice(sliceType, n);
		err$1 = sysctl(new sliceType$4(mib), $indexPtr(b.$array, b.$offset + 0, ptrType$1), (n$24ptr || (n$24ptr = new ptrType$2(function() { return n; }, function($v) { n = $v; }))), ptrType$1.nil, 0);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return [sliceType.nil, os.NewSyscallError("sysctl", err$1)];
		}
		return [$subslice(b, 0, n), $ifaceNil];
	};
	$pkg.FetchRIB = FetchRIB;
	wireFormat.ptr.prototype.parseRouteMessage = function(typ, b) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tuple, b, err, l, m, typ, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; b = $f.b; err = $f.err; l = $f.l; m = $f.m; typ = $f.typ; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		if (b.$length < w.bodyOff) {
			$s = -1; return [$ifaceNil, errMessageTooShort];
		}
		_r = nativeEndian.Uint16($subslice(b, 0, 2)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = (_r >> 0);
		if (b.$length < l) {
			$s = -1; return [$ifaceNil, errInvalidMessage];
		}
		_r$1 = nativeEndian.Uint32($subslice(b, 8, 12)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = nativeEndian.Uint16($subslice(b, 4, 6)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		m = new RouteMessage.ptr(((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >> 0), ((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >> 0), (_r$1 >> 0), (_r$2 >> 0), sliceType$1.nil, w.extOff, $subslice(b, 0, l));
		err = $ifaceNil;
		_r$3 = nativeEndian.Uint32($subslice(b, 12, 16)); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = parseAddrs((_r$3 >>> 0), parseKernelInetAddr, $subslice(b, w.bodyOff)); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		m.Addrs = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, err];
		}
		$s = -1; return [m, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: wireFormat.ptr.prototype.parseRouteMessage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.l = l; $f.m = m; $f.typ = typ; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	wireFormat.prototype.parseRouteMessage = function(typ, b) { return this.$val.parseRouteMessage(typ, b); };
	init = function() {
		var $ptr, _tuple, b, i, i$24ptr;
		i = 1;
		b = (i$24ptr || (i$24ptr = new ptrType$3(function() { return i; }, function($v) { i = $v; })));
		if ((b.nilCheck, b[0]) === 1) {
			nativeEndian = new littleEndian.constructor.elem(littleEndian);
		} else {
			nativeEndian = new bigEndian.constructor.elem(bigEndian);
		}
		_tuple = probeRoutingStack();
		kernelAlign = _tuple[0];
		parseFns = _tuple[1];
	};
	roundup = function(l) {
		var $ptr, l;
		if (l === 0) {
			return kernelAlign;
		}
		return (((l + kernelAlign >> 0) - 1 >> 0)) & (~((kernelAlign - 1 >> 0)) >> 0);
	};
	RIBType.prototype.parseable = function() {
		var $ptr, _1, typ;
		typ = this.$val;
		_1 = typ;
		if ((_1 === (4)) || (_1 === (5))) {
			return false;
		} else {
			return true;
		}
	};
	$ptrType(RIBType).prototype.parseable = function() { return new RIBType(this.$get()).parseable(); };
	RouteMetrics.ptr.prototype.SysType = function() {
		var $ptr, rmx;
		rmx = this;
		return 0;
	};
	RouteMetrics.prototype.SysType = function() { return this.$val.SysType(); };
	RouteMessage.ptr.prototype.Sys = function() {
		var $ptr, _r, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = nativeEndian.Uint32($subslice(m.raw, (m.extOff + 4 >> 0), (m.extOff + 8 >> 0))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return new sliceType$2([new RouteMetrics.ptr((_r >> 0))]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: RouteMessage.ptr.prototype.Sys }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	RouteMessage.prototype.Sys = function() { return this.$val.Sys(); };
	InterfaceMetrics.ptr.prototype.SysType = function() {
		var $ptr, imx;
		imx = this;
		return 0;
	};
	InterfaceMetrics.prototype.SysType = function() { return this.$val.SysType(); };
	InterfaceMessage.ptr.prototype.Sys = function() {
		var $ptr, _r, m, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = nativeEndian.Uint32($subslice(m.raw, (m.extOff + 8 >> 0), (m.extOff + 12 >> 0))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return new sliceType$2([new InterfaceMetrics.ptr(((x = m.raw, x$1 = m.extOff, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) >> 0), (_r >> 0))]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: InterfaceMessage.ptr.prototype.Sys }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	InterfaceMessage.prototype.Sys = function() { return this.$val.Sys(); };
	probeRoutingStack = function() {
		var $ptr, ifam, ifm, ifm2, ifmam, ifmam2, rtm, rtm2;
		rtm = new wireFormat.ptr(36, 92);
		rtm2 = new wireFormat.ptr(36, 92);
		ifm = new wireFormat.ptr(16, 112);
		ifm2 = new wireFormat.ptr(32, 160);
		ifam = new wireFormat.ptr(20, 20);
		ifmam = new wireFormat.ptr(16, 16);
		ifmam2 = new wireFormat.ptr(20, 20);
		return [4, $makeMap($Int.keyFor, [{ k: 1, v: $methodVal(rtm, "parseRouteMessage") }, { k: 2, v: $methodVal(rtm, "parseRouteMessage") }, { k: 3, v: $methodVal(rtm, "parseRouteMessage") }, { k: 4, v: $methodVal(rtm, "parseRouteMessage") }, { k: 5, v: $methodVal(rtm, "parseRouteMessage") }, { k: 6, v: $methodVal(rtm, "parseRouteMessage") }, { k: 7, v: $methodVal(rtm, "parseRouteMessage") }, { k: 8, v: $methodVal(rtm, "parseRouteMessage") }, { k: 11, v: $methodVal(rtm, "parseRouteMessage") }, { k: 12, v: $methodVal(ifam, "parseInterfaceAddrMessage") }, { k: 13, v: $methodVal(ifam, "parseInterfaceAddrMessage") }, { k: 14, v: $methodVal(ifm, "parseInterfaceMessage") }, { k: 15, v: $methodVal(ifmam, "parseInterfaceMulticastAddrMessage") }, { k: 16, v: $methodVal(ifmam, "parseInterfaceMulticastAddrMessage") }, { k: 18, v: $methodVal(ifm2, "parseInterfaceMessage") }, { k: 19, v: $methodVal(ifmam2, "parseInterfaceMulticastAddrMessage") }, { k: 20, v: $methodVal(rtm2, "parseRouteMessage") }])];
	};
	keepAlive = function() {
		$throwRuntimeError("native function not implemented: vendor/golang_org/x/net/route.keepAlive");
	};
	sysctl = function(mib, old, oldlen, new$1, newlen) {
		var $ptr, _tuple, errno, mib, new$1, newlen, old, oldlen, p;
		p = 0;
		if (mib.$length > 0) {
			p = $sliceToArray(mib);
		} else {
			p = (zero$24ptr || (zero$24ptr = new ptrType$2(function() { return zero; }, function($v) { zero = $v; })));
		}
		_tuple = syscall.Syscall6(202, p, (mib.$length >>> 0), old, oldlen, new$1, newlen);
		errno = _tuple[2];
		keepAlive(p);
		if (!((errno === 0))) {
			return new syscall.Errno(errno);
		}
		return $ifaceNil;
	};
	ptrType.methods = [{prop: "Family", name: "Family", pkg: "", typ: $funcType([], [$Int], false)}];
	ptrType$4.methods = [{prop: "Family", name: "Family", pkg: "", typ: $funcType([], [$Int], false)}];
	ptrType$5.methods = [{prop: "Family", name: "Family", pkg: "", typ: $funcType([], [$Int], false)}];
	ptrType$6.methods = [{prop: "Family", name: "Family", pkg: "", typ: $funcType([], [$Int], false)}];
	binaryLittleEndian.methods = [{prop: "Uint16", name: "Uint16", pkg: "", typ: $funcType([sliceType], [$Uint16], false)}, {prop: "PutUint16", name: "PutUint16", pkg: "", typ: $funcType([sliceType, $Uint16], [], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([sliceType], [$Uint32], false)}, {prop: "PutUint32", name: "PutUint32", pkg: "", typ: $funcType([sliceType, $Uint32], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([sliceType], [$Uint64], false)}];
	binaryBigEndian.methods = [{prop: "Uint16", name: "Uint16", pkg: "", typ: $funcType([sliceType], [$Uint16], false)}, {prop: "PutUint16", name: "PutUint16", pkg: "", typ: $funcType([sliceType, $Uint16], [], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([sliceType], [$Uint32], false)}, {prop: "PutUint32", name: "PutUint32", pkg: "", typ: $funcType([sliceType, $Uint32], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([sliceType], [$Uint64], false)}];
	ptrType$7.methods = [{prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [sliceType$2], false)}];
	ptrType$8.methods = [{prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [sliceType$2], false)}];
	ptrType$9.methods = [{prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [sliceType$2], false)}];
	ptrType$11.methods = [{prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [sliceType$2], false)}];
	RIBType.methods = [{prop: "parseable", name: "parseable", pkg: "vendor/golang_org/x/net/route", typ: $funcType([], [$Bool], false)}];
	ptrType$12.methods = [{prop: "parseInterfaceMessage", name: "parseInterfaceMessage", pkg: "vendor/golang_org/x/net/route", typ: $funcType([RIBType, sliceType], [Message, $error], false)}, {prop: "parseInterfaceAddrMessage", name: "parseInterfaceAddrMessage", pkg: "vendor/golang_org/x/net/route", typ: $funcType([RIBType, sliceType], [Message, $error], false)}, {prop: "parseInterfaceMulticastAddrMessage", name: "parseInterfaceMulticastAddrMessage", pkg: "vendor/golang_org/x/net/route", typ: $funcType([RIBType, sliceType], [Message, $error], false)}, {prop: "parseRouteMessage", name: "parseRouteMessage", pkg: "vendor/golang_org/x/net/route", typ: $funcType([RIBType, sliceType], [Message, $error], false)}];
	ptrType$13.methods = [{prop: "SysType", name: "SysType", pkg: "", typ: $funcType([], [SysType], false)}];
	ptrType$14.methods = [{prop: "SysType", name: "SysType", pkg: "", typ: $funcType([], [SysType], false)}];
	Addr.init([{prop: "Family", name: "Family", pkg: "", typ: $funcType([], [$Int], false)}]);
	LinkAddr.init("", [{prop: "Index", name: "Index", exported: true, typ: $Int, tag: ""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "Addr", name: "Addr", exported: true, typ: sliceType, tag: ""}]);
	Inet4Addr.init("", [{prop: "IP", name: "IP", exported: true, typ: arrayType, tag: ""}]);
	Inet6Addr.init("", [{prop: "IP", name: "IP", exported: true, typ: arrayType$1, tag: ""}, {prop: "ZoneID", name: "ZoneID", exported: true, typ: $Int, tag: ""}]);
	DefaultAddr.init("vendor/golang_org/x/net/route", [{prop: "af", name: "af", exported: false, typ: $Int, tag: ""}, {prop: "Raw", name: "Raw", exported: true, typ: sliceType, tag: ""}]);
	binaryLittleEndian.init("", []);
	binaryBigEndian.init("", []);
	InterfaceMessage.init("vendor/golang_org/x/net/route", [{prop: "Version", name: "Version", exported: true, typ: $Int, tag: ""}, {prop: "Type", name: "Type", exported: true, typ: $Int, tag: ""}, {prop: "Flags", name: "Flags", exported: true, typ: $Int, tag: ""}, {prop: "Index", name: "Index", exported: true, typ: $Int, tag: ""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "Addrs", name: "Addrs", exported: true, typ: sliceType$1, tag: ""}, {prop: "extOff", name: "extOff", exported: false, typ: $Int, tag: ""}, {prop: "raw", name: "raw", exported: false, typ: sliceType, tag: ""}]);
	InterfaceAddrMessage.init("vendor/golang_org/x/net/route", [{prop: "Version", name: "Version", exported: true, typ: $Int, tag: ""}, {prop: "Type", name: "Type", exported: true, typ: $Int, tag: ""}, {prop: "Flags", name: "Flags", exported: true, typ: $Int, tag: ""}, {prop: "Index", name: "Index", exported: true, typ: $Int, tag: ""}, {prop: "Addrs", name: "Addrs", exported: true, typ: sliceType$1, tag: ""}, {prop: "raw", name: "raw", exported: false, typ: sliceType, tag: ""}]);
	InterfaceMulticastAddrMessage.init("vendor/golang_org/x/net/route", [{prop: "Version", name: "Version", exported: true, typ: $Int, tag: ""}, {prop: "Type", name: "Type", exported: true, typ: $Int, tag: ""}, {prop: "Flags", name: "Flags", exported: true, typ: $Int, tag: ""}, {prop: "Index", name: "Index", exported: true, typ: $Int, tag: ""}, {prop: "Addrs", name: "Addrs", exported: true, typ: sliceType$1, tag: ""}, {prop: "raw", name: "raw", exported: false, typ: sliceType, tag: ""}]);
	Message.init([{prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [sliceType$2], false)}]);
	Sys.init([{prop: "SysType", name: "SysType", pkg: "", typ: $funcType([], [SysType], false)}]);
	RouteMessage.init("vendor/golang_org/x/net/route", [{prop: "Version", name: "Version", exported: true, typ: $Int, tag: ""}, {prop: "Type", name: "Type", exported: true, typ: $Int, tag: ""}, {prop: "Flags", name: "Flags", exported: true, typ: $Int, tag: ""}, {prop: "Index", name: "Index", exported: true, typ: $Int, tag: ""}, {prop: "Addrs", name: "Addrs", exported: true, typ: sliceType$1, tag: ""}, {prop: "extOff", name: "extOff", exported: false, typ: $Int, tag: ""}, {prop: "raw", name: "raw", exported: false, typ: sliceType, tag: ""}]);
	wireFormat.init("vendor/golang_org/x/net/route", [{prop: "extOff", name: "extOff", exported: false, typ: $Int, tag: ""}, {prop: "bodyOff", name: "bodyOff", exported: false, typ: $Int, tag: ""}]);
	RouteMetrics.init("", [{prop: "PathMTU", name: "PathMTU", exported: true, typ: $Int, tag: ""}]);
	InterfaceMetrics.init("", [{prop: "Type", name: "Type", exported: true, typ: $Int, tag: ""}, {prop: "MTU", name: "MTU", exported: true, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		littleEndian = new binaryLittleEndian.ptr();
		bigEndian = new binaryBigEndian.ptr();
		nativeEndian = $ifaceNil;
		kernelAlign = 0;
		parseFns = false;
		zero = 0;
		errUnsupportedMessage = errors.New("unsupported message");
		errMessageMismatch = errors.New("message mismatch");
		errMessageTooShort = errors.New("message too short");
		errInvalidMessage = errors.New("invalid message");
		errInvalidAddr = errors.New("invalid address");
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["net"] = (function() {
	var $pkg = {}, $init, context, errors, js, nettrace, singleflight, io, rand, os, runtime, sort, sync, atomic, syscall, time, route, policyTableEntry, policyTable, byMaskLength, dnsRR_Header, dnsRR_CNAME, dnsRR_MX, dnsRR_NS, dnsRR_PTR, dnsRR_SOA, dnsRR_TXT, dnsRR_SRV, dnsRR_A, dnsRR_AAAA, Interface, Flags, ipv6ZoneCache, IP, IPMask, IPNet, IPAddr, HardwareAddr, Addr, OpError, timeout, temporary, ParseError, AddrError, buffersWriter, Buffers, sockaddr, ptrType, sliceType, arrayType, sliceType$1, structType$1, ptrType$4, ptrType$5, ptrType$8, ptrType$12, ptrType$13, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, ptrType$31, ptrType$38, sliceType$9, sliceType$10, ptrType$42, ptrType$43, ptrType$44, sliceType$11, ptrType$45, arrayType$1, ptrType$48, ptrType$50, ptrType$52, ptrType$53, ptrType$55, ptrType$56, arrayType$4, funcType$2, ptrType$66, ptrType$70, mapType$1, mapType$2, ptrType$71, ptrType$73, rfc6724policyTable, rr_mk, testHookLookupIP, errInvalidInterface, errInvalidInterfaceIndex, errInvalidInterfaceName, errNoSuchInterface, errNoSuchMulticastInterface, flagNames, zoneCache, v4InV6Prefix, classAMask, classBMask, classCMask, supportsIPv4, supportsIPv6, supportsIPv4map, netGo, listenerBacklog, errNoSuitableAddress, errMissingAddress, errCanceled, errClosing, aLongTimeAgo, errNoSuchHost, threadLimit, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, byteIndex, sysInit, probeIPv4Stack, probeIPv6Stack, maxListenerBacklog, init, mustCIDR, init$1, interfaceAddrTable, interfaceMessages, interfaceMulticastAddrTable, IPv4, IPv4Mask, CIDRMask, isZeros, allFF, hexString, ipEmptyString, bytesEqual, simpleMaskLength, networkNumberAndMask, parseIPv4, parseIPv6, ParseIP, ParseCIDR, splitHostZone, init$2, dtoi, xtoi, uitoa, appendHex, last;
	context = $packages["context"];
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	nettrace = $packages["internal/nettrace"];
	singleflight = $packages["internal/singleflight"];
	io = $packages["io"];
	rand = $packages["math/rand"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	route = $packages["vendor/golang_org/x/net/route"];
	policyTableEntry = $pkg.policyTableEntry = $newType(0, $kindStruct, "net.policyTableEntry", true, "net", false, function(Prefix_, Precedence_, Label_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Prefix = ptrType$5.nil;
			this.Precedence = 0;
			this.Label = 0;
			return;
		}
		this.Prefix = Prefix_;
		this.Precedence = Precedence_;
		this.Label = Label_;
	});
	policyTable = $pkg.policyTable = $newType(12, $kindSlice, "net.policyTable", true, "net", false, null);
	byMaskLength = $pkg.byMaskLength = $newType(12, $kindSlice, "net.byMaskLength", true, "net", false, null);
	dnsRR_Header = $pkg.dnsRR_Header = $newType(0, $kindStruct, "net.dnsRR_Header", true, "net", false, function(Name_, Rrtype_, Class_, Ttl_, Rdlength_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Rrtype = 0;
			this.Class = 0;
			this.Ttl = 0;
			this.Rdlength = 0;
			return;
		}
		this.Name = Name_;
		this.Rrtype = Rrtype_;
		this.Class = Class_;
		this.Ttl = Ttl_;
		this.Rdlength = Rdlength_;
	});
	dnsRR_CNAME = $pkg.dnsRR_CNAME = $newType(0, $kindStruct, "net.dnsRR_CNAME", true, "net", false, function(Hdr_, Cname_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr("", 0, 0, 0, 0);
			this.Cname = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Cname = Cname_;
	});
	dnsRR_MX = $pkg.dnsRR_MX = $newType(0, $kindStruct, "net.dnsRR_MX", true, "net", false, function(Hdr_, Pref_, Mx_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr("", 0, 0, 0, 0);
			this.Pref = 0;
			this.Mx = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Pref = Pref_;
		this.Mx = Mx_;
	});
	dnsRR_NS = $pkg.dnsRR_NS = $newType(0, $kindStruct, "net.dnsRR_NS", true, "net", false, function(Hdr_, Ns_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr("", 0, 0, 0, 0);
			this.Ns = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Ns = Ns_;
	});
	dnsRR_PTR = $pkg.dnsRR_PTR = $newType(0, $kindStruct, "net.dnsRR_PTR", true, "net", false, function(Hdr_, Ptr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr("", 0, 0, 0, 0);
			this.Ptr = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Ptr = Ptr_;
	});
	dnsRR_SOA = $pkg.dnsRR_SOA = $newType(0, $kindStruct, "net.dnsRR_SOA", true, "net", false, function(Hdr_, Ns_, Mbox_, Serial_, Refresh_, Retry_, Expire_, Minttl_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr("", 0, 0, 0, 0);
			this.Ns = "";
			this.Mbox = "";
			this.Serial = 0;
			this.Refresh = 0;
			this.Retry = 0;
			this.Expire = 0;
			this.Minttl = 0;
			return;
		}
		this.Hdr = Hdr_;
		this.Ns = Ns_;
		this.Mbox = Mbox_;
		this.Serial = Serial_;
		this.Refresh = Refresh_;
		this.Retry = Retry_;
		this.Expire = Expire_;
		this.Minttl = Minttl_;
	});
	dnsRR_TXT = $pkg.dnsRR_TXT = $newType(0, $kindStruct, "net.dnsRR_TXT", true, "net", false, function(Hdr_, Txt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr("", 0, 0, 0, 0);
			this.Txt = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Txt = Txt_;
	});
	dnsRR_SRV = $pkg.dnsRR_SRV = $newType(0, $kindStruct, "net.dnsRR_SRV", true, "net", false, function(Hdr_, Priority_, Weight_, Port_, Target_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr("", 0, 0, 0, 0);
			this.Priority = 0;
			this.Weight = 0;
			this.Port = 0;
			this.Target = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Priority = Priority_;
		this.Weight = Weight_;
		this.Port = Port_;
		this.Target = Target_;
	});
	dnsRR_A = $pkg.dnsRR_A = $newType(0, $kindStruct, "net.dnsRR_A", true, "net", false, function(Hdr_, A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr("", 0, 0, 0, 0);
			this.A = 0;
			return;
		}
		this.Hdr = Hdr_;
		this.A = A_;
	});
	dnsRR_AAAA = $pkg.dnsRR_AAAA = $newType(0, $kindStruct, "net.dnsRR_AAAA", true, "net", false, function(Hdr_, AAAA_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr("", 0, 0, 0, 0);
			this.AAAA = arrayType.zero();
			return;
		}
		this.Hdr = Hdr_;
		this.AAAA = AAAA_;
	});
	Interface = $pkg.Interface = $newType(0, $kindStruct, "net.Interface", true, "net", true, function(Index_, MTU_, Name_, HardwareAddr_, Flags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Index = 0;
			this.MTU = 0;
			this.Name = "";
			this.HardwareAddr = HardwareAddr.nil;
			this.Flags = 0;
			return;
		}
		this.Index = Index_;
		this.MTU = MTU_;
		this.Name = Name_;
		this.HardwareAddr = HardwareAddr_;
		this.Flags = Flags_;
	});
	Flags = $pkg.Flags = $newType(4, $kindUint, "net.Flags", true, "net", true, null);
	ipv6ZoneCache = $pkg.ipv6ZoneCache = $newType(0, $kindStruct, "net.ipv6ZoneCache", true, "net", false, function(RWMutex_, lastFetched_, toIndex_, toName_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.RWMutex = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
			this.lastFetched = new time.Time.ptr(new $Int64(0, 0), 0, ptrType.nil);
			this.toIndex = false;
			this.toName = false;
			return;
		}
		this.RWMutex = RWMutex_;
		this.lastFetched = lastFetched_;
		this.toIndex = toIndex_;
		this.toName = toName_;
	});
	IP = $pkg.IP = $newType(12, $kindSlice, "net.IP", true, "net", true, null);
	IPMask = $pkg.IPMask = $newType(12, $kindSlice, "net.IPMask", true, "net", true, null);
	IPNet = $pkg.IPNet = $newType(0, $kindStruct, "net.IPNet", true, "net", true, function(IP_, Mask_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.IP = IP.nil;
			this.Mask = IPMask.nil;
			return;
		}
		this.IP = IP_;
		this.Mask = Mask_;
	});
	IPAddr = $pkg.IPAddr = $newType(0, $kindStruct, "net.IPAddr", true, "net", true, function(IP_, Zone_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.IP = IP.nil;
			this.Zone = "";
			return;
		}
		this.IP = IP_;
		this.Zone = Zone_;
	});
	HardwareAddr = $pkg.HardwareAddr = $newType(12, $kindSlice, "net.HardwareAddr", true, "net", true, null);
	Addr = $pkg.Addr = $newType(8, $kindInterface, "net.Addr", true, "net", true, null);
	OpError = $pkg.OpError = $newType(0, $kindStruct, "net.OpError", true, "net", true, function(Op_, Net_, Source_, Addr_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Net = "";
			this.Source = $ifaceNil;
			this.Addr = $ifaceNil;
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Net = Net_;
		this.Source = Source_;
		this.Addr = Addr_;
		this.Err = Err_;
	});
	timeout = $pkg.timeout = $newType(8, $kindInterface, "net.timeout", true, "net", false, null);
	temporary = $pkg.temporary = $newType(8, $kindInterface, "net.temporary", true, "net", false, null);
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "net.ParseError", true, "net", true, function(Type_, Text_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = "";
			this.Text = "";
			return;
		}
		this.Type = Type_;
		this.Text = Text_;
	});
	AddrError = $pkg.AddrError = $newType(0, $kindStruct, "net.AddrError", true, "net", true, function(Err_, Addr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Err = "";
			this.Addr = "";
			return;
		}
		this.Err = Err_;
		this.Addr = Addr_;
	});
	buffersWriter = $pkg.buffersWriter = $newType(8, $kindInterface, "net.buffersWriter", true, "net", false, null);
	Buffers = $pkg.Buffers = $newType(12, $kindSlice, "net.Buffers", true, "net", true, null);
	sockaddr = $pkg.sockaddr = $newType(8, $kindInterface, "net.sockaddr", true, "net", false, null);
	ptrType = $ptrType(time.Location);
	sliceType = $sliceType($String);
	arrayType = $arrayType($Uint8, 16);
	sliceType$1 = $sliceType($Uint8);
	structType$1 = $structType("", []);
	ptrType$4 = $ptrType(Buffers);
	ptrType$5 = $ptrType(IPNet);
	ptrType$8 = $ptrType(IPAddr);
	ptrType$12 = $ptrType(dnsRR_Header);
	ptrType$13 = $ptrType(dnsRR_CNAME);
	ptrType$17 = $ptrType(dnsRR_A);
	ptrType$18 = $ptrType(dnsRR_AAAA);
	ptrType$19 = $ptrType(dnsRR_PTR);
	ptrType$20 = $ptrType($Uint32);
	ptrType$21 = $ptrType($Uint16);
	ptrType$22 = $ptrType($String);
	ptrType$31 = $ptrType(os.SyscallError);
	ptrType$38 = $ptrType(Interface);
	sliceType$9 = $sliceType(Addr);
	sliceType$10 = $sliceType(Interface);
	ptrType$42 = $ptrType(route.InterfaceAddrMessage);
	ptrType$43 = $ptrType(route.Inet4Addr);
	ptrType$44 = $ptrType(route.Inet6Addr);
	sliceType$11 = $sliceType(route.Message);
	ptrType$45 = $ptrType(route.InterfaceMulticastAddrMessage);
	arrayType$1 = $arrayType($Uint8, 4);
	ptrType$48 = $ptrType(dnsRR_SRV);
	ptrType$50 = $ptrType(dnsRR_MX);
	ptrType$52 = $ptrType(dnsRR_NS);
	ptrType$53 = $ptrType(dnsRR_TXT);
	ptrType$55 = $ptrType(OpError);
	ptrType$56 = $ptrType(AddrError);
	arrayType$4 = $arrayType($Uint8, 20);
	funcType$2 = $funcType([$emptyInterface, $String, $String], [$Bool], false);
	ptrType$66 = $ptrType(dnsRR_SOA);
	ptrType$70 = $ptrType(ipv6ZoneCache);
	mapType$1 = $mapType($String, $Int);
	mapType$2 = $mapType($Int, $String);
	ptrType$71 = $ptrType(IP);
	ptrType$73 = $ptrType(ParseError);
	byteIndex = function(s, c) {
		var $ptr, c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	sysInit = function() {
		var $ptr;
	};
	probeIPv4Stack = function() {
		var $ptr;
		return false;
	};
	probeIPv6Stack = function() {
		var $ptr, _tmp, _tmp$1, supportsIPv4map$1, supportsIPv6$1;
		supportsIPv6$1 = false;
		supportsIPv4map$1 = false;
		_tmp = false;
		_tmp$1 = false;
		supportsIPv6$1 = _tmp;
		supportsIPv4map$1 = _tmp$1;
		return [supportsIPv6$1, supportsIPv4map$1];
	};
	maxListenerBacklog = function() {
		var $ptr;
		return 128;
	};
	init = function() {
		var $ptr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = sort.Sort(sort.Reverse($subslice(new byMaskLength(rfc6724policyTable.$array), rfc6724policyTable.$offset, rfc6724policyTable.$offset + rfc6724policyTable.$length))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
	};
	byMaskLength.prototype.Len = function() {
		var $ptr, s;
		s = this;
		return s.$length;
	};
	$ptrType(byMaskLength).prototype.Len = function() { return this.$get().Len(); };
	byMaskLength.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, s;
		s = this;
		_tmp = $clone(((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]), policyTableEntry);
		_tmp$1 = $clone(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]), policyTableEntry);
		policyTableEntry.copy(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]), _tmp);
		policyTableEntry.copy(((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]), _tmp$1);
	};
	$ptrType(byMaskLength).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	byMaskLength.prototype.Less = function(i, j) {
		var $ptr, _tuple, _tuple$1, i, isize, j, jsize, s;
		s = this;
		_tuple = ((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]).Prefix.Mask.Size();
		isize = _tuple[0];
		_tuple$1 = ((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]).Prefix.Mask.Size();
		jsize = _tuple$1[0];
		return isize < jsize;
	};
	$ptrType(byMaskLength).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	mustCIDR = function(s) {
		var $ptr, _r$9, _tuple, err, ip, ipNet, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$9 = $f._r$9; _tuple = $f._tuple; err = $f.err; ip = $f.ip; ipNet = $f.ipNet; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = ParseCIDR(s);
		ip = _tuple[0];
		ipNet = _tuple[1];
		err = _tuple[2];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			_r$9 = err.Error(); /* */ $s = 3; case 3: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			$panic(new $String(_r$9));
		/* } */ case 2:
		if (!((ip.$length === 16))) {
			$panic(new $String("unexpected IP length"));
		}
		$s = -1; return ipNet;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mustCIDR }; } $f.$ptr = $ptr; $f._r$9 = _r$9; $f._tuple = _tuple; $f.err = err; $f.ip = ip; $f.ipNet = ipNet; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	policyTable.prototype.Classify = function(ip) {
		var $ptr, _i, _ref, ent, ip, t;
		t = this;
		_ref = t;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			ent = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), policyTableEntry);
			if (ent.Prefix.Contains(ip)) {
				return ent;
			}
			_i++;
		}
		return new policyTableEntry.ptr(ptrType$5.nil, 0, 0);
	};
	$ptrType(policyTable).prototype.Classify = function(ip) { return this.$get().Classify(ip); };
	init$1 = function() {
		var $ptr;
		netGo = true;
	};
	dnsRR_Header.ptr.prototype.Header = function() {
		var $ptr, h;
		h = this;
		return h;
	};
	dnsRR_Header.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_Header.ptr.prototype.Walk = function(f) {
		var $ptr, _r$10, _r$11, _r$12, _r$13, _r$9, _v, _v$1, _v$2, _v$3, f, h, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$9 = $f._r$9; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; f = $f.f; h = $f.h; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		_r$9 = f((h.$ptr_Name || (h.$ptr_Name = new ptrType$22(function() { return this.$target.Name; }, function($v) { this.$target.Name = $v; }, h))), "Name", "domain"); /* */ $s = 5; case 5: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		if (!(_r$9)) { _v$3 = false; $s = 4; continue s; }
		_r$10 = f((h.$ptr_Rrtype || (h.$ptr_Rrtype = new ptrType$21(function() { return this.$target.Rrtype; }, function($v) { this.$target.Rrtype = $v; }, h))), "Rrtype", ""); /* */ $s = 6; case 6: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_v$3 = _r$10; case 4:
		if (!(_v$3)) { _v$2 = false; $s = 3; continue s; }
		_r$11 = f((h.$ptr_Class || (h.$ptr_Class = new ptrType$21(function() { return this.$target.Class; }, function($v) { this.$target.Class = $v; }, h))), "Class", ""); /* */ $s = 7; case 7: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_v$2 = _r$11; case 3:
		if (!(_v$2)) { _v$1 = false; $s = 2; continue s; }
		_r$12 = f((h.$ptr_Ttl || (h.$ptr_Ttl = new ptrType$20(function() { return this.$target.Ttl; }, function($v) { this.$target.Ttl = $v; }, h))), "Ttl", ""); /* */ $s = 8; case 8: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_v$1 = _r$12; case 2:
		if (!(_v$1)) { _v = false; $s = 1; continue s; }
		_r$13 = f((h.$ptr_Rdlength || (h.$ptr_Rdlength = new ptrType$21(function() { return this.$target.Rdlength; }, function($v) { this.$target.Rdlength = $v; }, h))), "Rdlength", ""); /* */ $s = 9; case 9: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_v = _r$13; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dnsRR_Header.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$9 = _r$9; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.f = f; $f.h = h; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_Header.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_CNAME.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_CNAME.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_CNAME.ptr.prototype.Walk = function(f) {
		var $ptr, _r$10, _r$9, _v, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$9 = $f._r$9; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r$9 = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		if (!(_r$9)) { _v = false; $s = 1; continue s; }
		_r$10 = f((rr.$ptr_Cname || (rr.$ptr_Cname = new ptrType$22(function() { return this.$target.Cname; }, function($v) { this.$target.Cname = $v; }, rr))), "Cname", "domain"); /* */ $s = 3; case 3: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_v = _r$10; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dnsRR_CNAME.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$9 = _r$9; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_CNAME.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_MX.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_MX.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_MX.ptr.prototype.Walk = function(f) {
		var $ptr, _r$10, _r$11, _r$9, _v, _v$1, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$9 = $f._r$9; _v = $f._v; _v$1 = $f._v$1; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r$9 = rr.Hdr.Walk(f); /* */ $s = 3; case 3: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		if (!(_r$9)) { _v$1 = false; $s = 2; continue s; }
		_r$10 = f((rr.$ptr_Pref || (rr.$ptr_Pref = new ptrType$21(function() { return this.$target.Pref; }, function($v) { this.$target.Pref = $v; }, rr))), "Pref", ""); /* */ $s = 4; case 4: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_v$1 = _r$10; case 2:
		if (!(_v$1)) { _v = false; $s = 1; continue s; }
		_r$11 = f((rr.$ptr_Mx || (rr.$ptr_Mx = new ptrType$22(function() { return this.$target.Mx; }, function($v) { this.$target.Mx = $v; }, rr))), "Mx", "domain"); /* */ $s = 5; case 5: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_v = _r$11; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dnsRR_MX.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$9 = _r$9; $f._v = _v; $f._v$1 = _v$1; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_MX.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_NS.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_NS.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_NS.ptr.prototype.Walk = function(f) {
		var $ptr, _r$10, _r$9, _v, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$9 = $f._r$9; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r$9 = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		if (!(_r$9)) { _v = false; $s = 1; continue s; }
		_r$10 = f((rr.$ptr_Ns || (rr.$ptr_Ns = new ptrType$22(function() { return this.$target.Ns; }, function($v) { this.$target.Ns = $v; }, rr))), "Ns", "domain"); /* */ $s = 3; case 3: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_v = _r$10; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dnsRR_NS.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$9 = _r$9; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_NS.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_PTR.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_PTR.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_PTR.ptr.prototype.Walk = function(f) {
		var $ptr, _r$10, _r$9, _v, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$9 = $f._r$9; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r$9 = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		if (!(_r$9)) { _v = false; $s = 1; continue s; }
		_r$10 = f((rr.$ptr_Ptr || (rr.$ptr_Ptr = new ptrType$22(function() { return this.$target.Ptr; }, function($v) { this.$target.Ptr = $v; }, rr))), "Ptr", "domain"); /* */ $s = 3; case 3: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_v = _r$10; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dnsRR_PTR.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$9 = _r$9; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_PTR.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_SOA.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_SOA.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_SOA.ptr.prototype.Walk = function(f) {
		var $ptr, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$9, _v, _v$1, _v$2, _v$3, _v$4, _v$5, _v$6, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$9 = $f._r$9; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; _v$5 = $f._v$5; _v$6 = $f._v$6; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r$9 = rr.Hdr.Walk(f); /* */ $s = 8; case 8: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		if (!(_r$9)) { _v$6 = false; $s = 7; continue s; }
		_r$10 = f((rr.$ptr_Ns || (rr.$ptr_Ns = new ptrType$22(function() { return this.$target.Ns; }, function($v) { this.$target.Ns = $v; }, rr))), "Ns", "domain"); /* */ $s = 9; case 9: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_v$6 = _r$10; case 7:
		if (!(_v$6)) { _v$5 = false; $s = 6; continue s; }
		_r$11 = f((rr.$ptr_Mbox || (rr.$ptr_Mbox = new ptrType$22(function() { return this.$target.Mbox; }, function($v) { this.$target.Mbox = $v; }, rr))), "Mbox", "domain"); /* */ $s = 10; case 10: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_v$5 = _r$11; case 6:
		if (!(_v$5)) { _v$4 = false; $s = 5; continue s; }
		_r$12 = f((rr.$ptr_Serial || (rr.$ptr_Serial = new ptrType$20(function() { return this.$target.Serial; }, function($v) { this.$target.Serial = $v; }, rr))), "Serial", ""); /* */ $s = 11; case 11: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_v$4 = _r$12; case 5:
		if (!(_v$4)) { _v$3 = false; $s = 4; continue s; }
		_r$13 = f((rr.$ptr_Refresh || (rr.$ptr_Refresh = new ptrType$20(function() { return this.$target.Refresh; }, function($v) { this.$target.Refresh = $v; }, rr))), "Refresh", ""); /* */ $s = 12; case 12: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_v$3 = _r$13; case 4:
		if (!(_v$3)) { _v$2 = false; $s = 3; continue s; }
		_r$14 = f((rr.$ptr_Retry || (rr.$ptr_Retry = new ptrType$20(function() { return this.$target.Retry; }, function($v) { this.$target.Retry = $v; }, rr))), "Retry", ""); /* */ $s = 13; case 13: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_v$2 = _r$14; case 3:
		if (!(_v$2)) { _v$1 = false; $s = 2; continue s; }
		_r$15 = f((rr.$ptr_Expire || (rr.$ptr_Expire = new ptrType$20(function() { return this.$target.Expire; }, function($v) { this.$target.Expire = $v; }, rr))), "Expire", ""); /* */ $s = 14; case 14: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_v$1 = _r$15; case 2:
		if (!(_v$1)) { _v = false; $s = 1; continue s; }
		_r$16 = f((rr.$ptr_Minttl || (rr.$ptr_Minttl = new ptrType$20(function() { return this.$target.Minttl; }, function($v) { this.$target.Minttl = $v; }, rr))), "Minttl", ""); /* */ $s = 15; case 15: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_v = _r$16; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dnsRR_SOA.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$9 = _r$9; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f._v$5 = _v$5; $f._v$6 = _v$6; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_SOA.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_TXT.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_TXT.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_TXT.ptr.prototype.Walk = function(f) {
		var $ptr, _r$10, _r$9, f, n, rr, txt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$9 = $f._r$9; f = $f.f; n = $f.n; rr = $f.rr; txt = $f.txt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r$9 = rr.Hdr.Walk(f); /* */ $s = 3; case 3: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		/* */ if (!_r$9) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r$9) { */ case 1:
			$s = -1; return false;
		/* } */ case 2:
		n = 0;
		/* while (true) { */ case 4:
			/* if (!(n < rr.Hdr.Rdlength)) { break; } */ if(!(n < rr.Hdr.Rdlength)) { $s = 5; continue; }
			txt = [txt];
			txt[0] = "";
			_r$10 = f((txt.$ptr || (txt.$ptr = new ptrType$22(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, txt))), "Txt", ""); /* */ $s = 8; case 8: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			/* */ if (!_r$10) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!_r$10) { */ case 6:
				$s = -1; return false;
			/* } */ case 7:
			if ((rr.Hdr.Rdlength - n << 16 >>> 16) < ((txt[0].length << 16 >>> 16) + 1 << 16 >>> 16)) {
				$s = -1; return false;
			}
			n = n + (((txt[0].length << 16 >>> 16) + 1 << 16 >>> 16)) << 16 >>> 16;
			rr.Txt = rr.Txt + (txt[0]);
		/* } */ $s = 4; continue; case 5:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dnsRR_TXT.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$9 = _r$9; $f.f = f; $f.n = n; $f.rr = rr; $f.txt = txt; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_TXT.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_SRV.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_SRV.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_SRV.ptr.prototype.Walk = function(f) {
		var $ptr, _r$10, _r$11, _r$12, _r$13, _r$9, _v, _v$1, _v$2, _v$3, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$9 = $f._r$9; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r$9 = rr.Hdr.Walk(f); /* */ $s = 5; case 5: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		if (!(_r$9)) { _v$3 = false; $s = 4; continue s; }
		_r$10 = f((rr.$ptr_Priority || (rr.$ptr_Priority = new ptrType$21(function() { return this.$target.Priority; }, function($v) { this.$target.Priority = $v; }, rr))), "Priority", ""); /* */ $s = 6; case 6: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_v$3 = _r$10; case 4:
		if (!(_v$3)) { _v$2 = false; $s = 3; continue s; }
		_r$11 = f((rr.$ptr_Weight || (rr.$ptr_Weight = new ptrType$21(function() { return this.$target.Weight; }, function($v) { this.$target.Weight = $v; }, rr))), "Weight", ""); /* */ $s = 7; case 7: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_v$2 = _r$11; case 3:
		if (!(_v$2)) { _v$1 = false; $s = 2; continue s; }
		_r$12 = f((rr.$ptr_Port || (rr.$ptr_Port = new ptrType$21(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, rr))), "Port", ""); /* */ $s = 8; case 8: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_v$1 = _r$12; case 2:
		if (!(_v$1)) { _v = false; $s = 1; continue s; }
		_r$13 = f((rr.$ptr_Target || (rr.$ptr_Target = new ptrType$22(function() { return this.$target.Target; }, function($v) { this.$target.Target = $v; }, rr))), "Target", "domain"); /* */ $s = 9; case 9: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_v = _r$13; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dnsRR_SRV.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$9 = _r$9; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_SRV.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_A.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_A.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_A.ptr.prototype.Walk = function(f) {
		var $ptr, _r$10, _r$9, _v, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$9 = $f._r$9; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r$9 = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		if (!(_r$9)) { _v = false; $s = 1; continue s; }
		_r$10 = f((rr.$ptr_A || (rr.$ptr_A = new ptrType$20(function() { return this.$target.A; }, function($v) { this.$target.A = $v; }, rr))), "A", "ipv4"); /* */ $s = 3; case 3: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_v = _r$10; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dnsRR_A.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$9 = _r$9; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_A.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_AAAA.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_AAAA.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_AAAA.ptr.prototype.Walk = function(f) {
		var $ptr, _r$10, _r$9, _v, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$9 = $f._r$9; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r$9 = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		if (!(_r$9)) { _v = false; $s = 1; continue s; }
		_r$10 = f(new sliceType$1(rr.AAAA), "AAAA", "ipv6"); /* */ $s = 3; case 3: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_v = _r$10; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dnsRR_AAAA.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$9 = _r$9; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_AAAA.prototype.Walk = function(f) { return this.$val.Walk(f); };
	Flags.prototype.String = function() {
		var $ptr, _i, _ref, f, i, name, s, y;
		f = this.$val;
		s = "";
		_ref = flagNames;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			name = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((((f & (((y = (i >>> 0), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				if (!(s === "")) {
					s = s + ("|");
				}
				s = s + (name);
			}
			_i++;
		}
		if (s === "") {
			s = "0";
		}
		return s;
	};
	$ptrType(Flags).prototype.String = function() { return new Flags(this.$get()).String(); };
	Interface.ptr.prototype.Addrs = function() {
		var $ptr, _r$9, _tuple, err, ifat, ifi, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$9 = $f._r$9; _tuple = $f._tuple; err = $f.err; ifat = $f.ifat; ifi = $f.ifi; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ifi = this;
		if (ifi === ptrType$38.nil) {
			$s = -1; return [sliceType$9.nil, new OpError.ptr("route", "ip+net", $ifaceNil, $ifaceNil, errInvalidInterface)];
		}
		_r$9 = interfaceAddrTable(ifi); /* */ $s = 1; case 1: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_tuple = _r$9;
		ifat = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = new OpError.ptr("route", "ip+net", $ifaceNil, $ifaceNil, err);
		}
		$s = -1; return [ifat, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Interface.ptr.prototype.Addrs }; } $f.$ptr = $ptr; $f._r$9 = _r$9; $f._tuple = _tuple; $f.err = err; $f.ifat = ifat; $f.ifi = ifi; $f.$s = $s; $f.$r = $r; return $f;
	};
	Interface.prototype.Addrs = function() { return this.$val.Addrs(); };
	Interface.ptr.prototype.MulticastAddrs = function() {
		var $ptr, _r$9, _tuple, err, ifat, ifi, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$9 = $f._r$9; _tuple = $f._tuple; err = $f.err; ifat = $f.ifat; ifi = $f.ifi; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ifi = this;
		if (ifi === ptrType$38.nil) {
			$s = -1; return [sliceType$9.nil, new OpError.ptr("route", "ip+net", $ifaceNil, $ifaceNil, errInvalidInterface)];
		}
		_r$9 = interfaceMulticastAddrTable(ifi); /* */ $s = 1; case 1: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_tuple = _r$9;
		ifat = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = new OpError.ptr("route", "ip+net", $ifaceNil, $ifaceNil, err);
		}
		$s = -1; return [ifat, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Interface.ptr.prototype.MulticastAddrs }; } $f.$ptr = $ptr; $f._r$9 = _r$9; $f._tuple = _tuple; $f.err = err; $f.ifat = ifat; $f.ifi = ifi; $f.$s = $s; $f.$r = $r; return $f;
	};
	Interface.prototype.MulticastAddrs = function() { return this.$val.MulticastAddrs(); };
	interfaceAddrTable = function(ifi) {
		var $ptr, _i, _r$9, _ref, _ref$1, _ref$2, _ref$3, _tuple, err, ifat, ifi, index, ip, m, m$1, mask, msgs, sa, sa$1, sa$2, sa$3, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tuple = $f._tuple; err = $f.err; ifat = $f.ifat; ifi = $f.ifi; index = $f.index; ip = $f.ip; m = $f.m; m$1 = $f.m$1; mask = $f.mask; msgs = $f.msgs; sa = $f.sa; sa$1 = $f.sa$1; sa$2 = $f.sa$2; sa$3 = $f.sa$3; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		index = 0;
		if (!(ifi === ptrType$38.nil)) {
			index = ifi.Index;
		}
		_r$9 = interfaceMessages(index); /* */ $s = 1; case 1: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_tuple = _r$9;
		msgs = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType$9.nil, err];
		}
		ifat = $makeSlice(sliceType$9, 0, msgs.$length);
		_ref = msgs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			m = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_ref$1 = m;
			if ($assertType(_ref$1, ptrType$42, true)[1]) {
				m$1 = _ref$1.$val;
				if (!((index === 0)) && !((index === m$1.Index))) {
					_i++;
					continue;
				}
				mask = IPMask.nil;
				_ref$2 = (x = m$1.Addrs, (2 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 2]));
				if ($assertType(_ref$2, ptrType$43, true)[1]) {
					sa = _ref$2.$val;
					mask = IPv4Mask(sa.IP[0], sa.IP[1], sa.IP[2], sa.IP[3]);
				} else if ($assertType(_ref$2, ptrType$44, true)[1]) {
					sa$1 = _ref$2.$val;
					mask = $makeSlice(IPMask, 16);
					$copySlice(mask, new sliceType$1(sa$1.IP));
				}
				ip = IP.nil;
				_ref$3 = (x$1 = m$1.Addrs, (5 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 5]));
				if ($assertType(_ref$3, ptrType$43, true)[1]) {
					sa$2 = _ref$3.$val;
					ip = IPv4(sa$2.IP[0], sa$2.IP[1], sa$2.IP[2], sa$2.IP[3]);
				} else if ($assertType(_ref$3, ptrType$44, true)[1]) {
					sa$3 = _ref$3.$val;
					ip = $makeSlice(IP, 16);
					$copySlice(ip, new sliceType$1(sa$3.IP));
				}
				if (!(ip === IP.nil) && !(mask === IPMask.nil)) {
					ifat = $append(ifat, new IPNet.ptr(ip, mask));
				}
			}
			_i++;
		}
		$s = -1; return [ifat, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: interfaceAddrTable }; } $f.$ptr = $ptr; $f._i = _i; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tuple = _tuple; $f.err = err; $f.ifat = ifat; $f.ifi = ifi; $f.index = index; $f.ip = ip; $f.m = m; $f.m$1 = m$1; $f.mask = mask; $f.msgs = msgs; $f.sa = sa; $f.sa$1 = sa$1; $f.sa$2 = sa$2; $f.sa$3 = sa$3; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	interfaceMessages = function(ifindex) {
		var $ptr, _r$9, _tuple, err, ifindex, rib, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$9 = $f._r$9; _tuple = $f._tuple; err = $f.err; ifindex = $f.ifindex; rib = $f.rib; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = route.FetchRIB(0, 3, ifindex);
		rib = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType$11.nil, err];
		}
		_r$9 = route.ParseRIB(3, rib); /* */ $s = 1; case 1: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		$s = -1; return _r$9;
		/* */ } return; } if ($f === undefined) { $f = { $blk: interfaceMessages }; } $f.$ptr = $ptr; $f._r$9 = _r$9; $f._tuple = _tuple; $f.err = err; $f.ifindex = ifindex; $f.rib = rib; $f.$s = $s; $f.$r = $r; return $f;
	};
	interfaceMulticastAddrTable = function(ifi) {
		var $ptr, _i, _r$9, _ref, _ref$1, _ref$2, _tuple, _tuple$1, err, ifi, ifmat, ip, m, m$1, msgs, rib, sa, sa$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; ifi = $f.ifi; ifmat = $f.ifmat; ip = $f.ip; m = $f.m; m$1 = $f.m$1; msgs = $f.msgs; rib = $f.rib; sa = $f.sa; sa$1 = $f.sa$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = route.FetchRIB(0, 6, ifi.Index);
		rib = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType$9.nil, err];
		}
		_r$9 = route.ParseRIB(6, rib); /* */ $s = 1; case 1: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_tuple$1 = _r$9;
		msgs = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType$9.nil, err];
		}
		ifmat = $makeSlice(sliceType$9, 0, msgs.$length);
		_ref = msgs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			m = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_ref$1 = m;
			if ($assertType(_ref$1, ptrType$45, true)[1]) {
				m$1 = _ref$1.$val;
				if (!((ifi.Index === m$1.Index))) {
					_i++;
					continue;
				}
				ip = IP.nil;
				_ref$2 = (x = m$1.Addrs, (5 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 5]));
				if ($assertType(_ref$2, ptrType$43, true)[1]) {
					sa = _ref$2.$val;
					ip = IPv4(sa.IP[0], sa.IP[1], sa.IP[2], sa.IP[3]);
				} else if ($assertType(_ref$2, ptrType$44, true)[1]) {
					sa$1 = _ref$2.$val;
					ip = $makeSlice(IP, 16);
					$copySlice(ip, new sliceType$1(sa$1.IP));
				}
				if (!(ip === IP.nil)) {
					ifmat = $append(ifmat, new IPAddr.ptr(ip, ""));
				}
			}
			_i++;
		}
		$s = -1; return [ifmat, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: interfaceMulticastAddrTable }; } $f.$ptr = $ptr; $f._i = _i; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.ifi = ifi; $f.ifmat = ifmat; $f.ip = ip; $f.m = m; $f.m$1 = m$1; $f.msgs = msgs; $f.rib = rib; $f.sa = sa; $f.sa$1 = sa$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	IPv4 = function(a, b, c, d) {
		var $ptr, a, b, c, d, p;
		p = $makeSlice(IP, 16);
		$copySlice(p, v4InV6Prefix);
		(12 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 12] = a);
		(13 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 13] = b);
		(14 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 14] = c);
		(15 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 15] = d);
		return p;
	};
	$pkg.IPv4 = IPv4;
	IPv4Mask = function(a, b, c, d) {
		var $ptr, a, b, c, d, p;
		p = $makeSlice(IPMask, 4);
		(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = a);
		(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = b);
		(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = c);
		(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3] = d);
		return p;
	};
	$pkg.IPv4Mask = IPv4Mask;
	CIDRMask = function(ones, bits) {
		var $ptr, _q, bits, i, l, m, n, ones, y;
		if (!((bits === 32)) && !((bits === 128))) {
			return IPMask.nil;
		}
		if (ones < 0 || ones > bits) {
			return IPMask.nil;
		}
		l = (_q = bits / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		m = $makeSlice(IPMask, l);
		n = (ones >>> 0);
		i = 0;
		while (true) {
			if (!(i < l)) { break; }
			if (n >= 8) {
				((i < 0 || i >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + i] = 255);
				n = n - (8) >>> 0;
				i = i + (1) >> 0;
				continue;
			}
			((i < 0 || i >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + i] = (~((y = n, y < 32 ? (255 >>> y) : 0) << 24 >>> 24) << 24 >>> 24));
			n = 0;
			i = i + (1) >> 0;
		}
		return m;
	};
	$pkg.CIDRMask = CIDRMask;
	IP.prototype.IsUnspecified = function() {
		var $ptr, ip;
		ip = this;
		return ip.Equal($pkg.IPv4zero) || ip.Equal($pkg.IPv6unspecified);
	};
	$ptrType(IP).prototype.IsUnspecified = function() { return this.$get().IsUnspecified(); };
	IP.prototype.IsLoopback = function() {
		var $ptr, ip, ip4;
		ip = this;
		ip4 = ip.To4();
		if (!(ip4 === IP.nil)) {
			return (0 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 0]) === 127;
		}
		return ip.Equal($pkg.IPv6loopback);
	};
	$ptrType(IP).prototype.IsLoopback = function() { return this.$get().IsLoopback(); };
	IP.prototype.IsMulticast = function() {
		var $ptr, ip, ip4;
		ip = this;
		ip4 = ip.To4();
		if (!(ip4 === IP.nil)) {
			return (((0 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 0]) & 240) >>> 0) === 224;
		}
		return (ip.$length === 16) && ((0 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 0]) === 255);
	};
	$ptrType(IP).prototype.IsMulticast = function() { return this.$get().IsMulticast(); };
	IP.prototype.IsInterfaceLocalMulticast = function() {
		var $ptr, ip;
		ip = this;
		return (ip.$length === 16) && ((0 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 0]) === 255) && ((((1 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 1]) & 15) >>> 0) === 1);
	};
	$ptrType(IP).prototype.IsInterfaceLocalMulticast = function() { return this.$get().IsInterfaceLocalMulticast(); };
	IP.prototype.IsLinkLocalMulticast = function() {
		var $ptr, ip, ip4;
		ip = this;
		ip4 = ip.To4();
		if (!(ip4 === IP.nil)) {
			return ((0 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 0]) === 224) && ((1 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 1]) === 0) && ((2 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 2]) === 0);
		}
		return (ip.$length === 16) && ((0 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 0]) === 255) && ((((1 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 1]) & 15) >>> 0) === 2);
	};
	$ptrType(IP).prototype.IsLinkLocalMulticast = function() { return this.$get().IsLinkLocalMulticast(); };
	IP.prototype.IsLinkLocalUnicast = function() {
		var $ptr, ip, ip4;
		ip = this;
		ip4 = ip.To4();
		if (!(ip4 === IP.nil)) {
			return ((0 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 0]) === 169) && ((1 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 1]) === 254);
		}
		return (ip.$length === 16) && ((0 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 0]) === 254) && ((((1 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 1]) & 192) >>> 0) === 128);
	};
	$ptrType(IP).prototype.IsLinkLocalUnicast = function() { return this.$get().IsLinkLocalUnicast(); };
	IP.prototype.IsGlobalUnicast = function() {
		var $ptr, ip;
		ip = this;
		return ((ip.$length === 4) || (ip.$length === 16)) && !ip.Equal($pkg.IPv4bcast) && !ip.IsUnspecified() && !ip.IsLoopback() && !ip.IsMulticast() && !ip.IsLinkLocalUnicast();
	};
	$ptrType(IP).prototype.IsGlobalUnicast = function() { return this.$get().IsGlobalUnicast(); };
	isZeros = function(p) {
		var $ptr, i, p;
		i = 0;
		while (true) {
			if (!(i < p.$length)) { break; }
			if (!((((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]) === 0))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	IP.prototype.To4 = function() {
		var $ptr, ip;
		ip = this;
		if (ip.$length === 4) {
			return ip;
		}
		if ((ip.$length === 16) && isZeros($subslice(ip, 0, 10)) && ((10 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 10]) === 255) && ((11 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 11]) === 255)) {
			return $subslice(ip, 12, 16);
		}
		return IP.nil;
	};
	$ptrType(IP).prototype.To4 = function() { return this.$get().To4(); };
	IP.prototype.To16 = function() {
		var $ptr, ip;
		ip = this;
		if (ip.$length === 4) {
			return IPv4((0 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 0]), (1 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 1]), (2 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 2]), (3 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 3]));
		}
		if (ip.$length === 16) {
			return ip;
		}
		return IP.nil;
	};
	$ptrType(IP).prototype.To16 = function() { return this.$get().To16(); };
	IP.prototype.DefaultMask = function() {
		var $ptr, _1, ip;
		ip = this;
		ip = ip.To4();
		if (ip === IP.nil) {
			return IPMask.nil;
		}
		_1 = true;
		if (_1 === ((0 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 0]) < 128)) {
			return classAMask;
		} else if (_1 === ((0 >= ip.$length ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + 0]) < 192)) {
			return classBMask;
		} else {
			return classCMask;
		}
	};
	$ptrType(IP).prototype.DefaultMask = function() { return this.$get().DefaultMask(); };
	allFF = function(b) {
		var $ptr, _i, _ref, b, c;
		_ref = b;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((c === 255))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	IP.prototype.Mask = function(mask) {
		var $ptr, i, ip, mask, n, out, x, x$1;
		ip = this;
		if ((mask.$length === 16) && (ip.$length === 4) && allFF((x = $subslice(mask, 0, 12), $subslice(new sliceType$1(x.$array), x.$offset, x.$offset + x.$length)))) {
			mask = $subslice(mask, 12);
		}
		if ((mask.$length === 4) && (ip.$length === 16) && bytesEqual((x$1 = $subslice(ip, 0, 12), $subslice(new sliceType$1(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), v4InV6Prefix)) {
			ip = $subslice(ip, 12);
		}
		n = ip.$length;
		if (!((n === mask.$length))) {
			return IP.nil;
		}
		out = $makeSlice(IP, n);
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			((i < 0 || i >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i] = ((((i < 0 || i >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + i]) & ((i < 0 || i >= mask.$length) ? ($throwRuntimeError("index out of range"), undefined) : mask.$array[mask.$offset + i])) >>> 0));
			i = i + (1) >> 0;
		}
		return out;
	};
	$ptrType(IP).prototype.Mask = function(mask) { return this.$get().Mask(mask); };
	IP.prototype.String = function() {
		var $ptr, b, e0, e1, i, i$1, ip, j, p, p4, x, x$1;
		ip = this;
		p = ip;
		if (ip.$length === 0) {
			return "<nil>";
		}
		p4 = p.To4();
		if (p4.$length === 4) {
			return uitoa(((0 >= p4.$length ? ($throwRuntimeError("index out of range"), undefined) : p4.$array[p4.$offset + 0]) >>> 0)) + "." + uitoa(((1 >= p4.$length ? ($throwRuntimeError("index out of range"), undefined) : p4.$array[p4.$offset + 1]) >>> 0)) + "." + uitoa(((2 >= p4.$length ? ($throwRuntimeError("index out of range"), undefined) : p4.$array[p4.$offset + 2]) >>> 0)) + "." + uitoa(((3 >= p4.$length ? ($throwRuntimeError("index out of range"), undefined) : p4.$array[p4.$offset + 3]) >>> 0));
		}
		if (!((p.$length === 16))) {
			return "?" + hexString($subslice(new sliceType$1(ip.$array), ip.$offset, ip.$offset + ip.$length));
		}
		e0 = -1;
		e1 = -1;
		i = 0;
		while (true) {
			if (!(i < 16)) { break; }
			j = i;
			while (true) {
				if (!(j < 16 && (((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]) === 0) && ((x = j + 1 >> 0, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x])) === 0))) { break; }
				j = j + (2) >> 0;
			}
			if (j > i && (j - i >> 0) > (e1 - e0 >> 0)) {
				e0 = i;
				e1 = j;
				i = j;
			}
			i = i + (2) >> 0;
		}
		if ((e1 - e0 >> 0) <= 2) {
			e0 = -1;
			e1 = -1;
		}
		b = $makeSlice(sliceType$1, 0, 39);
		i$1 = 0;
		while (true) {
			if (!(i$1 < 16)) { break; }
			if (i$1 === e0) {
				b = $append(b, 58, 58);
				i$1 = e1;
				if (i$1 >= 16) {
					break;
				}
			} else if (i$1 > 0) {
				b = $append(b, 58);
			}
			b = appendHex(b, ((((((i$1 < 0 || i$1 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i$1]) >>> 0) << 8 >>> 0)) | ((x$1 = i$1 + 1 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$1])) >>> 0)) >>> 0);
			i$1 = i$1 + (2) >> 0;
		}
		return $bytesToString(b);
	};
	$ptrType(IP).prototype.String = function() { return this.$get().String(); };
	hexString = function(b) {
		var $ptr, _i, _ref, _tmp, _tmp$1, b, i, s, tn, x, x$1;
		s = $makeSlice(sliceType$1, ($imul(b.$length, 2)));
		_ref = b;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			tn = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_tmp = "0123456789abcdef".charCodeAt((tn >>> 4 << 24 >>> 24));
			_tmp$1 = "0123456789abcdef".charCodeAt(((tn & 15) >>> 0));
			(x = $imul(i, 2), ((x < 0 || x >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x] = _tmp));
			(x$1 = ($imul(i, 2)) + 1 >> 0, ((x$1 < 0 || x$1 >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x$1] = _tmp$1));
			_i++;
		}
		return $bytesToString(s);
	};
	ipEmptyString = function(ip) {
		var $ptr, ip;
		if (ip.$length === 0) {
			return "";
		}
		return ip.String();
	};
	IP.prototype.MarshalText = function() {
		var $ptr, ip;
		ip = this;
		if (ip.$length === 0) {
			return [new sliceType$1($stringToBytes("")), $ifaceNil];
		}
		if (!((ip.$length === 4)) && !((ip.$length === 16))) {
			return [sliceType$1.nil, new AddrError.ptr("invalid IP address", hexString($subslice(new sliceType$1(ip.$array), ip.$offset, ip.$offset + ip.$length)))];
		}
		return [new sliceType$1($stringToBytes(ip.String())), $ifaceNil];
	};
	$ptrType(IP).prototype.MarshalText = function() { return this.$get().MarshalText(); };
	$ptrType(IP).prototype.UnmarshalText = function(text) {
		var $ptr, ip, s, text, x;
		ip = this;
		if (text.$length === 0) {
			ip.$set(IP.nil);
			return $ifaceNil;
		}
		s = $bytesToString(text);
		x = ParseIP(s);
		if (x === IP.nil) {
			return new ParseError.ptr("IP address", s);
		}
		ip.$set(x);
		return $ifaceNil;
	};
	IP.prototype.Equal = function(x) {
		var $ptr, ip, x, x$1, x$2, x$3, x$4;
		ip = this;
		if (ip.$length === x.$length) {
			return bytesEqual($subslice(new sliceType$1(ip.$array), ip.$offset, ip.$offset + ip.$length), $subslice(new sliceType$1(x.$array), x.$offset, x.$offset + x.$length));
		}
		if ((ip.$length === 4) && (x.$length === 16)) {
			return bytesEqual((x$1 = $subslice(x, 0, 12), $subslice(new sliceType$1(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), v4InV6Prefix) && bytesEqual($subslice(new sliceType$1(ip.$array), ip.$offset, ip.$offset + ip.$length), (x$2 = $subslice(x, 12), $subslice(new sliceType$1(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)));
		}
		if ((ip.$length === 16) && (x.$length === 4)) {
			return bytesEqual((x$3 = $subslice(ip, 0, 12), $subslice(new sliceType$1(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), v4InV6Prefix) && bytesEqual((x$4 = $subslice(ip, 12), $subslice(new sliceType$1(x$4.$array), x$4.$offset, x$4.$offset + x$4.$length)), $subslice(new sliceType$1(x.$array), x.$offset, x.$offset + x.$length));
		}
		return false;
	};
	$ptrType(IP).prototype.Equal = function(x) { return this.$get().Equal(x); };
	bytesEqual = function(x, y) {
		var $ptr, _i, _ref, b, i, x, y;
		if (!((x.$length === y.$length))) {
			return false;
		}
		_ref = x;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i]) === b))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	simpleMaskLength = function(mask) {
		var $ptr, _i, _ref, i, mask, n, v, y;
		n = 0;
		_ref = mask;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (v === 255) {
				n = n + (8) >> 0;
				_i++;
				continue;
			}
			while (true) {
				if (!(!((((v & 128) >>> 0) === 0)))) { break; }
				n = n + (1) >> 0;
				v = (y = (1), y < 32 ? (v << y) : 0) << 24 >>> 24;
			}
			if (!((v === 0))) {
				return -1;
			}
			i = i + (1) >> 0;
			while (true) {
				if (!(i < mask.$length)) { break; }
				if (!((((i < 0 || i >= mask.$length) ? ($throwRuntimeError("index out of range"), undefined) : mask.$array[mask.$offset + i]) === 0))) {
					return -1;
				}
				i = i + (1) >> 0;
			}
			break;
		}
		return n;
	};
	IPMask.prototype.Size = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, bits, m, ones;
		ones = 0;
		bits = 0;
		m = this;
		_tmp = simpleMaskLength(m);
		_tmp$1 = $imul(m.$length, 8);
		ones = _tmp;
		bits = _tmp$1;
		if (ones === -1) {
			_tmp$2 = 0;
			_tmp$3 = 0;
			ones = _tmp$2;
			bits = _tmp$3;
			return [ones, bits];
		}
		return [ones, bits];
	};
	$ptrType(IPMask).prototype.Size = function() { return this.$get().Size(); };
	IPMask.prototype.String = function() {
		var $ptr, m;
		m = this;
		if (m.$length === 0) {
			return "<nil>";
		}
		return hexString($subslice(new sliceType$1(m.$array), m.$offset, m.$offset + m.$length));
	};
	$ptrType(IPMask).prototype.String = function() { return this.$get().String(); };
	networkNumberAndMask = function(n) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, ip, m, n;
		ip = IP.nil;
		m = IPMask.nil;
		ip = n.IP.To4();
		if (ip === IP.nil) {
			ip = n.IP;
			if (!((ip.$length === 16))) {
				_tmp = IP.nil;
				_tmp$1 = IPMask.nil;
				ip = _tmp;
				m = _tmp$1;
				return [ip, m];
			}
		}
		m = n.Mask;
		_1 = m.$length;
		if (_1 === (4)) {
			if (!((ip.$length === 4))) {
				_tmp$2 = IP.nil;
				_tmp$3 = IPMask.nil;
				ip = _tmp$2;
				m = _tmp$3;
				return [ip, m];
			}
		} else if (_1 === (16)) {
			if (ip.$length === 4) {
				m = $subslice(m, 12);
			}
		} else {
			_tmp$4 = IP.nil;
			_tmp$5 = IPMask.nil;
			ip = _tmp$4;
			m = _tmp$5;
			return [ip, m];
		}
		return [ip, m];
	};
	IPNet.ptr.prototype.Contains = function(ip) {
		var $ptr, _tuple, i, ip, l, m, n, nn, x;
		n = this;
		_tuple = networkNumberAndMask(n);
		nn = _tuple[0];
		m = _tuple[1];
		x = ip.To4();
		if (!(x === IP.nil)) {
			ip = x;
		}
		l = ip.$length;
		if (!((l === nn.$length))) {
			return false;
		}
		i = 0;
		while (true) {
			if (!(i < l)) { break; }
			if (!((((((i < 0 || i >= nn.$length) ? ($throwRuntimeError("index out of range"), undefined) : nn.$array[nn.$offset + i]) & ((i < 0 || i >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + i])) >>> 0) === ((((i < 0 || i >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + i]) & ((i < 0 || i >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + i])) >>> 0)))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	IPNet.prototype.Contains = function(ip) { return this.$val.Contains(ip); };
	IPNet.ptr.prototype.Network = function() {
		var $ptr, n;
		n = this;
		return "ip+net";
	};
	IPNet.prototype.Network = function() { return this.$val.Network(); };
	IPNet.ptr.prototype.String = function() {
		var $ptr, _tuple, l, m, n, nn;
		n = this;
		_tuple = networkNumberAndMask(n);
		nn = _tuple[0];
		m = _tuple[1];
		if (nn === IP.nil || m === IPMask.nil) {
			return "<nil>";
		}
		l = simpleMaskLength(m);
		if (l === -1) {
			return nn.String() + "/" + m.String();
		}
		return nn.String() + "/" + uitoa((l >>> 0));
	};
	IPNet.prototype.String = function() { return this.$val.String(); };
	parseIPv4 = function(s) {
		var $ptr, _tuple, c, i, n, ok, p, s;
		p = arrayType$1.zero();
		i = 0;
		while (true) {
			if (!(i < 4)) { break; }
			if (s.length === 0) {
				return IP.nil;
			}
			if (i > 0) {
				if (!((s.charCodeAt(0) === 46))) {
					return IP.nil;
				}
				s = $substring(s, 1);
			}
			_tuple = dtoi(s);
			n = _tuple[0];
			c = _tuple[1];
			ok = _tuple[2];
			if (!ok || n > 255) {
				return IP.nil;
			}
			s = $substring(s, c);
			((i < 0 || i >= p.length) ? ($throwRuntimeError("index out of range"), undefined) : p[i] = (n << 24 >>> 24));
			i = i + (1) >> 0;
		}
		if (!((s.length === 0))) {
			return IP.nil;
		}
		return IPv4(p[0], p[1], p[2], p[3]);
	};
	parseIPv6 = function(s, zoneAllowed) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, c, ellipsis, i, ip, ip4, j, j$1, n, n$1, ok, s, x, x$1, x$2, x$3, x$4, zone, zoneAllowed;
		ip = IP.nil;
		zone = "";
		ip = $makeSlice(IP, 16);
		ellipsis = -1;
		if (zoneAllowed) {
			_tuple = splitHostZone(s);
			s = _tuple[0];
			zone = _tuple[1];
		}
		if (s.length >= 2 && (s.charCodeAt(0) === 58) && (s.charCodeAt(1) === 58)) {
			ellipsis = 0;
			s = $substring(s, 2);
			if (s.length === 0) {
				_tmp = ip;
				_tmp$1 = zone;
				ip = _tmp;
				zone = _tmp$1;
				return [ip, zone];
			}
		}
		i = 0;
		while (true) {
			if (!(i < 16)) { break; }
			_tuple$1 = xtoi(s);
			n = _tuple$1[0];
			c = _tuple$1[1];
			ok = _tuple$1[2];
			if (!ok || n > 65535) {
				_tmp$2 = IP.nil;
				_tmp$3 = zone;
				ip = _tmp$2;
				zone = _tmp$3;
				return [ip, zone];
			}
			if (c < s.length && (s.charCodeAt(c) === 46)) {
				if (ellipsis < 0 && !((i === 12))) {
					_tmp$4 = IP.nil;
					_tmp$5 = zone;
					ip = _tmp$4;
					zone = _tmp$5;
					return [ip, zone];
				}
				if ((i + 4 >> 0) > 16) {
					_tmp$6 = IP.nil;
					_tmp$7 = zone;
					ip = _tmp$6;
					zone = _tmp$7;
					return [ip, zone];
				}
				ip4 = parseIPv4(s);
				if (ip4 === IP.nil) {
					_tmp$8 = IP.nil;
					_tmp$9 = zone;
					ip = _tmp$8;
					zone = _tmp$9;
					return [ip, zone];
				}
				((i < 0 || i >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + i] = (12 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 12]));
				(x = i + 1 >> 0, ((x < 0 || x >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + x] = (13 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 13])));
				(x$1 = i + 2 >> 0, ((x$1 < 0 || x$1 >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + x$1] = (14 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 14])));
				(x$2 = i + 3 >> 0, ((x$2 < 0 || x$2 >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + x$2] = (15 >= ip4.$length ? ($throwRuntimeError("index out of range"), undefined) : ip4.$array[ip4.$offset + 15])));
				s = "";
				i = i + (4) >> 0;
				break;
			}
			((i < 0 || i >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + i] = ((n >> 8 >> 0) << 24 >>> 24));
			(x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + x$3] = (n << 24 >>> 24)));
			i = i + (2) >> 0;
			s = $substring(s, c);
			if (s.length === 0) {
				break;
			}
			if (!((s.charCodeAt(0) === 58)) || (s.length === 1)) {
				_tmp$10 = IP.nil;
				_tmp$11 = zone;
				ip = _tmp$10;
				zone = _tmp$11;
				return [ip, zone];
			}
			s = $substring(s, 1);
			if (s.charCodeAt(0) === 58) {
				if (ellipsis >= 0) {
					_tmp$12 = IP.nil;
					_tmp$13 = zone;
					ip = _tmp$12;
					zone = _tmp$13;
					return [ip, zone];
				}
				ellipsis = i;
				s = $substring(s, 1);
				if (s.length === 0) {
					break;
				}
			}
		}
		if (!((s.length === 0))) {
			_tmp$14 = IP.nil;
			_tmp$15 = zone;
			ip = _tmp$14;
			zone = _tmp$15;
			return [ip, zone];
		}
		if (i < 16) {
			if (ellipsis < 0) {
				_tmp$16 = IP.nil;
				_tmp$17 = zone;
				ip = _tmp$16;
				zone = _tmp$17;
				return [ip, zone];
			}
			n$1 = 16 - i >> 0;
			j = i - 1 >> 0;
			while (true) {
				if (!(j >= ellipsis)) { break; }
				(x$4 = j + n$1 >> 0, ((x$4 < 0 || x$4 >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + x$4] = ((j < 0 || j >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + j])));
				j = j - (1) >> 0;
			}
			j$1 = (ellipsis + n$1 >> 0) - 1 >> 0;
			while (true) {
				if (!(j$1 >= ellipsis)) { break; }
				((j$1 < 0 || j$1 >= ip.$length) ? ($throwRuntimeError("index out of range"), undefined) : ip.$array[ip.$offset + j$1] = 0);
				j$1 = j$1 - (1) >> 0;
			}
		} else if (ellipsis >= 0) {
			_tmp$18 = IP.nil;
			_tmp$19 = zone;
			ip = _tmp$18;
			zone = _tmp$19;
			return [ip, zone];
		}
		_tmp$20 = ip;
		_tmp$21 = zone;
		ip = _tmp$20;
		zone = _tmp$21;
		return [ip, zone];
	};
	ParseIP = function(s) {
		var $ptr, _1, _tuple, i, ip, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			_1 = s.charCodeAt(i);
			if (_1 === (46)) {
				return parseIPv4(s);
			} else if (_1 === (58)) {
				_tuple = parseIPv6(s, false);
				ip = _tuple[0];
				return ip;
			}
			i = i + (1) >> 0;
		}
		return IP.nil;
	};
	$pkg.ParseIP = ParseIP;
	ParseCIDR = function(s) {
		var $ptr, _tmp, _tmp$1, _tuple, _tuple$1, addr, i, ip, iplen, m, mask, n, ok, s;
		i = byteIndex(s, 47);
		if (i < 0) {
			return [IP.nil, ptrType$5.nil, new ParseError.ptr("CIDR address", s)];
		}
		_tmp = $substring(s, 0, i);
		_tmp$1 = $substring(s, (i + 1 >> 0));
		addr = _tmp;
		mask = _tmp$1;
		iplen = 4;
		ip = parseIPv4(addr);
		if (ip === IP.nil) {
			iplen = 16;
			_tuple = parseIPv6(addr, false);
			ip = _tuple[0];
		}
		_tuple$1 = dtoi(mask);
		n = _tuple$1[0];
		i = _tuple$1[1];
		ok = _tuple$1[2];
		if (ip === IP.nil || !ok || !((i === mask.length)) || n < 0 || n > ($imul(8, iplen))) {
			return [IP.nil, ptrType$5.nil, new ParseError.ptr("CIDR address", s)];
		}
		m = CIDRMask(n, $imul(8, iplen));
		return [ip, new IPNet.ptr(ip.Mask(m), m), $ifaceNil];
	};
	$pkg.ParseCIDR = ParseCIDR;
	IPAddr.ptr.prototype.Network = function() {
		var $ptr, a;
		a = this;
		return "ip";
	};
	IPAddr.prototype.Network = function() { return this.$val.Network(); };
	IPAddr.ptr.prototype.String = function() {
		var $ptr, a, ip;
		a = this;
		if (a === ptrType$8.nil) {
			return "<nil>";
		}
		ip = ipEmptyString(a.IP);
		if (!(a.Zone === "")) {
			return ip + "%" + a.Zone;
		}
		return ip;
	};
	IPAddr.prototype.String = function() { return this.$val.String(); };
	splitHostZone = function(s) {
		var $ptr, _tmp, _tmp$1, host, i, s, zone;
		host = "";
		zone = "";
		i = last(s, 37);
		if (i > 0) {
			_tmp = $substring(s, 0, i);
			_tmp$1 = $substring(s, (i + 1 >> 0));
			host = _tmp;
			zone = _tmp$1;
		} else {
			host = s;
		}
		return [host, zone];
	};
	HardwareAddr.prototype.String = function() {
		var $ptr, _i, _ref, a, b, buf, i;
		a = this;
		if (a.$length === 0) {
			return "";
		}
		buf = $makeSlice(sliceType$1, 0, (($imul(a.$length, 3)) - 1 >> 0));
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				buf = $append(buf, 58);
			}
			buf = $append(buf, "0123456789abcdef".charCodeAt((b >>> 4 << 24 >>> 24)));
			buf = $append(buf, "0123456789abcdef".charCodeAt(((b & 15) >>> 0)));
			_i++;
		}
		return $bytesToString(buf);
	};
	$ptrType(HardwareAddr).prototype.String = function() { return this.$get().String(); };
	init$2 = function() {
		var $ptr, _tuple;
		sysInit();
		supportsIPv4 = probeIPv4Stack();
		_tuple = probeIPv6Stack();
		supportsIPv6 = _tuple[0];
		supportsIPv4map = _tuple[1];
	};
	OpError.ptr.prototype.Error = function() {
		var $ptr, _r$10, _r$11, _r$9, e, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$9 = $f._r$9; e = $f.e; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		if (e === ptrType$55.nil) {
			$s = -1; return "<nil>";
		}
		s = e.Op;
		if (!(e.Net === "")) {
			s = s + (" " + e.Net);
		}
		/* */ if (!($interfaceIsEqual(e.Source, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(e.Source, $ifaceNil))) { */ case 1:
			_r$9 = e.Source.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			s = s + (" " + _r$9);
		/* } */ case 2:
		/* */ if (!($interfaceIsEqual(e.Addr, $ifaceNil))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!($interfaceIsEqual(e.Addr, $ifaceNil))) { */ case 4:
			if (!($interfaceIsEqual(e.Source, $ifaceNil))) {
				s = s + ("->");
			} else {
				s = s + (" ");
			}
			_r$10 = e.Addr.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			s = s + (_r$10);
		/* } */ case 5:
		_r$11 = e.Err.Error(); /* */ $s = 7; case 7: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		s = s + (": " + _r$11);
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: OpError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$9 = _r$9; $f.e = e; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	OpError.prototype.Error = function() { return this.$val.Error(); };
	OpError.ptr.prototype.Timeout = function() {
		var $ptr, _r$10, _r$9, _tuple, _tuple$1, _tuple$2, _v, _v$1, e, ne, ok, ok$1, ok$2, t, t$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _v = $f._v; _v$1 = $f._v$1; e = $f.e; ne = $f.ne; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; t = $f.t; t$1 = $f.t$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, ptrType$31, true);
		ne = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_tuple$1 = $assertType(ne.Err, timeout, true);
			t = _tuple$1[0];
			ok$1 = _tuple$1[1];
			if (!(ok$1)) { _v = false; $s = 3; continue s; }
			_r$9 = t.Timeout(); /* */ $s = 4; case 4: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_v = _r$9; case 3:
			$s = -1; return _v;
		/* } */ case 2:
		_tuple$2 = $assertType(e.Err, timeout, true);
		t$1 = _tuple$2[0];
		ok$2 = _tuple$2[1];
		if (!(ok$2)) { _v$1 = false; $s = 5; continue s; }
		_r$10 = t$1.Timeout(); /* */ $s = 6; case 6: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_v$1 = _r$10; case 5:
		$s = -1; return _v$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: OpError.ptr.prototype.Timeout }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._v = _v; $f._v$1 = _v$1; $f.e = e; $f.ne = ne; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.t = t; $f.t$1 = t$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	OpError.prototype.Timeout = function() { return this.$val.Timeout(); };
	OpError.ptr.prototype.Temporary = function() {
		var $ptr, _r$10, _r$9, _tuple, _tuple$1, _tuple$2, _v, _v$1, e, ne, ok, ok$1, ok$2, t, t$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _v = $f._v; _v$1 = $f._v$1; e = $f.e; ne = $f.ne; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; t = $f.t; t$1 = $f.t$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, ptrType$31, true);
		ne = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_tuple$1 = $assertType(ne.Err, temporary, true);
			t = _tuple$1[0];
			ok$1 = _tuple$1[1];
			if (!(ok$1)) { _v = false; $s = 3; continue s; }
			_r$9 = t.Temporary(); /* */ $s = 4; case 4: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_v = _r$9; case 3:
			$s = -1; return _v;
		/* } */ case 2:
		_tuple$2 = $assertType(e.Err, temporary, true);
		t$1 = _tuple$2[0];
		ok$2 = _tuple$2[1];
		if (!(ok$2)) { _v$1 = false; $s = 5; continue s; }
		_r$10 = t$1.Temporary(); /* */ $s = 6; case 6: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_v$1 = _r$10; case 5:
		$s = -1; return _v$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: OpError.ptr.prototype.Temporary }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._v = _v; $f._v$1 = _v$1; $f.e = e; $f.ne = ne; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.t = t; $f.t$1 = t$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	OpError.prototype.Temporary = function() { return this.$val.Temporary(); };
	ParseError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return "invalid " + e.Type + ": " + e.Text;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	AddrError.ptr.prototype.Error = function() {
		var $ptr, e, s;
		e = this;
		if (e === ptrType$56.nil) {
			return "<nil>";
		}
		s = e.Err;
		if (!(e.Addr === "")) {
			s = "address " + e.Addr + ": " + s;
		}
		return s;
	};
	AddrError.prototype.Error = function() { return this.$val.Error(); };
	AddrError.ptr.prototype.Timeout = function() {
		var $ptr, e;
		e = this;
		return false;
	};
	AddrError.prototype.Timeout = function() { return this.$val.Timeout(); };
	AddrError.ptr.prototype.Temporary = function() {
		var $ptr, e;
		e = this;
		return false;
	};
	AddrError.prototype.Temporary = function() { return this.$val.Temporary(); };
	$ptrType(Buffers).prototype.WriteTo = function(w) {
		var $ptr, _i, _r$10, _r$9, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, _tuple$2, b, err, err$1, n, nb, ok, v, w, wv, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$10 = $f._r$10; _r$9 = $f._r$9; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; err = $f.err; err$1 = $f.err$1; n = $f.n; nb = $f.nb; ok = $f.ok; v = $f.v; w = $f.w; wv = $f.wv; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		v = this;
		_tuple = $assertType(w, buffersWriter, true);
		wv = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r$9 = wv.writeBuffers(v); /* */ $s = 3; case 3: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_tuple$1 = _r$9;
			n = _tuple$1[0];
			err = _tuple$1[1];
			$s = -1; return [n, err];
		/* } */ case 2:
		_ref = v.$get();
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$10 = w.Write(b); /* */ $s = 6; case 6: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_tuple$2 = _r$10;
			nb = _tuple$2[0];
			err$1 = _tuple$2[1];
			n = (x = new $Int64(0, nb), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				v.consume(n);
				_tmp = n;
				_tmp$1 = err$1;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
			_i++;
		/* } */ $s = 4; continue; case 5:
		v.consume(n);
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(Buffers).prototype.WriteTo }; } $f.$ptr = $ptr; $f._i = _i; $f._r$10 = _r$10; $f._r$9 = _r$9; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.n = n; $f.nb = nb; $f.ok = ok; $f.v = v; $f.w = w; $f.wv = wv; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Buffers).prototype.Read = function(p) {
		var $ptr, err, n, n0, p, v, x;
		n = 0;
		err = $ifaceNil;
		v = this;
		while (true) {
			if (!(p.$length > 0 && v.$get().$length > 0)) { break; }
			n0 = $copySlice(p, (x = v.$get(), (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])));
			v.consume(new $Int64(0, n0));
			p = $subslice(p, n0);
			n = n + (n0) >> 0;
		}
		if (v.$get().$length === 0) {
			err = io.EOF;
		}
		return [n, err];
	};
	$ptrType(Buffers).prototype.consume = function(n) {
		var $ptr, ln0, n, v, x, x$1, x$2, x$3;
		v = this;
		while (true) {
			if (!(v.$get().$length > 0)) { break; }
			ln0 = new $Int64(0, (x = v.$get(), (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).$length);
			if ((ln0.$high > n.$high || (ln0.$high === n.$high && ln0.$low > n.$low))) {
				(x$2 = v.$get(), (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0] = $subslice((x$1 = v.$get(), (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])), $flatten64(n))));
				return;
			}
			n = (x$3 = ln0, new $Int64(n.$high - x$3.$high, n.$low - x$3.$low));
			v.$set($subslice((v.$get()), 1));
		}
	};
	dtoi = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, i, n, ok, s;
		n = 0;
		i = 0;
		ok = false;
		n = 0;
		i = 0;
		while (true) {
			if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
			n = ($imul(n, 10)) + ((s.charCodeAt(i) - 48 << 24 >>> 24) >> 0) >> 0;
			if (n >= 16777215) {
				_tmp = 16777215;
				_tmp$1 = i;
				_tmp$2 = false;
				n = _tmp;
				i = _tmp$1;
				ok = _tmp$2;
				return [n, i, ok];
			}
			i = i + (1) >> 0;
		}
		if (i === 0) {
			_tmp$3 = 0;
			_tmp$4 = 0;
			_tmp$5 = false;
			n = _tmp$3;
			i = _tmp$4;
			ok = _tmp$5;
			return [n, i, ok];
		}
		_tmp$6 = n;
		_tmp$7 = i;
		_tmp$8 = true;
		n = _tmp$6;
		i = _tmp$7;
		ok = _tmp$8;
		return [n, i, ok];
	};
	xtoi = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, i, n, ok, s;
		n = 0;
		i = 0;
		ok = false;
		n = 0;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				n = $imul(n, (16));
				n = n + (((s.charCodeAt(i) - 48 << 24 >>> 24) >> 0)) >> 0;
			} else if (97 <= s.charCodeAt(i) && s.charCodeAt(i) <= 102) {
				n = $imul(n, (16));
				n = n + ((((s.charCodeAt(i) - 97 << 24 >>> 24) >> 0) + 10 >> 0)) >> 0;
			} else if (65 <= s.charCodeAt(i) && s.charCodeAt(i) <= 70) {
				n = $imul(n, (16));
				n = n + ((((s.charCodeAt(i) - 65 << 24 >>> 24) >> 0) + 10 >> 0)) >> 0;
			} else {
				break;
			}
			if (n >= 16777215) {
				_tmp = 0;
				_tmp$1 = i;
				_tmp$2 = false;
				n = _tmp;
				i = _tmp$1;
				ok = _tmp$2;
				return [n, i, ok];
			}
			i = i + (1) >> 0;
		}
		if (i === 0) {
			_tmp$3 = 0;
			_tmp$4 = i;
			_tmp$5 = false;
			n = _tmp$3;
			i = _tmp$4;
			ok = _tmp$5;
			return [n, i, ok];
		}
		_tmp$6 = n;
		_tmp$7 = i;
		_tmp$8 = true;
		n = _tmp$6;
		i = _tmp$7;
		ok = _tmp$8;
		return [n, i, ok];
	};
	uitoa = function(val) {
		var $ptr, _q, buf, i, q, val;
		if (val === 0) {
			return "0";
		}
		buf = arrayType$4.zero();
		i = 19;
		while (true) {
			if (!(val >= 10)) { break; }
			q = (_q = val / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((48 + val >>> 0) - (q * 10 >>> 0) >>> 0) << 24 >>> 24));
			i = i - (1) >> 0;
			val = q;
		}
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((48 + val >>> 0) << 24 >>> 24));
		return $bytesToString($subslice(new sliceType$1(buf), i));
	};
	appendHex = function(dst, i) {
		var $ptr, dst, i, j, v, y;
		if (i === 0) {
			return $append(dst, 48);
		}
		j = 7;
		while (true) {
			if (!(j >= 0)) { break; }
			v = (y = (($imul(j, 4)) >>> 0), y < 32 ? (i >>> y) : 0) >>> 0;
			if (v > 0) {
				dst = $append(dst, "0123456789abcdef".charCodeAt(((v & 15) >>> 0)));
			}
			j = j - (1) >> 0;
		}
		return dst;
	};
	last = function(s, b) {
		var $ptr, b, i, s;
		i = s.length;
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (s.charCodeAt(i) === b) {
				break;
			}
			i = i - (1) >> 0;
		}
		return i;
	};
	policyTable.methods = [{prop: "Classify", name: "Classify", pkg: "", typ: $funcType([IP], [policyTableEntry], false)}];
	byMaskLength.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	ptrType$12.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$12], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$2], [$Bool], false)}];
	ptrType$13.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$12], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$2], [$Bool], false)}];
	ptrType$50.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$12], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$2], [$Bool], false)}];
	ptrType$52.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$12], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$2], [$Bool], false)}];
	ptrType$19.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$12], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$2], [$Bool], false)}];
	ptrType$66.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$12], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$2], [$Bool], false)}];
	ptrType$53.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$12], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$2], [$Bool], false)}];
	ptrType$48.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$12], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$2], [$Bool], false)}];
	ptrType$17.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$12], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$2], [$Bool], false)}];
	ptrType$18.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$12], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$2], [$Bool], false)}];
	ptrType$38.methods = [{prop: "Addrs", name: "Addrs", pkg: "", typ: $funcType([], [sliceType$9, $error], false)}, {prop: "MulticastAddrs", name: "MulticastAddrs", pkg: "", typ: $funcType([], [sliceType$9, $error], false)}];
	Flags.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$70.methods = [{prop: "update", name: "update", pkg: "net", typ: $funcType([sliceType$10], [], false)}];
	IP.methods = [{prop: "IsUnspecified", name: "IsUnspecified", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsLoopback", name: "IsLoopback", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsMulticast", name: "IsMulticast", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsInterfaceLocalMulticast", name: "IsInterfaceLocalMulticast", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsLinkLocalMulticast", name: "IsLinkLocalMulticast", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsLinkLocalUnicast", name: "IsLinkLocalUnicast", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsGlobalUnicast", name: "IsGlobalUnicast", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "To4", name: "To4", pkg: "", typ: $funcType([], [IP], false)}, {prop: "To16", name: "To16", pkg: "", typ: $funcType([], [IP], false)}, {prop: "DefaultMask", name: "DefaultMask", pkg: "", typ: $funcType([], [IPMask], false)}, {prop: "Mask", name: "Mask", pkg: "", typ: $funcType([IPMask], [IP], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([IP], [$Bool], false)}, {prop: "matchAddrFamily", name: "matchAddrFamily", pkg: "net", typ: $funcType([IP], [$Bool], false)}];
	ptrType$71.methods = [{prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$1], [$error], false)}];
	IPMask.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$5.methods = [{prop: "Contains", name: "Contains", pkg: "", typ: $funcType([IP], [$Bool], false)}, {prop: "Network", name: "Network", pkg: "", typ: $funcType([], [$String], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$8.methods = [{prop: "Network", name: "Network", pkg: "", typ: $funcType([], [$String], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "isWildcard", name: "isWildcard", pkg: "net", typ: $funcType([], [$Bool], false)}, {prop: "opAddr", name: "opAddr", pkg: "net", typ: $funcType([], [Addr], false)}, {prop: "family", name: "family", pkg: "net", typ: $funcType([], [$Int], false)}, {prop: "sockaddr", name: "sockaddr", pkg: "net", typ: $funcType([$Int], [syscall.Sockaddr, $error], false)}, {prop: "toLocal", name: "toLocal", pkg: "net", typ: $funcType([$String], [sockaddr], false)}];
	HardwareAddr.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$55.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$73.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$56.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$4.methods = [{prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "consume", name: "consume", pkg: "net", typ: $funcType([$Int64], [], false)}];
	policyTableEntry.init("", [{prop: "Prefix", name: "Prefix", exported: true, typ: ptrType$5, tag: ""}, {prop: "Precedence", name: "Precedence", exported: true, typ: $Uint8, tag: ""}, {prop: "Label", name: "Label", exported: true, typ: $Uint8, tag: ""}]);
	policyTable.init(policyTableEntry);
	byMaskLength.init(policyTableEntry);
	dnsRR_Header.init("", [{prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "Rrtype", name: "Rrtype", exported: true, typ: $Uint16, tag: ""}, {prop: "Class", name: "Class", exported: true, typ: $Uint16, tag: ""}, {prop: "Ttl", name: "Ttl", exported: true, typ: $Uint32, tag: ""}, {prop: "Rdlength", name: "Rdlength", exported: true, typ: $Uint16, tag: ""}]);
	dnsRR_CNAME.init("", [{prop: "Hdr", name: "Hdr", exported: true, typ: dnsRR_Header, tag: ""}, {prop: "Cname", name: "Cname", exported: true, typ: $String, tag: ""}]);
	dnsRR_MX.init("", [{prop: "Hdr", name: "Hdr", exported: true, typ: dnsRR_Header, tag: ""}, {prop: "Pref", name: "Pref", exported: true, typ: $Uint16, tag: ""}, {prop: "Mx", name: "Mx", exported: true, typ: $String, tag: ""}]);
	dnsRR_NS.init("", [{prop: "Hdr", name: "Hdr", exported: true, typ: dnsRR_Header, tag: ""}, {prop: "Ns", name: "Ns", exported: true, typ: $String, tag: ""}]);
	dnsRR_PTR.init("", [{prop: "Hdr", name: "Hdr", exported: true, typ: dnsRR_Header, tag: ""}, {prop: "Ptr", name: "Ptr", exported: true, typ: $String, tag: ""}]);
	dnsRR_SOA.init("", [{prop: "Hdr", name: "Hdr", exported: true, typ: dnsRR_Header, tag: ""}, {prop: "Ns", name: "Ns", exported: true, typ: $String, tag: ""}, {prop: "Mbox", name: "Mbox", exported: true, typ: $String, tag: ""}, {prop: "Serial", name: "Serial", exported: true, typ: $Uint32, tag: ""}, {prop: "Refresh", name: "Refresh", exported: true, typ: $Uint32, tag: ""}, {prop: "Retry", name: "Retry", exported: true, typ: $Uint32, tag: ""}, {prop: "Expire", name: "Expire", exported: true, typ: $Uint32, tag: ""}, {prop: "Minttl", name: "Minttl", exported: true, typ: $Uint32, tag: ""}]);
	dnsRR_TXT.init("", [{prop: "Hdr", name: "Hdr", exported: true, typ: dnsRR_Header, tag: ""}, {prop: "Txt", name: "Txt", exported: true, typ: $String, tag: ""}]);
	dnsRR_SRV.init("", [{prop: "Hdr", name: "Hdr", exported: true, typ: dnsRR_Header, tag: ""}, {prop: "Priority", name: "Priority", exported: true, typ: $Uint16, tag: ""}, {prop: "Weight", name: "Weight", exported: true, typ: $Uint16, tag: ""}, {prop: "Port", name: "Port", exported: true, typ: $Uint16, tag: ""}, {prop: "Target", name: "Target", exported: true, typ: $String, tag: ""}]);
	dnsRR_A.init("", [{prop: "Hdr", name: "Hdr", exported: true, typ: dnsRR_Header, tag: ""}, {prop: "A", name: "A", exported: true, typ: $Uint32, tag: ""}]);
	dnsRR_AAAA.init("", [{prop: "Hdr", name: "Hdr", exported: true, typ: dnsRR_Header, tag: ""}, {prop: "AAAA", name: "AAAA", exported: true, typ: arrayType, tag: ""}]);
	Interface.init("", [{prop: "Index", name: "Index", exported: true, typ: $Int, tag: ""}, {prop: "MTU", name: "MTU", exported: true, typ: $Int, tag: ""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "HardwareAddr", name: "HardwareAddr", exported: true, typ: HardwareAddr, tag: ""}, {prop: "Flags", name: "Flags", exported: true, typ: Flags, tag: ""}]);
	ipv6ZoneCache.init("net", [{prop: "RWMutex", name: "", exported: true, typ: sync.RWMutex, tag: ""}, {prop: "lastFetched", name: "lastFetched", exported: false, typ: time.Time, tag: ""}, {prop: "toIndex", name: "toIndex", exported: false, typ: mapType$1, tag: ""}, {prop: "toName", name: "toName", exported: false, typ: mapType$2, tag: ""}]);
	IP.init($Uint8);
	IPMask.init($Uint8);
	IPNet.init("", [{prop: "IP", name: "IP", exported: true, typ: IP, tag: ""}, {prop: "Mask", name: "Mask", exported: true, typ: IPMask, tag: ""}]);
	IPAddr.init("", [{prop: "IP", name: "IP", exported: true, typ: IP, tag: ""}, {prop: "Zone", name: "Zone", exported: true, typ: $String, tag: ""}]);
	HardwareAddr.init($Uint8);
	Addr.init([{prop: "Network", name: "Network", pkg: "", typ: $funcType([], [$String], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	OpError.init("", [{prop: "Op", name: "Op", exported: true, typ: $String, tag: ""}, {prop: "Net", name: "Net", exported: true, typ: $String, tag: ""}, {prop: "Source", name: "Source", exported: true, typ: Addr, tag: ""}, {prop: "Addr", name: "Addr", exported: true, typ: Addr, tag: ""}, {prop: "Err", name: "Err", exported: true, typ: $error, tag: ""}]);
	timeout.init([{prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}]);
	temporary.init([{prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}]);
	ParseError.init("", [{prop: "Type", name: "Type", exported: true, typ: $String, tag: ""}, {prop: "Text", name: "Text", exported: true, typ: $String, tag: ""}]);
	AddrError.init("", [{prop: "Err", name: "Err", exported: true, typ: $String, tag: ""}, {prop: "Addr", name: "Addr", exported: true, typ: $String, tag: ""}]);
	buffersWriter.init([{prop: "writeBuffers", name: "writeBuffers", pkg: "net", typ: $funcType([ptrType$4], [$Int64, $error], false)}]);
	Buffers.init(sliceType$1);
	sockaddr.init([{prop: "Network", name: "Network", pkg: "", typ: $funcType([], [$String], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "family", name: "family", pkg: "net", typ: $funcType([], [$Int], false)}, {prop: "isWildcard", name: "isWildcard", pkg: "net", typ: $funcType([], [$Bool], false)}, {prop: "sockaddr", name: "sockaddr", pkg: "net", typ: $funcType([$Int], [syscall.Sockaddr, $error], false)}, {prop: "toLocal", name: "toLocal", pkg: "net", typ: $funcType([$String], [sockaddr], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = context.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nettrace.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = singleflight.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rand.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = route.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		supportsIPv4 = false;
		supportsIPv6 = false;
		supportsIPv4map = false;
		netGo = false;
		rr_mk = $makeMap($Int.keyFor, [{ k: 5, v: (function() {
			var $ptr;
			return new dnsRR_CNAME.ptr(new dnsRR_Header.ptr("", 0, 0, 0, 0), "");
		}) }, { k: 15, v: (function() {
			var $ptr;
			return new dnsRR_MX.ptr(new dnsRR_Header.ptr("", 0, 0, 0, 0), 0, "");
		}) }, { k: 2, v: (function() {
			var $ptr;
			return new dnsRR_NS.ptr(new dnsRR_Header.ptr("", 0, 0, 0, 0), "");
		}) }, { k: 12, v: (function() {
			var $ptr;
			return new dnsRR_PTR.ptr(new dnsRR_Header.ptr("", 0, 0, 0, 0), "");
		}) }, { k: 6, v: (function() {
			var $ptr;
			return new dnsRR_SOA.ptr(new dnsRR_Header.ptr("", 0, 0, 0, 0), "", "", 0, 0, 0, 0, 0);
		}) }, { k: 16, v: (function() {
			var $ptr;
			return new dnsRR_TXT.ptr(new dnsRR_Header.ptr("", 0, 0, 0, 0), "");
		}) }, { k: 33, v: (function() {
			var $ptr;
			return new dnsRR_SRV.ptr(new dnsRR_Header.ptr("", 0, 0, 0, 0), 0, 0, 0, "");
		}) }, { k: 1, v: (function() {
			var $ptr;
			return new dnsRR_A.ptr(new dnsRR_Header.ptr("", 0, 0, 0, 0), 0);
		}) }, { k: 28, v: (function() {
			var $ptr;
			return new dnsRR_AAAA.ptr(new dnsRR_Header.ptr("", 0, 0, 0, 0), arrayType.zero());
		}) }]);
		testHookLookupIP = (function $b(ctx, fn, host) {
			var $ptr, _r, ctx, fn, host, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ctx = $f.ctx; fn = $f.fn; host = $f.host; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = fn(ctx, host); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f.ctx = ctx; $f.fn = fn; $f.host = host; $f.$s = $s; $f.$r = $r; return $f;
		});
		errInvalidInterface = errors.New("invalid network interface");
		errInvalidInterfaceIndex = errors.New("invalid network interface index");
		errInvalidInterfaceName = errors.New("invalid network interface name");
		errNoSuchInterface = errors.New("no such network interface");
		errNoSuchMulticastInterface = errors.New("no such multicast network interface");
		flagNames = new sliceType(["up", "broadcast", "loopback", "pointtopoint", "multicast"]);
		zoneCache = new ipv6ZoneCache.ptr(new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), new time.Time.ptr(new $Int64(0, 0), 0, ptrType.nil), {}, {});
		v4InV6Prefix = new sliceType$1([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255]);
		$pkg.IPv4bcast = IPv4(255, 255, 255, 255);
		$pkg.IPv4allsys = IPv4(224, 0, 0, 1);
		$pkg.IPv4allrouter = IPv4(224, 0, 0, 2);
		$pkg.IPv4zero = IPv4(0, 0, 0, 0);
		$pkg.IPv6unspecified = new IP([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
		$pkg.IPv6loopback = new IP([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]);
		classAMask = IPv4Mask(255, 0, 0, 0);
		classBMask = IPv4Mask(255, 255, 0, 0);
		classCMask = IPv4Mask(255, 255, 255, 0);
		listenerBacklog = maxListenerBacklog();
		errNoSuitableAddress = errors.New("no suitable address found");
		errMissingAddress = errors.New("missing address");
		errCanceled = errors.New("operation was canceled");
		errClosing = errors.New("use of closed network connection");
		$pkg.ErrWriteToConnected = errors.New("use of WriteTo with pre-connected connection");
		aLongTimeAgo = $clone(time.Unix(new $Int64(0, 233431200), new $Int64(0, 0)), time.Time);
		errNoSuchHost = errors.New("no such host");
		threadLimit = new $Chan(structType$1, 500);
		_r = mustCIDR("::1/128"); /* */ $s = 16; case 16: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = mustCIDR("::/0"); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = mustCIDR("::ffff:0:0/96"); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = mustCIDR("2002::/16"); /* */ $s = 19; case 19: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = mustCIDR("2001::/32"); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = mustCIDR("fc00::/7"); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$6 = mustCIDR("::/96"); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = mustCIDR("fec0::/10"); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$8 = mustCIDR("3ffe::/16"); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		rfc6724policyTable = new policyTable([new policyTableEntry.ptr(_r, 50, 0), new policyTableEntry.ptr(_r$1, 40, 1), new policyTableEntry.ptr(_r$2, 35, 4), new policyTableEntry.ptr(_r$3, 30, 2), new policyTableEntry.ptr(_r$4, 5, 5), new policyTableEntry.ptr(_r$5, 3, 13), new policyTableEntry.ptr(_r$6, 1, 3), new policyTableEntry.ptr(_r$7, 1, 11), new policyTableEntry.ptr(_r$8, 1, 12)]);
		$r = init(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init$1();
		init$2();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["net/textproto"] = (function() {
	var $pkg = {}, $init, bufio, bytes, fmt, io, ioutil, net, strconv, strings, sync, MIMEHeader, Reader, dotReader, Error, ProtocolError, sliceType, sliceType$1, ptrType, ptrType$1, ptrType$2, sliceType$2, ptrType$9, commonHeader, isTokenTable, NewReader, trim, parseCodeLine, CanonicalMIMEHeaderKey, validHeaderFieldByte, canonicalMIMEHeaderKey, init, TrimString, isASCIISpace, isASCIILetter;
	bufio = $packages["bufio"];
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	ioutil = $packages["io/ioutil"];
	net = $packages["net"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	MIMEHeader = $pkg.MIMEHeader = $newType(4, $kindMap, "textproto.MIMEHeader", true, "net/textproto", true, null);
	Reader = $pkg.Reader = $newType(0, $kindStruct, "textproto.Reader", true, "net/textproto", true, function(R_, dot_, buf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = ptrType.nil;
			this.dot = ptrType$1.nil;
			this.buf = sliceType.nil;
			return;
		}
		this.R = R_;
		this.dot = dot_;
		this.buf = buf_;
	});
	dotReader = $pkg.dotReader = $newType(0, $kindStruct, "textproto.dotReader", true, "net/textproto", false, function(r_, state_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = ptrType$2.nil;
			this.state = 0;
			return;
		}
		this.r = r_;
		this.state = state_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "textproto.Error", true, "net/textproto", true, function(Code_, Msg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Code = 0;
			this.Msg = "";
			return;
		}
		this.Code = Code_;
		this.Msg = Msg_;
	});
	ProtocolError = $pkg.ProtocolError = $newType(8, $kindString, "textproto.ProtocolError", true, "net/textproto", true, null);
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($String);
	ptrType = $ptrType(bufio.Reader);
	ptrType$1 = $ptrType(dotReader);
	ptrType$2 = $ptrType(Reader);
	sliceType$2 = $sliceType($emptyInterface);
	ptrType$9 = $ptrType(Error);
	MIMEHeader.prototype.Add = function(key, value) {
		var $ptr, _entry, _key, h, key, value;
		h = this.$val;
		key = CanonicalMIMEHeaderKey(key);
		_key = key; (h || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $append((_entry = h[$String.keyFor(key)], _entry !== undefined ? _entry.v : sliceType$1.nil), value) };
	};
	$ptrType(MIMEHeader).prototype.Add = function(key, value) { return new MIMEHeader(this.$get()).Add(key, value); };
	MIMEHeader.prototype.Set = function(key, value) {
		var $ptr, _key, h, key, value;
		h = this.$val;
		_key = CanonicalMIMEHeaderKey(key); (h || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: new sliceType$1([value]) };
	};
	$ptrType(MIMEHeader).prototype.Set = function(key, value) { return new MIMEHeader(this.$get()).Set(key, value); };
	MIMEHeader.prototype.Get = function(key) {
		var $ptr, _entry, h, key, v;
		h = this.$val;
		if (h === false) {
			return "";
		}
		v = (_entry = h[$String.keyFor(CanonicalMIMEHeaderKey(key))], _entry !== undefined ? _entry.v : sliceType$1.nil);
		if (v.$length === 0) {
			return "";
		}
		return (0 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 0]);
	};
	$ptrType(MIMEHeader).prototype.Get = function(key) { return new MIMEHeader(this.$get()).Get(key); };
	MIMEHeader.prototype.Del = function(key) {
		var $ptr, h, key;
		h = this.$val;
		delete h[$String.keyFor(CanonicalMIMEHeaderKey(key))];
	};
	$ptrType(MIMEHeader).prototype.Del = function(key) { return new MIMEHeader(this.$get()).Del(key); };
	NewReader = function(r) {
		var $ptr, r;
		return new Reader.ptr(r, ptrType$1.nil, sliceType.nil);
	};
	$pkg.NewReader = NewReader;
	Reader.ptr.prototype.ReadLine = function() {
		var $ptr, _r, _tuple, err, line, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; line = $f.line; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.readLineSlice(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		line = _tuple[0];
		err = _tuple[1];
		$s = -1; return [$bytesToString(line), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadLine }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.line = line; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadLine = function() { return this.$val.ReadLine(); };
	Reader.ptr.prototype.ReadLineBytes = function() {
		var $ptr, _r, _tuple, buf, err, line, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; err = $f.err; line = $f.line; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.readLineSlice(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		line = _tuple[0];
		err = _tuple[1];
		if (!(line === sliceType.nil)) {
			buf = $makeSlice(sliceType, line.$length);
			$copySlice(buf, line);
			line = buf;
		}
		$s = -1; return [line, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadLineBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.line = line; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadLineBytes = function() { return this.$val.ReadLineBytes(); };
	Reader.ptr.prototype.readLineSlice = function() {
		var $ptr, _r, _tuple, err, l, line, more, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; l = $f.l; line = $f.line; more = $f.more; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = r.closeDot(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		line = sliceType.nil;
		/* while (true) { */ case 2:
			_r = r.R.ReadLine(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			l = _tuple[0];
			more = _tuple[1];
			err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [sliceType.nil, err];
			}
			if (line === sliceType.nil && !more) {
				$s = -1; return [l, $ifaceNil];
			}
			line = $appendSlice(line, l);
			if (!more) {
				/* break; */ $s = 3; continue;
			}
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [line, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.readLineSlice }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.line = line; $f.more = more; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.readLineSlice = function() { return this.$val.readLineSlice(); };
	Reader.ptr.prototype.ReadContinuedLine = function() {
		var $ptr, _r, _tuple, err, line, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; line = $f.line; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.readContinuedLineSlice(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		line = _tuple[0];
		err = _tuple[1];
		$s = -1; return [$bytesToString(line), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadContinuedLine }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.line = line; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadContinuedLine = function() { return this.$val.ReadContinuedLine(); };
	trim = function(s) {
		var $ptr, i, n, s, x, x$1;
		i = 0;
		while (true) {
			if (!(i < s.$length && ((((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]) === 32) || (((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]) === 9)))) { break; }
			i = i + (1) >> 0;
		}
		n = s.$length;
		while (true) {
			if (!(n > i && (((x = n - 1 >> 0, ((x < 0 || x >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x])) === 32) || ((x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x$1])) === 9)))) { break; }
			n = n - (1) >> 0;
		}
		return $subslice(s, i, n);
	};
	Reader.ptr.prototype.ReadContinuedLineBytes = function() {
		var $ptr, _r, _tuple, buf, err, line, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; err = $f.err; line = $f.line; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.readContinuedLineSlice(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		line = _tuple[0];
		err = _tuple[1];
		if (!(line === sliceType.nil)) {
			buf = $makeSlice(sliceType, line.$length);
			$copySlice(buf, line);
			line = buf;
		}
		$s = -1; return [line, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadContinuedLineBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.line = line; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadContinuedLineBytes = function() { return this.$val.ReadContinuedLineBytes(); };
	Reader.ptr.prototype.readContinuedLineSlice = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, _tuple$2, err, err$1, err$2, line, line$1, peek, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; line = $f.line; line$1 = $f.line$1; peek = $f.peek; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.readLineSlice(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		line = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType.nil, err];
		}
		if (line.$length === 0) {
			$s = -1; return [line, $ifaceNil];
		}
		/* */ if (r.R.Buffered() > 1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (r.R.Buffered() > 1) { */ case 2:
			_r$1 = r.R.Peek(1); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			peek = _tuple$1[0];
			err$1 = _tuple$1[1];
			if ($interfaceIsEqual(err$1, $ifaceNil) && isASCIILetter((0 >= peek.$length ? ($throwRuntimeError("index out of range"), undefined) : peek.$array[peek.$offset + 0]))) {
				$s = -1; return [trim(line), $ifaceNil];
			}
		/* } */ case 3:
		r.buf = $appendSlice($subslice(r.buf, 0, 0), trim(line));
		/* while (true) { */ case 5:
			_r$2 = r.skipSpace(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* if (!(_r$2 > 0)) { break; } */ if(!(_r$2 > 0)) { $s = 6; continue; }
			_r$3 = r.readLineSlice(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$2 = _r$3;
			line$1 = _tuple$2[0];
			err$2 = _tuple$2[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				/* break; */ $s = 6; continue;
			}
			r.buf = $append(r.buf, 32);
			r.buf = $appendSlice(r.buf, trim(line$1));
		/* } */ $s = 5; continue; case 6:
		$s = -1; return [r.buf, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.readContinuedLineSlice }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.line = line; $f.line$1 = line$1; $f.peek = peek; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.readContinuedLineSlice = function() { return this.$val.readContinuedLineSlice(); };
	Reader.ptr.prototype.skipSpace = function() {
		var $ptr, _r, _tuple, c, err, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		n = 0;
		/* while (true) { */ case 1:
			_r = r.R.ReadByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			c = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				/* break; */ $s = 2; continue;
			}
			if (!((c === 32)) && !((c === 9))) {
				r.R.UnreadByte();
				/* break; */ $s = 2; continue;
			}
			n = n + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.skipSpace }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.skipSpace = function() { return this.$val.skipSpace(); };
	Reader.ptr.prototype.readCodeLine = function(expectCode) {
		var $ptr, _r, _tuple, _tuple$1, code, continued, err, expectCode, line, message, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; code = $f.code; continued = $f.continued; err = $f.err; expectCode = $f.expectCode; line = $f.line; message = $f.message; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		code = 0;
		continued = false;
		message = "";
		err = $ifaceNil;
		r = this;
		_r = r.ReadLine(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		line = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [code, continued, message, err];
		}
		_tuple$1 = parseCodeLine(line, expectCode);
		code = _tuple$1[0];
		continued = _tuple$1[1];
		message = _tuple$1[2];
		err = _tuple$1[3];
		$s = -1; return [code, continued, message, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.readCodeLine }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.code = code; $f.continued = continued; $f.err = err; $f.expectCode = expectCode; $f.line = line; $f.message = message; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.readCodeLine = function(expectCode) { return this.$val.readCodeLine(expectCode); };
	parseCodeLine = function(line, expectCode) {
		var $ptr, _q, _q$1, _tuple, code, continued, err, expectCode, line, message;
		code = 0;
		continued = false;
		message = "";
		err = $ifaceNil;
		if (line.length < 4 || !((line.charCodeAt(3) === 32)) && !((line.charCodeAt(3) === 45))) {
			err = new ProtocolError("short response: " + line);
			return [code, continued, message, err];
		}
		continued = line.charCodeAt(3) === 45;
		_tuple = strconv.Atoi($substring(line, 0, 3));
		code = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) || code < 100) {
			err = new ProtocolError("invalid response code: " + line);
			return [code, continued, message, err];
		}
		message = $substring(line, 4);
		if (1 <= expectCode && expectCode < 10 && !(((_q = code / 100, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) === expectCode)) || 10 <= expectCode && expectCode < 100 && !(((_q$1 = code / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) === expectCode)) || 100 <= expectCode && expectCode < 1000 && !((code === expectCode))) {
			err = new Error.ptr(code, message);
		}
		return [code, continued, message, err];
	};
	Reader.ptr.prototype.ReadCodeLine = function(expectCode) {
		var $ptr, _r, _tuple, code, continued, err, expectCode, message, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; code = $f.code; continued = $f.continued; err = $f.err; expectCode = $f.expectCode; message = $f.message; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		code = 0;
		message = "";
		err = $ifaceNil;
		r = this;
		_r = r.readCodeLine(expectCode); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		code = _tuple[0];
		continued = _tuple[1];
		message = _tuple[2];
		err = _tuple[3];
		if ($interfaceIsEqual(err, $ifaceNil) && continued) {
			err = new ProtocolError("unexpected multi-line response: " + message);
		}
		$s = -1; return [code, message, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadCodeLine }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.code = code; $f.continued = continued; $f.err = err; $f.expectCode = expectCode; $f.message = message; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadCodeLine = function(expectCode) { return this.$val.ReadCodeLine(expectCode); };
	Reader.ptr.prototype.ReadResponse = function(expectCode) {
		var $ptr, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, _tuple$2, code, code2, continued, err, err$1, expectCode, line, message, moreMessage, multi, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; code = $f.code; code2 = $f.code2; continued = $f.continued; err = $f.err; err$1 = $f.err$1; expectCode = $f.expectCode; line = $f.line; message = $f.message; moreMessage = $f.moreMessage; multi = $f.multi; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		code = 0;
		message = "";
		err = $ifaceNil;
		r = this;
		_r = r.readCodeLine(expectCode); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		code = _tuple[0];
		continued = _tuple[1];
		message = _tuple[2];
		err = _tuple[3];
		multi = continued;
		/* while (true) { */ case 2:
			/* if (!(continued)) { break; } */ if(!(continued)) { $s = 3; continue; }
			_r$1 = r.ReadLine(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			line = _tuple$1[0];
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp = 0;
				_tmp$1 = "";
				_tmp$2 = err$1;
				code = _tmp;
				message = _tmp$1;
				err = _tmp$2;
				$s = -1; return [code, message, err];
			}
			code2 = 0;
			moreMessage = "";
			_tuple$2 = parseCodeLine(line, 0);
			code2 = _tuple$2[0];
			continued = _tuple$2[1];
			moreMessage = _tuple$2[2];
			err$1 = _tuple$2[3];
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil)) || !((code2 === code))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil)) || !((code2 === code))) { */ case 5:
				_r$2 = strings.TrimRight(line, "\r\n"); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				message = message + ("\n" + _r$2);
				continued = true;
				/* continue; */ $s = 2; continue;
			/* } */ case 6:
			message = message + ("\n" + moreMessage);
		/* } */ $s = 2; continue; case 3:
		if (!($interfaceIsEqual(err, $ifaceNil)) && multi && !(message === "")) {
			err = new Error.ptr(code, message);
		}
		$s = -1; return [code, message, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadResponse }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.code = code; $f.code2 = code2; $f.continued = continued; $f.err = err; $f.err$1 = err$1; $f.expectCode = expectCode; $f.line = line; $f.message = message; $f.moreMessage = moreMessage; $f.multi = multi; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadResponse = function(expectCode) { return this.$val.ReadResponse(expectCode); };
	Reader.ptr.prototype.DotReader = function() {
		var $ptr, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = r.closeDot(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r.dot = new dotReader.ptr(r, 0);
		$s = -1; return r.dot;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.DotReader }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.DotReader = function() { return this.$val.DotReader(); };
	dotReader.ptr.prototype.Read = function(b) {
		var $ptr, _1, _r, _tuple, b, br, c, d, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _tuple = $f._tuple; b = $f.b; br = $f.br; c = $f.c; d = $f.d; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		d = this;
		br = d.r.R;
		/* while (true) { */ case 1:
			/* if (!(n < b.$length && !((d.state === 5)))) { break; } */ if(!(n < b.$length && !((d.state === 5)))) { $s = 2; continue; }
			c = 0;
			_r = br.ReadByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			c = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF)) {
					err = io.ErrUnexpectedEOF;
				}
				/* break; */ $s = 2; continue;
			}
			switch (0) { default:
				_1 = d.state;
				if (_1 === (0)) {
					if (c === 46) {
						d.state = 1;
						/* continue; */ $s = 1; continue;
					}
					if (c === 13) {
						d.state = 3;
						/* continue; */ $s = 1; continue;
					}
					d.state = 4;
				} else if (_1 === (1)) {
					if (c === 13) {
						d.state = 2;
						/* continue; */ $s = 1; continue;
					}
					if (c === 10) {
						d.state = 5;
						/* continue; */ $s = 1; continue;
					}
					d.state = 4;
				} else if (_1 === (2)) {
					if (c === 10) {
						d.state = 5;
						/* continue; */ $s = 1; continue;
					}
					br.UnreadByte();
					c = 13;
					d.state = 4;
				} else if (_1 === (3)) {
					if (c === 10) {
						d.state = 0;
						break;
					}
					br.UnreadByte();
					c = 13;
					d.state = 4;
				} else if (_1 === (4)) {
					if (c === 13) {
						d.state = 3;
						/* continue; */ $s = 1; continue;
					}
					if (c === 10) {
						d.state = 0;
					}
				}
			}
			((n < 0 || n >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + n] = c);
			n = n + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		if ($interfaceIsEqual(err, $ifaceNil) && (d.state === 5)) {
			err = io.EOF;
		}
		if (!($interfaceIsEqual(err, $ifaceNil)) && d.r.dot === d) {
			d.r.dot = ptrType$1.nil;
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: dotReader.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.br = br; $f.c = c; $f.d = d; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	dotReader.prototype.Read = function(b) { return this.$val.Read(b); };
	Reader.ptr.prototype.closeDot = function() {
		var $ptr, _r, buf, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; buf = $f.buf; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (r.dot === ptrType$1.nil) {
			$s = -1; return;
		}
		buf = $makeSlice(sliceType, 128);
		/* while (true) { */ case 1:
			/* if (!(!(r.dot === ptrType$1.nil))) { break; } */ if(!(!(r.dot === ptrType$1.nil))) { $s = 2; continue; }
			_r = r.dot.Read(buf); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.closeDot }; } $f.$ptr = $ptr; $f._r = _r; $f.buf = buf; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.closeDot = function() { return this.$val.closeDot(); };
	Reader.ptr.prototype.ReadDotBytes = function() {
		var $ptr, _r, _r$1, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.DotReader(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = ioutil.ReadAll(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadDotBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadDotBytes = function() { return this.$val.ReadDotBytes(); };
	Reader.ptr.prototype.ReadDotLines = function() {
		var $ptr, _r, _tuple, err, line, r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; line = $f.line; r = $f.r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		v = sliceType$1.nil;
		err = $ifaceNil;
		/* while (true) { */ case 1:
			line = "";
			_r = r.ReadLine(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			line = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF)) {
					err = io.ErrUnexpectedEOF;
				}
				/* break; */ $s = 2; continue;
			}
			if (line.length > 0 && (line.charCodeAt(0) === 46)) {
				if (line.length === 1) {
					/* break; */ $s = 2; continue;
				}
				line = $substring(line, 1);
			}
			v = $append(v, line);
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [v, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadDotLines }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.line = line; $f.r = r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadDotLines = function() { return this.$val.ReadDotLines(); };
	Reader.ptr.prototype.ReadMIMEHeader = function() {
		var $ptr, _entry, _key, _key$1, _r, _r$1, _tmp, _tmp$1, _tuple, endKey, err, hint, i, key, kv, m, r, strs, value, vv, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; endKey = $f.endKey; err = $f.err; hint = $f.hint; i = $f.i; key = $f.key; kv = $f.kv; m = $f.m; r = $f.r; strs = $f.strs; value = $f.value; vv = $f.vv; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		strs = sliceType$1.nil;
		_r = r.upcomingHeaderNewlines(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		hint = _r;
		if (hint > 0) {
			strs = $makeSlice(sliceType$1, hint);
		}
		m = ((hint < 0 || hint > 2147483647) ? $throwRuntimeError("makemap: size out of range") : {});
		/* while (true) { */ case 2:
			_r$1 = r.readContinuedLineSlice(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			kv = _tuple[0];
			err = _tuple[1];
			if (kv.$length === 0) {
				$s = -1; return [m, err];
			}
			i = bytes.IndexByte(kv, 58);
			if (i < 0) {
				$s = -1; return [m, new ProtocolError("malformed MIME header line: " + $bytesToString(kv))];
			}
			endKey = i;
			while (true) {
				if (!(endKey > 0 && ((x = endKey - 1 >> 0, ((x < 0 || x >= kv.$length) ? ($throwRuntimeError("index out of range"), undefined) : kv.$array[kv.$offset + x])) === 32))) { break; }
				endKey = endKey - (1) >> 0;
			}
			key = canonicalMIMEHeaderKey($subslice(kv, 0, endKey));
			if (key === "") {
				/* continue; */ $s = 2; continue;
			}
			i = i + (1) >> 0;
			while (true) {
				if (!(i < kv.$length && ((((i < 0 || i >= kv.$length) ? ($throwRuntimeError("index out of range"), undefined) : kv.$array[kv.$offset + i]) === 32) || (((i < 0 || i >= kv.$length) ? ($throwRuntimeError("index out of range"), undefined) : kv.$array[kv.$offset + i]) === 9)))) { break; }
				i = i + (1) >> 0;
			}
			value = $bytesToString($subslice(kv, i));
			vv = (_entry = m[$String.keyFor(key)], _entry !== undefined ? _entry.v : sliceType$1.nil);
			if (vv === sliceType$1.nil && strs.$length > 0) {
				_tmp = $subslice(strs, 0, 1, 1);
				_tmp$1 = $subslice(strs, 1);
				vv = _tmp;
				strs = _tmp$1;
				(0 >= vv.$length ? ($throwRuntimeError("index out of range"), undefined) : vv.$array[vv.$offset + 0] = value);
				_key = key; (m || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: vv };
			} else {
				_key$1 = key; (m || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: $append(vv, value) };
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [m, err];
			}
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [false, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadMIMEHeader }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.endKey = endKey; $f.err = err; $f.hint = hint; $f.i = i; $f.key = key; $f.kv = kv; $f.m = m; $f.r = r; $f.strs = strs; $f.value = value; $f.vv = vv; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadMIMEHeader = function() { return this.$val.ReadMIMEHeader(); };
	Reader.ptr.prototype.upcomingHeaderNewlines = function() {
		var $ptr, _r, _r$1, _tuple, i, n, peek, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; i = $f.i; n = $f.n; peek = $f.peek; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		r = this;
		_r = r.R.Peek(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		s = r.R.Buffered();
		if (s === 0) {
			$s = -1; return n;
		}
		_r$1 = r.R.Peek(s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		peek = _tuple[0];
		while (true) {
			if (!(peek.$length > 0)) { break; }
			i = bytes.IndexByte(peek, 10);
			if (i < 3) {
				$s = -1; return n;
			}
			n = n + (1) >> 0;
			peek = $subslice(peek, (i + 1 >> 0));
		}
		$s = -1; return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.upcomingHeaderNewlines }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.i = i; $f.n = n; $f.peek = peek; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.upcomingHeaderNewlines = function() { return this.$val.upcomingHeaderNewlines(); };
	CanonicalMIMEHeaderKey = function(s) {
		var $ptr, c, i, s, upper;
		upper = true;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (!validHeaderFieldByte(c)) {
				return s;
			}
			if (upper && 97 <= c && c <= 122) {
				return canonicalMIMEHeaderKey(new sliceType($stringToBytes(s)));
			}
			if (!upper && 65 <= c && c <= 90) {
				return canonicalMIMEHeaderKey(new sliceType($stringToBytes(s)));
			}
			upper = c === 45;
			i = i + (1) >> 0;
		}
		return s;
	};
	$pkg.CanonicalMIMEHeaderKey = CanonicalMIMEHeaderKey;
	validHeaderFieldByte = function(b) {
		var $ptr, b;
		return (b >> 0) < 127 && ((b < 0 || b >= isTokenTable.length) ? ($throwRuntimeError("index out of range"), undefined) : isTokenTable[b]);
	};
	canonicalMIMEHeaderKey = function(a) {
		var $ptr, _entry, _i, _i$1, _ref, _ref$1, a, c, c$1, i, upper, v;
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (validHeaderFieldByte(c)) {
				_i++;
				continue;
			}
			return $bytesToString(a);
		}
		upper = true;
		_ref$1 = a;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i = _i$1;
			c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (upper && 97 <= c$1 && c$1 <= 122) {
				c$1 = c$1 - (32) << 24 >>> 24;
			} else if (!upper && 65 <= c$1 && c$1 <= 90) {
				c$1 = c$1 + (32) << 24 >>> 24;
			}
			((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = c$1);
			upper = c$1 === 45;
			_i$1++;
		}
		v = (_entry = commonHeader[$String.keyFor($bytesToString(a))], _entry !== undefined ? _entry.v : "");
		if (!(v === "")) {
			return v;
		}
		return $bytesToString(a);
	};
	init = function() {
		var $ptr, _i, _key, _ref, v;
		_ref = new sliceType$1(["Accept", "Accept-Charset", "Accept-Encoding", "Accept-Language", "Accept-Ranges", "Cache-Control", "Cc", "Connection", "Content-Id", "Content-Language", "Content-Length", "Content-Transfer-Encoding", "Content-Type", "Cookie", "Date", "Dkim-Signature", "Etag", "Expires", "From", "Host", "If-Modified-Since", "If-None-Match", "In-Reply-To", "Last-Modified", "Location", "Message-Id", "Mime-Version", "Pragma", "Received", "Return-Path", "Server", "Set-Cookie", "Subject", "To", "User-Agent", "Via", "X-Forwarded-For", "X-Imforwards", "X-Powered-By"]);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_key = v; (commonHeader || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: v };
			_i++;
		}
	};
	Error.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = fmt.Sprintf("%03d %s", new sliceType$2([new $Int(e.Code), new $String(e.Msg)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Error.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	ProtocolError.prototype.Error = function() {
		var $ptr, p;
		p = this.$val;
		return p;
	};
	$ptrType(ProtocolError).prototype.Error = function() { return new ProtocolError(this.$get()).Error(); };
	TrimString = function(s) {
		var $ptr, s;
		while (true) {
			if (!(s.length > 0 && isASCIISpace(s.charCodeAt(0)))) { break; }
			s = $substring(s, 1);
		}
		while (true) {
			if (!(s.length > 0 && isASCIISpace(s.charCodeAt((s.length - 1 >> 0))))) { break; }
			s = $substring(s, 0, (s.length - 1 >> 0));
		}
		return s;
	};
	$pkg.TrimString = TrimString;
	isASCIISpace = function(b) {
		var $ptr, b;
		return (b === 32) || (b === 9) || (b === 10) || (b === 13);
	};
	isASCIILetter = function(b) {
		var $ptr, b;
		b = (b | (32)) >>> 0;
		return 97 <= b && b <= 122;
	};
	MIMEHeader.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([$String, $String], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $String], [], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "Del", name: "Del", pkg: "", typ: $funcType([$String], [], false)}];
	ptrType$2.methods = [{prop: "ReadLine", name: "ReadLine", pkg: "", typ: $funcType([], [$String, $error], false)}, {prop: "ReadLineBytes", name: "ReadLineBytes", pkg: "", typ: $funcType([], [sliceType, $error], false)}, {prop: "readLineSlice", name: "readLineSlice", pkg: "net/textproto", typ: $funcType([], [sliceType, $error], false)}, {prop: "ReadContinuedLine", name: "ReadContinuedLine", pkg: "", typ: $funcType([], [$String, $error], false)}, {prop: "ReadContinuedLineBytes", name: "ReadContinuedLineBytes", pkg: "", typ: $funcType([], [sliceType, $error], false)}, {prop: "readContinuedLineSlice", name: "readContinuedLineSlice", pkg: "net/textproto", typ: $funcType([], [sliceType, $error], false)}, {prop: "skipSpace", name: "skipSpace", pkg: "net/textproto", typ: $funcType([], [$Int], false)}, {prop: "readCodeLine", name: "readCodeLine", pkg: "net/textproto", typ: $funcType([$Int], [$Int, $Bool, $String, $error], false)}, {prop: "ReadCodeLine", name: "ReadCodeLine", pkg: "", typ: $funcType([$Int], [$Int, $String, $error], false)}, {prop: "ReadResponse", name: "ReadResponse", pkg: "", typ: $funcType([$Int], [$Int, $String, $error], false)}, {prop: "DotReader", name: "DotReader", pkg: "", typ: $funcType([], [io.Reader], false)}, {prop: "closeDot", name: "closeDot", pkg: "net/textproto", typ: $funcType([], [], false)}, {prop: "ReadDotBytes", name: "ReadDotBytes", pkg: "", typ: $funcType([], [sliceType, $error], false)}, {prop: "ReadDotLines", name: "ReadDotLines", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "ReadMIMEHeader", name: "ReadMIMEHeader", pkg: "", typ: $funcType([], [MIMEHeader, $error], false)}, {prop: "upcomingHeaderNewlines", name: "upcomingHeaderNewlines", pkg: "net/textproto", typ: $funcType([], [$Int], false)}];
	ptrType$1.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}];
	ptrType$9.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ProtocolError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	MIMEHeader.init($String, sliceType$1);
	Reader.init("net/textproto", [{prop: "R", name: "R", exported: true, typ: ptrType, tag: ""}, {prop: "dot", name: "dot", exported: false, typ: ptrType$1, tag: ""}, {prop: "buf", name: "buf", exported: false, typ: sliceType, tag: ""}]);
	dotReader.init("net/textproto", [{prop: "r", name: "r", exported: false, typ: ptrType$2, tag: ""}, {prop: "state", name: "state", exported: false, typ: $Int, tag: ""}]);
	Error.init("", [{prop: "Code", name: "Code", exported: true, typ: $Int, tag: ""}, {prop: "Msg", name: "Msg", exported: true, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytes.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ioutil.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = net.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		commonHeader = {};
		isTokenTable = $toNativeArray($kindBool, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, false, false, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["net/url"] = (function() {
	var $pkg = {}, $init, bytes, errors, fmt, sort, strconv, strings, Error, timeout, temporary, EscapeError, InvalidHostError, URL, Userinfo, Values, sliceType, ptrType, ptrType$1, sliceType$1, arrayType, sliceType$2, ptrType$2, ishex, unhex, shouldEscape, QueryUnescape, unescape, QueryEscape, escape, User, UserPassword, getscheme, split, Parse, parse, parseAuthority, parseHost, validEncodedPath, validOptionalPort, ParseQuery, parseQuery, resolvePath, stripPort, portOnly;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	Error = $pkg.Error = $newType(0, $kindStruct, "url.Error", true, "net/url", true, function(Op_, URL_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.URL = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.URL = URL_;
		this.Err = Err_;
	});
	timeout = $pkg.timeout = $newType(8, $kindInterface, "url.timeout", true, "net/url", false, null);
	temporary = $pkg.temporary = $newType(8, $kindInterface, "url.temporary", true, "net/url", false, null);
	EscapeError = $pkg.EscapeError = $newType(8, $kindString, "url.EscapeError", true, "net/url", true, null);
	InvalidHostError = $pkg.InvalidHostError = $newType(8, $kindString, "url.InvalidHostError", true, "net/url", true, null);
	URL = $pkg.URL = $newType(0, $kindStruct, "url.URL", true, "net/url", true, function(Scheme_, Opaque_, User_, Host_, Path_, RawPath_, ForceQuery_, RawQuery_, Fragment_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Scheme = "";
			this.Opaque = "";
			this.User = ptrType$1.nil;
			this.Host = "";
			this.Path = "";
			this.RawPath = "";
			this.ForceQuery = false;
			this.RawQuery = "";
			this.Fragment = "";
			return;
		}
		this.Scheme = Scheme_;
		this.Opaque = Opaque_;
		this.User = User_;
		this.Host = Host_;
		this.Path = Path_;
		this.RawPath = RawPath_;
		this.ForceQuery = ForceQuery_;
		this.RawQuery = RawQuery_;
		this.Fragment = Fragment_;
	});
	Userinfo = $pkg.Userinfo = $newType(0, $kindStruct, "url.Userinfo", true, "net/url", true, function(username_, password_, passwordSet_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.username = "";
			this.password = "";
			this.passwordSet = false;
			return;
		}
		this.username = username_;
		this.password = password_;
		this.passwordSet = passwordSet_;
	});
	Values = $pkg.Values = $newType(4, $kindMap, "url.Values", true, "net/url", true, null);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(URL);
	ptrType$1 = $ptrType(Userinfo);
	sliceType$1 = $sliceType($emptyInterface);
	arrayType = $arrayType($Uint8, 64);
	sliceType$2 = $sliceType($String);
	ptrType$2 = $ptrType(Error);
	Error.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Op + " " + e.URL + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Error.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Timeout = function() {
		var $ptr, _r, _tuple, _v, e, ok, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _v = $f._v; e = $f.e; ok = $f.ok; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, timeout, true);
		t = _tuple[0];
		ok = _tuple[1];
		if (!(ok)) { _v = false; $s = 1; continue s; }
		_r = t.Timeout(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Error.ptr.prototype.Timeout }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._v = _v; $f.e = e; $f.ok = ok; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Error.prototype.Timeout = function() { return this.$val.Timeout(); };
	Error.ptr.prototype.Temporary = function() {
		var $ptr, _r, _tuple, _v, e, ok, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _v = $f._v; e = $f.e; ok = $f.ok; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, temporary, true);
		t = _tuple[0];
		ok = _tuple[1];
		if (!(ok)) { _v = false; $s = 1; continue s; }
		_r = t.Temporary(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Error.ptr.prototype.Temporary }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._v = _v; $f.e = e; $f.ok = ok; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Error.prototype.Temporary = function() { return this.$val.Temporary(); };
	ishex = function(c) {
		var $ptr, c;
		if (48 <= c && c <= 57) {
			return true;
		} else if (97 <= c && c <= 102) {
			return true;
		} else if (65 <= c && c <= 70) {
			return true;
		}
		return false;
	};
	unhex = function(c) {
		var $ptr, c;
		if (48 <= c && c <= 57) {
			return c - 48 << 24 >>> 24;
		} else if (97 <= c && c <= 102) {
			return (c - 97 << 24 >>> 24) + 10 << 24 >>> 24;
		} else if (65 <= c && c <= 70) {
			return (c - 65 << 24 >>> 24) + 10 << 24 >>> 24;
		}
		return 0;
	};
	EscapeError.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "invalid URL escape " + strconv.Quote(e);
	};
	$ptrType(EscapeError).prototype.Error = function() { return new EscapeError(this.$get()).Error(); };
	InvalidHostError.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "invalid character " + strconv.Quote(e) + " in host name";
	};
	$ptrType(InvalidHostError).prototype.Error = function() { return new InvalidHostError(this.$get()).Error(); };
	shouldEscape = function(c, mode) {
		var $ptr, _1, _2, _3, c, mode;
		if (65 <= c && c <= 90 || 97 <= c && c <= 122 || 48 <= c && c <= 57) {
			return false;
		}
		if ((mode === 3) || (mode === 4)) {
			_1 = c;
			if ((_1 === (33)) || (_1 === (36)) || (_1 === (38)) || (_1 === (39)) || (_1 === (40)) || (_1 === (41)) || (_1 === (42)) || (_1 === (43)) || (_1 === (44)) || (_1 === (59)) || (_1 === (61)) || (_1 === (58)) || (_1 === (91)) || (_1 === (93)) || (_1 === (60)) || (_1 === (62)) || (_1 === (34))) {
				return false;
			}
		}
		_2 = c;
		if ((_2 === (45)) || (_2 === (95)) || (_2 === (46)) || (_2 === (126))) {
			return false;
		} else if ((_2 === (36)) || (_2 === (38)) || (_2 === (43)) || (_2 === (44)) || (_2 === (47)) || (_2 === (58)) || (_2 === (59)) || (_2 === (61)) || (_2 === (63)) || (_2 === (64))) {
			_3 = mode;
			if (_3 === (1)) {
				return c === 63;
			} else if (_3 === (2)) {
				return (c === 47) || (c === 59) || (c === 44) || (c === 63);
			} else if (_3 === (5)) {
				return (c === 64) || (c === 47) || (c === 63) || (c === 58);
			} else if (_3 === (6)) {
				return true;
			} else if (_3 === (7)) {
				return false;
			}
		}
		return true;
	};
	QueryUnescape = function(s) {
		var $ptr, s;
		return unescape(s, 6);
	};
	$pkg.QueryUnescape = QueryUnescape;
	unescape = function(s, mode) {
		var $ptr, _1, _2, hasPlus, i, i$1, j, mode, n, s, t, v;
		n = 0;
		hasPlus = false;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			_1 = s.charCodeAt(i);
			if (_1 === (37)) {
				n = n + (1) >> 0;
				if ((i + 2 >> 0) >= s.length || !ishex(s.charCodeAt((i + 1 >> 0))) || !ishex(s.charCodeAt((i + 2 >> 0)))) {
					s = $substring(s, i);
					if (s.length > 3) {
						s = $substring(s, 0, 3);
					}
					return ["", new EscapeError(s)];
				}
				if ((mode === 3) && unhex(s.charCodeAt((i + 1 >> 0))) < 8 && !($substring(s, i, (i + 3 >> 0)) === "%25")) {
					return ["", new EscapeError($substring(s, i, (i + 3 >> 0)))];
				}
				if (mode === 4) {
					v = ((unhex(s.charCodeAt((i + 1 >> 0))) << 4 << 24 >>> 24) | unhex(s.charCodeAt((i + 2 >> 0)))) >>> 0;
					if (!($substring(s, i, (i + 3 >> 0)) === "%25") && !((v === 32)) && shouldEscape(v, 3)) {
						return ["", new EscapeError($substring(s, i, (i + 3 >> 0)))];
					}
				}
				i = i + (3) >> 0;
			} else if (_1 === (43)) {
				hasPlus = mode === 6;
				i = i + (1) >> 0;
			} else {
				if (((mode === 3) || (mode === 4)) && s.charCodeAt(i) < 128 && shouldEscape(s.charCodeAt(i), mode)) {
					return ["", new InvalidHostError($substring(s, i, (i + 1 >> 0)))];
				}
				i = i + (1) >> 0;
			}
		}
		if ((n === 0) && !hasPlus) {
			return [s, $ifaceNil];
		}
		t = $makeSlice(sliceType, (s.length - ($imul(2, n)) >> 0));
		j = 0;
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			_2 = s.charCodeAt(i$1);
			if (_2 === (37)) {
				((j < 0 || j >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + j] = (((unhex(s.charCodeAt((i$1 + 1 >> 0))) << 4 << 24 >>> 24) | unhex(s.charCodeAt((i$1 + 2 >> 0)))) >>> 0));
				j = j + (1) >> 0;
				i$1 = i$1 + (3) >> 0;
			} else if (_2 === (43)) {
				if (mode === 6) {
					((j < 0 || j >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + j] = 32);
				} else {
					((j < 0 || j >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + j] = 43);
				}
				j = j + (1) >> 0;
				i$1 = i$1 + (1) >> 0;
			} else {
				((j < 0 || j >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + j] = s.charCodeAt(i$1));
				j = j + (1) >> 0;
				i$1 = i$1 + (1) >> 0;
			}
		}
		return [$bytesToString(t), $ifaceNil];
	};
	QueryEscape = function(s) {
		var $ptr, s;
		return escape(s, 6);
	};
	$pkg.QueryEscape = QueryEscape;
	escape = function(s, mode) {
		var $ptr, _tmp, _tmp$1, c, c$1, hexCount, i, i$1, j, mode, s, spaceCount, t, x, x$1;
		_tmp = 0;
		_tmp$1 = 0;
		spaceCount = _tmp;
		hexCount = _tmp$1;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (shouldEscape(c, mode)) {
				if ((c === 32) && (mode === 6)) {
					spaceCount = spaceCount + (1) >> 0;
				} else {
					hexCount = hexCount + (1) >> 0;
				}
			}
			i = i + (1) >> 0;
		}
		if ((spaceCount === 0) && (hexCount === 0)) {
			return s;
		}
		t = $makeSlice(sliceType, (s.length + ($imul(2, hexCount)) >> 0));
		j = 0;
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			c$1 = s.charCodeAt(i$1);
			if ((c$1 === 32) && (mode === 6)) {
				((j < 0 || j >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + j] = 43);
				j = j + (1) >> 0;
			} else if (shouldEscape(c$1, mode)) {
				((j < 0 || j >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + j] = 37);
				(x = j + 1 >> 0, ((x < 0 || x >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + x] = "0123456789ABCDEF".charCodeAt((c$1 >>> 4 << 24 >>> 24))));
				(x$1 = j + 2 >> 0, ((x$1 < 0 || x$1 >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + x$1] = "0123456789ABCDEF".charCodeAt(((c$1 & 15) >>> 0))));
				j = j + (3) >> 0;
			} else {
				((j < 0 || j >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + j] = s.charCodeAt(i$1));
				j = j + (1) >> 0;
			}
			i$1 = i$1 + (1) >> 0;
		}
		return $bytesToString(t);
	};
	User = function(username) {
		var $ptr, username;
		return new Userinfo.ptr(username, "", false);
	};
	$pkg.User = User;
	UserPassword = function(username, password) {
		var $ptr, password, username;
		return new Userinfo.ptr(username, password, true);
	};
	$pkg.UserPassword = UserPassword;
	Userinfo.ptr.prototype.Username = function() {
		var $ptr, u;
		u = this;
		return u.username;
	};
	Userinfo.prototype.Username = function() { return this.$val.Username(); };
	Userinfo.ptr.prototype.Password = function() {
		var $ptr, u;
		u = this;
		return [u.password, u.passwordSet];
	};
	Userinfo.prototype.Password = function() { return this.$val.Password(); };
	Userinfo.ptr.prototype.String = function() {
		var $ptr, s, u;
		u = this;
		s = escape(u.username, 5);
		if (u.passwordSet) {
			s = s + (":" + escape(u.password, 5));
		}
		return s;
	};
	Userinfo.prototype.String = function() { return this.$val.String(); };
	getscheme = function(rawurl) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, err, i, path, rawurl, scheme;
		scheme = "";
		path = "";
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < rawurl.length)) { break; }
			c = rawurl.charCodeAt(i);
			if (97 <= c && c <= 122 || 65 <= c && c <= 90) {
			} else if (48 <= c && c <= 57 || (c === 43) || (c === 45) || (c === 46)) {
				if (i === 0) {
					_tmp = "";
					_tmp$1 = rawurl;
					_tmp$2 = $ifaceNil;
					scheme = _tmp;
					path = _tmp$1;
					err = _tmp$2;
					return [scheme, path, err];
				}
			} else if ((c === 58)) {
				if (i === 0) {
					_tmp$3 = "";
					_tmp$4 = "";
					_tmp$5 = errors.New("missing protocol scheme");
					scheme = _tmp$3;
					path = _tmp$4;
					err = _tmp$5;
					return [scheme, path, err];
				}
				_tmp$6 = $substring(rawurl, 0, i);
				_tmp$7 = $substring(rawurl, (i + 1 >> 0));
				_tmp$8 = $ifaceNil;
				scheme = _tmp$6;
				path = _tmp$7;
				err = _tmp$8;
				return [scheme, path, err];
			} else {
				_tmp$9 = "";
				_tmp$10 = rawurl;
				_tmp$11 = $ifaceNil;
				scheme = _tmp$9;
				path = _tmp$10;
				err = _tmp$11;
				return [scheme, path, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$12 = "";
		_tmp$13 = rawurl;
		_tmp$14 = $ifaceNil;
		scheme = _tmp$12;
		path = _tmp$13;
		err = _tmp$14;
		return [scheme, path, err];
	};
	split = function(s, c, cutc) {
		var $ptr, c, cutc, i, s;
		i = strings.Index(s, c);
		if (i < 0) {
			return [s, ""];
		}
		if (cutc) {
			return [$substring(s, 0, i), $substring(s, (i + c.length >> 0))];
		}
		return [$substring(s, 0, i), $substring(s, i)];
	};
	Parse = function(rawurl) {
		var $ptr, _r, _tuple, _tuple$1, _tuple$2, err, frag, rawurl, u, url, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; frag = $f.frag; rawurl = $f.rawurl; u = $f.u; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = split(rawurl, "#", true);
		u = _tuple[0];
		frag = _tuple[1];
		_r = parse(u, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		url = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType.nil, new Error.ptr("parse", u, err)];
		}
		if (frag === "") {
			$s = -1; return [url, $ifaceNil];
		}
		_tuple$2 = unescape(frag, 7);
		url.Fragment = _tuple$2[0];
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType.nil, new Error.ptr("parse", rawurl, err)];
		}
		$s = -1; return [url, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.frag = frag; $f.rawurl = rawurl; $f.u = u; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parse = function(rawurl, viaRequest) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, _tuple$2, _tuple$3, authority, colon, err, err$1, rawurl, rest, slash, url, viaRequest, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; authority = $f.authority; colon = $f.colon; err = $f.err; err$1 = $f.err$1; rawurl = $f.rawurl; rest = $f.rest; slash = $f.slash; url = $f.url; viaRequest = $f.viaRequest; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rest = "";
		err = $ifaceNil;
		if (rawurl === "" && viaRequest) {
			$s = -1; return [ptrType.nil, errors.New("empty url")];
		}
		url = new URL.ptr("", "", ptrType$1.nil, "", "", "", false, "", "");
		if (rawurl === "*") {
			url.Path = "*";
			$s = -1; return [url, $ifaceNil];
		}
		_tuple = getscheme(rawurl);
		url.Scheme = _tuple[0];
		rest = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType.nil, err];
		}
		_r = strings.ToLower(url.Scheme); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		url.Scheme = _r;
		if (strings.HasSuffix(rest, "?") && (strings.Count(rest, "?") === 1)) {
			url.ForceQuery = true;
			rest = $substring(rest, 0, (rest.length - 1 >> 0));
		} else {
			_tuple$1 = split(rest, "?", true);
			rest = _tuple$1[0];
			url.RawQuery = _tuple$1[1];
		}
		if (!strings.HasPrefix(rest, "/")) {
			if (!(url.Scheme === "")) {
				url.Opaque = rest;
				$s = -1; return [url, $ifaceNil];
			}
			if (viaRequest) {
				$s = -1; return [ptrType.nil, errors.New("invalid URI for request")];
			}
			colon = strings.Index(rest, ":");
			slash = strings.Index(rest, "/");
			if (colon >= 0 && (slash < 0 || colon < slash)) {
				$s = -1; return [ptrType.nil, errors.New("first path segment in URL cannot contain colon")];
			}
		}
		/* */ if ((!(url.Scheme === "") || !viaRequest && !strings.HasPrefix(rest, "///")) && strings.HasPrefix(rest, "//")) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ((!(url.Scheme === "") || !viaRequest && !strings.HasPrefix(rest, "///")) && strings.HasPrefix(rest, "//")) { */ case 2:
			authority = "";
			_tuple$2 = split($substring(rest, 2), "/", false);
			authority = _tuple$2[0];
			rest = _tuple$2[1];
			_r$1 = parseAuthority(authority); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$3 = _r$1;
			url.User = _tuple$3[0];
			url.Host = _tuple$3[1];
			err = _tuple$3[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ptrType.nil, err];
			}
		/* } */ case 3:
		err$1 = url.setPath(rest);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [ptrType.nil, err$1];
		}
		$s = -1; return [url, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parse }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.authority = authority; $f.colon = colon; $f.err = err; $f.err$1 = err$1; $f.rawurl = rawurl; $f.rest = rest; $f.slash = slash; $f.url = url; $f.viaRequest = viaRequest; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseAuthority = function(authority) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, authority, err, host, i, password, user, userinfo, username, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; authority = $f.authority; err = $f.err; host = $f.host; i = $f.i; password = $f.password; user = $f.user; userinfo = $f.userinfo; username = $f.username; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		user = ptrType$1.nil;
		host = "";
		err = $ifaceNil;
		i = strings.LastIndex(authority, "@");
		/* */ if (i < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (i < 0) { */ case 1:
			_r = parseHost(authority); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			host = _tuple[0];
			err = _tuple[1];
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = parseHost($substring(authority, (i + 1 >> 0))); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			host = _tuple$1[0];
			err = _tuple$1[1];
		/* } */ case 3:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ptrType$1.nil;
			_tmp$1 = "";
			_tmp$2 = err;
			user = _tmp;
			host = _tmp$1;
			err = _tmp$2;
			$s = -1; return [user, host, err];
		}
		if (i < 0) {
			_tmp$3 = ptrType$1.nil;
			_tmp$4 = host;
			_tmp$5 = $ifaceNil;
			user = _tmp$3;
			host = _tmp$4;
			err = _tmp$5;
			$s = -1; return [user, host, err];
		}
		userinfo = $substring(authority, 0, i);
		if (!strings.Contains(userinfo, ":")) {
			_tuple$2 = unescape(userinfo, 5);
			userinfo = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$6 = ptrType$1.nil;
				_tmp$7 = "";
				_tmp$8 = err;
				user = _tmp$6;
				host = _tmp$7;
				err = _tmp$8;
				$s = -1; return [user, host, err];
			}
			user = User(userinfo);
		} else {
			_tuple$3 = split(userinfo, ":", true);
			username = _tuple$3[0];
			password = _tuple$3[1];
			_tuple$4 = unescape(username, 5);
			username = _tuple$4[0];
			err = _tuple$4[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$9 = ptrType$1.nil;
				_tmp$10 = "";
				_tmp$11 = err;
				user = _tmp$9;
				host = _tmp$10;
				err = _tmp$11;
				$s = -1; return [user, host, err];
			}
			_tuple$5 = unescape(password, 5);
			password = _tuple$5[0];
			err = _tuple$5[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$12 = ptrType$1.nil;
				_tmp$13 = "";
				_tmp$14 = err;
				user = _tmp$12;
				host = _tmp$13;
				err = _tmp$14;
				$s = -1; return [user, host, err];
			}
			user = UserPassword(username, password);
		}
		_tmp$15 = user;
		_tmp$16 = host;
		_tmp$17 = $ifaceNil;
		user = _tmp$15;
		host = _tmp$16;
		err = _tmp$17;
		$s = -1; return [user, host, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseAuthority }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.authority = authority; $f.err = err; $f.host = host; $f.i = i; $f.password = password; $f.user = user; $f.userinfo = userinfo; $f.username = username; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseHost = function(host) {
		var $ptr, _r, _tuple, _tuple$1, _tuple$2, _tuple$3, colonPort, err, err$1, host, host1, host2, host3, i, zone, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; colonPort = $f.colonPort; err = $f.err; err$1 = $f.err$1; host = $f.host; host1 = $f.host1; host2 = $f.host2; host3 = $f.host3; i = $f.i; zone = $f.zone; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (strings.HasPrefix(host, "[")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (strings.HasPrefix(host, "[")) { */ case 1:
			i = strings.LastIndex(host, "]");
			if (i < 0) {
				$s = -1; return ["", errors.New("missing ']' in host")];
			}
			colonPort = $substring(host, (i + 1 >> 0));
			/* */ if (!validOptionalPort(colonPort)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!validOptionalPort(colonPort)) { */ case 3:
				_r = fmt.Errorf("invalid port %q after host", new sliceType$1([new $String(colonPort)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return ["", _r];
			/* } */ case 4:
			zone = strings.Index($substring(host, 0, i), "%25");
			if (zone >= 0) {
				_tuple = unescape($substring(host, 0, zone), 3);
				host1 = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return ["", err];
				}
				_tuple$1 = unescape($substring(host, zone, i), 4);
				host2 = _tuple$1[0];
				err = _tuple$1[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return ["", err];
				}
				_tuple$2 = unescape($substring(host, i), 3);
				host3 = _tuple$2[0];
				err = _tuple$2[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return ["", err];
				}
				$s = -1; return [host1 + host2 + host3, $ifaceNil];
			}
		/* } */ case 2:
		err$1 = $ifaceNil;
		_tuple$3 = unescape(host, 3);
		host = _tuple$3[0];
		err$1 = _tuple$3[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return ["", err$1];
		}
		$s = -1; return [host, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseHost }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.colonPort = colonPort; $f.err = err; $f.err$1 = err$1; $f.host = host; $f.host1 = host1; $f.host2 = host2; $f.host3 = host3; $f.i = i; $f.zone = zone; $f.$s = $s; $f.$r = $r; return $f;
	};
	URL.ptr.prototype.setPath = function(p) {
		var $ptr, _tuple, err, escp, p, path, u;
		u = this;
		_tuple = unescape(p, 1);
		path = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		u.Path = path;
		escp = escape(path, 1);
		if (p === escp) {
			u.RawPath = "";
		} else {
			u.RawPath = p;
		}
		return $ifaceNil;
	};
	URL.prototype.setPath = function(p) { return this.$val.setPath(p); };
	URL.ptr.prototype.EscapedPath = function() {
		var $ptr, _tuple, err, p, u;
		u = this;
		if (!(u.RawPath === "") && validEncodedPath(u.RawPath)) {
			_tuple = unescape(u.RawPath, 1);
			p = _tuple[0];
			err = _tuple[1];
			if ($interfaceIsEqual(err, $ifaceNil) && p === u.Path) {
				return u.RawPath;
			}
		}
		if (u.Path === "*") {
			return "*";
		}
		return escape(u.Path, 1);
	};
	URL.prototype.EscapedPath = function() { return this.$val.EscapedPath(); };
	validEncodedPath = function(s) {
		var $ptr, _1, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			_1 = s.charCodeAt(i);
			if ((_1 === (33)) || (_1 === (36)) || (_1 === (38)) || (_1 === (39)) || (_1 === (40)) || (_1 === (41)) || (_1 === (42)) || (_1 === (43)) || (_1 === (44)) || (_1 === (59)) || (_1 === (61)) || (_1 === (58)) || (_1 === (64))) {
			} else if ((_1 === (91)) || (_1 === (93))) {
			} else if (_1 === (37)) {
			} else if (shouldEscape(s.charCodeAt(i), 1)) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	validOptionalPort = function(port) {
		var $ptr, _i, _ref, _rune, b, port;
		if (port === "") {
			return true;
		}
		if (!((port.charCodeAt(0) === 58))) {
			return false;
		}
		_ref = $substring(port, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			b = _rune[0];
			if (b < 48 || b > 57) {
				return false;
			}
			_i += _rune[1];
		}
		return true;
	};
	URL.ptr.prototype.String = function() {
		var $ptr, buf, h, i, path, u, ui;
		u = this;
		buf = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), 0);
		if (!(u.Scheme === "")) {
			buf.WriteString(u.Scheme);
			buf.WriteByte(58);
		}
		if (!(u.Opaque === "")) {
			buf.WriteString(u.Opaque);
		} else {
			if (!(u.Scheme === "") || !(u.Host === "") || !(u.User === ptrType$1.nil)) {
				buf.WriteString("//");
				ui = u.User;
				if (!(ui === ptrType$1.nil)) {
					buf.WriteString(ui.String());
					buf.WriteByte(64);
				}
				h = u.Host;
				if (!(h === "")) {
					buf.WriteString(escape(h, 3));
				}
			}
			path = u.EscapedPath();
			if (!(path === "") && !((path.charCodeAt(0) === 47)) && !(u.Host === "")) {
				buf.WriteByte(47);
			}
			if (buf.Len() === 0) {
				i = strings.IndexByte(path, 58);
				if (i > -1 && (strings.IndexByte($substring(path, 0, i), 47) === -1)) {
					buf.WriteString("./");
				}
			}
			buf.WriteString(path);
		}
		if (u.ForceQuery || !(u.RawQuery === "")) {
			buf.WriteByte(63);
			buf.WriteString(u.RawQuery);
		}
		if (!(u.Fragment === "")) {
			buf.WriteByte(35);
			buf.WriteString(escape(u.Fragment, 7));
		}
		return buf.String();
	};
	URL.prototype.String = function() { return this.$val.String(); };
	Values.prototype.Get = function(key) {
		var $ptr, _entry, key, v, vs;
		v = this.$val;
		if (v === false) {
			return "";
		}
		vs = (_entry = v[$String.keyFor(key)], _entry !== undefined ? _entry.v : sliceType$2.nil);
		if (vs.$length === 0) {
			return "";
		}
		return (0 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 0]);
	};
	$ptrType(Values).prototype.Get = function(key) { return new Values(this.$get()).Get(key); };
	Values.prototype.Set = function(key, value) {
		var $ptr, _key, key, v, value;
		v = this.$val;
		_key = key; (v || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: new sliceType$2([value]) };
	};
	$ptrType(Values).prototype.Set = function(key, value) { return new Values(this.$get()).Set(key, value); };
	Values.prototype.Add = function(key, value) {
		var $ptr, _entry, _key, key, v, value;
		v = this.$val;
		_key = key; (v || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $append((_entry = v[$String.keyFor(key)], _entry !== undefined ? _entry.v : sliceType$2.nil), value) };
	};
	$ptrType(Values).prototype.Add = function(key, value) { return new Values(this.$get()).Add(key, value); };
	Values.prototype.Del = function(key) {
		var $ptr, key, v;
		v = this.$val;
		delete v[$String.keyFor(key)];
	};
	$ptrType(Values).prototype.Del = function(key) { return new Values(this.$get()).Del(key); };
	ParseQuery = function(query) {
		var $ptr, err, m, query;
		m = {};
		err = parseQuery(m, query);
		return [m, err];
	};
	$pkg.ParseQuery = ParseQuery;
	parseQuery = function(m, query) {
		var $ptr, _entry, _key, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, err, err1, i, i$1, key, m, query, value;
		err = $ifaceNil;
		while (true) {
			if (!(!(query === ""))) { break; }
			key = query;
			i = strings.IndexAny(key, "&;");
			if (i >= 0) {
				_tmp = $substring(key, 0, i);
				_tmp$1 = $substring(key, (i + 1 >> 0));
				key = _tmp;
				query = _tmp$1;
			} else {
				query = "";
			}
			if (key === "") {
				continue;
			}
			value = "";
			i$1 = strings.Index(key, "=");
			if (i$1 >= 0) {
				_tmp$2 = $substring(key, 0, i$1);
				_tmp$3 = $substring(key, (i$1 + 1 >> 0));
				key = _tmp$2;
				value = _tmp$3;
			}
			_tuple = QueryUnescape(key);
			key = _tuple[0];
			err1 = _tuple[1];
			if (!($interfaceIsEqual(err1, $ifaceNil))) {
				if ($interfaceIsEqual(err, $ifaceNil)) {
					err = err1;
				}
				continue;
			}
			_tuple$1 = QueryUnescape(value);
			value = _tuple$1[0];
			err1 = _tuple$1[1];
			if (!($interfaceIsEqual(err1, $ifaceNil))) {
				if ($interfaceIsEqual(err, $ifaceNil)) {
					err = err1;
				}
				continue;
			}
			_key = key; (m || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $append((_entry = m[$String.keyFor(key)], _entry !== undefined ? _entry.v : sliceType$2.nil), value) };
		}
		err = err;
		return err;
	};
	Values.prototype.Encode = function() {
		var $ptr, _entry, _entry$1, _i, _i$1, _i$2, _keys, _ref, _ref$1, _ref$2, buf, k, k$1, keys, prefix, v, v$1, vs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _keys = $f._keys; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; buf = $f.buf; k = $f.k; k$1 = $f.k$1; keys = $f.keys; prefix = $f.prefix; v = $f.v; v$1 = $f.v$1; vs = $f.vs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this.$val;
		if (v === false) {
			$s = -1; return "";
		}
		buf = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), 0);
		keys = $makeSlice(sliceType$2, 0, $keys(v).length);
		_ref = v;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			keys = $append(keys, k);
			_i++;
		}
		$r = sort.Strings(keys); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref$1 = keys;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			k$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			vs = (_entry$1 = v[$String.keyFor(k$1)], _entry$1 !== undefined ? _entry$1.v : sliceType$2.nil);
			prefix = QueryEscape(k$1) + "=";
			_ref$2 = vs;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				v$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
				if (buf.Len() > 0) {
					buf.WriteByte(38);
				}
				buf.WriteString(prefix);
				buf.WriteString(QueryEscape(v$1));
				_i$2++;
			}
			_i$1++;
		}
		$s = -1; return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Values.prototype.Encode }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._keys = _keys; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.buf = buf; $f.k = k; $f.k$1 = k$1; $f.keys = keys; $f.prefix = prefix; $f.v = v; $f.v$1 = v$1; $f.vs = vs; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Values).prototype.Encode = function() { return new Values(this.$get()).Encode(); };
	resolvePath = function(base, ref) {
		var $ptr, _1, _i, _r, _ref, base, dst, elem, full, i, last, ref, src, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _r = $f._r; _ref = $f._ref; base = $f.base; dst = $f.dst; elem = $f.elem; full = $f.full; i = $f.i; last = $f.last; ref = $f.ref; src = $f.src; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		full = "";
		if (ref === "") {
			full = base;
		} else if (!((ref.charCodeAt(0) === 47))) {
			i = strings.LastIndex(base, "/");
			full = $substring(base, 0, (i + 1 >> 0)) + ref;
		} else {
			full = ref;
		}
		if (full === "") {
			$s = -1; return "";
		}
		dst = sliceType$2.nil;
		src = strings.Split(full, "/");
		_ref = src;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			elem = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_1 = elem;
			if (_1 === (".")) {
			} else if (_1 === ("..")) {
				if (dst.$length > 0) {
					dst = $subslice(dst, 0, (dst.$length - 1 >> 0));
				}
			} else {
				dst = $append(dst, elem);
			}
			_i++;
		}
		last = (x = src.$length - 1 >> 0, ((x < 0 || x >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x]));
		if (last === "." || last === "..") {
			dst = $append(dst, "");
		}
		_r = strings.TrimLeft(strings.Join(dst, "/"), "/"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return "/" + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: resolvePath }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.base = base; $f.dst = dst; $f.elem = elem; $f.full = full; $f.i = i; $f.last = last; $f.ref = ref; $f.src = src; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	URL.ptr.prototype.IsAbs = function() {
		var $ptr, u;
		u = this;
		return !(u.Scheme === "");
	};
	URL.prototype.IsAbs = function() { return this.$val.IsAbs(); };
	URL.ptr.prototype.Parse = function(ref) {
		var $ptr, _r, _r$1, _tuple, err, ref, refurl, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; ref = $f.ref; refurl = $f.refurl; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		_r = Parse(ref); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		refurl = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType.nil, err];
		}
		_r$1 = u.ResolveReference(refurl); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return [_r$1, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: URL.ptr.prototype.Parse }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.ref = ref; $f.refurl = refurl; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	URL.prototype.Parse = function(ref) { return this.$val.Parse(ref); };
	URL.ptr.prototype.ResolveReference = function(ref) {
		var $ptr, _r, _r$1, _r$2, _r$3, ref, u, url, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; ref = $f.ref; u = $f.u; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		url = [url];
		u = this;
		url[0] = $clone(ref, URL);
		if (ref.Scheme === "") {
			url[0].Scheme = u.Scheme;
		}
		/* */ if (!(ref.Scheme === "") || !(ref.Host === "") || !(ref.User === ptrType$1.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(ref.Scheme === "") || !(ref.Host === "") || !(ref.User === ptrType$1.nil)) { */ case 1:
			_r = resolvePath(ref.EscapedPath(), ""); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = url[0].setPath(_r); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			$s = -1; return url[0];
		/* } */ case 2:
		if (!(ref.Opaque === "")) {
			url[0].User = ptrType$1.nil;
			url[0].Host = "";
			url[0].Path = "";
			$s = -1; return url[0];
		}
		if (ref.Path === "") {
			if (ref.RawQuery === "") {
				url[0].RawQuery = u.RawQuery;
				if (ref.Fragment === "") {
					url[0].Fragment = u.Fragment;
				}
			}
		}
		url[0].Host = u.Host;
		url[0].User = u.User;
		_r$2 = resolvePath(u.EscapedPath(), ref.EscapedPath()); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = url[0].setPath(_r$2); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		$s = -1; return url[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: URL.ptr.prototype.ResolveReference }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.ref = ref; $f.u = u; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;
	};
	URL.prototype.ResolveReference = function(ref) { return this.$val.ResolveReference(ref); };
	URL.ptr.prototype.Query = function() {
		var $ptr, _tuple, u, v;
		u = this;
		_tuple = ParseQuery(u.RawQuery);
		v = _tuple[0];
		return v;
	};
	URL.prototype.Query = function() { return this.$val.Query(); };
	URL.ptr.prototype.RequestURI = function() {
		var $ptr, result, u;
		u = this;
		result = u.Opaque;
		if (result === "") {
			result = u.EscapedPath();
			if (result === "") {
				result = "/";
			}
		} else {
			if (strings.HasPrefix(result, "//")) {
				result = u.Scheme + ":" + result;
			}
		}
		if (u.ForceQuery || !(u.RawQuery === "")) {
			result = result + ("?" + u.RawQuery);
		}
		return result;
	};
	URL.prototype.RequestURI = function() { return this.$val.RequestURI(); };
	URL.ptr.prototype.Hostname = function() {
		var $ptr, u;
		u = this;
		return stripPort(u.Host);
	};
	URL.prototype.Hostname = function() { return this.$val.Hostname(); };
	URL.ptr.prototype.Port = function() {
		var $ptr, u;
		u = this;
		return portOnly(u.Host);
	};
	URL.prototype.Port = function() { return this.$val.Port(); };
	stripPort = function(hostport) {
		var $ptr, colon, hostport, i;
		colon = strings.IndexByte(hostport, 58);
		if (colon === -1) {
			return hostport;
		}
		i = strings.IndexByte(hostport, 93);
		if (!((i === -1))) {
			return strings.TrimPrefix($substring(hostport, 0, i), "[");
		}
		return $substring(hostport, 0, colon);
	};
	portOnly = function(hostport) {
		var $ptr, colon, hostport, i;
		colon = strings.IndexByte(hostport, 58);
		if (colon === -1) {
			return "";
		}
		i = strings.Index(hostport, "]:");
		if (!((i === -1))) {
			return $substring(hostport, (i + 2 >> 0));
		}
		if (strings.Contains(hostport, "]")) {
			return "";
		}
		return $substring(hostport, (colon + 1 >> 0));
	};
	URL.ptr.prototype.MarshalBinary = function() {
		var $ptr, _tmp, _tmp$1, err, text, u;
		text = sliceType.nil;
		err = $ifaceNil;
		u = this;
		_tmp = new sliceType($stringToBytes(u.String()));
		_tmp$1 = $ifaceNil;
		text = _tmp;
		err = _tmp$1;
		return [text, err];
	};
	URL.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	URL.ptr.prototype.UnmarshalBinary = function(text) {
		var $ptr, _r, _tuple, err, text, u, u1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; text = $f.text; u = $f.u; u1 = $f.u1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		_r = Parse($bytesToString(text)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		u1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		URL.copy(u, u1);
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: URL.ptr.prototype.UnmarshalBinary }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.text = text; $f.u = u; $f.u1 = u1; $f.$s = $s; $f.$r = $r; return $f;
	};
	URL.prototype.UnmarshalBinary = function(text) { return this.$val.UnmarshalBinary(text); };
	ptrType$2.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}];
	EscapeError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	InvalidHostError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType.methods = [{prop: "setPath", name: "setPath", pkg: "net/url", typ: $funcType([$String], [$error], false)}, {prop: "EscapedPath", name: "EscapedPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsAbs", name: "IsAbs", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([$String], [ptrType, $error], false)}, {prop: "ResolveReference", name: "ResolveReference", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Query", name: "Query", pkg: "", typ: $funcType([], [Values], false)}, {prop: "RequestURI", name: "RequestURI", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Hostname", name: "Hostname", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Port", name: "Port", pkg: "", typ: $funcType([], [$String], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType, $error], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType], [$error], false)}];
	ptrType$1.methods = [{prop: "Username", name: "Username", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Password", name: "Password", pkg: "", typ: $funcType([], [$String, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Values.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $String], [], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([$String, $String], [], false)}, {prop: "Del", name: "Del", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Encode", name: "Encode", pkg: "", typ: $funcType([], [$String], false)}];
	Error.init("", [{prop: "Op", name: "Op", exported: true, typ: $String, tag: ""}, {prop: "URL", name: "URL", exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", exported: true, typ: $error, tag: ""}]);
	timeout.init([{prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}]);
	temporary.init([{prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}]);
	URL.init("", [{prop: "Scheme", name: "Scheme", exported: true, typ: $String, tag: ""}, {prop: "Opaque", name: "Opaque", exported: true, typ: $String, tag: ""}, {prop: "User", name: "User", exported: true, typ: ptrType$1, tag: ""}, {prop: "Host", name: "Host", exported: true, typ: $String, tag: ""}, {prop: "Path", name: "Path", exported: true, typ: $String, tag: ""}, {prop: "RawPath", name: "RawPath", exported: true, typ: $String, tag: ""}, {prop: "ForceQuery", name: "ForceQuery", exported: true, typ: $Bool, tag: ""}, {prop: "RawQuery", name: "RawQuery", exported: true, typ: $String, tag: ""}, {prop: "Fragment", name: "Fragment", exported: true, typ: $String, tag: ""}]);
	Userinfo.init("net/url", [{prop: "username", name: "username", exported: false, typ: $String, tag: ""}, {prop: "password", name: "password", exported: false, typ: $String, tag: ""}, {prop: "passwordSet", name: "passwordSet", exported: false, typ: $Bool, tag: ""}]);
	Values.init($String, sliceType$2);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/PalmStoneGames/gopherjs-net-http"] = (function() {
	var $pkg = {}, $init, bufio, bytes, base64, errors, fmt, js, io, ioutil, log, net, textproto, url, sort, strconv, strings, sync, atomic, time, utf8, Client, RoundTripper, cancelTimerBody, Cookie, Header, writeStringer, stringWriter, keyValues, headerSorter, CookieJar, Request, Response, XHRTransport, canceler, sliceType, sliceType$1, sliceType$2, ptrType, ptrType$1, ptrType$2, sliceType$3, ptrType$3, sliceType$4, ptrType$4, ptrType$5, ptrType$6, sliceType$5, ptrType$7, arrayType, ptrType$8, funcType, ptrType$9, funcType$1, funcType$2, ptrType$10, funcType$3, ptrType$11, funcType$4, mapType, ptrType$12, mapType$1, cookieNameSanitizer, headerNewlineToSpace, headerSorterPool, isTokenTable, errRequestCanceled, refererForURL, send, basicAuth, shouldRedirectGet, shouldRedirectPost, alwaysFalse, defaultCheckRedirect, readSetCookies, validCookieDomain, isCookieDomainName, sanitizeCookieName, sanitizeCookieValue, validCookieValueByte, sanitizeCookiePath, validCookiePathByte, sanitizeOrWarn, parseCookieValue, isCookieNameValid, isToken, isNotToken, NewRequest;
	bufio = $packages["bufio"];
	bytes = $packages["bytes"];
	base64 = $packages["encoding/base64"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	ioutil = $packages["io/ioutil"];
	log = $packages["log"];
	net = $packages["net"];
	textproto = $packages["net/textproto"];
	url = $packages["net/url"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	time = $packages["time"];
	utf8 = $packages["unicode/utf8"];
	Client = $pkg.Client = $newType(0, $kindStruct, "http.Client", true, "github.com/PalmStoneGames/gopherjs-net-http", true, function(Transport_, CheckRedirect_, Jar_, Timeout_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Transport = $ifaceNil;
			this.CheckRedirect = $throwNilPointerError;
			this.Jar = $ifaceNil;
			this.Timeout = new time.Duration(0, 0);
			return;
		}
		this.Transport = Transport_;
		this.CheckRedirect = CheckRedirect_;
		this.Jar = Jar_;
		this.Timeout = Timeout_;
	});
	RoundTripper = $pkg.RoundTripper = $newType(8, $kindInterface, "http.RoundTripper", true, "github.com/PalmStoneGames/gopherjs-net-http", true, null);
	cancelTimerBody = $pkg.cancelTimerBody = $newType(0, $kindStruct, "http.cancelTimerBody", true, "github.com/PalmStoneGames/gopherjs-net-http", false, function(t_, rc_, reqWasCanceled_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = ptrType$4.nil;
			this.rc = $ifaceNil;
			this.reqWasCanceled = $throwNilPointerError;
			return;
		}
		this.t = t_;
		this.rc = rc_;
		this.reqWasCanceled = reqWasCanceled_;
	});
	Cookie = $pkg.Cookie = $newType(0, $kindStruct, "http.Cookie", true, "github.com/PalmStoneGames/gopherjs-net-http", true, function(Name_, Value_, Path_, Domain_, Expires_, RawExpires_, MaxAge_, Secure_, HttpOnly_, Raw_, Unparsed_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Value = "";
			this.Path = "";
			this.Domain = "";
			this.Expires = new time.Time.ptr(new $Int64(0, 0), 0, ptrType$7.nil);
			this.RawExpires = "";
			this.MaxAge = 0;
			this.Secure = false;
			this.HttpOnly = false;
			this.Raw = "";
			this.Unparsed = sliceType.nil;
			return;
		}
		this.Name = Name_;
		this.Value = Value_;
		this.Path = Path_;
		this.Domain = Domain_;
		this.Expires = Expires_;
		this.RawExpires = RawExpires_;
		this.MaxAge = MaxAge_;
		this.Secure = Secure_;
		this.HttpOnly = HttpOnly_;
		this.Raw = Raw_;
		this.Unparsed = Unparsed_;
	});
	Header = $pkg.Header = $newType(4, $kindMap, "http.Header", true, "github.com/PalmStoneGames/gopherjs-net-http", true, null);
	writeStringer = $pkg.writeStringer = $newType(8, $kindInterface, "http.writeStringer", true, "github.com/PalmStoneGames/gopherjs-net-http", false, null);
	stringWriter = $pkg.stringWriter = $newType(0, $kindStruct, "http.stringWriter", true, "github.com/PalmStoneGames/gopherjs-net-http", false, function(w_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = $ifaceNil;
			return;
		}
		this.w = w_;
	});
	keyValues = $pkg.keyValues = $newType(0, $kindStruct, "http.keyValues", true, "github.com/PalmStoneGames/gopherjs-net-http", false, function(key_, values_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.key = "";
			this.values = sliceType.nil;
			return;
		}
		this.key = key_;
		this.values = values_;
	});
	headerSorter = $pkg.headerSorter = $newType(0, $kindStruct, "http.headerSorter", true, "github.com/PalmStoneGames/gopherjs-net-http", false, function(kvs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.kvs = sliceType$2.nil;
			return;
		}
		this.kvs = kvs_;
	});
	CookieJar = $pkg.CookieJar = $newType(8, $kindInterface, "http.CookieJar", true, "github.com/PalmStoneGames/gopherjs-net-http", true, null);
	Request = $pkg.Request = $newType(0, $kindStruct, "http.Request", true, "github.com/PalmStoneGames/gopherjs-net-http", true, function(Method_, URL_, Header_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.URL = ptrType$2.nil;
			this.Header = false;
			this.Body = $ifaceNil;
			return;
		}
		this.Method = Method_;
		this.URL = URL_;
		this.Header = Header_;
		this.Body = Body_;
	});
	Response = $pkg.Response = $newType(0, $kindStruct, "http.Response", true, "github.com/PalmStoneGames/gopherjs-net-http", true, function(Status_, StatusCode_, Header_, Body_, ContentLength_, Request_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Status = "";
			this.StatusCode = 0;
			this.Header = false;
			this.Body = $ifaceNil;
			this.ContentLength = new $Int64(0, 0);
			this.Request = ptrType$3.nil;
			return;
		}
		this.Status = Status_;
		this.StatusCode = StatusCode_;
		this.Header = Header_;
		this.Body = Body_;
		this.ContentLength = ContentLength_;
		this.Request = Request_;
	});
	XHRTransport = $pkg.XHRTransport = $newType(0, $kindStruct, "http.XHRTransport", true, "github.com/PalmStoneGames/gopherjs-net-http", true, function(inflight_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.inflight = false;
			return;
		}
		this.inflight = inflight_;
	});
	canceler = $newType(8, $kindInterface, "http.canceler", true, "github.com/PalmStoneGames/gopherjs-net-http", false, null);
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType($emptyInterface);
	sliceType$2 = $sliceType(keyValues);
	ptrType = $ptrType(url.Userinfo);
	ptrType$1 = $ptrType(Response);
	ptrType$2 = $ptrType(url.URL);
	sliceType$3 = $sliceType($Uint8);
	ptrType$3 = $ptrType(Request);
	sliceType$4 = $sliceType(ptrType$3);
	ptrType$4 = $ptrType(time.Timer);
	ptrType$5 = $ptrType($Int32);
	ptrType$6 = $ptrType(Cookie);
	sliceType$5 = $sliceType(ptrType$6);
	ptrType$7 = $ptrType(time.Location);
	arrayType = $arrayType($Uint8, 64);
	ptrType$8 = $ptrType(headerSorter);
	funcType = $funcType([], [], false);
	ptrType$9 = $ptrType(js.Object);
	funcType$1 = $funcType([ptrType$9], [], false);
	funcType$2 = $funcType([$Int], [$Bool], false);
	ptrType$10 = $ptrType(Client);
	funcType$3 = $funcType([ptrType$3, sliceType$4], [$error], false);
	ptrType$11 = $ptrType(cancelTimerBody);
	funcType$4 = $funcType([], [$Bool], false);
	mapType = $mapType($String, $Bool);
	ptrType$12 = $ptrType(XHRTransport);
	mapType$1 = $mapType(ptrType$3, ptrType$9);
	refererForURL = function(lastReq, newReq) {
		var $ptr, auth, lastReq, newReq, referer;
		if (lastReq.Scheme === "https" && newReq.Scheme === "http") {
			return "";
		}
		referer = lastReq.String();
		if (!(lastReq.User === ptrType.nil)) {
			auth = lastReq.User.String() + "@";
			referer = strings.Replace(referer, auth, "", 1);
		}
		return referer;
	};
	Client.ptr.prototype.send = function(req) {
		var $ptr, _i, _r, _r$1, _r$2, _ref, _tuple, c, cookie, err, rc, req, resp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; c = $f.c; cookie = $f.cookie; err = $f.err; rc = $f.rc; req = $f.req; resp = $f.resp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		/* */ if (!($interfaceIsEqual(c.Jar, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(c.Jar, $ifaceNil))) { */ case 1:
			_r = c.Jar.Cookies(req.URL); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_ref = _r;
			_i = 0;
			/* while (true) { */ case 4:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
				cookie = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				$r = req.AddCookie(cookie); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
			/* } */ $s = 4; continue; case 5:
		/* } */ case 2:
		_r$1 = send(req, c.transport()); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		resp = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$1.nil, err];
		}
		/* */ if (!($interfaceIsEqual(c.Jar, $ifaceNil))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!($interfaceIsEqual(c.Jar, $ifaceNil))) { */ case 8:
			_r$2 = resp.Cookies(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			rc = _r$2;
			/* */ if (rc.$length > 0) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (rc.$length > 0) { */ case 11:
				$r = c.Jar.SetCookies(req.URL, rc); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
		/* } */ case 9:
		$s = -1; return [resp, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Client.ptr.prototype.send }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f.c = c; $f.cookie = cookie; $f.err = err; $f.rc = rc; $f.req = req; $f.resp = resp; $f.$s = $s; $f.$r = $r; return $f;
	};
	Client.prototype.send = function(req) { return this.$val.send(req); };
	Client.ptr.prototype.Do = function(req) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, c, err, req, resp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; c = $f.c; err = $f.err; req = $f.req; resp = $f.resp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		resp = ptrType$1.nil;
		err = $ifaceNil;
		c = this;
		/* */ if (req.Method === "GET" || req.Method === "HEAD") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (req.Method === "GET" || req.Method === "HEAD") { */ case 1:
			_r = c.doFollowingRedirects(req, shouldRedirectGet); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			resp = _tuple[0];
			err = _tuple[1];
			$s = -1; return [resp, err];
		/* } */ case 2:
		/* */ if (req.Method === "POST" || req.Method === "PUT") { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (req.Method === "POST" || req.Method === "PUT") { */ case 4:
			_r$1 = c.doFollowingRedirects(req, shouldRedirectPost); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			resp = _tuple$1[0];
			err = _tuple$1[1];
			$s = -1; return [resp, err];
		/* } */ case 5:
		_r$2 = c.send(req); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		resp = _tuple$2[0];
		err = _tuple$2[1];
		$s = -1; return [resp, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Client.ptr.prototype.Do }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.c = c; $f.err = err; $f.req = req; $f.resp = resp; $f.$s = $s; $f.$r = $r; return $f;
	};
	Client.prototype.Do = function(req) { return this.$val.Do(req); };
	Client.ptr.prototype.transport = function() {
		var $ptr, c;
		c = this;
		if (!($interfaceIsEqual(c.Transport, $ifaceNil))) {
			return c.Transport;
		}
		return $pkg.DefaultTransport;
	};
	Client.prototype.transport = function() { return this.$val.transport(); };
	send = function(req, t) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, err, password, req, resp, t, u, username, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; password = $f.password; req = $f.req; resp = $f.resp; t = $f.t; u = $f.u; username = $f.username; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		resp = ptrType$1.nil;
		err = $ifaceNil;
		/* */ if ($interfaceIsEqual(t, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(t, $ifaceNil)) { */ case 1:
			$r = req.closeBody(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tmp = ptrType$1.nil;
			_tmp$1 = errors.New("http: no Client.Transport or DefaultTransport");
			resp = _tmp;
			err = _tmp$1;
			$s = -1; return [resp, err];
		/* } */ case 2:
		/* */ if (req.URL === ptrType$2.nil) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (req.URL === ptrType$2.nil) { */ case 4:
			$r = req.closeBody(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tmp$2 = ptrType$1.nil;
			_tmp$3 = errors.New("http: nil Request.URL");
			resp = _tmp$2;
			err = _tmp$3;
			$s = -1; return [resp, err];
		/* } */ case 5:
		if (req.Header === false) {
			req.Header = {};
		}
		u = req.URL.User;
		if (!(u === ptrType.nil) && new Header(req.Header).Get("Authorization") === "") {
			username = u.Username();
			_tuple = u.Password();
			password = _tuple[0];
			new Header(req.Header).Set("Authorization", "Basic " + basicAuth(username, password));
		}
		_r = t.RoundTrip(req); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		resp = _tuple$1[0];
		err = _tuple$1[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 8:
			/* */ if (!(resp === ptrType$1.nil)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!(resp === ptrType$1.nil)) { */ case 10:
				$r = log.Printf("RoundTripper returned a response & error; ignoring response", new sliceType$1([])); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
			_tmp$4 = ptrType$1.nil;
			_tmp$5 = err;
			resp = _tmp$4;
			err = _tmp$5;
			$s = -1; return [resp, err];
		/* } */ case 9:
		_tmp$6 = resp;
		_tmp$7 = $ifaceNil;
		resp = _tmp$6;
		err = _tmp$7;
		$s = -1; return [resp, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: send }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.password = password; $f.req = req; $f.resp = resp; $f.t = t; $f.u = u; $f.username = username; $f.$s = $s; $f.$r = $r; return $f;
	};
	basicAuth = function(username, password) {
		var $ptr, auth, password, username;
		auth = username + ":" + password;
		return base64.StdEncoding.EncodeToString(new sliceType$3($stringToBytes(auth)));
	};
	shouldRedirectGet = function(statusCode) {
		var $ptr, _1, statusCode;
		_1 = statusCode;
		if ((_1 === (301)) || (_1 === (302)) || (_1 === (303)) || (_1 === (307))) {
			return true;
		}
		return false;
	};
	shouldRedirectPost = function(statusCode) {
		var $ptr, _1, statusCode;
		_1 = statusCode;
		if ((_1 === (302)) || (_1 === (303))) {
			return true;
		}
		return false;
	};
	Client.ptr.prototype.Get = function(url$1) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tuple, _tuple$1, c, err, req, resp, url$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; err = $f.err; req = $f.req; resp = $f.resp; url$1 = $f.url$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		resp = ptrType$1.nil;
		err = $ifaceNil;
		c = this;
		_r = NewRequest("GET", url$1, $ifaceNil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		req = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ptrType$1.nil;
			_tmp$1 = err;
			resp = _tmp;
			err = _tmp$1;
			$s = -1; return [resp, err];
		}
		_r$1 = c.doFollowingRedirects(req, shouldRedirectGet); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		resp = _tuple$1[0];
		err = _tuple$1[1];
		$s = -1; return [resp, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Client.ptr.prototype.Get }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.err = err; $f.req = req; $f.resp = resp; $f.url$1 = url$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Client.prototype.Get = function(url$1) { return this.$val.Get(url$1); };
	alwaysFalse = function() {
		var $ptr;
		return false;
	};
	Client.ptr.prototype.doFollowingRedirects = function(ireq, shouldRedirect) {
		var $ptr, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, atomicWasCanceled, base, c, err, ireq, lastReq, method, nreq, ok, redirect, redirectChecker, redirectFailed, ref, req, reqmu, resp, shouldRedirect, timer, tr, urlErr, urlStr, via, wasCanceled, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; atomicWasCanceled = $f.atomicWasCanceled; base = $f.base; c = $f.c; err = $f.err; ireq = $f.ireq; lastReq = $f.lastReq; method = $f.method; nreq = $f.nreq; ok = $f.ok; redirect = $f.redirect; redirectChecker = $f.redirectChecker; redirectFailed = $f.redirectFailed; ref = $f.ref; req = $f.req; reqmu = $f.reqmu; resp = $f.resp; shouldRedirect = $f.shouldRedirect; timer = $f.timer; tr = $f.tr; urlErr = $f.urlErr; urlStr = $f.urlStr; via = $f.via; wasCanceled = $f.wasCanceled; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		atomicWasCanceled = [atomicWasCanceled];
		req = [req];
		reqmu = [reqmu];
		tr = [tr];
		resp = ptrType$1.nil;
		err = $ifaceNil;
		c = this;
		base = ptrType$2.nil;
		redirectChecker = c.CheckRedirect;
		if (redirectChecker === $throwNilPointerError) {
			redirectChecker = defaultCheckRedirect;
		}
		via = sliceType$4.nil;
		/* */ if (ireq.URL === ptrType$2.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ireq.URL === ptrType$2.nil) { */ case 1:
			$r = ireq.closeBody(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tmp = ptrType$1.nil;
			_tmp$1 = errors.New("http: nil Request.URL");
			resp = _tmp;
			err = _tmp$1;
			$s = -1; return [resp, err];
		/* } */ case 2:
		reqmu[0] = new sync.Mutex.ptr(0, 0);
		req[0] = ireq;
		timer = ptrType$4.nil;
		atomicWasCanceled[0] = 0;
		wasCanceled = alwaysFalse;
		/* */ if ((x = c.Timeout, (x.$high > 0 || (x.$high === 0 && x.$low > 0)))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((x = c.Timeout, (x.$high > 0 || (x.$high === 0 && x.$low > 0)))) { */ case 4:
			wasCanceled = (function(atomicWasCanceled, req, reqmu, tr) { return function() {
				var $ptr;
				return !((atomic.LoadInt32((atomicWasCanceled.$ptr || (atomicWasCanceled.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, atomicWasCanceled)))) === 0));
			}; })(atomicWasCanceled, req, reqmu, tr);
			_tuple = $assertType(c.transport(), canceler, true);
			tr[0] = _tuple[0];
			ok = _tuple[1];
			/* */ if (!ok) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!ok) { */ case 6:
				_tmp$2 = ptrType$1.nil;
				_r = fmt.Errorf("code.palmstonegames.com/gopherjs-net-http: Client Transport of type %T doesn't support CancelRequest; Timeout not supported", new sliceType$1([c.transport()])); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tmp$3 = _r;
				resp = _tmp$2;
				err = _tmp$3;
				$s = -1; return [resp, err];
			/* } */ case 7:
			timer = time.AfterFunc(c.Timeout, (function(atomicWasCanceled, req, reqmu, tr) { return function $b() {
				var $ptr, $s, $deferred, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
				atomic.StoreInt32((atomicWasCanceled.$ptr || (atomicWasCanceled.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, atomicWasCanceled))), 1);
				$r = reqmu[0].Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$deferred.push([$methodVal(reqmu[0], "Unlock"), []]);
				$r = tr[0].CancelRequest(req[0]); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
			}; })(atomicWasCanceled, req, reqmu, tr));
		/* } */ case 5:
		urlStr = "";
		redirectFailed = false;
		redirect = 0;
		/* while (true) { */ case 9:
			/* */ if (!((redirect === 0))) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (!((redirect === 0))) { */ case 11:
				nreq = new Request.ptr("", ptrType$2.nil, false, $ifaceNil);
				nreq.Method = ireq.Method;
				if (ireq.Method === "POST" || ireq.Method === "PUT") {
					nreq.Method = "GET";
				}
				nreq.Header = {};
				_r$1 = base.Parse(urlStr); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1;
				nreq.URL = _tuple$1[0];
				err = _tuple$1[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					/* break; */ $s = 10; continue;
				}
				/* */ if (via.$length > 0) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (via.$length > 0) { */ case 14:
					lastReq = (x$1 = via.$length - 1 >> 0, ((x$1 < 0 || x$1 >= via.$length) ? ($throwRuntimeError("index out of range"), undefined) : via.$array[via.$offset + x$1]));
					ref = refererForURL(lastReq.URL, nreq.URL);
					if (!(ref === "")) {
						new Header(nreq.Header).Set("Referer", ref);
					}
					_r$2 = redirectChecker(nreq, via); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					err = _r$2;
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						redirectFailed = true;
						/* break; */ $s = 10; continue;
					}
				/* } */ case 15:
				$r = reqmu[0].Lock(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				req[0] = nreq;
				$r = reqmu[0].Unlock(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
			urlStr = req[0].URL.String();
			_r$3 = c.send(req[0]); /* */ $s = 19; case 19: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$2 = _r$3;
			resp = _tuple$2[0];
			err = _tuple$2[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 20:
				_r$4 = wasCanceled(); /* */ $s = 24; case 24: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ if (_r$4) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (_r$4) { */ case 22:
					_r$5 = err.Error(); /* */ $s = 25; case 25: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$6 = errors.New(_r$5 + " (Client.Timeout exceeded while awaiting headers)"); /* */ $s = 26; case 26: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					err = _r$6;
				/* } */ case 23:
				/* break; */ $s = 10; continue;
			/* } */ case 21:
			_r$7 = shouldRedirect(resp.StatusCode); /* */ $s = 29; case 29: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if (_r$7) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if (_r$7) { */ case 27:
				/* */ if ((x$2 = resp.ContentLength, (x$2.$high === -1 && x$2.$low === 4294967295)) || (x$3 = resp.ContentLength, (x$3.$high < 0 || (x$3.$high === 0 && x$3.$low <= 2048)))) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if ((x$2 = resp.ContentLength, (x$2.$high === -1 && x$2.$low === 4294967295)) || (x$3 = resp.ContentLength, (x$3.$high < 0 || (x$3.$high === 0 && x$3.$low <= 2048)))) { */ case 30:
					_r$8 = io.CopyN(ioutil.Discard, resp.Body, new $Int64(0, 2048)); /* */ $s = 32; case 32: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$8;
				/* } */ case 31:
				_r$9 = resp.Body.Close(); /* */ $s = 33; case 33: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$9;
				urlStr = new Header(resp.Header).Get("Location");
				/* */ if (urlStr === "") { $s = 34; continue; }
				/* */ $s = 35; continue;
				/* if (urlStr === "") { */ case 34:
					_r$10 = fmt.Errorf("%d response missing Location header", new sliceType$1([new $Int(resp.StatusCode)])); /* */ $s = 36; case 36: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					err = _r$10;
					/* break; */ $s = 10; continue;
				/* } */ case 35:
				base = req[0].URL;
				via = $append(via, req[0]);
				redirect = redirect + (1) >> 0;
				/* continue; */ $s = 9; continue;
			/* } */ case 28:
			if (!(timer === ptrType$4.nil)) {
				resp.Body = new cancelTimerBody.ptr(timer, resp.Body, wasCanceled);
			}
			_tmp$4 = resp;
			_tmp$5 = $ifaceNil;
			resp = _tmp$4;
			err = _tmp$5;
			$s = -1; return [resp, err];
		/* } */ $s = 9; continue; case 10:
		method = ireq.Method;
		_r$11 = strings.ToLower($substring(method, 1)); /* */ $s = 37; case 37: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		urlErr = new url.Error.ptr($substring(method, 0, 1) + _r$11, urlStr, err);
		if (redirectFailed) {
			_tmp$6 = resp;
			_tmp$7 = urlErr;
			resp = _tmp$6;
			err = _tmp$7;
			$s = -1; return [resp, err];
		}
		/* */ if (!(resp === ptrType$1.nil)) { $s = 38; continue; }
		/* */ $s = 39; continue;
		/* if (!(resp === ptrType$1.nil)) { */ case 38:
			_r$12 = resp.Body.Close(); /* */ $s = 40; case 40: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_r$12;
		/* } */ case 39:
		_tmp$8 = ptrType$1.nil;
		_tmp$9 = urlErr;
		resp = _tmp$8;
		err = _tmp$9;
		$s = -1; return [resp, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Client.ptr.prototype.doFollowingRedirects }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.atomicWasCanceled = atomicWasCanceled; $f.base = base; $f.c = c; $f.err = err; $f.ireq = ireq; $f.lastReq = lastReq; $f.method = method; $f.nreq = nreq; $f.ok = ok; $f.redirect = redirect; $f.redirectChecker = redirectChecker; $f.redirectFailed = redirectFailed; $f.ref = ref; $f.req = req; $f.reqmu = reqmu; $f.resp = resp; $f.shouldRedirect = shouldRedirect; $f.timer = timer; $f.tr = tr; $f.urlErr = urlErr; $f.urlStr = urlStr; $f.via = via; $f.wasCanceled = wasCanceled; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Client.prototype.doFollowingRedirects = function(ireq, shouldRedirect) { return this.$val.doFollowingRedirects(ireq, shouldRedirect); };
	defaultCheckRedirect = function(req, via) {
		var $ptr, req, via;
		if (via.$length >= 10) {
			return errors.New("stopped after 10 redirects");
		}
		return $ifaceNil;
	};
	Client.ptr.prototype.Post = function(url$1, bodyType, body) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tuple, _tuple$1, body, bodyType, c, err, req, resp, url$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; body = $f.body; bodyType = $f.bodyType; c = $f.c; err = $f.err; req = $f.req; resp = $f.resp; url$1 = $f.url$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		resp = ptrType$1.nil;
		err = $ifaceNil;
		c = this;
		_r = NewRequest("POST", url$1, body); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		req = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ptrType$1.nil;
			_tmp$1 = err;
			resp = _tmp;
			err = _tmp$1;
			$s = -1; return [resp, err];
		}
		new Header(req.Header).Set("Content-Type", bodyType);
		_r$1 = c.doFollowingRedirects(req, shouldRedirectPost); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		resp = _tuple$1[0];
		err = _tuple$1[1];
		$s = -1; return [resp, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Client.ptr.prototype.Post }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.body = body; $f.bodyType = bodyType; $f.c = c; $f.err = err; $f.req = req; $f.resp = resp; $f.url$1 = url$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Client.prototype.Post = function(url$1, bodyType, body) { return this.$val.Post(url$1, bodyType, body); };
	Client.ptr.prototype.PostForm = function(url$1, data) {
		var $ptr, _arg, _arg$1, _r, _r$1, _r$2, _tuple, c, data, err, resp, url$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; c = $f.c; data = $f.data; err = $f.err; resp = $f.resp; url$1 = $f.url$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		resp = ptrType$1.nil;
		err = $ifaceNil;
		c = this;
		_arg = url$1;
		_r = new url.Values(data).Encode(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = strings.NewReader(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$1 = _r$1;
		_r$2 = c.Post(_arg, "application/x-www-form-urlencoded", _arg$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		resp = _tuple[0];
		err = _tuple[1];
		$s = -1; return [resp, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Client.ptr.prototype.PostForm }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.c = c; $f.data = data; $f.err = err; $f.resp = resp; $f.url$1 = url$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Client.prototype.PostForm = function(url$1, data) { return this.$val.PostForm(url$1, data); };
	Client.ptr.prototype.Head = function(url$1) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tuple, _tuple$1, c, err, req, resp, url$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; err = $f.err; req = $f.req; resp = $f.resp; url$1 = $f.url$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		resp = ptrType$1.nil;
		err = $ifaceNil;
		c = this;
		_r = NewRequest("HEAD", url$1, $ifaceNil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		req = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ptrType$1.nil;
			_tmp$1 = err;
			resp = _tmp;
			err = _tmp$1;
			$s = -1; return [resp, err];
		}
		_r$1 = c.doFollowingRedirects(req, shouldRedirectGet); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		resp = _tuple$1[0];
		err = _tuple$1[1];
		$s = -1; return [resp, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Client.ptr.prototype.Head }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.err = err; $f.req = req; $f.resp = resp; $f.url$1 = url$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Client.prototype.Head = function(url$1) { return this.$val.Head(url$1); };
	cancelTimerBody.ptr.prototype.Read = function(p) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, _v, b, err, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _v = $f._v; b = $f.b; err = $f.err; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		b = this;
		_r = b.rc.Read(p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		/* */ if ($interfaceIsEqual(err, io.EOF)) { $s = 2; continue; }
		if (!(!($interfaceIsEqual(err, $ifaceNil)))) { _v = false; $s = 5; continue s; }
		_r$1 = b.reqWasCanceled(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = _r$1; case 5:
		/* */ if (_v) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($interfaceIsEqual(err, io.EOF)) { */ case 2:
			b.t.Stop();
			$s = 4; continue;
		/* } else if (_v) { */ case 3:
			_tmp = n;
			_r$2 = err.Error(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = errors.New(_r$2 + " (Client.Timeout exceeded while reading body)"); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tmp$1 = _r$3;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		/* } */ case 4:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: cancelTimerBody.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._v = _v; $f.b = b; $f.err = err; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	cancelTimerBody.prototype.Read = function(p) { return this.$val.Read(p); };
	cancelTimerBody.ptr.prototype.Close = function() {
		var $ptr, _r, b, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = b.rc.Close(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		b.t.Stop();
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cancelTimerBody.ptr.prototype.Close }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	cancelTimerBody.prototype.Close = function() { return this.$val.Close(); };
	readSetCookies = function(h) {
		var $ptr, _1, _entry, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, attr, c, cookies, err, err$1, exptime, h, i, j, j$1, line, lowerAttr, name, parts, secs, success, val, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _entry = $f._entry; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; attr = $f.attr; c = $f.c; cookies = $f.cookies; err = $f.err; err$1 = $f.err$1; exptime = $f.exptime; h = $f.h; i = $f.i; j = $f.j; j$1 = $f.j$1; line = $f.line; lowerAttr = $f.lowerAttr; name = $f.name; parts = $f.parts; secs = $f.secs; success = $f.success; val = $f.val; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cookies = new sliceType$5([]);
		_ref = (_entry = h[$String.keyFor("Set-Cookie")], _entry !== undefined ? _entry.v : sliceType.nil);
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			line = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = strings.TrimSpace(line); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = strings.Split(_r, ";"); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			parts = _r$1;
			/* */ if ((parts.$length === 1) && (0 >= parts.$length ? ($throwRuntimeError("index out of range"), undefined) : parts.$array[parts.$offset + 0]) === "") { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ((parts.$length === 1) && (0 >= parts.$length ? ($throwRuntimeError("index out of range"), undefined) : parts.$array[parts.$offset + 0]) === "") { */ case 5:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 6:
			_r$2 = strings.TrimSpace((0 >= parts.$length ? ($throwRuntimeError("index out of range"), undefined) : parts.$array[parts.$offset + 0])); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			(0 >= parts.$length ? ($throwRuntimeError("index out of range"), undefined) : parts.$array[parts.$offset + 0] = _r$2);
			j = strings.Index((0 >= parts.$length ? ($throwRuntimeError("index out of range"), undefined) : parts.$array[parts.$offset + 0]), "=");
			/* */ if (j < 0) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (j < 0) { */ case 8:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 9:
			_tmp = $substring((0 >= parts.$length ? ($throwRuntimeError("index out of range"), undefined) : parts.$array[parts.$offset + 0]), 0, j);
			_tmp$1 = $substring((0 >= parts.$length ? ($throwRuntimeError("index out of range"), undefined) : parts.$array[parts.$offset + 0]), (j + 1 >> 0));
			name = _tmp;
			value = _tmp$1;
			_r$3 = isCookieNameValid(name); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!_r$3) { */ case 10:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 11:
			_tuple = parseCookieValue(value, true);
			value = _tuple[0];
			success = _tuple[1];
			/* */ if (!success) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (!success) { */ case 13:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 14:
			c = new Cookie.ptr(name, value, "", "", new time.Time.ptr(new $Int64(0, 0), 0, ptrType$7.nil), "", 0, false, false, line, sliceType.nil);
			i = 1;
			/* while (true) { */ case 15:
				/* if (!(i < parts.$length)) { break; } */ if(!(i < parts.$length)) { $s = 16; continue; }
				_r$4 = strings.TrimSpace(((i < 0 || i >= parts.$length) ? ($throwRuntimeError("index out of range"), undefined) : parts.$array[parts.$offset + i])); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				((i < 0 || i >= parts.$length) ? ($throwRuntimeError("index out of range"), undefined) : parts.$array[parts.$offset + i] = _r$4);
				/* */ if (((i < 0 || i >= parts.$length) ? ($throwRuntimeError("index out of range"), undefined) : parts.$array[parts.$offset + i]).length === 0) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (((i < 0 || i >= parts.$length) ? ($throwRuntimeError("index out of range"), undefined) : parts.$array[parts.$offset + i]).length === 0) { */ case 18:
					i = i + (1) >> 0;
					/* continue; */ $s = 15; continue;
				/* } */ case 19:
				_tmp$2 = ((i < 0 || i >= parts.$length) ? ($throwRuntimeError("index out of range"), undefined) : parts.$array[parts.$offset + i]);
				_tmp$3 = "";
				attr = _tmp$2;
				val = _tmp$3;
				j$1 = strings.Index(attr, "=");
				if (j$1 >= 0) {
					_tmp$4 = $substring(attr, 0, j$1);
					_tmp$5 = $substring(attr, (j$1 + 1 >> 0));
					attr = _tmp$4;
					val = _tmp$5;
				}
				_r$5 = strings.ToLower(attr); /* */ $s = 20; case 20: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				lowerAttr = _r$5;
				_tuple$1 = parseCookieValue(val, false);
				val = _tuple$1[0];
				success = _tuple$1[1];
				/* */ if (!success) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (!success) { */ case 21:
					c.Unparsed = $append(c.Unparsed, ((i < 0 || i >= parts.$length) ? ($throwRuntimeError("index out of range"), undefined) : parts.$array[parts.$offset + i]));
					i = i + (1) >> 0;
					/* continue; */ $s = 15; continue;
				/* } */ case 22:
					_1 = lowerAttr;
					/* */ if (_1 === ("secure")) { $s = 24; continue; }
					/* */ if (_1 === ("httponly")) { $s = 25; continue; }
					/* */ if (_1 === ("domain")) { $s = 26; continue; }
					/* */ if (_1 === ("max-age")) { $s = 27; continue; }
					/* */ if (_1 === ("expires")) { $s = 28; continue; }
					/* */ if (_1 === ("path")) { $s = 29; continue; }
					/* */ $s = 30; continue;
					/* if (_1 === ("secure")) { */ case 24:
						c.Secure = true;
						i = i + (1) >> 0;
						/* continue; */ $s = 15; continue;
						$s = 30; continue;
					/* } else if (_1 === ("httponly")) { */ case 25:
						c.HttpOnly = true;
						i = i + (1) >> 0;
						/* continue; */ $s = 15; continue;
						$s = 30; continue;
					/* } else if (_1 === ("domain")) { */ case 26:
						c.Domain = val;
						i = i + (1) >> 0;
						/* continue; */ $s = 15; continue;
						$s = 30; continue;
					/* } else if (_1 === ("max-age")) { */ case 27:
						_tuple$2 = strconv.Atoi(val);
						secs = _tuple$2[0];
						err = _tuple$2[1];
						if (!($interfaceIsEqual(err, $ifaceNil)) || !((secs === 0)) && (val.charCodeAt(0) === 48)) {
							/* break; */ $s = 23; continue;
						}
						if (secs <= 0) {
							c.MaxAge = -1;
						} else {
							c.MaxAge = secs;
						}
						i = i + (1) >> 0;
						/* continue; */ $s = 15; continue;
						$s = 30; continue;
					/* } else if (_1 === ("expires")) { */ case 28:
						c.RawExpires = val;
						_r$6 = time.Parse("Mon, 02 Jan 2006 15:04:05 MST", val); /* */ $s = 31; case 31: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_tuple$3 = _r$6;
						exptime = $clone(_tuple$3[0], time.Time);
						err$1 = _tuple$3[1];
						/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 32; continue; }
						/* */ $s = 33; continue;
						/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 32:
							_r$7 = time.Parse("Mon, 02-Jan-2006 15:04:05 MST", val); /* */ $s = 34; case 34: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
							_tuple$4 = _r$7;
							time.Time.copy(exptime, _tuple$4[0]);
							err$1 = _tuple$4[1];
							if (!($interfaceIsEqual(err$1, $ifaceNil))) {
								time.Time.copy(c.Expires, new time.Time.ptr(new $Int64(0, 0), 0, ptrType$7.nil));
								/* break; */ $s = 23; continue;
							}
						/* } */ case 33:
						time.Time.copy(c.Expires, $clone(exptime, time.Time).UTC());
						i = i + (1) >> 0;
						/* continue; */ $s = 15; continue;
						$s = 30; continue;
					/* } else if (_1 === ("path")) { */ case 29:
						c.Path = val;
						i = i + (1) >> 0;
						/* continue; */ $s = 15; continue;
					/* } */ case 30:
				case 23:
				c.Unparsed = $append(c.Unparsed, ((i < 0 || i >= parts.$length) ? ($throwRuntimeError("index out of range"), undefined) : parts.$array[parts.$offset + i]));
				i = i + (1) >> 0;
			/* } */ $s = 15; continue; case 16:
			cookies = $append(cookies, c);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return cookies;
		/* */ } return; } if ($f === undefined) { $f = { $blk: readSetCookies }; } $f.$ptr = $ptr; $f._1 = _1; $f._entry = _entry; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.attr = attr; $f.c = c; $f.cookies = cookies; $f.err = err; $f.err$1 = err$1; $f.exptime = exptime; $f.h = h; $f.i = i; $f.j = j; $f.j$1 = j$1; $f.line = line; $f.lowerAttr = lowerAttr; $f.name = name; $f.parts = parts; $f.secs = secs; $f.success = success; $f.val = val; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Cookie.ptr.prototype.String = function() {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, b, c, d, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _v = $f._v; b = $f.b; c = $f.c; d = $f.d; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = [b];
		c = this;
		if (c === ptrType$6.nil) { _v = true; $s = 3; continue s; }
		_r = isCookieNameValid(c.Name); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = !_r; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return "";
		/* } */ case 2:
		b[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), 0);
		_arg = b[0];
		_r$1 = sanitizeCookieName(c.Name); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$1 = new $String(_r$1);
		_r$2 = sanitizeCookieValue(c.Value); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$2 = new $String(_r$2);
		_r$3 = fmt.Fprintf(_arg, "%s=%s", new sliceType$1([_arg$1, _arg$2])); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		/* */ if (c.Path.length > 0) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (c.Path.length > 0) { */ case 8:
			_arg$3 = b[0];
			_r$4 = sanitizeCookiePath(c.Path); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_arg$4 = new $String(_r$4);
			_r$5 = fmt.Fprintf(_arg$3, "; Path=%s", new sliceType$1([_arg$4])); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 9:
		/* */ if (c.Domain.length > 0) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (c.Domain.length > 0) { */ case 12:
			/* */ if (validCookieDomain(c.Domain)) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (validCookieDomain(c.Domain)) { */ case 14:
				d = c.Domain;
				if (d.charCodeAt(0) === 46) {
					d = $substring(d, 1);
				}
				_r$6 = fmt.Fprintf(b[0], "; Domain=%s", new sliceType$1([new $String(d)])); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				$s = 16; continue;
			/* } else { */ case 15:
				_r$7 = fmt.Printf("code.palmstonegames.com/gopherjs-net-http: invalid Cookie.Domain %q; dropping domain attribute", new sliceType$1([new $String(c.Domain)])); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
			/* } */ case 16:
		/* } */ case 13:
		/* */ if ((x = $clone(c.Expires, time.Time).Unix(), (x.$high > 0 || (x.$high === 0 && x.$low > 0)))) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if ((x = $clone(c.Expires, time.Time).Unix(), (x.$high > 0 || (x.$high === 0 && x.$low > 0)))) { */ case 19:
			_arg$5 = b[0];
			_r$8 = $clone($clone(c.Expires, time.Time).UTC(), time.Time).Format("Mon, 02 Jan 2006 15:04:05 GMT"); /* */ $s = 21; case 21: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_arg$6 = new $String(_r$8);
			_r$9 = fmt.Fprintf(_arg$5, "; Expires=%s", new sliceType$1([_arg$6])); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
		/* } */ case 20:
		/* */ if (c.MaxAge > 0) { $s = 23; continue; }
		/* */ if (c.MaxAge < 0) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (c.MaxAge > 0) { */ case 23:
			_r$10 = fmt.Fprintf(b[0], "; Max-Age=%d", new sliceType$1([new $Int(c.MaxAge)])); /* */ $s = 26; case 26: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$10;
			$s = 25; continue;
		/* } else if (c.MaxAge < 0) { */ case 24:
			_r$11 = fmt.Fprintf(b[0], "; Max-Age=0", new sliceType$1([])); /* */ $s = 27; case 27: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$11;
		/* } */ case 25:
		/* */ if (c.HttpOnly) { $s = 28; continue; }
		/* */ $s = 29; continue;
		/* if (c.HttpOnly) { */ case 28:
			_r$12 = fmt.Fprintf(b[0], "; HttpOnly", new sliceType$1([])); /* */ $s = 30; case 30: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_r$12;
		/* } */ case 29:
		/* */ if (c.Secure) { $s = 31; continue; }
		/* */ $s = 32; continue;
		/* if (c.Secure) { */ case 31:
			_r$13 = fmt.Fprintf(b[0], "; Secure", new sliceType$1([])); /* */ $s = 33; case 33: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$13;
		/* } */ case 32:
		$s = -1; return b[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Cookie.ptr.prototype.String }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._v = _v; $f.b = b; $f.c = c; $f.d = d; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Cookie.prototype.String = function() { return this.$val.String(); };
	validCookieDomain = function(v) {
		var $ptr, v;
		if (isCookieDomainName(v)) {
			return true;
		}
		if (!(net.ParseIP(v) === net.IP.nil) && !strings.Contains(v, ":")) {
			return true;
		}
		return false;
	};
	isCookieDomainName = function(s) {
		var $ptr, c, i, last, ok, partlen, s;
		if (s.length === 0) {
			return false;
		}
		if (s.length > 255) {
			return false;
		}
		if (s.charCodeAt(0) === 46) {
			s = $substring(s, 1);
		}
		last = 46;
		ok = false;
		partlen = 0;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (97 <= c && c <= 122 || 65 <= c && c <= 90) {
				ok = true;
				partlen = partlen + (1) >> 0;
			} else if (48 <= c && c <= 57) {
				partlen = partlen + (1) >> 0;
			} else if ((c === 45)) {
				if (last === 46) {
					return false;
				}
				partlen = partlen + (1) >> 0;
			} else if ((c === 46)) {
				if ((last === 46) || (last === 45)) {
					return false;
				}
				if (partlen > 63 || (partlen === 0)) {
					return false;
				}
				partlen = 0;
			} else {
				return false;
			}
			last = c;
			i = i + (1) >> 0;
		}
		if ((last === 45) || partlen > 63) {
			return false;
		}
		return ok;
	};
	sanitizeCookieName = function(n) {
		var $ptr, _r, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = cookieNameSanitizer.Replace(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: sanitizeCookieName }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	sanitizeCookieValue = function(v) {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = sanitizeOrWarn("Cookie.Value", validCookieValueByte, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		v = _r;
		if (v.length === 0) {
			$s = -1; return v;
		}
		if ((v.charCodeAt(0) === 32) || (v.charCodeAt(0) === 44) || (v.charCodeAt((v.length - 1 >> 0)) === 32) || (v.charCodeAt((v.length - 1 >> 0)) === 44)) {
			$s = -1; return "\"" + v + "\"";
		}
		$s = -1; return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: sanitizeCookieValue }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	validCookieValueByte = function(b) {
		var $ptr, b;
		return 32 <= b && b < 127 && !((b === 34)) && !((b === 59)) && !((b === 92));
	};
	sanitizeCookiePath = function(v) {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = sanitizeOrWarn("Cookie.Path", validCookiePathByte, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: sanitizeCookiePath }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	validCookiePathByte = function(b) {
		var $ptr, b;
		return 32 <= b && b < 127 && !((b === 59));
	};
	sanitizeOrWarn = function(fieldName, valid, v) {
		var $ptr, _r, _r$1, _r$2, b, buf, fieldName, i, i$1, ok, v, valid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; b = $f.b; buf = $f.buf; fieldName = $f.fieldName; i = $f.i; i$1 = $f.i$1; ok = $f.ok; v = $f.v; valid = $f.valid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ok = true;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < v.length)) { break; } */ if(!(i < v.length)) { $s = 2; continue; }
			_r = valid(v.charCodeAt(i)); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r) { */ case 3:
				i = i + (1) >> 0;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_r$1 = fmt.Printf("code.palmstonegames.com/gopherjs-net-http: invalid byte %q in %s; dropping invalid bytes", new sliceType$1([new $Uint8(v.charCodeAt(i)), new $String(fieldName)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			ok = false;
			/* break; */ $s = 2; continue;
		/* } */ $s = 1; continue; case 2:
		if (ok) {
			$s = -1; return v;
		}
		buf = $makeSlice(sliceType$3, 0, v.length);
		i$1 = 0;
		/* while (true) { */ case 7:
			/* if (!(i$1 < v.length)) { break; } */ if(!(i$1 < v.length)) { $s = 8; continue; }
			b = v.charCodeAt(i$1);
			_r$2 = valid(b); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r$2) { */ case 9:
				buf = $append(buf, b);
			/* } */ case 10:
			i$1 = i$1 + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		$s = -1; return $bytesToString(buf);
		/* */ } return; } if ($f === undefined) { $f = { $blk: sanitizeOrWarn }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.b = b; $f.buf = buf; $f.fieldName = fieldName; $f.i = i; $f.i$1 = i$1; $f.ok = ok; $f.v = v; $f.valid = valid; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseCookieValue = function(raw, allowDoubleQuote) {
		var $ptr, allowDoubleQuote, i, raw;
		if (allowDoubleQuote && raw.length > 1 && (raw.charCodeAt(0) === 34) && (raw.charCodeAt((raw.length - 1 >> 0)) === 34)) {
			raw = $substring(raw, 1, (raw.length - 1 >> 0));
		}
		i = 0;
		while (true) {
			if (!(i < raw.length)) { break; }
			if (!validCookieValueByte(raw.charCodeAt(i))) {
				return ["", false];
			}
			i = i + (1) >> 0;
		}
		return [raw, true];
	};
	isCookieNameValid = function(raw) {
		var $ptr, _r, raw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; raw = $f.raw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (raw === "") {
			$s = -1; return false;
		}
		_r = strings.IndexFunc(raw, isNotToken); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r < 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: isCookieNameValid }; } $f.$ptr = $ptr; $f._r = _r; $f.raw = raw; $f.$s = $s; $f.$r = $r; return $f;
	};
	Header.prototype.Add = function(key, value) {
		var $ptr, h, key, value;
		h = this.$val;
		new textproto.MIMEHeader(h).Add(key, value);
	};
	$ptrType(Header).prototype.Add = function(key, value) { return new Header(this.$get()).Add(key, value); };
	Header.prototype.Set = function(key, value) {
		var $ptr, h, key, value;
		h = this.$val;
		new textproto.MIMEHeader(h).Set(key, value);
	};
	$ptrType(Header).prototype.Set = function(key, value) { return new Header(this.$get()).Set(key, value); };
	Header.prototype.Get = function(key) {
		var $ptr, h, key;
		h = this.$val;
		return new textproto.MIMEHeader(h).Get(key);
	};
	$ptrType(Header).prototype.Get = function(key) { return new Header(this.$get()).Get(key); };
	Header.prototype.Del = function(key) {
		var $ptr, h, key;
		h = this.$val;
		new textproto.MIMEHeader(h).Del(key);
	};
	$ptrType(Header).prototype.Del = function(key) { return new Header(this.$get()).Del(key); };
	Header.prototype.Write = function(w) {
		var $ptr, _r, h, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; h = $f.h; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this.$val;
		_r = new Header(h).WriteSubset(w, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Header.prototype.Write }; } $f.$ptr = $ptr; $f._r = _r; $f.h = h; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Header).prototype.Write = function(w) { return new Header(this.$get()).Write(w); };
	stringWriter.ptr.prototype.WriteString = function(s) {
		var $ptr, _r, _tuple, err, n, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; n = $f.n; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		w = this;
		_r = w.w.Write(new sliceType$3($stringToBytes(s))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: stringWriter.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.n = n; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	stringWriter.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	headerSorter.ptr.prototype.Len = function() {
		var $ptr, s;
		s = this;
		return s.kvs.$length;
	};
	headerSorter.prototype.Len = function() { return this.$val.Len(); };
	headerSorter.ptr.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, s, x, x$1, x$2, x$3;
		s = this;
		_tmp = $clone((x = s.kvs, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j])), keyValues);
		_tmp$1 = $clone((x$1 = s.kvs, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])), keyValues);
		keyValues.copy((x$2 = s.kvs, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i])), _tmp);
		keyValues.copy((x$3 = s.kvs, ((j < 0 || j >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + j])), _tmp$1);
	};
	headerSorter.prototype.Swap = function(i, j) { return this.$val.Swap(i, j); };
	headerSorter.ptr.prototype.Less = function(i, j) {
		var $ptr, i, j, s, x, x$1;
		s = this;
		return (x = s.kvs, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).key < (x$1 = s.kvs, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j])).key;
	};
	headerSorter.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	Header.prototype.sortedKeyValues = function(exclude) {
		var $ptr, _entry, _entry$1, _i, _keys, _r, _ref, _tmp, _tmp$1, exclude, h, hs, k, kvs, vv, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _keys = $f._keys; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; exclude = $f.exclude; h = $f.h; hs = $f.hs; k = $f.k; kvs = $f.kvs; vv = $f.vv; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		kvs = sliceType$2.nil;
		hs = ptrType$8.nil;
		h = this.$val;
		_r = headerSorterPool.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		hs = $assertType(_r, ptrType$8);
		if (hs.kvs.$capacity < $keys(h).length) {
			hs.kvs = $makeSlice(sliceType$2, 0, $keys(h).length);
		}
		kvs = $subslice(hs.kvs, 0, 0);
		_ref = h;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			vv = _entry.v;
			if (!(_entry$1 = exclude[$String.keyFor(k)], _entry$1 !== undefined ? _entry$1.v : false)) {
				kvs = $append(kvs, new keyValues.ptr(k, vv));
			}
			_i++;
		}
		hs.kvs = kvs;
		$r = sort.Sort(hs); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp = kvs;
		_tmp$1 = hs;
		kvs = _tmp;
		hs = _tmp$1;
		$s = -1; return [kvs, hs];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Header.prototype.sortedKeyValues }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.exclude = exclude; $f.h = h; $f.hs = hs; $f.k = k; $f.kvs = kvs; $f.vv = vv; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Header).prototype.sortedKeyValues = function(exclude) { return new Header(this.$get()).sortedKeyValues(exclude); };
	Header.prototype.WriteSubset = function(w, exclude) {
		var $ptr, _i, _i$1, _i$2, _r, _r$1, _r$2, _ref, _ref$1, _ref$2, _tuple, _tuple$1, _tuple$2, err, exclude, h, kv, kvs, ok, s, sorter, v, w, ws, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; exclude = $f.exclude; h = $f.h; kv = $f.kv; kvs = $f.kvs; ok = $f.ok; s = $f.s; sorter = $f.sorter; v = $f.v; w = $f.w; ws = $f.ws; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this.$val;
		_tuple = $assertType(w, writeStringer, true);
		ws = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			ws = (x = new stringWriter.ptr(w), new x.constructor.elem(x));
		}
		_r = new Header(h).sortedKeyValues(exclude); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		kvs = _tuple$1[0];
		sorter = _tuple$1[1];
		_ref = kvs;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			kv = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), keyValues);
			_ref$1 = kv.values;
			_i$1 = 0;
			/* while (true) { */ case 4:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 5; continue; }
				v = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				_r$1 = headerNewlineToSpace.Replace(v); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				v = _r$1;
				v = textproto.TrimString(v);
				_ref$2 = new sliceType([kv.key, ": ", v, "\r\n"]);
				_i$2 = 0;
				/* while (true) { */ case 7:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 8; continue; }
					s = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
					_r$2 = ws.WriteString(s); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$2 = _r$2;
					err = _tuple$2[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						$s = -1; return err;
					}
					_i$2++;
				/* } */ $s = 7; continue; case 8:
				_i$1++;
			/* } */ $s = 4; continue; case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		headerSorterPool.Put(sorter);
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Header.prototype.WriteSubset }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.exclude = exclude; $f.h = h; $f.kv = kv; $f.kvs = kvs; $f.ok = ok; $f.s = s; $f.sorter = sorter; $f.v = v; $f.w = w; $f.ws = ws; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Header).prototype.WriteSubset = function(w, exclude) { return new Header(this.$get()).WriteSubset(w, exclude); };
	isToken = function(r) {
		var $ptr, i, r;
		i = (r >> 0);
		return i < 127 && ((i < 0 || i >= isTokenTable.length) ? ($throwRuntimeError("index out of range"), undefined) : isTokenTable[i]);
	};
	isNotToken = function(r) {
		var $ptr, r;
		return !isToken(r);
	};
	NewRequest = function(method, urlStr, body) {
		var $ptr, _r, _tuple, _tuple$1, body, err, method, ok, rc, req, u, urlStr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; body = $f.body; err = $f.err; method = $f.method; ok = $f.ok; rc = $f.rc; req = $f.req; u = $f.u; urlStr = $f.urlStr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = url.Parse(urlStr); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		u = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$3.nil, err];
		}
		_tuple$1 = $assertType(body, io.ReadCloser, true);
		rc = _tuple$1[0];
		ok = _tuple$1[1];
		if (!ok && !($interfaceIsEqual(body, $ifaceNil))) {
			rc = ioutil.NopCloser(body);
		}
		req = new Request.ptr(method, u, {}, rc);
		$s = -1; return [req, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewRequest }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.body = body; $f.err = err; $f.method = method; $f.ok = ok; $f.rc = rc; $f.req = req; $f.u = u; $f.urlStr = urlStr; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewRequest = NewRequest;
	Request.ptr.prototype.AddCookie = function(c) {
		var $ptr, _arg, _arg$1, _r, _r$1, _r$2, c, c$1, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; c = $f.c; c$1 = $f.c$1; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = sanitizeCookieName(c.Name); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = new $String(_r);
		_r$1 = sanitizeCookieValue(c.Value); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$1 = new $String(_r$1);
		_r$2 = fmt.Sprintf("%s=%s", new sliceType$1([_arg, _arg$1])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		s = _r$2;
		c$1 = new Header(r.Header).Get("Cookie");
		if (!(c$1 === "")) {
			new Header(r.Header).Set("Cookie", c$1 + "; " + s);
		} else {
			new Header(r.Header).Set("Cookie", s);
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Request.ptr.prototype.AddCookie }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.c = c; $f.c$1 = c$1; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Request.prototype.AddCookie = function(c) { return this.$val.AddCookie(c); };
	Request.ptr.prototype.closeBody = function() {
		var $ptr, _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* */ if (!($interfaceIsEqual(r.Body, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(r.Body, $ifaceNil))) { */ case 1:
			_r = r.Body.Close(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Request.ptr.prototype.closeBody }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Request.prototype.closeBody = function() { return this.$val.closeBody(); };
	Response.ptr.prototype.Cookies = function() {
		var $ptr, _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = readSetCookies(r.Header); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Response.ptr.prototype.Cookies }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Response.prototype.Cookies = function() { return this.$val.Cookies(); };
	XHRTransport.ptr.prototype.RoundTrip = function(req) {
		var $ptr, _arg, _arg$1, _entry, _i, _i$1, _key, _keys, _r, _r$1, _ref, _ref$1, _selection, _tuple, body, err, err$1, errCh, key, req, resp, respCh, t, value, values, xhr, xhrConstructor, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _selection = $f._selection; _tuple = $f._tuple; body = $f.body; err = $f.err; err$1 = $f.err$1; errCh = $f.errCh; key = $f.key; req = $f.req; resp = $f.resp; respCh = $f.respCh; t = $f.t; value = $f.value; values = $f.values; xhr = $f.xhr; xhrConstructor = $f.xhrConstructor; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		errCh = [errCh];
		req = [req];
		respCh = [respCh];
		xhr = [xhr];
		t = this;
		xhrConstructor = $global.XMLHttpRequest;
		if (xhrConstructor === undefined) {
			$s = -1; return [ptrType$1.nil, errors.New("code.palmstonegames.com/gopherjs-net-http: XMLHttpRequest not available")];
		}
		xhr[0] = new (xhrConstructor)();
		if (t.inflight === false) {
			t.inflight = $makeMap(ptrType$3.keyFor, []);
		}
		_key = req[0]; (t.inflight || $throwRuntimeError("assignment to entry in nil map"))[ptrType$3.keyFor(_key)] = { k: _key, v: xhr[0] };
		$deferred.push([function(_arg, _arg$1) { delete _arg[ptrType$3.keyFor(_arg$1)]; }, [t.inflight, req[0]]]);
		respCh[0] = new $Chan(ptrType$1, 0);
		errCh[0] = new $Chan($error, 0);
		xhr[0].onload = $externalize((function(errCh, req, respCh, xhr) { return function $b() {
			var $ptr, _1, _r, _tuple, _tuple$1, body, contentLength, err, header, l, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; body = $f.body; contentLength = $f.contentLength; err = $f.err; header = $f.header; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = textproto.NewReader(bufio.NewReader(bytes.NewReader(new sliceType$3($stringToBytes($internalize(xhr[0].getAllResponseHeaders(), $String) + "\n"))))).ReadMIMEHeader(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			header = _tuple[0];
			body = $assertType($internalize(new ($global.Uint8Array)(xhr[0].response), $emptyInterface), sliceType$3);
			contentLength = new $Int64(-1, 4294967295);
			_1 = req[0].Method;
			if (_1 === ("HEAD")) {
				_tuple$1 = strconv.ParseInt(new textproto.MIMEHeader(header).Get("Content-Length"), 10, 64);
				l = _tuple$1[0];
				err = _tuple$1[1];
				if ($interfaceIsEqual(err, $ifaceNil)) {
					contentLength = l;
				}
			} else {
				contentLength = new $Int64(0, body.$length);
			}
			$r = $send(respCh[0], new Response.ptr($internalize(xhr[0].status, $String) + " " + $internalize(xhr[0].statusText, $String), $parseInt(xhr[0].status) >> 0, header, ioutil.NopCloser(bytes.NewReader(body)), contentLength, req[0])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.body = body; $f.contentLength = contentLength; $f.err = err; $f.header = header; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
		}; })(errCh, req, respCh, xhr), funcType);
		xhr[0].onerror = $externalize((function(errCh, req, respCh, xhr) { return function $b(e) {
			var $ptr, _r, e, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = fmt.Errorf("code.palmstonegames.com/gopherjs-net-http: XMLHttpRequest failed with error: %v", new sliceType$1([new $String($internalize(e, $String))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = $send(errCh[0], _r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
		}; })(errCh, req, respCh, xhr), funcType$1);
		xhr[0].onabort = $externalize((function(errCh, req, respCh, xhr) { return function $b(e) {
			var $ptr, e, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = $send(errCh[0], errRequestCanceled); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
		}; })(errCh, req, respCh, xhr), funcType$1);
		xhr[0].open($externalize(req[0].Method, $String), $externalize(req[0].URL.String(), $String));
		xhr[0].responseType = $externalize("arraybuffer", $String);
		_ref = req[0].Header;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			key = _entry.k;
			values = _entry.v;
			_ref$1 = values;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				value = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				xhr[0].setRequestHeader($externalize(key, $String), $externalize(value, $String));
				_i$1++;
			}
			_i++;
		}
		body = sliceType$3.nil;
		/* */ if (!($interfaceIsEqual(req[0].Body, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(req[0].Body, $ifaceNil))) { */ case 1:
			err = $ifaceNil;
			_r = ioutil.ReadAll(req[0].Body); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			body = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ptrType$1.nil, err];
			}
		/* } */ case 2:
		xhr[0].send($externalize(body, sliceType$3));
		_r$1 = $select([[respCh[0]], [errCh[0]]]); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_selection = _r$1;
		if (_selection[0] === 0) {
			resp = _selection[1][0];
			$s = -1; return [resp, $ifaceNil];
		} else if (_selection[0] === 1) {
			err$1 = _selection[1][0];
			$s = -1; return [ptrType$1.nil, err$1];
		}
		$s = -1; return [ptrType$1.nil, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [ptrType$1.nil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: XHRTransport.ptr.prototype.RoundTrip }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._selection = _selection; $f._tuple = _tuple; $f.body = body; $f.err = err; $f.err$1 = err$1; $f.errCh = errCh; $f.key = key; $f.req = req; $f.resp = resp; $f.respCh = respCh; $f.t = t; $f.value = value; $f.values = values; $f.xhr = xhr; $f.xhrConstructor = xhrConstructor; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	XHRTransport.prototype.RoundTrip = function(req) { return this.$val.RoundTrip(req); };
	XHRTransport.ptr.prototype.CancelRequest = function(req) {
		var $ptr, _entry, _tuple, ok, req, t, xhr;
		t = this;
		_tuple = (_entry = t.inflight[ptrType$3.keyFor(req)], _entry !== undefined ? [_entry.v, true] : [null, false]);
		xhr = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			xhr.abort();
		}
	};
	XHRTransport.prototype.CancelRequest = function(req) { return this.$val.CancelRequest(req); };
	ptrType$10.methods = [{prop: "send", name: "send", pkg: "github.com/PalmStoneGames/gopherjs-net-http", typ: $funcType([ptrType$3], [ptrType$1, $error], false)}, {prop: "Do", name: "Do", pkg: "", typ: $funcType([ptrType$3], [ptrType$1, $error], false)}, {prop: "transport", name: "transport", pkg: "github.com/PalmStoneGames/gopherjs-net-http", typ: $funcType([], [RoundTripper], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType$1, $error], false)}, {prop: "doFollowingRedirects", name: "doFollowingRedirects", pkg: "github.com/PalmStoneGames/gopherjs-net-http", typ: $funcType([ptrType$3, funcType$2], [ptrType$1, $error], false)}, {prop: "Post", name: "Post", pkg: "", typ: $funcType([$String, $String, io.Reader], [ptrType$1, $error], false)}, {prop: "PostForm", name: "PostForm", pkg: "", typ: $funcType([$String, url.Values], [ptrType$1, $error], false)}, {prop: "Head", name: "Head", pkg: "", typ: $funcType([$String], [ptrType$1, $error], false)}];
	ptrType$11.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$3], [$Int, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	ptrType$6.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Header.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([$String, $String], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $String], [], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "get", name: "get", pkg: "github.com/PalmStoneGames/gopherjs-net-http", typ: $funcType([$String], [$String], false)}, {prop: "Del", name: "Del", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([io.Writer], [$error], false)}, {prop: "clone", name: "clone", pkg: "github.com/PalmStoneGames/gopherjs-net-http", typ: $funcType([], [Header], false)}, {prop: "sortedKeyValues", name: "sortedKeyValues", pkg: "github.com/PalmStoneGames/gopherjs-net-http", typ: $funcType([mapType], [sliceType$2, ptrType$8], false)}, {prop: "WriteSubset", name: "WriteSubset", pkg: "", typ: $funcType([io.Writer, mapType], [$error], false)}];
	stringWriter.methods = [{prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}];
	ptrType$8.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	ptrType$3.methods = [{prop: "AddCookie", name: "AddCookie", pkg: "", typ: $funcType([ptrType$6], [], false)}, {prop: "closeBody", name: "closeBody", pkg: "github.com/PalmStoneGames/gopherjs-net-http", typ: $funcType([], [], false)}];
	ptrType$1.methods = [{prop: "Cookies", name: "Cookies", pkg: "", typ: $funcType([], [sliceType$5], false)}];
	ptrType$12.methods = [{prop: "RoundTrip", name: "RoundTrip", pkg: "", typ: $funcType([ptrType$3], [ptrType$1, $error], false)}, {prop: "CancelRequest", name: "CancelRequest", pkg: "", typ: $funcType([ptrType$3], [], false)}];
	Client.init("", [{prop: "Transport", name: "Transport", exported: true, typ: RoundTripper, tag: ""}, {prop: "CheckRedirect", name: "CheckRedirect", exported: true, typ: funcType$3, tag: ""}, {prop: "Jar", name: "Jar", exported: true, typ: CookieJar, tag: ""}, {prop: "Timeout", name: "Timeout", exported: true, typ: time.Duration, tag: ""}]);
	RoundTripper.init([{prop: "RoundTrip", name: "RoundTrip", pkg: "", typ: $funcType([ptrType$3], [ptrType$1, $error], false)}]);
	cancelTimerBody.init("github.com/PalmStoneGames/gopherjs-net-http", [{prop: "t", name: "t", exported: false, typ: ptrType$4, tag: ""}, {prop: "rc", name: "rc", exported: false, typ: io.ReadCloser, tag: ""}, {prop: "reqWasCanceled", name: "reqWasCanceled", exported: false, typ: funcType$4, tag: ""}]);
	Cookie.init("", [{prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "Value", name: "Value", exported: true, typ: $String, tag: ""}, {prop: "Path", name: "Path", exported: true, typ: $String, tag: ""}, {prop: "Domain", name: "Domain", exported: true, typ: $String, tag: ""}, {prop: "Expires", name: "Expires", exported: true, typ: time.Time, tag: ""}, {prop: "RawExpires", name: "RawExpires", exported: true, typ: $String, tag: ""}, {prop: "MaxAge", name: "MaxAge", exported: true, typ: $Int, tag: ""}, {prop: "Secure", name: "Secure", exported: true, typ: $Bool, tag: ""}, {prop: "HttpOnly", name: "HttpOnly", exported: true, typ: $Bool, tag: ""}, {prop: "Raw", name: "Raw", exported: true, typ: $String, tag: ""}, {prop: "Unparsed", name: "Unparsed", exported: true, typ: sliceType, tag: ""}]);
	Header.init($String, sliceType);
	writeStringer.init([{prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}]);
	stringWriter.init("github.com/PalmStoneGames/gopherjs-net-http", [{prop: "w", name: "w", exported: false, typ: io.Writer, tag: ""}]);
	keyValues.init("github.com/PalmStoneGames/gopherjs-net-http", [{prop: "key", name: "key", exported: false, typ: $String, tag: ""}, {prop: "values", name: "values", exported: false, typ: sliceType, tag: ""}]);
	headerSorter.init("github.com/PalmStoneGames/gopherjs-net-http", [{prop: "kvs", name: "kvs", exported: false, typ: sliceType$2, tag: ""}]);
	CookieJar.init([{prop: "Cookies", name: "Cookies", pkg: "", typ: $funcType([ptrType$2], [sliceType$5], false)}, {prop: "SetCookies", name: "SetCookies", pkg: "", typ: $funcType([ptrType$2, sliceType$5], [], false)}]);
	Request.init("", [{prop: "Method", name: "Method", exported: true, typ: $String, tag: ""}, {prop: "URL", name: "URL", exported: true, typ: ptrType$2, tag: ""}, {prop: "Header", name: "Header", exported: true, typ: Header, tag: ""}, {prop: "Body", name: "Body", exported: true, typ: io.ReadCloser, tag: ""}]);
	Response.init("", [{prop: "Status", name: "Status", exported: true, typ: $String, tag: ""}, {prop: "StatusCode", name: "StatusCode", exported: true, typ: $Int, tag: ""}, {prop: "Header", name: "Header", exported: true, typ: Header, tag: ""}, {prop: "Body", name: "Body", exported: true, typ: io.ReadCloser, tag: ""}, {prop: "ContentLength", name: "ContentLength", exported: true, typ: $Int64, tag: ""}, {prop: "Request", name: "Request", exported: true, typ: ptrType$3, tag: ""}]);
	XHRTransport.init("github.com/PalmStoneGames/gopherjs-net-http", [{prop: "inflight", name: "inflight", exported: false, typ: mapType$1, tag: ""}]);
	canceler.init([{prop: "CancelRequest", name: "CancelRequest", pkg: "", typ: $funcType([ptrType$3], [], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytes.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = base64.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ioutil.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = log.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = net.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = textproto.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = url.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		cookieNameSanitizer = strings.NewReplacer(new sliceType(["\n", "-", "\r", "-"]));
		headerNewlineToSpace = strings.NewReplacer(new sliceType(["\n", " ", "\r", " "]));
		headerSorterPool = new sync.Pool.ptr(0, 0, sliceType$1.nil, (function() {
			var $ptr;
			return new headerSorter.ptr(sliceType$2.nil);
		}));
		isTokenTable = $toNativeArray($kindBool, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, false, false, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true]);
		$pkg.DefaultTransport = new XHRTransport.ptr(false);
		errRequestCanceled = errors.New("code.palmstonegames.com/gopherjs-net-http: request canceled");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/net/context"] = (function() {
	var $pkg = {}, $init, context, time, Context, CancelFunc, structType, chanType, todo, background, Background, WithCancel;
	context = $packages["context"];
	time = $packages["time"];
	Context = $pkg.Context = $newType(8, $kindInterface, "context.Context", true, "golang.org/x/net/context", true, null);
	CancelFunc = $pkg.CancelFunc = $newType(4, $kindFunc, "context.CancelFunc", true, "golang.org/x/net/context", true, null);
	structType = $structType("", []);
	chanType = $chanType(structType, false, true);
	Background = function() {
		var $ptr;
		return background;
	};
	$pkg.Background = Background;
	WithCancel = function(parent) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, cancel, ctx, f, parent, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; cancel = $f.cancel; ctx = $f.ctx; f = $f.f; parent = $f.parent; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ctx = $ifaceNil;
		cancel = $throwNilPointerError;
		_r = context.WithCancel(parent); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ctx = _tuple[0];
		f = _tuple[1];
		_tmp = ctx;
		_tmp$1 = f;
		ctx = _tmp;
		cancel = _tmp$1;
		$s = -1; return [ctx, cancel];
		/* */ } return; } if ($f === undefined) { $f = { $blk: WithCancel }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.cancel = cancel; $f.ctx = ctx; $f.f = f; $f.parent = parent; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.WithCancel = WithCancel;
	Context.init([{prop: "Deadline", name: "Deadline", pkg: "", typ: $funcType([], [time.Time, $Bool], false)}, {prop: "Done", name: "Done", pkg: "", typ: $funcType([], [chanType], false)}, {prop: "Err", name: "Err", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Value", name: "Value", pkg: "", typ: $funcType([$emptyInterface], [$emptyInterface], false)}]);
	CancelFunc.init([], [], false);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = context.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		todo = context.TODO();
		background = context.Background();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/binary"] = (function() {
	var $pkg = {}, $init, errors, io, math, reflect, littleEndian, sliceType, overflow;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	reflect = $packages["reflect"];
	littleEndian = $pkg.littleEndian = $newType(0, $kindStruct, "binary.littleEndian", true, "encoding/binary", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	sliceType = $sliceType($Uint8);
	littleEndian.ptr.prototype.Uint16 = function(b) {
		var $ptr, b;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		return (((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) << 16 >>> 16) | (((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) << 16 >>> 16) << 8 << 16 >>> 16)) >>> 0;
	};
	littleEndian.prototype.Uint16 = function(b) { return this.$val.Uint16(b); };
	littleEndian.ptr.prototype.PutUint16 = function(b, v) {
		var $ptr, b, v;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (v << 24 >>> 24));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = ((v >>> 8 << 16 >>> 16) << 24 >>> 24));
	};
	littleEndian.prototype.PutUint16 = function(b, v) { return this.$val.PutUint16(b, v); };
	littleEndian.ptr.prototype.Uint32 = function(b) {
		var $ptr, b;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		return (((((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0) | (((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0) << 8 >>> 0)) >>> 0) | (((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0) << 16 >>> 0)) >>> 0) | (((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0) << 24 >>> 0)) >>> 0;
	};
	littleEndian.prototype.Uint32 = function(b) { return this.$val.Uint32(b); };
	littleEndian.ptr.prototype.PutUint32 = function(b, v) {
		var $ptr, b, v;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (v << 24 >>> 24));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = ((v >>> 8 >>> 0) << 24 >>> 24));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = ((v >>> 16 >>> 0) << 24 >>> 24));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = ((v >>> 24 >>> 0) << 24 >>> 24));
	};
	littleEndian.prototype.PutUint32 = function(b, v) { return this.$val.PutUint32(b, v); };
	littleEndian.ptr.prototype.Uint64 = function(b) {
		var $ptr, b, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		return (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])), x$7 = $shiftLeft64(new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1])), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64(new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2])), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64(new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3])), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64(new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4])), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64(new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5])), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64(new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6])), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64(new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7])), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
	};
	littleEndian.prototype.Uint64 = function(b) { return this.$val.Uint64(b); };
	littleEndian.ptr.prototype.PutUint64 = function(b, v) {
		var $ptr, b, v;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (v.$low << 24 >>> 24));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = ($shiftRightUint64(v, 8).$low << 24 >>> 24));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = ($shiftRightUint64(v, 16).$low << 24 >>> 24));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = ($shiftRightUint64(v, 24).$low << 24 >>> 24));
		(4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4] = ($shiftRightUint64(v, 32).$low << 24 >>> 24));
		(5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5] = ($shiftRightUint64(v, 40).$low << 24 >>> 24));
		(6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6] = ($shiftRightUint64(v, 48).$low << 24 >>> 24));
		(7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7] = ($shiftRightUint64(v, 56).$low << 24 >>> 24));
	};
	littleEndian.prototype.PutUint64 = function(b, v) { return this.$val.PutUint64(b, v); };
	littleEndian.ptr.prototype.String = function() {
		var $ptr;
		return "LittleEndian";
	};
	littleEndian.prototype.String = function() { return this.$val.String(); };
	littleEndian.ptr.prototype.GoString = function() {
		var $ptr;
		return "binary.LittleEndian";
	};
	littleEndian.prototype.GoString = function() { return this.$val.GoString(); };
	littleEndian.methods = [{prop: "Uint16", name: "Uint16", pkg: "", typ: $funcType([sliceType], [$Uint16], false)}, {prop: "PutUint16", name: "PutUint16", pkg: "", typ: $funcType([sliceType, $Uint16], [], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([sliceType], [$Uint32], false)}, {prop: "PutUint32", name: "PutUint32", pkg: "", typ: $funcType([sliceType, $Uint32], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([sliceType], [$Uint64], false)}, {prop: "PutUint64", name: "PutUint64", pkg: "", typ: $funcType([sliceType, $Uint64], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}];
	littleEndian.init("", []);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.LittleEndian = new littleEndian.ptr();
		overflow = errors.New("binary: varint overflows a 64-bit integer");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/glycerine/rbtree"] = (function() {
	var $pkg = {}, $init, Item, CompareFunc, Tree, Iterator, node, ptrType, ptrType$1, negativeLimitNode, NewTree, doAssert, getColor, maxPredecessor, init;
	Item = $pkg.Item = $newType(8, $kindInterface, "rbtree.Item", true, "github.com/glycerine/rbtree", true, null);
	CompareFunc = $pkg.CompareFunc = $newType(4, $kindFunc, "rbtree.CompareFunc", true, "github.com/glycerine/rbtree", true, null);
	Tree = $pkg.Tree = $newType(0, $kindStruct, "rbtree.Tree", true, "github.com/glycerine/rbtree", true, function(root_, minNode_, maxNode_, count_, compare_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.root = ptrType.nil;
			this.minNode = ptrType.nil;
			this.maxNode = ptrType.nil;
			this.count = 0;
			this.compare = $throwNilPointerError;
			return;
		}
		this.root = root_;
		this.minNode = minNode_;
		this.maxNode = maxNode_;
		this.count = count_;
		this.compare = compare_;
	});
	Iterator = $pkg.Iterator = $newType(0, $kindStruct, "rbtree.Iterator", true, "github.com/glycerine/rbtree", true, function(root_, node_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.root = ptrType$1.nil;
			this.node = ptrType.nil;
			return;
		}
		this.root = root_;
		this.node = node_;
	});
	node = $pkg.node = $newType(0, $kindStruct, "rbtree.node", true, "github.com/glycerine/rbtree", false, function(item_, parent_, left_, right_, color_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.item = $ifaceNil;
			this.parent = ptrType.nil;
			this.left = ptrType.nil;
			this.right = ptrType.nil;
			this.color = 0;
			return;
		}
		this.item = item_;
		this.parent = parent_;
		this.left = left_;
		this.right = right_;
		this.color = color_;
	});
	ptrType = $ptrType(node);
	ptrType$1 = $ptrType(Tree);
	NewTree = function(compare) {
		var $ptr, compare;
		return new Tree.ptr(ptrType.nil, ptrType.nil, ptrType.nil, 0, compare);
	};
	$pkg.NewTree = NewTree;
	Tree.ptr.prototype.Len = function() {
		var $ptr, root;
		root = this;
		return root.count;
	};
	Tree.prototype.Len = function() { return this.$val.Len(); };
	Tree.ptr.prototype.Get = function(key) {
		var $ptr, _r, _tuple, exact, key, n, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; exact = $f.exact; key = $f.key; n = $f.n; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = this;
		_r = root.findGE(key); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		exact = _tuple[1];
		if (exact) {
			$s = -1; return n.item;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.Get }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.exact = exact; $f.key = key; $f.n = n; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.Get = function(key) { return this.$val.Get(key); };
	Tree.ptr.prototype.Min = function() {
		var $ptr, root;
		root = this;
		return new Iterator.ptr(root, root.minNode);
	};
	Tree.prototype.Min = function() { return this.$val.Min(); };
	Tree.ptr.prototype.Max = function() {
		var $ptr, root;
		root = this;
		if (root.maxNode === ptrType.nil) {
			return new Iterator.ptr(root, negativeLimitNode);
		}
		return new Iterator.ptr(root, root.maxNode);
	};
	Tree.prototype.Max = function() { return this.$val.Max(); };
	Tree.ptr.prototype.Limit = function() {
		var $ptr, root;
		root = this;
		return new Iterator.ptr(root, ptrType.nil);
	};
	Tree.prototype.Limit = function() { return this.$val.Limit(); };
	Tree.ptr.prototype.NegativeLimit = function() {
		var $ptr, root;
		root = this;
		return new Iterator.ptr(root, negativeLimitNode);
	};
	Tree.prototype.NegativeLimit = function() { return this.$val.NegativeLimit(); };
	Tree.ptr.prototype.FindGE = function(key) {
		var $ptr, _r, _tuple, key, n, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; key = $f.key; n = $f.n; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = this;
		_r = root.findGE(key); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		$s = -1; return new Iterator.ptr(root, n);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.FindGE }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.key = key; $f.n = n; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.FindGE = function(key) { return this.$val.FindGE(key); };
	Tree.ptr.prototype.FindLE = function(key) {
		var $ptr, _r, _tuple, exact, key, n, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; exact = $f.exact; key = $f.key; n = $f.n; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = this;
		_r = root.findGE(key); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		exact = _tuple[1];
		if (exact) {
			$s = -1; return new Iterator.ptr(root, n);
		}
		if (!(n === ptrType.nil)) {
			$s = -1; return new Iterator.ptr(root, n.doPrev());
		}
		if (root.maxNode === ptrType.nil) {
			$s = -1; return new Iterator.ptr(root, negativeLimitNode);
		}
		$s = -1; return new Iterator.ptr(root, root.maxNode);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.FindLE }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.exact = exact; $f.key = key; $f.n = n; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.FindLE = function(key) { return this.$val.FindLE(key); };
	Tree.ptr.prototype.Insert = function(item) {
		var $ptr, _r, grandparent, item, n, root, uncle, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; grandparent = $f.grandparent; item = $f.item; n = $f.n; root = $f.root; uncle = $f.uncle; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = this;
		_r = root.doInsert(item); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		if (n === ptrType.nil) {
			$s = -1; return false;
		}
		n.color = 0;
		while (true) {
			if (n.parent === ptrType.nil) {
				n.color = 1;
				break;
			}
			if (n.parent.color === 1) {
				break;
			}
			grandparent = n.parent.parent;
			uncle = ptrType.nil;
			if (n.parent.isLeftChild()) {
				uncle = grandparent.right;
			} else {
				uncle = grandparent.left;
			}
			if (!(uncle === ptrType.nil) && (uncle.color === 0)) {
				n.parent.color = 1;
				uncle.color = 1;
				grandparent.color = 0;
				n = grandparent;
				continue;
			}
			if (n.isRightChild() && n.parent.isLeftChild()) {
				root.rotateLeft(n.parent);
				n = n.left;
				continue;
			}
			if (n.isLeftChild() && n.parent.isRightChild()) {
				root.rotateRight(n.parent);
				n = n.right;
				continue;
			}
			n.parent.color = 1;
			grandparent.color = 0;
			if (n.isLeftChild()) {
				root.rotateRight(grandparent);
			} else {
				root.rotateLeft(grandparent);
			}
			break;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.Insert }; } $f.$ptr = $ptr; $f._r = _r; $f.grandparent = grandparent; $f.item = item; $f.n = n; $f.root = root; $f.uncle = uncle; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.Insert = function(item) { return this.$val.Insert(item); };
	Tree.ptr.prototype.DeleteWithKey = function(key) {
		var $ptr, _r, _tuple, exact, key, n, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; exact = $f.exact; key = $f.key; n = $f.n; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = this;
		_r = root.findGE(key); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		exact = _tuple[1];
		if (exact) {
			root.doDelete(n);
			$s = -1; return true;
		}
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.DeleteWithKey }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.exact = exact; $f.key = key; $f.n = n; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.DeleteWithKey = function(key) { return this.$val.DeleteWithKey(key); };
	Tree.ptr.prototype.DeleteWithIterator = function(iter) {
		var $ptr, iter, root;
		root = this;
		doAssert(!$clone(iter, Iterator).Limit() && !$clone(iter, Iterator).NegativeLimit());
		root.doDelete(iter.node);
	};
	Tree.prototype.DeleteWithIterator = function(iter) { return this.$val.DeleteWithIterator(iter); };
	Iterator.ptr.prototype.Equal = function(iter2) {
		var $ptr, iter, iter2;
		iter = this;
		return iter.node === iter2.node;
	};
	Iterator.prototype.Equal = function(iter2) { return this.$val.Equal(iter2); };
	Iterator.ptr.prototype.Limit = function() {
		var $ptr, iter;
		iter = this;
		return iter.node === ptrType.nil;
	};
	Iterator.prototype.Limit = function() { return this.$val.Limit(); };
	Iterator.ptr.prototype.Min = function() {
		var $ptr, iter;
		iter = this;
		return iter.node === iter.root.minNode;
	};
	Iterator.prototype.Min = function() { return this.$val.Min(); };
	Iterator.ptr.prototype.Max = function() {
		var $ptr, iter;
		iter = this;
		return iter.node === iter.root.maxNode;
	};
	Iterator.prototype.Max = function() { return this.$val.Max(); };
	Iterator.ptr.prototype.NegativeLimit = function() {
		var $ptr, iter;
		iter = this;
		return iter.node === negativeLimitNode;
	};
	Iterator.prototype.NegativeLimit = function() { return this.$val.NegativeLimit(); };
	Iterator.ptr.prototype.Item = function() {
		var $ptr, iter;
		iter = this;
		return iter.node.item;
	};
	Iterator.prototype.Item = function() { return this.$val.Item(); };
	Iterator.ptr.prototype.Next = function() {
		var $ptr, iter;
		iter = this;
		doAssert(!$clone(iter, Iterator).Limit());
		if ($clone(iter, Iterator).NegativeLimit()) {
			return new Iterator.ptr(iter.root, iter.root.minNode);
		}
		return new Iterator.ptr(iter.root, iter.node.doNext());
	};
	Iterator.prototype.Next = function() { return this.$val.Next(); };
	Iterator.ptr.prototype.Prev = function() {
		var $ptr, iter;
		iter = this;
		doAssert(!$clone(iter, Iterator).NegativeLimit());
		if (!$clone(iter, Iterator).Limit()) {
			return new Iterator.ptr(iter.root, iter.node.doPrev());
		}
		if (iter.root.maxNode === ptrType.nil) {
			return new Iterator.ptr(iter.root, negativeLimitNode);
		}
		return new Iterator.ptr(iter.root, iter.root.maxNode);
	};
	Iterator.prototype.Prev = function() { return this.$val.Prev(); };
	doAssert = function(b) {
		var $ptr, b;
		if (!b) {
			$panic(new $String("rbtree internal assertion failed"));
		}
	};
	getColor = function(n) {
		var $ptr, n;
		if (n === ptrType.nil) {
			return 1;
		}
		return n.color;
	};
	node.ptr.prototype.isLeftChild = function() {
		var $ptr, n;
		n = this;
		return n === n.parent.left;
	};
	node.prototype.isLeftChild = function() { return this.$val.isLeftChild(); };
	node.ptr.prototype.isRightChild = function() {
		var $ptr, n;
		n = this;
		return n === n.parent.right;
	};
	node.prototype.isRightChild = function() { return this.$val.isRightChild(); };
	node.ptr.prototype.sibling = function() {
		var $ptr, n;
		n = this;
		doAssert(!(n.parent === ptrType.nil));
		if (n.isLeftChild()) {
			return n.parent.right;
		}
		return n.parent.left;
	};
	node.prototype.sibling = function() { return this.$val.sibling(); };
	node.ptr.prototype.doNext = function() {
		var $ptr, m, n, p;
		n = this;
		if (!(n.right === ptrType.nil)) {
			m = n.right;
			while (true) {
				if (!(!(m.left === ptrType.nil))) { break; }
				m = m.left;
			}
			return m;
		}
		while (true) {
			if (!(!(n === ptrType.nil))) { break; }
			p = n.parent;
			if (p === ptrType.nil) {
				return ptrType.nil;
			}
			if (n.isLeftChild()) {
				return p;
			}
			n = p;
		}
		return ptrType.nil;
	};
	node.prototype.doNext = function() { return this.$val.doNext(); };
	node.ptr.prototype.doPrev = function() {
		var $ptr, n, p;
		n = this;
		if (!(n.left === ptrType.nil)) {
			return maxPredecessor(n);
		}
		while (true) {
			if (!(!(n === ptrType.nil))) { break; }
			p = n.parent;
			if (p === ptrType.nil) {
				break;
			}
			if (n.isRightChild()) {
				return p;
			}
			n = p;
		}
		return negativeLimitNode;
	};
	node.prototype.doPrev = function() { return this.$val.doPrev(); };
	maxPredecessor = function(n) {
		var $ptr, m, n;
		doAssert(!(n.left === ptrType.nil));
		m = n.left;
		while (true) {
			if (!(!(m.right === ptrType.nil))) { break; }
			m = m.right;
		}
		return m;
	};
	Tree.ptr.prototype.recomputeMinNode = function() {
		var $ptr, root;
		root = this;
		root.minNode = root.root;
		if (!(root.minNode === ptrType.nil)) {
			while (true) {
				if (!(!(root.minNode.left === ptrType.nil))) { break; }
				root.minNode = root.minNode.left;
			}
		}
	};
	Tree.prototype.recomputeMinNode = function() { return this.$val.recomputeMinNode(); };
	Tree.ptr.prototype.recomputeMaxNode = function() {
		var $ptr, root;
		root = this;
		root.maxNode = root.root;
		if (!(root.maxNode === ptrType.nil)) {
			while (true) {
				if (!(!(root.maxNode.right === ptrType.nil))) { break; }
				root.maxNode = root.maxNode.right;
			}
		}
	};
	Tree.prototype.recomputeMaxNode = function() { return this.$val.recomputeMaxNode(); };
	Tree.ptr.prototype.maybeSetMinNode = function(n) {
		var $ptr, _r, n, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = this;
		/* */ if (root.minNode === ptrType.nil) { $s = 1; continue; }
		_r = root.compare(n.item, root.minNode.item); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r < 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (root.minNode === ptrType.nil) { */ case 1:
			root.minNode = n;
			root.maxNode = n;
			$s = 3; continue;
		/* } else if (_r < 0) { */ case 2:
			root.minNode = n;
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.maybeSetMinNode }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.maybeSetMinNode = function(n) { return this.$val.maybeSetMinNode(n); };
	Tree.ptr.prototype.maybeSetMaxNode = function(n) {
		var $ptr, _r, n, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = this;
		/* */ if (root.maxNode === ptrType.nil) { $s = 1; continue; }
		_r = root.compare(n.item, root.maxNode.item); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r > 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (root.maxNode === ptrType.nil) { */ case 1:
			root.minNode = n;
			root.maxNode = n;
			$s = 3; continue;
		/* } else if (_r > 0) { */ case 2:
			root.maxNode = n;
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.maybeSetMaxNode }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.maybeSetMaxNode = function(n) { return this.$val.maybeSetMaxNode(n); };
	Tree.ptr.prototype.doInsert = function(item) {
		var $ptr, _r, comp, item, n, n$1, n$2, parent, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; comp = $f.comp; item = $f.item; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; parent = $f.parent; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = this;
		if (root.root === ptrType.nil) {
			n = new node.ptr(item, ptrType.nil, ptrType.nil, ptrType.nil, 0);
			root.root = n;
			root.minNode = n;
			root.maxNode = n;
			root.count = root.count + (1) >> 0;
			$s = -1; return n;
		}
		parent = root.root;
		/* while (true) { */ case 1:
			_r = root.compare(item, parent.item); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			comp = _r;
			/* */ if (comp === 0) { $s = 4; continue; }
			/* */ if (comp < 0) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (comp === 0) { */ case 4:
				$s = -1; return ptrType.nil;
			/* } else if (comp < 0) { */ case 5:
				/* */ if (parent.left === ptrType.nil) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (parent.left === ptrType.nil) { */ case 8:
					n$1 = new node.ptr(item, parent, ptrType.nil, ptrType.nil, 0);
					parent.left = n$1;
					root.count = root.count + (1) >> 0;
					$r = root.maybeSetMinNode(n$1); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return n$1;
				/* } else { */ case 9:
					parent = parent.left;
				/* } */ case 10:
				$s = 7; continue;
			/* } else { */ case 6:
				/* */ if (parent.right === ptrType.nil) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (parent.right === ptrType.nil) { */ case 12:
					n$2 = new node.ptr(item, parent, ptrType.nil, ptrType.nil, 0);
					parent.right = n$2;
					root.count = root.count + (1) >> 0;
					$r = root.maybeSetMaxNode(n$2); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return n$2;
				/* } else { */ case 13:
					parent = parent.right;
				/* } */ case 14:
			/* } */ case 7:
		/* } */ $s = 1; continue; case 2:
		$panic(new $String("should not reach here"));
		$s = -1; return ptrType.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.doInsert }; } $f.$ptr = $ptr; $f._r = _r; $f.comp = comp; $f.item = item; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.parent = parent; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.doInsert = function(item) { return this.$val.doInsert(item); };
	Tree.ptr.prototype.findGE = function(key) {
		var $ptr, _r, _r$1, comp, key, n, root, succ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; comp = $f.comp; key = $f.key; n = $f.n; root = $f.root; succ = $f.succ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = this;
		n = root.root;
		/* while (true) { */ case 1:
			if (n === ptrType.nil) {
				$s = -1; return [ptrType.nil, false];
			}
			_r = root.compare(key, n.item); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			comp = _r;
			/* */ if (comp === 0) { $s = 4; continue; }
			/* */ if (comp < 0) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (comp === 0) { */ case 4:
				$s = -1; return [n, true];
			/* } else if (comp < 0) { */ case 5:
				if (!(n.left === ptrType.nil)) {
					n = n.left;
				} else {
					$s = -1; return [n, false];
				}
				$s = 7; continue;
			/* } else { */ case 6:
				/* */ if (!(n.right === ptrType.nil)) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!(n.right === ptrType.nil)) { */ case 8:
					n = n.right;
					$s = 10; continue;
				/* } else { */ case 9:
					succ = n.doNext();
					/* */ if (succ === ptrType.nil) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (succ === ptrType.nil) { */ case 11:
						$s = -1; return [ptrType.nil, false];
					/* } else { */ case 12:
						_r$1 = root.compare(key, succ.item); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						comp = _r$1;
						$s = -1; return [succ, (comp === 0)];
					/* } */ case 13:
				/* } */ case 10:
			/* } */ case 7:
		/* } */ $s = 1; continue; case 2:
		$panic(new $String("should not reach here"));
		$s = -1; return [ptrType.nil, false];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.findGE }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.comp = comp; $f.key = key; $f.n = n; $f.root = root; $f.succ = succ; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.findGE = function(key) { return this.$val.findGE(key); };
	Tree.ptr.prototype.doDelete = function(n) {
		var $ptr, child, n, pred, root;
		root = this;
		if (!(n.left === ptrType.nil) && !(n.right === ptrType.nil)) {
			pred = maxPredecessor(n);
			root.swapNodes(n, pred);
		}
		doAssert(n.left === ptrType.nil || n.right === ptrType.nil);
		child = n.right;
		if (child === ptrType.nil) {
			child = n.left;
		}
		if (n.color === 1) {
			n.color = getColor(child);
			root.deleteCase1(n);
		}
		root.replaceNode(n, child);
		if (n.parent === ptrType.nil && !(child === ptrType.nil)) {
			child.color = 1;
		}
		root.count = root.count - (1) >> 0;
		if (root.count === 0) {
			root.minNode = ptrType.nil;
			root.maxNode = ptrType.nil;
		} else {
			if (root.minNode === n) {
				root.recomputeMinNode();
			}
			if (root.maxNode === n) {
				root.recomputeMaxNode();
			}
		}
	};
	Tree.prototype.doDelete = function(n) { return this.$val.doDelete(n); };
	Tree.ptr.prototype.swapNodes = function(n, pred) {
		var $ptr, isLeft, n, pred, root, tmp;
		root = this;
		doAssert(!(pred === n));
		isLeft = pred.isLeftChild();
		tmp = $clone(pred, node);
		root.replaceNode(n, pred);
		pred.color = n.color;
		if (tmp.parent === n) {
			if (isLeft) {
				pred.left = n;
				pred.right = n.right;
				if (!(pred.right === ptrType.nil)) {
					pred.right.parent = pred;
				}
			} else {
				pred.left = n.left;
				if (!(pred.left === ptrType.nil)) {
					pred.left.parent = pred;
				}
				pred.right = n;
			}
			n.item = tmp.item;
			n.parent = pred;
			n.left = tmp.left;
			if (!(n.left === ptrType.nil)) {
				n.left.parent = n;
			}
			n.right = tmp.right;
			if (!(n.right === ptrType.nil)) {
				n.right.parent = n;
			}
		} else {
			pred.left = n.left;
			if (!(pred.left === ptrType.nil)) {
				pred.left.parent = pred;
			}
			pred.right = n.right;
			if (!(pred.right === ptrType.nil)) {
				pred.right.parent = pred;
			}
			if (isLeft) {
				tmp.parent.left = n;
			} else {
				tmp.parent.right = n;
			}
			n.item = tmp.item;
			n.parent = tmp.parent;
			n.left = tmp.left;
			if (!(n.left === ptrType.nil)) {
				n.left.parent = n;
			}
			n.right = tmp.right;
			if (!(n.right === ptrType.nil)) {
				n.right.parent = n;
			}
		}
		n.color = tmp.color;
	};
	Tree.prototype.swapNodes = function(n, pred) { return this.$val.swapNodes(n, pred); };
	Tree.ptr.prototype.deleteCase1 = function(n) {
		var $ptr, n, root;
		root = this;
		while (true) {
			if (!(n.parent === ptrType.nil)) {
				if (getColor(n.sibling()) === 0) {
					n.parent.color = 0;
					n.sibling().color = 1;
					if (n === n.parent.left) {
						root.rotateLeft(n.parent);
					} else {
						root.rotateRight(n.parent);
					}
				}
				if ((getColor(n.parent) === 1) && (getColor(n.sibling()) === 1) && (getColor(n.sibling().left) === 1) && (getColor(n.sibling().right) === 1)) {
					n.sibling().color = 0;
					n = n.parent;
					continue;
				} else {
					if ((getColor(n.parent) === 0) && (getColor(n.sibling()) === 1) && (getColor(n.sibling().left) === 1) && (getColor(n.sibling().right) === 1)) {
						n.sibling().color = 0;
						n.parent.color = 1;
					} else {
						root.deleteCase5(n);
					}
				}
			}
			break;
		}
	};
	Tree.prototype.deleteCase1 = function(n) { return this.$val.deleteCase1(n); };
	Tree.ptr.prototype.deleteCase5 = function(n) {
		var $ptr, n, root;
		root = this;
		if (n === n.parent.left && (getColor(n.sibling()) === 1) && (getColor(n.sibling().left) === 0) && (getColor(n.sibling().right) === 1)) {
			n.sibling().color = 0;
			n.sibling().left.color = 1;
			root.rotateRight(n.sibling());
		} else if (n === n.parent.right && (getColor(n.sibling()) === 1) && (getColor(n.sibling().right) === 0) && (getColor(n.sibling().left) === 1)) {
			n.sibling().color = 0;
			n.sibling().right.color = 1;
			root.rotateLeft(n.sibling());
		}
		n.sibling().color = getColor(n.parent);
		n.parent.color = 1;
		if (n === n.parent.left) {
			doAssert(getColor(n.sibling().right) === 0);
			n.sibling().right.color = 1;
			root.rotateLeft(n.parent);
		} else {
			doAssert(getColor(n.sibling().left) === 0);
			n.sibling().left.color = 1;
			root.rotateRight(n.parent);
		}
	};
	Tree.prototype.deleteCase5 = function(n) { return this.$val.deleteCase5(n); };
	Tree.ptr.prototype.replaceNode = function(oldn, newn) {
		var $ptr, newn, oldn, root;
		root = this;
		if (oldn.parent === ptrType.nil) {
			root.root = newn;
		} else {
			if (oldn === oldn.parent.left) {
				oldn.parent.left = newn;
			} else {
				oldn.parent.right = newn;
			}
		}
		if (!(newn === ptrType.nil)) {
			newn.parent = oldn.parent;
		}
	};
	Tree.prototype.replaceNode = function(oldn, newn) { return this.$val.replaceNode(oldn, newn); };
	Tree.ptr.prototype.rotateLeft = function(x) {
		var $ptr, root, x, y;
		root = this;
		y = x.right;
		x.right = y.left;
		if (!(y.left === ptrType.nil)) {
			y.left.parent = x;
		}
		y.parent = x.parent;
		if (x.parent === ptrType.nil) {
			root.root = y;
		} else {
			if (x.isLeftChild()) {
				x.parent.left = y;
			} else {
				x.parent.right = y;
			}
		}
		y.left = x;
		x.parent = y;
	};
	Tree.prototype.rotateLeft = function(x) { return this.$val.rotateLeft(x); };
	Tree.ptr.prototype.rotateRight = function(y) {
		var $ptr, root, x, y;
		root = this;
		x = y.left;
		y.left = x.right;
		if (!(x.right === ptrType.nil)) {
			x.right.parent = y;
		}
		x.parent = y.parent;
		if (y.parent === ptrType.nil) {
			root.root = x;
		} else {
			if (y.isLeftChild()) {
				y.parent.left = x;
			} else {
				y.parent.right = x;
			}
		}
		x.right = y;
		y.parent = x;
	};
	Tree.prototype.rotateRight = function(y) { return this.$val.rotateRight(y); };
	init = function() {
		var $ptr;
		negativeLimitNode = new node.ptr($ifaceNil, ptrType.nil, ptrType.nil, ptrType.nil, 0);
	};
	ptrType$1.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([Item], [Item], false)}, {prop: "Min", name: "Min", pkg: "", typ: $funcType([], [Iterator], false)}, {prop: "Max", name: "Max", pkg: "", typ: $funcType([], [Iterator], false)}, {prop: "Limit", name: "Limit", pkg: "", typ: $funcType([], [Iterator], false)}, {prop: "NegativeLimit", name: "NegativeLimit", pkg: "", typ: $funcType([], [Iterator], false)}, {prop: "FindGE", name: "FindGE", pkg: "", typ: $funcType([Item], [Iterator], false)}, {prop: "FindLE", name: "FindLE", pkg: "", typ: $funcType([Item], [Iterator], false)}, {prop: "Insert", name: "Insert", pkg: "", typ: $funcType([Item], [$Bool], false)}, {prop: "DeleteWithKey", name: "DeleteWithKey", pkg: "", typ: $funcType([Item], [$Bool], false)}, {prop: "DeleteWithIterator", name: "DeleteWithIterator", pkg: "", typ: $funcType([Iterator], [], false)}, {prop: "recomputeMinNode", name: "recomputeMinNode", pkg: "github.com/glycerine/rbtree", typ: $funcType([], [], false)}, {prop: "recomputeMaxNode", name: "recomputeMaxNode", pkg: "github.com/glycerine/rbtree", typ: $funcType([], [], false)}, {prop: "maybeSetMinNode", name: "maybeSetMinNode", pkg: "github.com/glycerine/rbtree", typ: $funcType([ptrType], [], false)}, {prop: "maybeSetMaxNode", name: "maybeSetMaxNode", pkg: "github.com/glycerine/rbtree", typ: $funcType([ptrType], [], false)}, {prop: "doInsert", name: "doInsert", pkg: "github.com/glycerine/rbtree", typ: $funcType([Item], [ptrType], false)}, {prop: "findGE", name: "findGE", pkg: "github.com/glycerine/rbtree", typ: $funcType([Item], [ptrType, $Bool], false)}, {prop: "doDelete", name: "doDelete", pkg: "github.com/glycerine/rbtree", typ: $funcType([ptrType], [], false)}, {prop: "swapNodes", name: "swapNodes", pkg: "github.com/glycerine/rbtree", typ: $funcType([ptrType, ptrType], [], false)}, {prop: "deleteCase1", name: "deleteCase1", pkg: "github.com/glycerine/rbtree", typ: $funcType([ptrType], [], false)}, {prop: "deleteCase5", name: "deleteCase5", pkg: "github.com/glycerine/rbtree", typ: $funcType([ptrType], [], false)}, {prop: "replaceNode", name: "replaceNode", pkg: "github.com/glycerine/rbtree", typ: $funcType([ptrType, ptrType], [], false)}, {prop: "rotateLeft", name: "rotateLeft", pkg: "github.com/glycerine/rbtree", typ: $funcType([ptrType], [], false)}, {prop: "rotateRight", name: "rotateRight", pkg: "github.com/glycerine/rbtree", typ: $funcType([ptrType], [], false)}];
	Iterator.methods = [{prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Iterator], [$Bool], false)}, {prop: "Limit", name: "Limit", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Min", name: "Min", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Max", name: "Max", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "NegativeLimit", name: "NegativeLimit", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Item", name: "Item", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([], [Iterator], false)}, {prop: "Prev", name: "Prev", pkg: "", typ: $funcType([], [Iterator], false)}];
	ptrType.methods = [{prop: "isLeftChild", name: "isLeftChild", pkg: "github.com/glycerine/rbtree", typ: $funcType([], [$Bool], false)}, {prop: "isRightChild", name: "isRightChild", pkg: "github.com/glycerine/rbtree", typ: $funcType([], [$Bool], false)}, {prop: "sibling", name: "sibling", pkg: "github.com/glycerine/rbtree", typ: $funcType([], [ptrType], false)}, {prop: "doNext", name: "doNext", pkg: "github.com/glycerine/rbtree", typ: $funcType([], [ptrType], false)}, {prop: "doPrev", name: "doPrev", pkg: "github.com/glycerine/rbtree", typ: $funcType([], [ptrType], false)}];
	Item.init([]);
	CompareFunc.init([Item, Item], [$Int], false);
	Tree.init("github.com/glycerine/rbtree", [{prop: "root", name: "root", exported: false, typ: ptrType, tag: ""}, {prop: "minNode", name: "minNode", exported: false, typ: ptrType, tag: ""}, {prop: "maxNode", name: "maxNode", exported: false, typ: ptrType, tag: ""}, {prop: "count", name: "count", exported: false, typ: $Int, tag: ""}, {prop: "compare", name: "compare", exported: false, typ: CompareFunc, tag: ""}]);
	Iterator.init("github.com/glycerine/rbtree", [{prop: "root", name: "root", exported: false, typ: ptrType$1, tag: ""}, {prop: "node", name: "node", exported: false, typ: ptrType, tag: ""}]);
	node.init("github.com/glycerine/rbtree", [{prop: "item", name: "item", exported: false, typ: Item, tag: ""}, {prop: "parent", name: "parent", exported: false, typ: ptrType, tag: ""}, {prop: "left", name: "left", exported: false, typ: ptrType, tag: ""}, {prop: "right", name: "right", exported: false, typ: ptrType, tag: ""}, {prop: "color", name: "color", exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		negativeLimitNode = ptrType.nil;
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["zombiezen.com/go/capnproto2/internal/packed"] = (function() {
	var $pkg = {}, $init, bufio, errors, io, Reader, arrayType, sliceType, ptrType, ptrType$1, discard, Pack, numZeroWords, NewReader, min;
	bufio = $packages["bufio"];
	errors = $packages["errors"];
	io = $packages["io"];
	Reader = $pkg.Reader = $newType(0, $kindStruct, "packed.Reader", true, "zombiezen.com/go/capnproto2/internal/packed", true, function(rd_, err_, zeroes_, literal_, word_, wordIdx_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rd = ptrType.nil;
			this.err = $ifaceNil;
			this.zeroes = 0;
			this.literal = 0;
			this.word = arrayType.zero();
			this.wordIdx = 0;
			return;
		}
		this.rd = rd_;
		this.err = err_;
		this.zeroes = zeroes_;
		this.literal = literal_;
		this.word = word_;
		this.wordIdx = wordIdx_;
	});
	arrayType = $arrayType($Uint8, 8);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(bufio.Reader);
	ptrType$1 = $ptrType(Reader);
	discard = function(r, n) {
		var $ptr, _r, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = r.Discard(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: discard }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pack = function(dst, src) {
		var $ptr, _1, _i, _q, _r, _ref, b, buf, dst, end, hdr, i, i$1, n, rawWords, src, y, z, zeros;
		if (!(((_r = src.$length % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0))) {
			$panic(new $String("packed.Pack len(src) must be a multiple of 8"));
		}
		buf = arrayType.zero();
		while (true) {
			if (!(src.$length > 0)) { break; }
			hdr = 0;
			n = 0;
			i = 0;
			while (true) {
				if (!(i < 8)) { break; }
				if (!((((i < 0 || i >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + i]) === 0))) {
					hdr = (hdr | (((y = i, y < 32 ? (1 << y) : 0) << 24 >>> 24))) >>> 0;
					((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = ((i < 0 || i >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + i]));
					n = n + (1) >> 0;
				}
				i = i + (1) >>> 0;
			}
			dst = $append(dst, hdr);
			dst = $appendSlice(dst, $subslice(new sliceType(buf), 0, n));
			src = $subslice(src, 8);
			_1 = hdr;
			if (_1 === (0)) {
				z = min(numZeroWords(src), 255);
				dst = $append(dst, (z << 24 >>> 24));
				src = $subslice(src, ($imul(z, 8)));
			} else if (_1 === (255)) {
				i$1 = 0;
				end = min(src.$length, 2040);
				while (true) {
					if (!(i$1 < end)) { break; }
					zeros = 0;
					_ref = $subslice(src, i$1, (i$1 + 8 >> 0));
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
						if (b === 0) {
							zeros = zeros + (1) >> 0;
						}
						_i++;
					}
					if (zeros > 1) {
						break;
					}
					i$1 = i$1 + (8) >> 0;
				}
				rawWords = ((_q = i$1 / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24);
				dst = $append(dst, rawWords);
				dst = $appendSlice(dst, $subslice(src, 0, i$1));
				src = $subslice(src, i$1);
			}
		}
		return dst;
	};
	$pkg.Pack = Pack;
	numZeroWords = function(b) {
		var $ptr, _i, _q, _q$1, _ref, b, bb, i;
		_ref = b;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			bb = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((bb === 0))) {
				return (_q = i / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			}
			_i++;
		}
		return (_q$1 = b.$length / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	NewReader = function(r) {
		var $ptr, r;
		return new Reader.ptr(r, $ifaceNil, 0, 0, arrayType.zero(), 8);
	};
	$pkg.NewReader = NewReader;
	min = function(a, b) {
		var $ptr, a, b;
		if (b < a) {
			return b;
		}
		return a;
	};
	Reader.ptr.prototype.ReadWord = function(p) {
		var $ptr, _1, _i, _i$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, b, err, err$1, err$2, err$3, err$4, i, i$1, i$2, i$3, l, nz, p, r, tag, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; l = $f.l; nz = $f.nz; p = $f.p; r = $f.r; tag = $f.tag; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (p.$length < 8) {
			$s = -1; return errors.New("packed: read word buffer too small");
		}
		r.wordIdx = 8;
		if (!($interfaceIsEqual(r.err, $ifaceNil))) {
			err = r.err;
			r.err = $ifaceNil;
			$s = -1; return err;
		}
		p = $subslice(p, 0, 8);
			/* */ if (r.zeroes > 0) { $s = 2; continue; }
			/* */ if (r.literal > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (r.zeroes > 0) { */ case 2:
				r.zeroes = r.zeroes - (1) >> 0;
				_ref = p;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i] = 0);
					_i++;
				}
				$s = -1; return $ifaceNil;
			/* } else if (r.literal > 0) { */ case 3:
				r.literal = r.literal - (1) >> 0;
				_r = io.ReadFull(r.rd, p); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				err$1 = _tuple[1];
				$s = -1; return err$1;
			/* } */ case 4:
		case 1:
		tag = 0;
		/* */ if (r.rd.Buffered() < 9) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (r.rd.Buffered() < 9) { */ case 6:
			err$2 = $ifaceNil;
			_r$1 = r.rd.ReadByte(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			tag = _tuple$1[0];
			err$2 = _tuple$1[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return err$2;
			}
			_ref$1 = p;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i$1 = _i$1;
				((i$1 < 0 || i$1 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i$1] = 0);
				_i$1++;
			}
			i$2 = 0;
			/* while (true) { */ case 10:
				/* if (!(i$2 < 8)) { break; } */ if(!(i$2 < 8)) { $s = 11; continue; }
				/* */ if (!((((tag & (((y = i$2, y < 32 ? (1 << y) : 0) << 24 >>> 24))) >>> 0) === 0))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (!((((tag & (((y = i$2, y < 32 ? (1 << y) : 0) << 24 >>> 24))) >>> 0) === 0))) { */ case 12:
					_r$2 = r.rd.ReadByte(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$2 = _r$2;
					((i$2 < 0 || i$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i$2] = _tuple$2[0]);
					err$2 = _tuple$2[1];
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						if ($interfaceIsEqual(err$2, io.EOF)) {
							err$2 = io.ErrUnexpectedEOF;
						}
						$s = -1; return err$2;
					}
					$s = 14; continue;
				/* } else { */ case 13:
					((i$2 < 0 || i$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i$2] = 0);
				/* } */ case 14:
				i$2 = i$2 + (1) >>> 0;
			/* } */ $s = 10; continue; case 11:
			$s = 8; continue;
		/* } else { */ case 7:
			_r$3 = r.rd.Peek(9); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$3 = _r$3;
			b = _tuple$3[0];
			tag = (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]);
			i$3 = 1;
			nz = (tag & 1) >>> 0;
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((((i$3 < 0 || i$3 >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i$3]) & (-nz << 24 >>> 24)) >>> 0));
			i$3 = i$3 + ((nz >> 0)) >> 0;
			nz = ((tag >>> 1 << 24 >>> 24) & 1) >>> 0;
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((((i$3 < 0 || i$3 >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i$3]) & (-nz << 24 >>> 24)) >>> 0));
			i$3 = i$3 + ((nz >> 0)) >> 0;
			nz = ((tag >>> 2 << 24 >>> 24) & 1) >>> 0;
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((((i$3 < 0 || i$3 >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i$3]) & (-nz << 24 >>> 24)) >>> 0));
			i$3 = i$3 + ((nz >> 0)) >> 0;
			nz = ((tag >>> 3 << 24 >>> 24) & 1) >>> 0;
			(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3] = ((((i$3 < 0 || i$3 >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i$3]) & (-nz << 24 >>> 24)) >>> 0));
			i$3 = i$3 + ((nz >> 0)) >> 0;
			nz = ((tag >>> 4 << 24 >>> 24) & 1) >>> 0;
			(4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4] = ((((i$3 < 0 || i$3 >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i$3]) & (-nz << 24 >>> 24)) >>> 0));
			i$3 = i$3 + ((nz >> 0)) >> 0;
			nz = ((tag >>> 5 << 24 >>> 24) & 1) >>> 0;
			(5 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 5] = ((((i$3 < 0 || i$3 >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i$3]) & (-nz << 24 >>> 24)) >>> 0));
			i$3 = i$3 + ((nz >> 0)) >> 0;
			nz = ((tag >>> 6 << 24 >>> 24) & 1) >>> 0;
			(6 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 6] = ((((i$3 < 0 || i$3 >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i$3]) & (-nz << 24 >>> 24)) >>> 0));
			i$3 = i$3 + ((nz >> 0)) >> 0;
			nz = ((tag >>> 7 << 24 >>> 24) & 1) >>> 0;
			(7 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 7] = ((((i$3 < 0 || i$3 >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i$3]) & (-nz << 24 >>> 24)) >>> 0));
			i$3 = i$3 + ((nz >> 0)) >> 0;
			$r = discard(r.rd, i$3); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
			_1 = tag;
			/* */ if (_1 === (0)) { $s = 19; continue; }
			/* */ if (_1 === (255)) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (_1 === (0)) { */ case 19:
				_r$4 = r.rd.ReadByte(); /* */ $s = 22; case 22: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$4 = _r$4;
				z = _tuple$4[0];
				err$3 = _tuple$4[1];
				if ($interfaceIsEqual(err$3, io.EOF)) {
					r.err = io.ErrUnexpectedEOF;
					$s = -1; return $ifaceNil;
				} else if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					r.err = err$3;
					$s = -1; return $ifaceNil;
				}
				r.zeroes = (z >> 0);
				$s = 21; continue;
			/* } else if (_1 === (255)) { */ case 20:
				_r$5 = r.rd.ReadByte(); /* */ $s = 23; case 23: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple$5 = _r$5;
				l = _tuple$5[0];
				err$4 = _tuple$5[1];
				if ($interfaceIsEqual(err$4, io.EOF)) {
					r.err = io.ErrUnexpectedEOF;
					$s = -1; return $ifaceNil;
				} else if (!($interfaceIsEqual(err$4, $ifaceNil))) {
					r.err = err$4;
					$s = -1; return $ifaceNil;
				}
				r.literal = (l >> 0);
			/* } */ case 21:
		case 18:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadWord }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.l = l; $f.nz = nz; $f.p = p; $f.r = r; $f.tag = tag; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadWord = function(p) { return this.$val.ReadWord(p); };
	Reader.ptr.prototype.Read = function(p) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, err, err$1, err$2, n, p, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; n = $f.n; p = $f.p; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		if (r.wordIdx < 8) {
			n = $copySlice(p, $subslice(new sliceType(r.word), r.wordIdx));
			r.wordIdx = r.wordIdx + (n) >> 0;
		}
		/* while (true) { */ case 1:
			/* if (!(n < p.$length)) { break; } */ if(!(n < p.$length)) { $s = 2; continue; }
			if (r.rd.Buffered() < 9 && n > 0) {
				_tmp = n;
				_tmp$1 = $ifaceNil;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
			/* */ if ((p.$length - n >> 0) >= 8) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((p.$length - n >> 0) >= 8) { */ case 3:
				_r = r.ReadWord($subslice(p, n)); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				err$1 = _r;
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					_tmp$2 = n;
					_tmp$3 = err$1;
					n = _tmp$2;
					err = _tmp$3;
					$s = -1; return [n, err];
				}
				n = n + (8) >> 0;
				$s = 5; continue;
			/* } else { */ case 4:
				_r$1 = r.ReadWord(new sliceType(r.word)); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err$2 = _r$1;
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					_tmp$4 = n;
					_tmp$5 = err$2;
					n = _tmp$4;
					err = _tmp$5;
					$s = -1; return [n, err];
				}
				r.wordIdx = $copySlice($subslice(p, n), new sliceType(r.word));
				n = n + (r.wordIdx) >> 0;
			/* } */ case 5:
		/* } */ $s = 1; continue; case 2:
		_tmp$6 = n;
		_tmp$7 = $ifaceNil;
		n = _tmp$6;
		err = _tmp$7;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.n = n; $f.p = p; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Read = function(p) { return this.$val.Read(p); };
	ptrType$1.methods = [{prop: "ReadWord", name: "ReadWord", pkg: "", typ: $funcType([sliceType], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}];
	Reader.init("zombiezen.com/go/capnproto2/internal/packed", [{prop: "rd", name: "rd", exported: false, typ: ptrType, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "zeroes", name: "zeroes", exported: false, typ: $Int, tag: ""}, {prop: "literal", name: "literal", exported: false, typ: $Int, tag: ""}, {prop: "word", name: "word", exported: false, typ: arrayType, tag: ""}, {prop: "wordIdx", name: "wordIdx", exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["compress/flate"] = (function() {
	var $pkg = {}, $init, bufio, fmt, io, math, sort, strconv, sync, dictDecoder, huffmanBitWriter, hcode, huffmanEncoder, literalNode, levelInfo, byLiteral, byFreq, CorruptInputError, InternalError, Resetter, huffmanDecoder, Reader, decompressor, token, ptrType, arrayType, sliceType, sliceType$1, sliceType$4, sliceType$5, ptrType$3, arrayType$5, arrayType$6, sliceType$7, sliceType$8, sliceType$9, arrayType$7, arrayType$8, arrayType$9, arrayType$10, ptrType$7, ptrType$8, arrayType$11, ptrType$9, sliceType$10, ptrType$10, arrayType$12, arrayType$13, ptrType$11, arrayType$14, ptrType$12, arrayType$15, ptrType$13, ptrType$14, funcType$3, huffOffset, fixedLiteralEncoding, fixedOffsetEncoding, fixedOnce, fixedHuffmanDecoder, fixedHuffmanDecoder$24ptr, codeOrder, reverseByte, newHuffmanBitWriter, init, maxNode, newHuffmanEncoder, generateFixedLiteralEncoding, generateFixedOffsetEncoding, makeReader, fixedHuffmanDecoderInit, NewReader, NewReaderDict, reverseUint16, reverseBits;
	bufio = $packages["bufio"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	math = $packages["math"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	dictDecoder = $pkg.dictDecoder = $newType(0, $kindStruct, "flate.dictDecoder", true, "compress/flate", false, function(hist_, wrPos_, rdPos_, full_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.hist = sliceType$4.nil;
			this.wrPos = 0;
			this.rdPos = 0;
			this.full = false;
			return;
		}
		this.hist = hist_;
		this.wrPos = wrPos_;
		this.rdPos = rdPos_;
		this.full = full_;
	});
	huffmanBitWriter = $pkg.huffmanBitWriter = $newType(0, $kindStruct, "flate.huffmanBitWriter", true, "compress/flate", false, function(writer_, bits_, nbits_, bytes_, codegenFreq_, nbytes_, literalFreq_, offsetFreq_, codegen_, literalEncoding_, offsetEncoding_, codegenEncoding_, err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.writer = $ifaceNil;
			this.bits = new $Uint64(0, 0);
			this.nbits = 0;
			this.bytes = arrayType$5.zero();
			this.codegenFreq = arrayType$6.zero();
			this.nbytes = 0;
			this.literalFreq = sliceType$7.nil;
			this.offsetFreq = sliceType$7.nil;
			this.codegen = sliceType$4.nil;
			this.literalEncoding = ptrType.nil;
			this.offsetEncoding = ptrType.nil;
			this.codegenEncoding = ptrType.nil;
			this.err = $ifaceNil;
			return;
		}
		this.writer = writer_;
		this.bits = bits_;
		this.nbits = nbits_;
		this.bytes = bytes_;
		this.codegenFreq = codegenFreq_;
		this.nbytes = nbytes_;
		this.literalFreq = literalFreq_;
		this.offsetFreq = offsetFreq_;
		this.codegen = codegen_;
		this.literalEncoding = literalEncoding_;
		this.offsetEncoding = offsetEncoding_;
		this.codegenEncoding = codegenEncoding_;
		this.err = err_;
	});
	hcode = $pkg.hcode = $newType(0, $kindStruct, "flate.hcode", true, "compress/flate", false, function(code_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.code = 0;
			this.len = 0;
			return;
		}
		this.code = code_;
		this.len = len_;
	});
	huffmanEncoder = $pkg.huffmanEncoder = $newType(0, $kindStruct, "flate.huffmanEncoder", true, "compress/flate", false, function(codes_, freqcache_, bitCount_, lns_, lfs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.codes = sliceType$8.nil;
			this.freqcache = sliceType$9.nil;
			this.bitCount = arrayType$7.zero();
			this.lns = byLiteral.nil;
			this.lfs = byFreq.nil;
			return;
		}
		this.codes = codes_;
		this.freqcache = freqcache_;
		this.bitCount = bitCount_;
		this.lns = lns_;
		this.lfs = lfs_;
	});
	literalNode = $pkg.literalNode = $newType(0, $kindStruct, "flate.literalNode", true, "compress/flate", false, function(literal_, freq_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.literal = 0;
			this.freq = 0;
			return;
		}
		this.literal = literal_;
		this.freq = freq_;
	});
	levelInfo = $pkg.levelInfo = $newType(0, $kindStruct, "flate.levelInfo", true, "compress/flate", false, function(level_, lastFreq_, nextCharFreq_, nextPairFreq_, needed_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.level = 0;
			this.lastFreq = 0;
			this.nextCharFreq = 0;
			this.nextPairFreq = 0;
			this.needed = 0;
			return;
		}
		this.level = level_;
		this.lastFreq = lastFreq_;
		this.nextCharFreq = nextCharFreq_;
		this.nextPairFreq = nextPairFreq_;
		this.needed = needed_;
	});
	byLiteral = $pkg.byLiteral = $newType(12, $kindSlice, "flate.byLiteral", true, "compress/flate", false, null);
	byFreq = $pkg.byFreq = $newType(12, $kindSlice, "flate.byFreq", true, "compress/flate", false, null);
	CorruptInputError = $pkg.CorruptInputError = $newType(8, $kindInt64, "flate.CorruptInputError", true, "compress/flate", true, null);
	InternalError = $pkg.InternalError = $newType(8, $kindString, "flate.InternalError", true, "compress/flate", true, null);
	Resetter = $pkg.Resetter = $newType(8, $kindInterface, "flate.Resetter", true, "compress/flate", true, null);
	huffmanDecoder = $pkg.huffmanDecoder = $newType(0, $kindStruct, "flate.huffmanDecoder", true, "compress/flate", false, function(min_, chunks_, links_, linkMask_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.min = 0;
			this.chunks = arrayType.zero();
			this.links = sliceType$1.nil;
			this.linkMask = 0;
			return;
		}
		this.min = min_;
		this.chunks = chunks_;
		this.links = links_;
		this.linkMask = linkMask_;
	});
	Reader = $pkg.Reader = $newType(8, $kindInterface, "flate.Reader", true, "compress/flate", true, null);
	decompressor = $pkg.decompressor = $newType(0, $kindStruct, "flate.decompressor", true, "compress/flate", false, function(r_, roffset_, b_, nb_, h1_, h2_, bits_, codebits_, dict_, buf_, step_, stepState_, final$12_, err_, toRead_, hl_, hd_, copyLen_, copyDist_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.roffset = new $Int64(0, 0);
			this.b = 0;
			this.nb = 0;
			this.h1 = new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0);
			this.h2 = new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0);
			this.bits = ptrType$11.nil;
			this.codebits = ptrType$12.nil;
			this.dict = new dictDecoder.ptr(sliceType$4.nil, 0, 0, false);
			this.buf = arrayType$15.zero();
			this.step = $throwNilPointerError;
			this.stepState = 0;
			this.final$12 = false;
			this.err = $ifaceNil;
			this.toRead = sliceType$4.nil;
			this.hl = ptrType$9.nil;
			this.hd = ptrType$9.nil;
			this.copyLen = 0;
			this.copyDist = 0;
			return;
		}
		this.r = r_;
		this.roffset = roffset_;
		this.b = b_;
		this.nb = nb_;
		this.h1 = h1_;
		this.h2 = h2_;
		this.bits = bits_;
		this.codebits = codebits_;
		this.dict = dict_;
		this.buf = buf_;
		this.step = step_;
		this.stepState = stepState_;
		this.final$12 = final$12_;
		this.err = err_;
		this.toRead = toRead_;
		this.hl = hl_;
		this.hd = hd_;
		this.copyLen = copyLen_;
		this.copyDist = copyDist_;
	});
	token = $pkg.token = $newType(4, $kindUint32, "flate.token", true, "compress/flate", false, null);
	ptrType = $ptrType(huffmanEncoder);
	arrayType = $arrayType($Uint32, 512);
	sliceType = $sliceType($Uint32);
	sliceType$1 = $sliceType(sliceType);
	sliceType$4 = $sliceType($Uint8);
	sliceType$5 = $sliceType(token);
	ptrType$3 = $ptrType(huffmanBitWriter);
	arrayType$5 = $arrayType($Uint8, 248);
	arrayType$6 = $arrayType($Int32, 19);
	sliceType$7 = $sliceType($Int32);
	sliceType$8 = $sliceType(hcode);
	sliceType$9 = $sliceType(literalNode);
	arrayType$7 = $arrayType($Int32, 17);
	arrayType$8 = $arrayType(levelInfo, 16);
	arrayType$9 = $arrayType($Int32, 16);
	arrayType$10 = $arrayType(arrayType$9, 16);
	ptrType$7 = $ptrType(byLiteral);
	ptrType$8 = $ptrType(byFreq);
	arrayType$11 = $arrayType($Int, 16);
	ptrType$9 = $ptrType(huffmanDecoder);
	sliceType$10 = $sliceType($Int);
	ptrType$10 = $ptrType(decompressor);
	arrayType$12 = $arrayType($Int, 288);
	arrayType$13 = $arrayType($Int, 316);
	ptrType$11 = $ptrType(arrayType$13);
	arrayType$14 = $arrayType($Int, 19);
	ptrType$12 = $ptrType(arrayType$14);
	arrayType$15 = $arrayType($Uint8, 4);
	ptrType$13 = $ptrType(dictDecoder);
	ptrType$14 = $ptrType(hcode);
	funcType$3 = $funcType([ptrType$10], [], false);
	dictDecoder.ptr.prototype.init = function(size, dict) {
		var $ptr, dd, dict, size;
		dd = this;
		dictDecoder.copy(dd, new dictDecoder.ptr(dd.hist, 0, 0, false));
		if (dd.hist.$capacity < size) {
			dd.hist = $makeSlice(sliceType$4, size);
		}
		dd.hist = $subslice(dd.hist, 0, size);
		if (dict.$length > dd.hist.$length) {
			dict = $subslice(dict, (dict.$length - dd.hist.$length >> 0));
		}
		dd.wrPos = $copySlice(dd.hist, dict);
		if (dd.wrPos === dd.hist.$length) {
			dd.wrPos = 0;
			dd.full = true;
		}
		dd.rdPos = dd.wrPos;
	};
	dictDecoder.prototype.init = function(size, dict) { return this.$val.init(size, dict); };
	dictDecoder.ptr.prototype.histSize = function() {
		var $ptr, dd;
		dd = this;
		if (dd.full) {
			return dd.hist.$length;
		}
		return dd.wrPos;
	};
	dictDecoder.prototype.histSize = function() { return this.$val.histSize(); };
	dictDecoder.ptr.prototype.availRead = function() {
		var $ptr, dd;
		dd = this;
		return dd.wrPos - dd.rdPos >> 0;
	};
	dictDecoder.prototype.availRead = function() { return this.$val.availRead(); };
	dictDecoder.ptr.prototype.availWrite = function() {
		var $ptr, dd;
		dd = this;
		return dd.hist.$length - dd.wrPos >> 0;
	};
	dictDecoder.prototype.availWrite = function() { return this.$val.availWrite(); };
	dictDecoder.ptr.prototype.writeSlice = function() {
		var $ptr, dd;
		dd = this;
		return $subslice(dd.hist, dd.wrPos);
	};
	dictDecoder.prototype.writeSlice = function() { return this.$val.writeSlice(); };
	dictDecoder.ptr.prototype.writeMark = function(cnt) {
		var $ptr, cnt, dd;
		dd = this;
		dd.wrPos = dd.wrPos + (cnt) >> 0;
	};
	dictDecoder.prototype.writeMark = function(cnt) { return this.$val.writeMark(cnt); };
	dictDecoder.ptr.prototype.writeByte = function(c) {
		var $ptr, c, dd, x, x$1;
		dd = this;
		(x = dd.hist, x$1 = dd.wrPos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = c));
		dd.wrPos = dd.wrPos + (1) >> 0;
	};
	dictDecoder.prototype.writeByte = function(c) { return this.$val.writeByte(c); };
	dictDecoder.ptr.prototype.writeCopy = function(dist, length) {
		var $ptr, dd, dist, dstBase, dstPos, endPos, length, srcPos;
		dd = this;
		dstBase = dd.wrPos;
		dstPos = dstBase;
		srcPos = dstPos - dist >> 0;
		endPos = dstPos + length >> 0;
		if (endPos > dd.hist.$length) {
			endPos = dd.hist.$length;
		}
		if (srcPos < 0) {
			srcPos = srcPos + (dd.hist.$length) >> 0;
			dstPos = dstPos + ($copySlice($subslice(dd.hist, dstPos, endPos), $subslice(dd.hist, srcPos))) >> 0;
			srcPos = 0;
		}
		while (true) {
			if (!(dstPos < endPos)) { break; }
			dstPos = dstPos + ($copySlice($subslice(dd.hist, dstPos, endPos), $subslice(dd.hist, srcPos, dstPos))) >> 0;
		}
		dd.wrPos = dstPos;
		return dstPos - dstBase >> 0;
	};
	dictDecoder.prototype.writeCopy = function(dist, length) { return this.$val.writeCopy(dist, length); };
	dictDecoder.ptr.prototype.tryWriteCopy = function(dist, length) {
		var $ptr, dd, dist, dstBase, dstPos, endPos, length, srcPos, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		dd = this;
		dstPos = dd.wrPos;
		endPos = dstPos + length >> 0;
		if (dstPos < dist || endPos > dd.hist.$length) {
			$s = -1; return 0;
		}
		dstBase = dstPos;
		srcPos = dstPos - dist >> 0;
		/* loop: */ case 1:
		dstPos = dstPos + ($copySlice($subslice(dd.hist, dstPos, endPos), $subslice(dd.hist, srcPos, dstPos))) >> 0;
		/* */ if (dstPos < endPos) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (dstPos < endPos) { */ case 2:
			/* goto loop */ $s = 1; continue;
		/* } */ case 3:
		dd.wrPos = dstPos;
		$s = -1; return dstPos - dstBase >> 0;
		/* */ } return; }
	};
	dictDecoder.prototype.tryWriteCopy = function(dist, length) { return this.$val.tryWriteCopy(dist, length); };
	dictDecoder.ptr.prototype.readFlush = function() {
		var $ptr, _tmp, _tmp$1, dd, toRead;
		dd = this;
		toRead = $subslice(dd.hist, dd.rdPos, dd.wrPos);
		dd.rdPos = dd.wrPos;
		if (dd.wrPos === dd.hist.$length) {
			_tmp = 0;
			_tmp$1 = 0;
			dd.wrPos = _tmp;
			dd.rdPos = _tmp$1;
			dd.full = true;
		}
		return toRead;
	};
	dictDecoder.prototype.readFlush = function() { return this.$val.readFlush(); };
	newHuffmanBitWriter = function(w) {
		var $ptr, w;
		return new huffmanBitWriter.ptr(w, new $Uint64(0, 0), 0, arrayType$5.zero(), arrayType$6.zero(), 0, $makeSlice(sliceType$7, 286), $makeSlice(sliceType$7, 30), $makeSlice(sliceType$4, 317), newHuffmanEncoder(286), newHuffmanEncoder(30), newHuffmanEncoder(19), $ifaceNil);
	};
	init = function() {
		var $ptr, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = newHuffmanBitWriter($ifaceNil);
		(x = w.offsetFreq, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0] = 1));
		huffOffset = newHuffmanEncoder(30);
		$r = huffOffset.generate(w.offsetFreq, 15); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.$ptr = $ptr; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	hcode.ptr.prototype.set = function(code, length) {
		var $ptr, code, h, length;
		h = this;
		h.len = length;
		h.code = code;
	};
	hcode.prototype.set = function(code, length) { return this.$val.set(code, length); };
	maxNode = function() {
		var $ptr;
		return new literalNode.ptr(65535, 2147483647);
	};
	newHuffmanEncoder = function(size) {
		var $ptr, size;
		return new huffmanEncoder.ptr($makeSlice(sliceType$8, size), sliceType$9.nil, arrayType$7.zero(), byLiteral.nil, byFreq.nil);
	};
	generateFixedLiteralEncoding = function() {
		var $ptr, bits, ch, codes, h, size;
		h = newHuffmanEncoder(286);
		codes = h.codes;
		ch = 0;
		ch = 0;
		while (true) {
			if (!(ch < 286)) { break; }
			bits = 0;
			size = 0;
			switch (0) { default:
				if (ch < 144) {
					bits = ch + 48 << 16 >>> 16;
					size = 8;
					break;
				} else if (ch < 256) {
					bits = (ch + 400 << 16 >>> 16) - 144 << 16 >>> 16;
					size = 9;
					break;
				} else if (ch < 280) {
					bits = ch - 256 << 16 >>> 16;
					size = 7;
					break;
				} else {
					bits = (ch + 192 << 16 >>> 16) - 280 << 16 >>> 16;
					size = 8;
				}
			}
			hcode.copy(((ch < 0 || ch >= codes.$length) ? ($throwRuntimeError("index out of range"), undefined) : codes.$array[codes.$offset + ch]), new hcode.ptr(reverseBits(bits, (size << 24 >>> 24)), size));
			ch = ch + (1) << 16 >>> 16;
		}
		return h;
	};
	generateFixedOffsetEncoding = function() {
		var $ptr, _i, _ref, ch, codes, h;
		h = newHuffmanEncoder(30);
		codes = h.codes;
		_ref = codes;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			ch = _i;
			hcode.copy(((ch < 0 || ch >= codes.$length) ? ($throwRuntimeError("index out of range"), undefined) : codes.$array[codes.$offset + ch]), new hcode.ptr(reverseBits((ch << 16 >>> 16), 5), 5));
			_i++;
		}
		return h;
	};
	huffmanEncoder.ptr.prototype.bitCounts = function(list, maxBits) {
		var $ptr, bitCount, bits, counts, h, l, leafCounts, level, level$1, level$2, levels$1, list, maxBits, n, n$1, prevFreq, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		h = this;
		if (maxBits >= 16) {
			$panic(new $String("flate: maxBits too large"));
		}
		n = (list.$length >> 0);
		list = $subslice(list, 0, (n + 1 >> 0));
		literalNode.copy(((n < 0 || n >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + n]), maxNode());
		if (maxBits > (n - 1 >> 0)) {
			maxBits = n - 1 >> 0;
		}
		levels$1 = arrayType$8.zero();
		leafCounts = arrayType$10.zero();
		level = 1;
		while (true) {
			if (!(level <= maxBits)) { break; }
			levelInfo.copy(((level < 0 || level >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[level]), new levelInfo.ptr(level, (1 >= list.$length ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + 1]).freq, (2 >= list.$length ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + 2]).freq, (0 >= list.$length ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + 0]).freq + (1 >= list.$length ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + 1]).freq >> 0, 0));
			(x = ((level < 0 || level >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[level]), ((level < 0 || level >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[level] = 2));
			if (level === 1) {
				((level < 0 || level >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[level]).nextPairFreq = 2147483647;
			}
			level = level + (1) >> 0;
		}
		((maxBits < 0 || maxBits >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[maxBits]).needed = ($imul(2, n)) - 4 >> 0;
		level$1 = maxBits;
		while (true) {
			l = ((level$1 < 0 || level$1 >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[level$1]);
			if ((l.nextPairFreq === 2147483647) && (l.nextCharFreq === 2147483647)) {
				l.needed = 0;
				(x$1 = level$1 + 1 >> 0, ((x$1 < 0 || x$1 >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[x$1])).nextPairFreq = 2147483647;
				level$1 = level$1 + (1) >> 0;
				continue;
			}
			prevFreq = l.lastFreq;
			if (l.nextCharFreq < l.nextPairFreq) {
				n$1 = (x$2 = ((level$1 < 0 || level$1 >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[level$1]), ((level$1 < 0 || level$1 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[level$1])) + 1 >> 0;
				l.lastFreq = l.nextCharFreq;
				(x$3 = ((level$1 < 0 || level$1 >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[level$1]), ((level$1 < 0 || level$1 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[level$1] = n$1));
				l.nextCharFreq = ((n$1 < 0 || n$1 >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + n$1]).freq;
			} else {
				l.lastFreq = l.nextPairFreq;
				$copySlice($subslice(new sliceType$7(((level$1 < 0 || level$1 >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[level$1])), 0, level$1), $subslice(new sliceType$7((x$4 = level$1 - 1 >> 0, ((x$4 < 0 || x$4 >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[x$4]))), 0, level$1));
				(x$5 = l.level - 1 >> 0, ((x$5 < 0 || x$5 >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[x$5])).needed = 2;
			}
			l.needed = l.needed - (1) >> 0;
			if (l.needed === 0) {
				if (l.level === maxBits) {
					break;
				}
				(x$6 = l.level + 1 >> 0, ((x$6 < 0 || x$6 >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[x$6])).nextPairFreq = prevFreq + l.lastFreq >> 0;
				level$1 = level$1 + (1) >> 0;
			} else {
				while (true) {
					if (!((x$7 = level$1 - 1 >> 0, ((x$7 < 0 || x$7 >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[x$7])).needed > 0)) { break; }
					level$1 = level$1 - (1) >> 0;
				}
			}
		}
		if (!(((x$8 = ((maxBits < 0 || maxBits >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[maxBits]), ((maxBits < 0 || maxBits >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[maxBits])) === n))) {
			$panic(new $String("leafCounts[maxBits][maxBits] != n"));
		}
		bitCount = $subslice(new sliceType$7(h.bitCount), 0, (maxBits + 1 >> 0));
		bits = 1;
		counts = ((maxBits < 0 || maxBits >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[maxBits]);
		level$2 = maxBits;
		while (true) {
			if (!(level$2 > 0)) { break; }
			((bits < 0 || bits >= bitCount.$length) ? ($throwRuntimeError("index out of range"), undefined) : bitCount.$array[bitCount.$offset + bits] = ((counts.nilCheck, ((level$2 < 0 || level$2 >= counts.length) ? ($throwRuntimeError("index out of range"), undefined) : counts[level$2])) - (x$9 = level$2 - 1 >> 0, (counts.nilCheck, ((x$9 < 0 || x$9 >= counts.length) ? ($throwRuntimeError("index out of range"), undefined) : counts[x$9]))) >> 0));
			bits = bits + (1) >> 0;
			level$2 = level$2 - (1) >> 0;
		}
		return bitCount;
	};
	huffmanEncoder.prototype.bitCounts = function(list, maxBits) { return this.$val.bitCounts(list, maxBits); };
	huffmanEncoder.ptr.prototype.assignEncodingAndSize = function(bitCount, list) {
		var $ptr, _i, _i$1, _ref, _ref$1, bitCount, bits, chunk, code, h, list, n, node, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _ref = $f._ref; _ref$1 = $f._ref$1; bitCount = $f.bitCount; bits = $f.bits; chunk = $f.chunk; code = $f.code; h = $f.h; list = $f.list; n = $f.n; node = $f.node; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		code = 0;
		_ref = bitCount;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			n = _i;
			bits = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			code = (y = (1), y < 32 ? (code << y) : 0) << 16 >>> 16;
			/* */ if ((n === 0) || (bits === 0)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((n === 0) || (bits === 0)) { */ case 3:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			chunk = $subslice(list, (list.$length - (bits >> 0) >> 0));
			$r = (h.$ptr_lns || (h.$ptr_lns = new ptrType$7(function() { return this.$target.lns; }, function($v) { this.$target.lns = $v; }, h))).sort(chunk); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_ref$1 = chunk;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				node = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), literalNode);
				hcode.copy((x = h.codes, x$1 = node.literal, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])), new hcode.ptr(reverseBits(code, (n << 24 >>> 24)), (n << 16 >>> 16)));
				code = code + (1) << 16 >>> 16;
				_i$1++;
			}
			list = $subslice(list, 0, (list.$length - (bits >> 0) >> 0));
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanEncoder.ptr.prototype.assignEncodingAndSize }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.bitCount = bitCount; $f.bits = bits; $f.chunk = chunk; $f.code = code; $f.h = h; $f.list = list; $f.n = n; $f.node = node; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanEncoder.prototype.assignEncodingAndSize = function(bitCount, list) { return this.$val.assignEncodingAndSize(bitCount, list); };
	huffmanEncoder.ptr.prototype.generate = function(freq, maxBits) {
		var $ptr, _i, _i$1, _ref, _ref$1, bitCount, count, f, freq, h, i, i$1, list, maxBits, node, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _ref = $f._ref; _ref$1 = $f._ref$1; bitCount = $f.bitCount; count = $f.count; f = $f.f; freq = $f.freq; h = $f.h; i = $f.i; i$1 = $f.i$1; list = $f.list; maxBits = $f.maxBits; node = $f.node; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		if (h.freqcache === sliceType$9.nil) {
			h.freqcache = $makeSlice(sliceType$9, 287);
		}
		list = $subslice(h.freqcache, 0, (freq.$length + 1 >> 0));
		count = 0;
		_ref = freq;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((f === 0))) {
				literalNode.copy(((count < 0 || count >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + count]), new literalNode.ptr((i << 16 >>> 16), f));
				count = count + (1) >> 0;
			} else {
				literalNode.copy(((count < 0 || count >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + count]), new literalNode.ptr(0, 0));
				(x = h.codes, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).len = 0;
			}
			_i++;
		}
		literalNode.copy((x$1 = freq.$length, ((x$1 < 0 || x$1 >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + x$1])), new literalNode.ptr(0, 0));
		list = $subslice(list, 0, count);
		if (count <= 2) {
			_ref$1 = list;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i$1 = _i$1;
				node = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), literalNode);
				(x$2 = h.codes, x$3 = node.literal, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])).set((i$1 << 16 >>> 16), 1);
				_i$1++;
			}
			$s = -1; return;
		}
		$r = (h.$ptr_lfs || (h.$ptr_lfs = new ptrType$8(function() { return this.$target.lfs; }, function($v) { this.$target.lfs = $v; }, h))).sort(list); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		bitCount = h.bitCounts(list, maxBits);
		$r = h.assignEncodingAndSize(bitCount, list); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanEncoder.ptr.prototype.generate }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.bitCount = bitCount; $f.count = count; $f.f = f; $f.freq = freq; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.list = list; $f.maxBits = maxBits; $f.node = node; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanEncoder.prototype.generate = function(freq, maxBits) { return this.$val.generate(freq, maxBits); };
	$ptrType(byLiteral).prototype.sort = function(a) {
		var $ptr, a, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; a = $f.a; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.$set($subslice(new byLiteral(a.$array), a.$offset, a.$offset + a.$length));
		$r = sort.Sort(s); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(byLiteral).prototype.sort }; } $f.$ptr = $ptr; $f.a = a; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	byLiteral.prototype.Len = function() {
		var $ptr, s;
		s = this;
		return s.$length;
	};
	$ptrType(byLiteral).prototype.Len = function() { return this.$get().Len(); };
	byLiteral.prototype.Less = function(i, j) {
		var $ptr, i, j, s;
		s = this;
		return ((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]).literal < ((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]).literal;
	};
	$ptrType(byLiteral).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	byLiteral.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, s;
		s = this;
		_tmp = $clone(((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]), literalNode);
		_tmp$1 = $clone(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]), literalNode);
		literalNode.copy(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]), _tmp);
		literalNode.copy(((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]), _tmp$1);
	};
	$ptrType(byLiteral).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	$ptrType(byFreq).prototype.sort = function(a) {
		var $ptr, a, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; a = $f.a; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.$set($subslice(new byFreq(a.$array), a.$offset, a.$offset + a.$length));
		$r = sort.Sort(s); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(byFreq).prototype.sort }; } $f.$ptr = $ptr; $f.a = a; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	byFreq.prototype.Len = function() {
		var $ptr, s;
		s = this;
		return s.$length;
	};
	$ptrType(byFreq).prototype.Len = function() { return this.$get().Len(); };
	byFreq.prototype.Less = function(i, j) {
		var $ptr, i, j, s;
		s = this;
		if (((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]).freq === ((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]).freq) {
			return ((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]).literal < ((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]).literal;
		}
		return ((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]).freq < ((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]).freq;
	};
	$ptrType(byFreq).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	byFreq.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, s;
		s = this;
		_tmp = $clone(((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]), literalNode);
		_tmp$1 = $clone(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]), literalNode);
		literalNode.copy(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]), _tmp);
		literalNode.copy(((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]), _tmp$1);
	};
	$ptrType(byFreq).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	CorruptInputError.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return "flate: corrupt input before offset " + strconv.FormatInt(new $Int64(e.$high, e.$low), 10);
	};
	$ptrType(CorruptInputError).prototype.Error = function() { return this.$get().Error(); };
	InternalError.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "flate: internal error: " + e;
	};
	$ptrType(InternalError).prototype.Error = function() { return new InternalError(this.$get()).Error(); };
	huffmanDecoder.ptr.prototype.init = function(bits) {
		var $ptr, _i, _i$1, _i$2, _i$3, _i$4, _r, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tmp, _tmp$1, bits, chunk, chunk$1, chunk$2, code, code$1, count, h, i, i$1, i$2, j, j$1, link, linktab, linktab$1, max, min, n, n$1, nextcode, numLinks, off, off$1, off$2, reverse, reverse$1, value, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2, y$3, y$4;
		h = this;
		if (!((h.min === 0))) {
			huffmanDecoder.copy(h, new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0));
		}
		count = arrayType$11.zero();
		_tmp = 0;
		_tmp$1 = 0;
		min = _tmp;
		max = _tmp$1;
		_ref = bits;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			n = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (n === 0) {
				_i++;
				continue;
			}
			if ((min === 0) || n < min) {
				min = n;
			}
			if (n > max) {
				max = n;
			}
			((n < 0 || n >= count.length) ? ($throwRuntimeError("index out of range"), undefined) : count[n] = (((n < 0 || n >= count.length) ? ($throwRuntimeError("index out of range"), undefined) : count[n]) + (1) >> 0));
			_i++;
		}
		if (max === 0) {
			return true;
		}
		code = 0;
		nextcode = arrayType$11.zero();
		i = min;
		while (true) {
			if (!(i <= max)) { break; }
			code = (y = (1), y < 32 ? (code << y) : 0) >> 0;
			((i < 0 || i >= nextcode.length) ? ($throwRuntimeError("index out of range"), undefined) : nextcode[i] = code);
			code = code + (((i < 0 || i >= count.length) ? ($throwRuntimeError("index out of range"), undefined) : count[i])) >> 0;
			i = i + (1) >> 0;
		}
		if (!((code === ((y$1 = (max >>> 0), y$1 < 32 ? (1 << y$1) : 0) >> 0))) && !((code === 1) && (max === 1))) {
			return false;
		}
		h.min = min;
		if (max > 9) {
			numLinks = (y$2 = (((max >>> 0) - 9 >>> 0)), y$2 < 32 ? (1 << y$2) : 0) >> 0;
			h.linkMask = ((numLinks - 1 >> 0) >>> 0);
			link = nextcode[10] >> 1 >> 0;
			h.links = $makeSlice(sliceType$1, (512 - link >> 0));
			j = (link >>> 0);
			while (true) {
				if (!(j < 512)) { break; }
				reverse = ((x = j >>> 8 >>> 0, ((x < 0 || x >= reverseByte.length) ? ($throwRuntimeError("index out of range"), undefined) : reverseByte[x])) >> 0) | (((x$1 = (j & 255) >>> 0, ((x$1 < 0 || x$1 >= reverseByte.length) ? ($throwRuntimeError("index out of range"), undefined) : reverseByte[x$1])) >> 0) << 8 >> 0);
				reverse = (reverse >> $min((7), 31)) >> 0;
				off = j - (link >>> 0) >>> 0;
				if (false && !(((x$2 = h.chunks, ((reverse < 0 || reverse >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[reverse])) === 0))) {
					$panic(new $String("impossible: overwriting existing chunk"));
				}
				(x$3 = h.chunks, ((reverse < 0 || reverse >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[reverse] = ((((off << 4 >>> 0) | 10) >>> 0) >>> 0)));
				(x$4 = h.links, ((off < 0 || off >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + off] = $makeSlice(sliceType, numLinks)));
				j = j + (1) >>> 0;
			}
		}
		_ref$1 = bits;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			n$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (n$1 === 0) {
				_i$1++;
				continue;
			}
			code$1 = ((n$1 < 0 || n$1 >= nextcode.length) ? ($throwRuntimeError("index out of range"), undefined) : nextcode[n$1]);
			((n$1 < 0 || n$1 >= nextcode.length) ? ($throwRuntimeError("index out of range"), undefined) : nextcode[n$1] = (((n$1 < 0 || n$1 >= nextcode.length) ? ($throwRuntimeError("index out of range"), undefined) : nextcode[n$1]) + (1) >> 0));
			chunk = (((i$1 << 4 >> 0) | n$1) >>> 0);
			reverse$1 = ((x$5 = code$1 >> 8 >> 0, ((x$5 < 0 || x$5 >= reverseByte.length) ? ($throwRuntimeError("index out of range"), undefined) : reverseByte[x$5])) >> 0) | (((x$6 = code$1 & 255, ((x$6 < 0 || x$6 >= reverseByte.length) ? ($throwRuntimeError("index out of range"), undefined) : reverseByte[x$6])) >> 0) << 8 >> 0);
			reverse$1 = (reverse$1 >> $min((((16 - n$1 >> 0) >>> 0)), 31)) >> 0;
			if (n$1 <= 9) {
				off$1 = reverse$1;
				while (true) {
					if (!(off$1 < 512)) { break; }
					if (false && !(((x$7 = h.chunks, ((off$1 < 0 || off$1 >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[off$1])) === 0))) {
						$panic(new $String("impossible: overwriting existing chunk"));
					}
					(x$8 = h.chunks, ((off$1 < 0 || off$1 >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[off$1] = chunk));
					off$1 = off$1 + (((y$3 = (n$1 >>> 0), y$3 < 32 ? (1 << y$3) : 0) >> 0)) >> 0;
				}
			} else {
				j$1 = reverse$1 & 511;
				if (false && !(((((x$9 = h.chunks, ((j$1 < 0 || j$1 >= x$9.length) ? ($throwRuntimeError("index out of range"), undefined) : x$9[j$1])) & 15) >>> 0) === 10))) {
					$panic(new $String("impossible: not an indirect chunk"));
				}
				value = (x$10 = h.chunks, ((j$1 < 0 || j$1 >= x$10.length) ? ($throwRuntimeError("index out of range"), undefined) : x$10[j$1])) >>> 4 >>> 0;
				linktab = (x$11 = h.links, ((value < 0 || value >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + value]));
				reverse$1 = (reverse$1 >> $min((9), 31)) >> 0;
				off$2 = reverse$1;
				while (true) {
					if (!(off$2 < linktab.$length)) { break; }
					if (false && !((((off$2 < 0 || off$2 >= linktab.$length) ? ($throwRuntimeError("index out of range"), undefined) : linktab.$array[linktab.$offset + off$2]) === 0))) {
						$panic(new $String("impossible: overwriting existing chunk"));
					}
					((off$2 < 0 || off$2 >= linktab.$length) ? ($throwRuntimeError("index out of range"), undefined) : linktab.$array[linktab.$offset + off$2] = chunk);
					off$2 = off$2 + (((y$4 = ((n$1 - 9 >> 0) >>> 0), y$4 < 32 ? (1 << y$4) : 0) >> 0)) >> 0;
				}
			}
			_i$1++;
		}
		if (false) {
			_ref$2 = h.chunks;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < 512)) { break; }
				i$2 = _i$2;
				chunk$1 = ((_i$2 < 0 || _i$2 >= _ref$2.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2[_i$2]);
				if (chunk$1 === 0) {
					if ((code === 1) && ((_r = i$2 % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 1)) {
						_i$2++;
						continue;
					}
					$panic(new $String("impossible: missing chunk"));
				}
				_i$2++;
			}
			_ref$3 = h.links;
			_i$3 = 0;
			while (true) {
				if (!(_i$3 < _ref$3.$length)) { break; }
				linktab$1 = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$3]);
				_ref$4 = linktab$1;
				_i$4 = 0;
				while (true) {
					if (!(_i$4 < _ref$4.$length)) { break; }
					chunk$2 = ((_i$4 < 0 || _i$4 >= _ref$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$4.$array[_ref$4.$offset + _i$4]);
					if (chunk$2 === 0) {
						$panic(new $String("impossible: missing chunk"));
					}
					_i$4++;
				}
				_i$3++;
			}
		}
		return true;
	};
	huffmanDecoder.prototype.init = function(bits) { return this.$val.init(bits); };
	decompressor.ptr.prototype.nextBlock = function() {
		var $ptr, _1, _r, _r$1, f, typ, x, y, y$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; f = $f.f; typ = $f.typ; x = $f.x; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* while (true) { */ case 1:
			/* if (!(f.nb < 3)) { break; } */ if(!(f.nb < 3)) { $s = 2; continue; }
			_r = f.moreBits(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			f.err = _r;
			if (!($interfaceIsEqual(f.err, $ifaceNil))) {
				$s = -1; return;
			}
		/* } */ $s = 1; continue; case 2:
		f.final$12 = ((f.b & 1) >>> 0) === 1;
		f.b = (y = (1), y < 32 ? (f.b >>> y) : 0) >>> 0;
		typ = (f.b & 3) >>> 0;
		f.b = (y$1 = (2), y$1 < 32 ? (f.b >>> y$1) : 0) >>> 0;
		f.nb = f.nb - (3) >>> 0;
			_1 = typ;
			/* */ if (_1 === (0)) { $s = 5; continue; }
			/* */ if (_1 === (1)) { $s = 6; continue; }
			/* */ if (_1 === (2)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_1 === (0)) { */ case 5:
				$r = f.dataBlock(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 9; continue;
			/* } else if (_1 === (1)) { */ case 6:
				f.hl = fixedHuffmanDecoder;
				f.hd = ptrType$9.nil;
				$r = f.huffmanBlock(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 9; continue;
			/* } else if (_1 === (2)) { */ case 7:
				_r$1 = f.readHuffman(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				f.err = _r$1;
				if (!($interfaceIsEqual(f.err, $ifaceNil))) {
					/* break; */ $s = 4; continue;
				}
				f.hl = f.h1;
				f.hd = f.h2;
				$r = f.huffmanBlock(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 9; continue;
			/* } else { */ case 8:
				f.err = (x = f.roffset, new CorruptInputError(x.$high, x.$low));
			/* } */ case 9:
		case 4:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.nextBlock }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.typ = typ; $f.x = x; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.nextBlock = function() { return this.$val.nextBlock(); };
	decompressor.ptr.prototype.Read = function(b) {
		var $ptr, b, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* while (true) { */ case 1:
			if (f.toRead.$length > 0) {
				n = $copySlice(b, f.toRead);
				f.toRead = $subslice(f.toRead, n);
				if (f.toRead.$length === 0) {
					$s = -1; return [n, f.err];
				}
				$s = -1; return [n, $ifaceNil];
			}
			if (!($interfaceIsEqual(f.err, $ifaceNil))) {
				$s = -1; return [0, f.err];
			}
			$r = f.step(f); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (!($interfaceIsEqual(f.err, $ifaceNil)) && (f.toRead.$length === 0)) {
				f.toRead = f.dict.readFlush();
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.Read }; } $f.$ptr = $ptr; $f.b = b; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.Read = function(b) { return this.$val.Read(b); };
	decompressor.ptr.prototype.Close = function() {
		var $ptr, f;
		f = this;
		if ($interfaceIsEqual(f.err, io.EOF)) {
			return $ifaceNil;
		}
		return f.err;
	};
	decompressor.prototype.Close = function() { return this.$val.Close(); };
	decompressor.ptr.prototype.readHuffman = function() {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, b, err, err$1, err$2, err$3, f, i, i$1, i$2, j, n, nb, nclen, ndist, nlit, rep, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2, y$3, y$4, y$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; f = $f.f; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; j = $f.j; n = $f.n; nb = $f.nb; nclen = $f.nclen; ndist = $f.ndist; nlit = $f.nlit; rep = $f.rep; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; y$5 = $f.y$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* while (true) { */ case 1:
			/* if (!(f.nb < 14)) { break; } */ if(!(f.nb < 14)) { $s = 2; continue; }
			_r = f.moreBits(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
		/* } */ $s = 1; continue; case 2:
		nlit = (((f.b & 31) >>> 0) >> 0) + 257 >> 0;
		if (nlit > 286) {
			$s = -1; return (x = f.roffset, new CorruptInputError(x.$high, x.$low));
		}
		f.b = (y = (5), y < 32 ? (f.b >>> y) : 0) >>> 0;
		ndist = (((f.b & 31) >>> 0) >> 0) + 1 >> 0;
		if (ndist > 30) {
			$s = -1; return (x$1 = f.roffset, new CorruptInputError(x$1.$high, x$1.$low));
		}
		f.b = (y$1 = (5), y$1 < 32 ? (f.b >>> y$1) : 0) >>> 0;
		nclen = (((f.b & 15) >>> 0) >> 0) + 4 >> 0;
		f.b = (y$2 = (4), y$2 < 32 ? (f.b >>> y$2) : 0) >>> 0;
		f.nb = f.nb - (14) >>> 0;
		i = 0;
		/* while (true) { */ case 4:
			/* if (!(i < nclen)) { break; } */ if(!(i < nclen)) { $s = 5; continue; }
			/* while (true) { */ case 6:
				/* if (!(f.nb < 3)) { break; } */ if(!(f.nb < 3)) { $s = 7; continue; }
				_r$1 = f.moreBits(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err$1 = _r$1;
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
				}
			/* } */ $s = 6; continue; case 7:
			(x$2 = f.codebits, x$3 = ((i < 0 || i >= codeOrder.length) ? ($throwRuntimeError("index out of range"), undefined) : codeOrder[i]), x$2.nilCheck, ((x$3 < 0 || x$3 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[x$3] = (((f.b & 7) >>> 0) >> 0)));
			f.b = (y$3 = (3), y$3 < 32 ? (f.b >>> y$3) : 0) >>> 0;
			f.nb = f.nb - (3) >>> 0;
			i = i + (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		i$1 = nclen;
		while (true) {
			if (!(i$1 < 19)) { break; }
			(x$4 = f.codebits, x$5 = ((i$1 < 0 || i$1 >= codeOrder.length) ? ($throwRuntimeError("index out of range"), undefined) : codeOrder[i$1]), x$4.nilCheck, ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5] = 0));
			i$1 = i$1 + (1) >> 0;
		}
		if (!f.h1.init($subslice(new sliceType$10(f.codebits), 0))) {
			$s = -1; return (x$6 = f.roffset, new CorruptInputError(x$6.$high, x$6.$low));
		}
		_tmp = 0;
		_tmp$1 = nlit + ndist >> 0;
		i$2 = _tmp;
		n = _tmp$1;
		/* while (true) { */ case 9:
			/* if (!(i$2 < n)) { break; } */ if(!(i$2 < n)) { $s = 10; continue; }
			_r$2 = f.huffSym(f.h1); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = _r$2;
			x$7 = _tuple[0];
			err$2 = _tuple[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return err$2;
			}
			/* */ if (x$7 < 16) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (x$7 < 16) { */ case 12:
				(x$8 = f.bits, x$8.nilCheck, ((i$2 < 0 || i$2 >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[i$2] = x$7));
				i$2 = i$2 + (1) >> 0;
				/* continue; */ $s = 9; continue;
			/* } */ case 13:
			rep = 0;
			nb = 0;
			b = 0;
			_1 = x$7;
			if (_1 === (16)) {
				rep = 3;
				nb = 2;
				if (i$2 === 0) {
					$s = -1; return (x$9 = f.roffset, new CorruptInputError(x$9.$high, x$9.$low));
				}
				b = (x$10 = f.bits, x$11 = i$2 - 1 >> 0, (x$10.nilCheck, ((x$11 < 0 || x$11 >= x$10.length) ? ($throwRuntimeError("index out of range"), undefined) : x$10[x$11])));
			} else if (_1 === (17)) {
				rep = 3;
				nb = 3;
				b = 0;
			} else if (_1 === (18)) {
				rep = 11;
				nb = 7;
				b = 0;
			} else {
				$s = -1; return new InternalError("unexpected length code");
			}
			/* while (true) { */ case 14:
				/* if (!(f.nb < nb)) { break; } */ if(!(f.nb < nb)) { $s = 15; continue; }
				_r$3 = f.moreBits(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err$3 = _r$3;
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					$s = -1; return err$3;
				}
			/* } */ $s = 14; continue; case 15:
			rep = rep + ((((f.b & (((y$4 = nb, y$4 < 32 ? (1 << y$4) : 0) >>> 0) - 1 >>> 0)) >>> 0) >> 0)) >> 0;
			f.b = (y$5 = (nb), y$5 < 32 ? (f.b >>> y$5) : 0) >>> 0;
			f.nb = f.nb - (nb) >>> 0;
			if ((i$2 + rep >> 0) > n) {
				$s = -1; return (x$12 = f.roffset, new CorruptInputError(x$12.$high, x$12.$low));
			}
			j = 0;
			while (true) {
				if (!(j < rep)) { break; }
				(x$13 = f.bits, x$13.nilCheck, ((i$2 < 0 || i$2 >= x$13.length) ? ($throwRuntimeError("index out of range"), undefined) : x$13[i$2] = b));
				i$2 = i$2 + (1) >> 0;
				j = j + (1) >> 0;
			}
		/* } */ $s = 9; continue; case 10:
		if (!f.h1.init($subslice(new sliceType$10(f.bits), 0, nlit)) || !f.h2.init($subslice(new sliceType$10(f.bits), nlit, (nlit + ndist >> 0)))) {
			$s = -1; return (x$14 = f.roffset, new CorruptInputError(x$14.$high, x$14.$low));
		}
		if (f.h1.min < (x$15 = f.bits, (x$15.nilCheck, x$15[256]))) {
			f.h1.min = (x$16 = f.bits, (x$16.nilCheck, x$16[256]));
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.readHuffman }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.j = j; $f.n = n; $f.nb = nb; $f.nclen = nclen; $f.ndist = ndist; $f.nlit = nlit; $f.rep = rep; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.y$5 = y$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.readHuffman = function() { return this.$val.readHuffman(); };
	decompressor.ptr.prototype.huffmanBlock = function() {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, _tuple, _tuple$1, cnt, dist, err, extra, f, length, n, nb, v, x, x$1, x$2, x$3, y, y$1, y$2, y$3, y$4, y$5, y$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; cnt = $f.cnt; dist = $f.dist; err = $f.err; extra = $f.extra; f = $f.f; length = $f.length; n = $f.n; nb = $f.nb; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; y$5 = $f.y$5; y$6 = $f.y$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
			_1 = f.stepState;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (0)) { */ case 2:
				/* goto readLiteral */ $s = 5; continue;
				$s = 4; continue;
			/* } else if (_1 === (1)) { */ case 3:
				/* goto copyHistory */ $s = 6; continue;
			/* } */ case 4:
		case 1:
		/* readLiteral: */ case 5:
		_r = f.huffSym(f.hl); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		v = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			f.err = err;
			$s = -1; return;
		}
		n = 0;
		length = 0;
			/* */ if (v < 256) { $s = 9; continue; }
			/* */ if ((v === 256)) { $s = 10; continue; }
			/* */ if (v < 265) { $s = 11; continue; }
			/* */ if (v < 269) { $s = 12; continue; }
			/* */ if (v < 273) { $s = 13; continue; }
			/* */ if (v < 277) { $s = 14; continue; }
			/* */ if (v < 281) { $s = 15; continue; }
			/* */ if (v < 285) { $s = 16; continue; }
			/* */ if (v < 286) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (v < 256) { */ case 9:
				f.dict.writeByte((v << 24 >>> 24));
				if (f.dict.availWrite() === 0) {
					f.toRead = f.dict.readFlush();
					f.step = $methodExpr(ptrType$10, "huffmanBlock");
					f.stepState = 0;
					$s = -1; return;
				}
				/* goto readLiteral */ $s = 5; continue;
				$s = 19; continue;
			/* } else if ((v === 256)) { */ case 10:
				f.finishBlock();
				$s = -1; return;
			/* } else if (v < 265) { */ case 11:
				length = v - 254 >> 0;
				n = 0;
				$s = 19; continue;
			/* } else if (v < 269) { */ case 12:
				length = ($imul(v, 2)) - 519 >> 0;
				n = 1;
				$s = 19; continue;
			/* } else if (v < 273) { */ case 13:
				length = ($imul(v, 4)) - 1057 >> 0;
				n = 2;
				$s = 19; continue;
			/* } else if (v < 277) { */ case 14:
				length = ($imul(v, 8)) - 2149 >> 0;
				n = 3;
				$s = 19; continue;
			/* } else if (v < 281) { */ case 15:
				length = ($imul(v, 16)) - 4365 >> 0;
				n = 4;
				$s = 19; continue;
			/* } else if (v < 285) { */ case 16:
				length = ($imul(v, 32)) - 8861 >> 0;
				n = 5;
				$s = 19; continue;
			/* } else if (v < 286) { */ case 17:
				length = 258;
				n = 0;
				$s = 19; continue;
			/* } else { */ case 18:
				f.err = (x = f.roffset, new CorruptInputError(x.$high, x.$low));
				$s = -1; return;
			/* } */ case 19:
		case 8:
		/* */ if (n > 0) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if (n > 0) { */ case 20:
			/* while (true) { */ case 22:
				/* if (!(f.nb < n)) { break; } */ if(!(f.nb < n)) { $s = 23; continue; }
				_r$1 = f.moreBits(); /* */ $s = 24; case 24: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err = _r$1;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					f.err = err;
					$s = -1; return;
				}
			/* } */ $s = 22; continue; case 23:
			length = length + ((((f.b & (((y = n, y < 32 ? (1 << y) : 0) >>> 0) - 1 >>> 0)) >>> 0) >> 0)) >> 0;
			f.b = (y$1 = (n), y$1 < 32 ? (f.b >>> y$1) : 0) >>> 0;
			f.nb = f.nb - (n) >>> 0;
		/* } */ case 21:
		dist = 0;
		/* */ if (f.hd === ptrType$9.nil) { $s = 25; continue; }
		/* */ $s = 26; continue;
		/* if (f.hd === ptrType$9.nil) { */ case 25:
			/* while (true) { */ case 28:
				/* if (!(f.nb < 5)) { break; } */ if(!(f.nb < 5)) { $s = 29; continue; }
				_r$2 = f.moreBits(); /* */ $s = 30; case 30: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				err = _r$2;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					f.err = err;
					$s = -1; return;
				}
			/* } */ $s = 28; continue; case 29:
			dist = ((x$1 = (((f.b & 31) >>> 0)) << 3 >>> 0, ((x$1 < 0 || x$1 >= reverseByte.length) ? ($throwRuntimeError("index out of range"), undefined) : reverseByte[x$1])) >> 0);
			f.b = (y$2 = (5), y$2 < 32 ? (f.b >>> y$2) : 0) >>> 0;
			f.nb = f.nb - (5) >>> 0;
			$s = 27; continue;
		/* } else { */ case 26:
			_r$3 = f.huffSym(f.hd); /* */ $s = 31; case 31: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$1 = _r$3;
			dist = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				f.err = err;
				$s = -1; return;
			}
		/* } */ case 27:
			/* */ if (dist < 4) { $s = 33; continue; }
			/* */ if (dist < 30) { $s = 34; continue; }
			/* */ $s = 35; continue;
			/* if (dist < 4) { */ case 33:
				dist = dist + (1) >> 0;
				$s = 36; continue;
			/* } else if (dist < 30) { */ case 34:
				nb = ((dist - 2 >> 0) >>> 0) >>> 1 >>> 0;
				extra = (y$3 = nb, y$3 < 32 ? (((dist & 1)) << y$3) : 0) >> 0;
				/* while (true) { */ case 37:
					/* if (!(f.nb < nb)) { break; } */ if(!(f.nb < nb)) { $s = 38; continue; }
					_r$4 = f.moreBits(); /* */ $s = 39; case 39: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					err = _r$4;
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						f.err = err;
						$s = -1; return;
					}
				/* } */ $s = 37; continue; case 38:
				extra = extra | ((((f.b & (((y$4 = nb, y$4 < 32 ? (1 << y$4) : 0) >>> 0) - 1 >>> 0)) >>> 0) >> 0));
				f.b = (y$5 = (nb), y$5 < 32 ? (f.b >>> y$5) : 0) >>> 0;
				f.nb = f.nb - (nb) >>> 0;
				dist = (((y$6 = ((nb + 1 >>> 0)), y$6 < 32 ? (1 << y$6) : 0) >> 0) + 1 >> 0) + extra >> 0;
				$s = 36; continue;
			/* } else { */ case 35:
				f.err = (x$2 = f.roffset, new CorruptInputError(x$2.$high, x$2.$low));
				$s = -1; return;
			/* } */ case 36:
		case 32:
		if (dist > f.dict.histSize()) {
			f.err = (x$3 = f.roffset, new CorruptInputError(x$3.$high, x$3.$low));
			$s = -1; return;
		}
		_tmp = length;
		_tmp$1 = dist;
		f.copyLen = _tmp;
		f.copyDist = _tmp$1;
		/* goto copyHistory */ $s = 6; continue;
		/* copyHistory: */ case 6:
		cnt = f.dict.tryWriteCopy(f.copyDist, f.copyLen);
		if (cnt === 0) {
			cnt = f.dict.writeCopy(f.copyDist, f.copyLen);
		}
		f.copyLen = f.copyLen - (cnt) >> 0;
		if ((f.dict.availWrite() === 0) || f.copyLen > 0) {
			f.toRead = f.dict.readFlush();
			f.step = $methodExpr(ptrType$10, "huffmanBlock");
			f.stepState = 1;
			$s = -1; return;
		}
		/* goto readLiteral */ $s = 5; continue;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.huffmanBlock }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.cnt = cnt; $f.dist = dist; $f.err = err; $f.extra = extra; $f.f = f; $f.length = length; $f.n = n; $f.nb = nb; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.y$5 = y$5; $f.y$6 = y$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.huffmanBlock = function() { return this.$val.huffmanBlock(); };
	decompressor.ptr.prototype.dataBlock = function() {
		var $ptr, _r, _tuple, err, f, n, nn, nr, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; f = $f.f; n = $f.n; nn = $f.nn; nr = $f.nr; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		f.nb = 0;
		f.b = 0;
		_r = io.ReadFull(f.r, $subslice(new sliceType$4(f.buf), 0, 4)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		nr = _tuple[0];
		err = _tuple[1];
		f.roffset = (x = f.roffset, x$1 = new $Int64(0, nr), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			f.err = err;
			$s = -1; return;
		}
		n = (f.buf[0] >> 0) | ((f.buf[1] >> 0) << 8 >> 0);
		nn = (f.buf[2] >> 0) | ((f.buf[3] >> 0) << 8 >> 0);
		if (!(((nn << 16 >>> 16) === ((~n >> 0) << 16 >>> 16)))) {
			f.err = (x$2 = f.roffset, new CorruptInputError(x$2.$high, x$2.$low));
			$s = -1; return;
		}
		if (n === 0) {
			f.toRead = f.dict.readFlush();
			f.finishBlock();
			$s = -1; return;
		}
		f.copyLen = n;
		$r = f.copyData(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.dataBlock }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.n = n; $f.nn = nn; $f.nr = nr; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.dataBlock = function() { return this.$val.dataBlock(); };
	decompressor.ptr.prototype.copyData = function() {
		var $ptr, _r, _tuple, buf, cnt, err, f, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; cnt = $f.cnt; err = $f.err; f = $f.f; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		buf = f.dict.writeSlice();
		if (buf.$length > f.copyLen) {
			buf = $subslice(buf, 0, f.copyLen);
		}
		_r = io.ReadFull(f.r, buf); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		cnt = _tuple[0];
		err = _tuple[1];
		f.roffset = (x = f.roffset, x$1 = new $Int64(0, cnt), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		f.copyLen = f.copyLen - (cnt) >> 0;
		f.dict.writeMark(cnt);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			f.err = err;
			$s = -1; return;
		}
		if ((f.dict.availWrite() === 0) || f.copyLen > 0) {
			f.toRead = f.dict.readFlush();
			f.step = $methodExpr(ptrType$10, "copyData");
			$s = -1; return;
		}
		f.finishBlock();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.copyData }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.cnt = cnt; $f.err = err; $f.f = f; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.copyData = function() { return this.$val.copyData(); };
	decompressor.ptr.prototype.finishBlock = function() {
		var $ptr, f;
		f = this;
		if (f.final$12) {
			if (f.dict.availRead() > 0) {
				f.toRead = f.dict.readFlush();
			}
			f.err = io.EOF;
		}
		f.step = $methodExpr(ptrType$10, "nextBlock");
	};
	decompressor.prototype.finishBlock = function() { return this.$val.finishBlock(); };
	decompressor.ptr.prototype.moreBits = function() {
		var $ptr, _r, _tuple, c, err, f, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; f = $f.f; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = f.r.ReadByte(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		c = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			$s = -1; return err;
		}
		f.roffset = (x = f.roffset, x$1 = new $Int64(0, 1), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		f.b = (f.b | (((y = f.nb, y < 32 ? ((c >>> 0) << y) : 0) >>> 0))) >>> 0;
		f.nb = f.nb + (8) >>> 0;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.moreBits }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.f = f; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.moreBits = function() { return this.$val.moreBits(); };
	decompressor.ptr.prototype.huffSym = function(h) {
		var $ptr, _r, chunk, err, f, h, n, x, x$1, x$2, x$3, x$4, x$5, x$6, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; chunk = $f.chunk; err = $f.err; f = $f.f; h = $f.h; n = $f.n; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		n = (h.min >>> 0);
		/* while (true) { */ case 1:
			/* while (true) { */ case 3:
				/* if (!(f.nb < n)) { break; } */ if(!(f.nb < n)) { $s = 4; continue; }
				_r = f.moreBits(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				err = _r;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [0, err];
				}
			/* } */ $s = 3; continue; case 4:
			chunk = (x = h.chunks, x$1 = (f.b & 511) >>> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1]));
			n = (((chunk & 15) >>> 0) >>> 0);
			if (n > 9) {
				chunk = (x$2 = (x$3 = h.links, x$4 = chunk >>> 4 >>> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4])), x$5 = (((f.b >>> 9 >>> 0)) & h.linkMask) >>> 0, ((x$5 < 0 || x$5 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$5]));
				n = (((chunk & 15) >>> 0) >>> 0);
			}
			if (n <= f.nb) {
				if (n === 0) {
					f.err = (x$6 = f.roffset, new CorruptInputError(x$6.$high, x$6.$low));
					$s = -1; return [0, f.err];
				}
				f.b = (y = (n), y < 32 ? (f.b >>> y) : 0) >>> 0;
				f.nb = f.nb - (n) >>> 0;
				$s = -1; return [((chunk >>> 4 >>> 0) >> 0), $ifaceNil];
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.huffSym }; } $f.$ptr = $ptr; $f._r = _r; $f.chunk = chunk; $f.err = err; $f.f = f; $f.h = h; $f.n = n; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.huffSym = function(h) { return this.$val.huffSym(h); };
	makeReader = function(r) {
		var $ptr, _tuple, ok, r, rr;
		_tuple = $assertType(r, Reader, true);
		rr = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			return rr;
		}
		return bufio.NewReader(r);
	};
	fixedHuffmanDecoderInit = function() {
		var $ptr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fixedOnce.Do((function() {
			var $ptr, bits, i, i$1, i$2, i$3;
			bits = arrayType$12.zero();
			i = 0;
			while (true) {
				if (!(i < 144)) { break; }
				((i < 0 || i >= bits.length) ? ($throwRuntimeError("index out of range"), undefined) : bits[i] = 8);
				i = i + (1) >> 0;
			}
			i$1 = 144;
			while (true) {
				if (!(i$1 < 256)) { break; }
				((i$1 < 0 || i$1 >= bits.length) ? ($throwRuntimeError("index out of range"), undefined) : bits[i$1] = 9);
				i$1 = i$1 + (1) >> 0;
			}
			i$2 = 256;
			while (true) {
				if (!(i$2 < 280)) { break; }
				((i$2 < 0 || i$2 >= bits.length) ? ($throwRuntimeError("index out of range"), undefined) : bits[i$2] = 7);
				i$2 = i$2 + (1) >> 0;
			}
			i$3 = 280;
			while (true) {
				if (!(i$3 < 288)) { break; }
				((i$3 < 0 || i$3 >= bits.length) ? ($throwRuntimeError("index out of range"), undefined) : bits[i$3] = 8);
				i$3 = i$3 + (1) >> 0;
			}
			fixedHuffmanDecoder.init(new sliceType$10(bits));
		})); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fixedHuffmanDecoderInit }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.ptr.prototype.Reset = function(r, dict) {
		var $ptr, dict, f, r;
		f = this;
		decompressor.copy(f, new decompressor.ptr(makeReader(r), new $Int64(0, 0), 0, 0, new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), f.bits, f.codebits, $clone(f.dict, dictDecoder), arrayType$15.zero(), $methodExpr(ptrType$10, "nextBlock"), 0, false, $ifaceNil, sliceType$4.nil, ptrType$9.nil, ptrType$9.nil, 0, 0));
		f.dict.init(32768, dict);
		return $ifaceNil;
	};
	decompressor.prototype.Reset = function(r, dict) { return this.$val.Reset(r, dict); };
	NewReader = function(r) {
		var $ptr, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = [f];
		$r = fixedHuffmanDecoderInit(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		f[0] = new decompressor.ptr($ifaceNil, new $Int64(0, 0), 0, 0, new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), ptrType$11.nil, ptrType$12.nil, new dictDecoder.ptr(sliceType$4.nil, 0, 0, false), arrayType$15.zero(), $throwNilPointerError, 0, false, $ifaceNil, sliceType$4.nil, ptrType$9.nil, ptrType$9.nil, 0, 0);
		f[0].r = makeReader(r);
		f[0].bits = arrayType$13.zero();
		f[0].codebits = arrayType$14.zero();
		f[0].step = $methodExpr(ptrType$10, "nextBlock");
		f[0].dict.init(32768, sliceType$4.nil);
		$s = -1; return f[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReader }; } $f.$ptr = $ptr; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReader = NewReader;
	NewReaderDict = function(r, dict) {
		var $ptr, dict, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; dict = $f.dict; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = [f];
		$r = fixedHuffmanDecoderInit(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		f[0] = new decompressor.ptr($ifaceNil, new $Int64(0, 0), 0, 0, new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), ptrType$11.nil, ptrType$12.nil, new dictDecoder.ptr(sliceType$4.nil, 0, 0, false), arrayType$15.zero(), $throwNilPointerError, 0, false, $ifaceNil, sliceType$4.nil, ptrType$9.nil, ptrType$9.nil, 0, 0);
		f[0].r = makeReader(r);
		f[0].bits = arrayType$13.zero();
		f[0].codebits = arrayType$14.zero();
		f[0].step = $methodExpr(ptrType$10, "nextBlock");
		f[0].dict.init(32768, dict);
		$s = -1; return f[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReaderDict }; } $f.$ptr = $ptr; $f.dict = dict; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReaderDict = NewReaderDict;
	reverseUint16 = function(v) {
		var $ptr, v, x, x$1;
		return (((x = v >>> 8 << 16 >>> 16, ((x < 0 || x >= reverseByte.length) ? ($throwRuntimeError("index out of range"), undefined) : reverseByte[x])) << 16 >>> 16) | (((x$1 = (v & 255) >>> 0, ((x$1 < 0 || x$1 >= reverseByte.length) ? ($throwRuntimeError("index out of range"), undefined) : reverseByte[x$1])) << 16 >>> 16) << 8 << 16 >>> 16)) >>> 0;
	};
	reverseBits = function(number, bitLength) {
		var $ptr, bitLength, number, y;
		return reverseUint16((y = ((16 - bitLength << 24 >>> 24)), y < 32 ? (number << y) : 0) << 16 >>> 16);
	};
	ptrType$13.methods = [{prop: "init", name: "init", pkg: "compress/flate", typ: $funcType([$Int, sliceType$4], [], false)}, {prop: "histSize", name: "histSize", pkg: "compress/flate", typ: $funcType([], [$Int], false)}, {prop: "availRead", name: "availRead", pkg: "compress/flate", typ: $funcType([], [$Int], false)}, {prop: "availWrite", name: "availWrite", pkg: "compress/flate", typ: $funcType([], [$Int], false)}, {prop: "writeSlice", name: "writeSlice", pkg: "compress/flate", typ: $funcType([], [sliceType$4], false)}, {prop: "writeMark", name: "writeMark", pkg: "compress/flate", typ: $funcType([$Int], [], false)}, {prop: "writeByte", name: "writeByte", pkg: "compress/flate", typ: $funcType([$Uint8], [], false)}, {prop: "writeCopy", name: "writeCopy", pkg: "compress/flate", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "tryWriteCopy", name: "tryWriteCopy", pkg: "compress/flate", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "readFlush", name: "readFlush", pkg: "compress/flate", typ: $funcType([], [sliceType$4], false)}];
	ptrType$3.methods = [{prop: "reset", name: "reset", pkg: "compress/flate", typ: $funcType([io.Writer], [], false)}, {prop: "flush", name: "flush", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "write", name: "write", pkg: "compress/flate", typ: $funcType([sliceType$4], [], false)}, {prop: "writeBits", name: "writeBits", pkg: "compress/flate", typ: $funcType([$Int32, $Uint], [], false)}, {prop: "writeBytes", name: "writeBytes", pkg: "compress/flate", typ: $funcType([sliceType$4], [], false)}, {prop: "generateCodegen", name: "generateCodegen", pkg: "compress/flate", typ: $funcType([$Int, $Int, ptrType, ptrType], [], false)}, {prop: "dynamicSize", name: "dynamicSize", pkg: "compress/flate", typ: $funcType([ptrType, ptrType, $Int], [$Int, $Int], false)}, {prop: "fixedSize", name: "fixedSize", pkg: "compress/flate", typ: $funcType([$Int], [$Int], false)}, {prop: "storedSize", name: "storedSize", pkg: "compress/flate", typ: $funcType([sliceType$4], [$Int, $Bool], false)}, {prop: "writeCode", name: "writeCode", pkg: "compress/flate", typ: $funcType([hcode], [], false)}, {prop: "writeDynamicHeader", name: "writeDynamicHeader", pkg: "compress/flate", typ: $funcType([$Int, $Int, $Int, $Bool], [], false)}, {prop: "writeStoredHeader", name: "writeStoredHeader", pkg: "compress/flate", typ: $funcType([$Int, $Bool], [], false)}, {prop: "writeFixedHeader", name: "writeFixedHeader", pkg: "compress/flate", typ: $funcType([$Bool], [], false)}, {prop: "writeBlock", name: "writeBlock", pkg: "compress/flate", typ: $funcType([sliceType$5, $Bool, sliceType$4], [], false)}, {prop: "writeBlockDynamic", name: "writeBlockDynamic", pkg: "compress/flate", typ: $funcType([sliceType$5, $Bool, sliceType$4], [], false)}, {prop: "indexTokens", name: "indexTokens", pkg: "compress/flate", typ: $funcType([sliceType$5], [$Int, $Int], false)}, {prop: "writeTokens", name: "writeTokens", pkg: "compress/flate", typ: $funcType([sliceType$5, sliceType$8, sliceType$8], [], false)}, {prop: "writeBlockHuff", name: "writeBlockHuff", pkg: "compress/flate", typ: $funcType([$Bool, sliceType$4], [], false)}];
	ptrType$14.methods = [{prop: "set", name: "set", pkg: "compress/flate", typ: $funcType([$Uint16, $Uint16], [], false)}];
	ptrType.methods = [{prop: "bitLength", name: "bitLength", pkg: "compress/flate", typ: $funcType([sliceType$7], [$Int], false)}, {prop: "bitCounts", name: "bitCounts", pkg: "compress/flate", typ: $funcType([sliceType$9, $Int32], [sliceType$7], false)}, {prop: "assignEncodingAndSize", name: "assignEncodingAndSize", pkg: "compress/flate", typ: $funcType([sliceType$7, sliceType$9], [], false)}, {prop: "generate", name: "generate", pkg: "compress/flate", typ: $funcType([sliceType$7, $Int32], [], false)}];
	byLiteral.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	ptrType$7.methods = [{prop: "sort", name: "sort", pkg: "compress/flate", typ: $funcType([sliceType$9], [], false)}];
	byFreq.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	ptrType$8.methods = [{prop: "sort", name: "sort", pkg: "compress/flate", typ: $funcType([sliceType$9], [], false)}];
	CorruptInputError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	InternalError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$9.methods = [{prop: "init", name: "init", pkg: "compress/flate", typ: $funcType([sliceType$10], [$Bool], false)}];
	ptrType$10.methods = [{prop: "nextBlock", name: "nextBlock", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$4], [$Int, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "readHuffman", name: "readHuffman", pkg: "compress/flate", typ: $funcType([], [$error], false)}, {prop: "huffmanBlock", name: "huffmanBlock", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "dataBlock", name: "dataBlock", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "copyData", name: "copyData", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "finishBlock", name: "finishBlock", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "moreBits", name: "moreBits", pkg: "compress/flate", typ: $funcType([], [$error], false)}, {prop: "huffSym", name: "huffSym", pkg: "compress/flate", typ: $funcType([ptrType$9], [$Int, $error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader, sliceType$4], [$error], false)}];
	token.methods = [{prop: "literal", name: "literal", pkg: "compress/flate", typ: $funcType([], [$Uint32], false)}, {prop: "offset", name: "offset", pkg: "compress/flate", typ: $funcType([], [$Uint32], false)}, {prop: "length", name: "length", pkg: "compress/flate", typ: $funcType([], [$Uint32], false)}];
	dictDecoder.init("compress/flate", [{prop: "hist", name: "hist", exported: false, typ: sliceType$4, tag: ""}, {prop: "wrPos", name: "wrPos", exported: false, typ: $Int, tag: ""}, {prop: "rdPos", name: "rdPos", exported: false, typ: $Int, tag: ""}, {prop: "full", name: "full", exported: false, typ: $Bool, tag: ""}]);
	huffmanBitWriter.init("compress/flate", [{prop: "writer", name: "writer", exported: false, typ: io.Writer, tag: ""}, {prop: "bits", name: "bits", exported: false, typ: $Uint64, tag: ""}, {prop: "nbits", name: "nbits", exported: false, typ: $Uint, tag: ""}, {prop: "bytes", name: "bytes", exported: false, typ: arrayType$5, tag: ""}, {prop: "codegenFreq", name: "codegenFreq", exported: false, typ: arrayType$6, tag: ""}, {prop: "nbytes", name: "nbytes", exported: false, typ: $Int, tag: ""}, {prop: "literalFreq", name: "literalFreq", exported: false, typ: sliceType$7, tag: ""}, {prop: "offsetFreq", name: "offsetFreq", exported: false, typ: sliceType$7, tag: ""}, {prop: "codegen", name: "codegen", exported: false, typ: sliceType$4, tag: ""}, {prop: "literalEncoding", name: "literalEncoding", exported: false, typ: ptrType, tag: ""}, {prop: "offsetEncoding", name: "offsetEncoding", exported: false, typ: ptrType, tag: ""}, {prop: "codegenEncoding", name: "codegenEncoding", exported: false, typ: ptrType, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}]);
	hcode.init("compress/flate", [{prop: "code", name: "code", exported: false, typ: $Uint16, tag: ""}, {prop: "len", name: "len", exported: false, typ: $Uint16, tag: ""}]);
	huffmanEncoder.init("compress/flate", [{prop: "codes", name: "codes", exported: false, typ: sliceType$8, tag: ""}, {prop: "freqcache", name: "freqcache", exported: false, typ: sliceType$9, tag: ""}, {prop: "bitCount", name: "bitCount", exported: false, typ: arrayType$7, tag: ""}, {prop: "lns", name: "lns", exported: false, typ: byLiteral, tag: ""}, {prop: "lfs", name: "lfs", exported: false, typ: byFreq, tag: ""}]);
	literalNode.init("compress/flate", [{prop: "literal", name: "literal", exported: false, typ: $Uint16, tag: ""}, {prop: "freq", name: "freq", exported: false, typ: $Int32, tag: ""}]);
	levelInfo.init("compress/flate", [{prop: "level", name: "level", exported: false, typ: $Int32, tag: ""}, {prop: "lastFreq", name: "lastFreq", exported: false, typ: $Int32, tag: ""}, {prop: "nextCharFreq", name: "nextCharFreq", exported: false, typ: $Int32, tag: ""}, {prop: "nextPairFreq", name: "nextPairFreq", exported: false, typ: $Int32, tag: ""}, {prop: "needed", name: "needed", exported: false, typ: $Int32, tag: ""}]);
	byLiteral.init(literalNode);
	byFreq.init(literalNode);
	Resetter.init([{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader, sliceType$4], [$error], false)}]);
	huffmanDecoder.init("compress/flate", [{prop: "min", name: "min", exported: false, typ: $Int, tag: ""}, {prop: "chunks", name: "chunks", exported: false, typ: arrayType, tag: ""}, {prop: "links", name: "links", exported: false, typ: sliceType$1, tag: ""}, {prop: "linkMask", name: "linkMask", exported: false, typ: $Uint32, tag: ""}]);
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$4], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}]);
	decompressor.init("compress/flate", [{prop: "r", name: "r", exported: false, typ: Reader, tag: ""}, {prop: "roffset", name: "roffset", exported: false, typ: $Int64, tag: ""}, {prop: "b", name: "b", exported: false, typ: $Uint32, tag: ""}, {prop: "nb", name: "nb", exported: false, typ: $Uint, tag: ""}, {prop: "h1", name: "h1", exported: false, typ: huffmanDecoder, tag: ""}, {prop: "h2", name: "h2", exported: false, typ: huffmanDecoder, tag: ""}, {prop: "bits", name: "bits", exported: false, typ: ptrType$11, tag: ""}, {prop: "codebits", name: "codebits", exported: false, typ: ptrType$12, tag: ""}, {prop: "dict", name: "dict", exported: false, typ: dictDecoder, tag: ""}, {prop: "buf", name: "buf", exported: false, typ: arrayType$15, tag: ""}, {prop: "step", name: "step", exported: false, typ: funcType$3, tag: ""}, {prop: "stepState", name: "stepState", exported: false, typ: $Int, tag: ""}, {prop: "final$12", name: "final", exported: false, typ: $Bool, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "toRead", name: "toRead", exported: false, typ: sliceType$4, tag: ""}, {prop: "hl", name: "hl", exported: false, typ: ptrType$9, tag: ""}, {prop: "hd", name: "hd", exported: false, typ: ptrType$9, tag: ""}, {prop: "copyLen", name: "copyLen", exported: false, typ: $Int, tag: ""}, {prop: "copyDist", name: "copyDist", exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		huffOffset = ptrType.nil;
		fixedOnce = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
		fixedHuffmanDecoder = new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0);
		codeOrder = $toNativeArray($kindInt, [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
		reverseByte = $toNativeArray($kindUint8, [0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240, 8, 136, 72, 200, 40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248, 4, 132, 68, 196, 36, 164, 100, 228, 20, 148, 84, 212, 52, 180, 116, 244, 12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250, 6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254, 1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81, 209, 49, 177, 113, 241, 9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217, 57, 185, 121, 249, 5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117, 245, 13, 141, 77, 205, 45, 173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253, 3, 131, 67, 195, 35, 163, 99, 227, 19, 147, 83, 211, 51, 179, 115, 243, 11, 139, 75, 203, 43, 171, 107, 235, 27, 155, 91, 219, 59, 187, 123, 251, 7, 135, 71, 199, 39, 167, 103, 231, 23, 151, 87, 215, 55, 183, 119, 247, 15, 143, 79, 207, 47, 175, 111, 239, 31, 159, 95, 223, 63, 191, 127, 255]);
		fixedLiteralEncoding = generateFixedLiteralEncoding();
		fixedOffsetEncoding = generateFixedOffsetEncoding();
		$r = init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["hash"] = (function() {
	var $pkg = {}, $init, io, Hash32, sliceType;
	io = $packages["io"];
	Hash32 = $pkg.Hash32 = $newType(8, $kindInterface, "hash.Hash32", true, "hash", true, null);
	sliceType = $sliceType($Uint8);
	Hash32.init([{prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}, {prop: "Sum32", name: "Sum32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["hash/adler32"] = (function() {
	var $pkg = {}, $init, hash, digest, ptrType, sliceType, New, update, Checksum;
	hash = $packages["hash"];
	digest = $pkg.digest = $newType(4, $kindUint32, "adler32.digest", true, "hash/adler32", false, null);
	ptrType = $ptrType(digest);
	sliceType = $sliceType($Uint8);
	$ptrType(digest).prototype.Reset = function() {
		var $ptr, d;
		d = this;
		d.$set(1);
	};
	New = function() {
		var $ptr, d;
		d = $newDataPointer(0, ptrType);
		d.Reset();
		return d;
	};
	$pkg.New = New;
	$ptrType(digest).prototype.Size = function() {
		var $ptr, d;
		d = this;
		return 4;
	};
	$ptrType(digest).prototype.BlockSize = function() {
		var $ptr, d;
		d = this;
		return 4;
	};
	update = function(d, p) {
		var $ptr, _i, _r, _r$1, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, d, p, q, s1, s2, x;
		_tmp = (((d & 65535) >>> 0) >>> 0);
		_tmp$1 = ((d >>> 16 >>> 0) >>> 0);
		s1 = _tmp;
		s2 = _tmp$1;
		while (true) {
			if (!(p.$length > 0)) { break; }
			q = sliceType.nil;
			if (p.$length > 5552) {
				_tmp$2 = $subslice(p, 0, 5552);
				_tmp$3 = $subslice(p, 5552);
				p = _tmp$2;
				q = _tmp$3;
			}
			while (true) {
				if (!(p.$length >= 4)) { break; }
				s1 = s1 + (((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]) >>> 0)) >>> 0;
				s2 = s2 + (s1) >>> 0;
				s1 = s1 + (((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]) >>> 0)) >>> 0;
				s2 = s2 + (s1) >>> 0;
				s1 = s1 + (((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]) >>> 0)) >>> 0;
				s2 = s2 + (s1) >>> 0;
				s1 = s1 + (((3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]) >>> 0)) >>> 0;
				s2 = s2 + (s1) >>> 0;
				p = $subslice(p, 4);
			}
			_ref = p;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				s1 = s1 + ((x >>> 0)) >>> 0;
				s2 = s2 + (s1) >>> 0;
				_i++;
			}
			s1 = (_r = s1 % (65521), _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
			s2 = (_r$1 = s2 % (65521), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
			p = q;
		}
		return ((((s2 << 16 >>> 0) | s1) >>> 0) >>> 0);
	};
	$ptrType(digest).prototype.Write = function(p) {
		var $ptr, _tmp, _tmp$1, d, err, nn, p;
		nn = 0;
		err = $ifaceNil;
		d = this;
		d.$set(update(d.$get(), p));
		_tmp = p.$length;
		_tmp$1 = $ifaceNil;
		nn = _tmp;
		err = _tmp$1;
		return [nn, err];
	};
	$ptrType(digest).prototype.Sum32 = function() {
		var $ptr, d;
		d = this;
		return (d.$get() >>> 0);
	};
	$ptrType(digest).prototype.Sum = function(in$1) {
		var $ptr, d, in$1, s;
		d = this;
		s = (d.$get() >>> 0);
		return $append(in$1, ((s >>> 24 >>> 0) << 24 >>> 24), ((s >>> 16 >>> 0) << 24 >>> 24), ((s >>> 8 >>> 0) << 24 >>> 24), (s << 24 >>> 24));
	};
	Checksum = function(data) {
		var $ptr, data;
		return (update(1, data) >>> 0);
	};
	$pkg.Checksum = Checksum;
	ptrType.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Sum32", name: "Sum32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = hash.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["compress/zlib"] = (function() {
	var $pkg = {}, $init, bufio, flate, errors, fmt, hash, adler32, io, reader, sliceType, arrayType, ptrType$2, NewReader, NewReaderDict;
	bufio = $packages["bufio"];
	flate = $packages["compress/flate"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	hash = $packages["hash"];
	adler32 = $packages["hash/adler32"];
	io = $packages["io"];
	reader = $pkg.reader = $newType(0, $kindStruct, "zlib.reader", true, "compress/zlib", false, function(r_, decompressor_, digest_, err_, scratch_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.decompressor = $ifaceNil;
			this.digest = $ifaceNil;
			this.err = $ifaceNil;
			this.scratch = arrayType.zero();
			return;
		}
		this.r = r_;
		this.decompressor = decompressor_;
		this.digest = digest_;
		this.err = err_;
		this.scratch = scratch_;
	});
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	ptrType$2 = $ptrType(reader);
	NewReader = function(r) {
		var $ptr, _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = NewReaderDict(r, sliceType.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReader }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReader = NewReader;
	NewReaderDict = function(r, dict) {
		var $ptr, _r, dict, err, r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; dict = $f.dict; err = $f.err; r = $f.r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = new reader.ptr($ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, arrayType.zero());
		_r = z.Reset(r, dict); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, err];
		}
		$s = -1; return [z, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReaderDict }; } $f.$ptr = $ptr; $f._r = _r; $f.dict = dict; $f.err = err; $f.r = r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReaderDict = NewReaderDict;
	reader.ptr.prototype.Read = function(p) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, checksum, err, n, p, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; checksum = $f.checksum; err = $f.err; n = $f.n; p = $f.p; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			$s = -1; return [0, z.err];
		}
		n = 0;
		_r = z.decompressor.Read(p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		z.err = _tuple[1];
		_r$1 = z.digest.Write($subslice(p, 0, n)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		if (!($interfaceIsEqual(z.err, io.EOF))) {
			$s = -1; return [n, z.err];
		}
		_r$2 = io.ReadFull(z.r, $subslice(new sliceType(z.scratch), 0, 4)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			z.err = err;
			$s = -1; return [n, z.err];
		}
		checksum = (((((((z.scratch[0] >>> 0) << 24 >>> 0) | ((z.scratch[1] >>> 0) << 16 >>> 0)) >>> 0) | ((z.scratch[2] >>> 0) << 8 >>> 0)) >>> 0) | (z.scratch[3] >>> 0)) >>> 0;
		_r$3 = z.digest.Sum32(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!((checksum === _r$3))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((checksum === _r$3))) { */ case 4:
			z.err = $pkg.ErrChecksum;
			$s = -1; return [n, z.err];
		/* } */ case 5:
		$s = -1; return [n, io.EOF];
		/* */ } return; } if ($f === undefined) { $f = { $blk: reader.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.checksum = checksum; $f.err = err; $f.n = n; $f.p = p; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	reader.prototype.Read = function(p) { return this.$val.Read(p); };
	reader.ptr.prototype.Close = function() {
		var $ptr, _r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (!($interfaceIsEqual(z.err, $ifaceNil)) && !($interfaceIsEqual(z.err, io.EOF))) {
			$s = -1; return z.err;
		}
		_r = z.decompressor.Close(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		z.err = _r;
		$s = -1; return z.err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: reader.ptr.prototype.Close }; } $f.$ptr = $ptr; $f._r = _r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	reader.prototype.Close = function() { return this.$val.Close(); };
	reader.ptr.prototype.Reset = function(r, dict) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, checksum, dict, fr, h, haveDict, ok, r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; checksum = $f.checksum; dict = $f.dict; fr = $f.fr; h = $f.h; haveDict = $f.haveDict; ok = $f.ok; r = $f.r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		reader.copy(z, new reader.ptr($ifaceNil, z.decompressor, $ifaceNil, $ifaceNil, arrayType.zero()));
		_tuple = $assertType(r, flate.Reader, true);
		fr = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			z.r = fr;
		} else {
			z.r = bufio.NewReader(r);
		}
		_r = io.ReadFull(z.r, $subslice(new sliceType(z.scratch), 0, 2)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		z.err = _tuple$1[1];
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			if ($interfaceIsEqual(z.err, io.EOF)) {
				z.err = io.ErrUnexpectedEOF;
			}
			$s = -1; return z.err;
		}
		h = (((z.scratch[0] >>> 0) << 8 >>> 0) | (z.scratch[1] >>> 0)) >>> 0;
		if ((!((((z.scratch[0] & 15) >>> 0) === 8))) || (!(((_r$1 = h % 31, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0)))) {
			z.err = $pkg.ErrHeader;
			$s = -1; return z.err;
		}
		haveDict = !((((z.scratch[1] & 32) >>> 0) === 0));
		/* */ if (haveDict) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (haveDict) { */ case 2:
			_r$2 = io.ReadFull(z.r, $subslice(new sliceType(z.scratch), 0, 4)); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2;
			z.err = _tuple$2[1];
			if (!($interfaceIsEqual(z.err, $ifaceNil))) {
				if ($interfaceIsEqual(z.err, io.EOF)) {
					z.err = io.ErrUnexpectedEOF;
				}
				$s = -1; return z.err;
			}
			checksum = (((((((z.scratch[0] >>> 0) << 24 >>> 0) | ((z.scratch[1] >>> 0) << 16 >>> 0)) >>> 0) | ((z.scratch[2] >>> 0) << 8 >>> 0)) >>> 0) | (z.scratch[3] >>> 0)) >>> 0;
			if (!((checksum === adler32.Checksum(dict)))) {
				z.err = $pkg.ErrDictionary;
				$s = -1; return z.err;
			}
		/* } */ case 3:
		/* */ if ($interfaceIsEqual(z.decompressor, $ifaceNil)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ($interfaceIsEqual(z.decompressor, $ifaceNil)) { */ case 5:
			/* */ if (haveDict) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (haveDict) { */ case 8:
				_r$3 = flate.NewReaderDict(z.r, dict); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				z.decompressor = _r$3;
				$s = 10; continue;
			/* } else { */ case 9:
				_r$4 = flate.NewReader(z.r); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				z.decompressor = _r$4;
			/* } */ case 10:
			$s = 7; continue;
		/* } else { */ case 6:
			_r$5 = $assertType(z.decompressor, flate.Resetter).Reset(z.r, dict); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 7:
		z.digest = adler32.New();
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: reader.ptr.prototype.Reset }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.checksum = checksum; $f.dict = dict; $f.fr = fr; $f.h = h; $f.haveDict = haveDict; $f.ok = ok; $f.r = r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	reader.prototype.Reset = function(r, dict) { return this.$val.Reset(r, dict); };
	ptrType$2.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader, sliceType], [$error], false)}];
	reader.init("compress/zlib", [{prop: "r", name: "r", exported: false, typ: flate.Reader, tag: ""}, {prop: "decompressor", name: "decompressor", exported: false, typ: io.ReadCloser, tag: ""}, {prop: "digest", name: "digest", exported: false, typ: hash.Hash32, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "scratch", name: "scratch", exported: false, typ: arrayType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = flate.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = adler32.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrChecksum = errors.New("zlib: invalid checksum");
		$pkg.ErrDictionary = errors.New("zlib: invalid dictionary");
		$pkg.ErrHeader = errors.New("zlib: invalid header");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["zombiezen.com/go/capnproto2/schemas"] = (function() {
	var $pkg = {}, $init, bufio, bytes, zlib, errors, fmt, io, ioutil, strings, sync, packed, Schema, Registry, record, dupeError, notFoundError, decompressError, sliceType, ptrType, sliceType$1, ptrType$1, sliceType$2, ptrType$2, ptrType$3, mapType, ptrType$4, ptrType$5, Register;
	bufio = $packages["bufio"];
	bytes = $packages["bytes"];
	zlib = $packages["compress/zlib"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	ioutil = $packages["io/ioutil"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	packed = $packages["zombiezen.com/go/capnproto2/internal/packed"];
	Schema = $pkg.Schema = $newType(0, $kindStruct, "schemas.Schema", true, "zombiezen.com/go/capnproto2/schemas", true, function(String_, Bytes_, Compressed_, Nodes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.String = "";
			this.Bytes = sliceType.nil;
			this.Compressed = false;
			this.Nodes = sliceType$1.nil;
			return;
		}
		this.String = String_;
		this.Bytes = Bytes_;
		this.Compressed = Compressed_;
		this.Nodes = Nodes_;
	});
	Registry = $pkg.Registry = $newType(0, $kindStruct, "schemas.Registry", true, "zombiezen.com/go/capnproto2/schemas", true, function(m_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = false;
			return;
		}
		this.m = m_;
	});
	record = $pkg.record = $newType(0, $kindStruct, "schemas.record", true, "zombiezen.com/go/capnproto2/schemas", false, function(once_, s_, compressed_, data_, err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.once = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
			this.s = "";
			this.compressed = false;
			this.data = sliceType.nil;
			this.err = $ifaceNil;
			return;
		}
		this.once = once_;
		this.s = s_;
		this.compressed = compressed_;
		this.data = data_;
		this.err = err_;
	});
	dupeError = $pkg.dupeError = $newType(0, $kindStruct, "schemas.dupeError", true, "zombiezen.com/go/capnproto2/schemas", false, function(id_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.id = new $Uint64(0, 0);
			return;
		}
		this.id = id_;
	});
	notFoundError = $pkg.notFoundError = $newType(0, $kindStruct, "schemas.notFoundError", true, "zombiezen.com/go/capnproto2/schemas", false, function(id_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.id = new $Uint64(0, 0);
			return;
		}
		this.id = id_;
	});
	decompressError = $pkg.decompressError = $newType(0, $kindStruct, "schemas.decompressError", true, "zombiezen.com/go/capnproto2/schemas", false, function(id_, err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.id = new $Uint64(0, 0);
			this.err = $ifaceNil;
			return;
		}
		this.id = id_;
		this.err = err_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(record);
	sliceType$1 = $sliceType($Uint64);
	ptrType$1 = $ptrType(notFoundError);
	sliceType$2 = $sliceType($emptyInterface);
	ptrType$2 = $ptrType(Schema);
	ptrType$3 = $ptrType(Registry);
	mapType = $mapType($Uint64, ptrType);
	ptrType$4 = $ptrType(dupeError);
	ptrType$5 = $ptrType(decompressError);
	Registry.ptr.prototype.Register = function(s) {
		var $ptr, _entry, _i, _key, _ref, _tuple, dup, id, r, reg, s;
		reg = this;
		if (s.String.length > 0 && s.Bytes.$length > 0) {
			return errors.New("schemas: schema should have only one of string or bytes");
		}
		r = new record.ptr(new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0), s.String, s.Compressed, s.Bytes, $ifaceNil);
		if (reg.m === false) {
			reg.m = {};
		}
		_ref = s.Nodes;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			id = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_tuple = (_entry = reg.m[$Uint64.keyFor(id)], _entry !== undefined ? [_entry.v, true] : [ptrType.nil, false]);
			dup = _tuple[1];
			if (dup) {
				return new dupeError.ptr(id);
			}
			_key = id; (reg.m || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key)] = { k: _key, v: r };
			_i++;
		}
		return $ifaceNil;
	};
	Registry.prototype.Register = function(s) { return this.$val.Register(s); };
	Registry.ptr.prototype.Find = function(id) {
		var $ptr, _entry, _r, _tuple, b, err, id, r, reg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; id = $f.id; r = $f.r; reg = $f.reg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		reg = this;
		r = (_entry = reg.m[$Uint64.keyFor(id)], _entry !== undefined ? _entry.v : ptrType.nil);
		if (r === ptrType.nil) {
			$s = -1; return [sliceType.nil, new notFoundError.ptr(id)];
		}
		_r = r.read(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		b = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType.nil, new decompressError.ptr(id, err)];
		}
		$s = -1; return [b, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Registry.ptr.prototype.Find }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.id = id; $f.r = r; $f.reg = reg; $f.$s = $s; $f.$r = $r; return $f;
	};
	Registry.prototype.Find = function(id) { return this.$val.Find(id); };
	record.ptr.prototype.read = function() {
		var $ptr, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = [r];
		r[0] = this;
		$r = r[0].once.Do((function(r) { return function $b() {
			var $ptr, _r, _r$1, _tmp, _tmp$1, _tuple, _tuple$1, err, in$1, p, z, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; in$1 = $f.in$1; p = $f.p; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			if (!r[0].compressed) {
				if (!(r[0].s === "")) {
					r[0].data = new sliceType($stringToBytes(r[0].s));
					r[0].s = "";
				}
				$s = -1; return;
			}
			in$1 = $ifaceNil;
			if (!(r[0].s === "")) {
				in$1 = strings.NewReader(r[0].s);
				r[0].s = "";
			} else {
				in$1 = bytes.NewReader(r[0].data);
			}
			_r = zlib.NewReader(in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			z = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = sliceType.nil;
				_tmp$1 = err;
				r[0].data = _tmp;
				r[0].err = _tmp$1;
				$s = -1; return;
			}
			p = packed.NewReader(bufio.NewReader(z));
			_r$1 = ioutil.ReadAll(p); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			r[0].data = _tuple$1[0];
			r[0].err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				r[0].data = sliceType.nil;
				$s = -1; return;
			}
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.in$1 = in$1; $f.p = p; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
		}; })(r)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return [r[0].data, r[0].err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: record.ptr.prototype.read }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	record.prototype.read = function() { return this.$val.read(); };
	Register = function(data, ids) {
		var $ptr, data, err, ids;
		err = $pkg.DefaultRegistry.Register(new Schema.ptr(data, sliceType.nil, true, ids));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
	};
	$pkg.Register = Register;
	dupeError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = fmt.Sprintf("schemas: registered @%#x twice", new sliceType$2([e.id])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dupeError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	dupeError.prototype.Error = function() { return this.$val.Error(); };
	notFoundError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = fmt.Sprintf("schemas: could not find @%#x", new sliceType$2([e.id])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: notFoundError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	notFoundError.prototype.Error = function() { return this.$val.Error(); };
	decompressError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = fmt.Sprintf("schemas: decompressing schema for @%#x: %v", new sliceType$2([e.id, e.err])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressError.prototype.Error = function() { return this.$val.Error(); };
	ptrType$3.methods = [{prop: "Register", name: "Register", pkg: "", typ: $funcType([ptrType$2], [$error], false)}, {prop: "Find", name: "Find", pkg: "", typ: $funcType([$Uint64], [sliceType, $error], false)}];
	ptrType.methods = [{prop: "read", name: "read", pkg: "zombiezen.com/go/capnproto2/schemas", typ: $funcType([], [sliceType, $error], false)}];
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$5.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Schema.init("", [{prop: "String", name: "String", exported: true, typ: $String, tag: ""}, {prop: "Bytes", name: "Bytes", exported: true, typ: sliceType, tag: ""}, {prop: "Compressed", name: "Compressed", exported: true, typ: $Bool, tag: ""}, {prop: "Nodes", name: "Nodes", exported: true, typ: sliceType$1, tag: ""}]);
	Registry.init("zombiezen.com/go/capnproto2/schemas", [{prop: "m", name: "m", exported: false, typ: mapType, tag: ""}]);
	record.init("zombiezen.com/go/capnproto2/schemas", [{prop: "once", name: "once", exported: false, typ: sync.Once, tag: ""}, {prop: "s", name: "s", exported: false, typ: $String, tag: ""}, {prop: "compressed", name: "compressed", exported: false, typ: $Bool, tag: ""}, {prop: "data", name: "data", exported: false, typ: sliceType, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}]);
	dupeError.init("zombiezen.com/go/capnproto2/schemas", [{prop: "id", name: "id", exported: false, typ: $Uint64, tag: ""}]);
	notFoundError.init("zombiezen.com/go/capnproto2/schemas", [{prop: "id", name: "id", exported: false, typ: $Uint64, tag: ""}]);
	decompressError.init("zombiezen.com/go/capnproto2/schemas", [{prop: "id", name: "id", exported: false, typ: $Uint64, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytes.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = zlib.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ioutil.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = packed.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.DefaultRegistry = new Registry.ptr(false);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["zombiezen.com/go/capnproto2"] = (function() {
	var $pkg = {}, $init, bufio, binary, errors, fmt, rbtree, context, io, math, net, strconv, sync, atomic, packed, schemas, Address, Size, DataOffset, ObjectSize, BitOffset, Interface, CapabilityID, Client, Call, CallOptions, CallOption, Answer, Pipeline, PipelineClient, PipelineOp, Method, immediateAnswer, errorAnswer, errorClient, MethodError, SegmentID, Segment, offset, copyContext, List, BitList, PointerList, TextList, DataList, UInt8List, Int8List, UInt16List, Int16List, UInt32List, Int32List, UInt64List, Int64List, Float32List, Float64List, listFlags, Message, Arena, singleSegmentArena, multiSegmentArena, Decoder, Encoder, streamHeader, Ptr, Pointer, ptrFlags, pointerOffset, rawPointer, ReadLimiter, Struct, structFlags, ptrType, ptrType$1, sliceType, ptrType$2, sliceType$1, ptrType$3, ptrType$4, ptrType$5, sliceType$2, ptrType$6, sliceType$3, ptrType$7, ptrType$8, sliceType$4, arrayType, sliceType$5, ptrType$9, ptrType$10, ptrType$11, sliceType$6, funcType, sliceType$7, mapType, funcType$1, ptrType$12, ptrType$13, mapType$1, ptrType$14, ptrType$15, errPointerAddress, errBadLandingPad, errBadTag, errOtherPointer, errObjectSize, errElementSize, errReadLimit, errDepthLimit, errOverflow, errOutOfBounds, errCopyDepth, errOverlap, errListSize, errBitListStruct, errSegmentOutOfBounds, errSegment32Bit, errMessageEmpty, errHasData, errSegmentTooSmall, errSegmentTooLarge, errTooManySegments, errDecodeLimit, NewInterface, NewCallOptions, SetOptionValue, NewPipeline, TransformPtr, ImmediateAnswer, ErrorAnswer, IsFixedAnswer, ErrorClient, makeOffsetKey, compare, needsCopy, copyPointer, init, newPrimitiveList, NewCompositeList, NewUInt8List, NewText, NewTextFromBytes, NewData, isOneByteList, NewMessage, alloc, SingleSegment, MultiSegment, demuxArena, NewDecoder, Unmarshal, NewEncoder, streamHeaderSize, marshalStreamHeader, appendUint32, parseStreamHeader, hasCapacity, totalSize, isInt32Bit, toPtr, unmarshalDefault, structPtrFlag, listPtrFlag, makePointerOffset, rawStructPointer, rawListPointer, rawInterfacePointer, rawFarPointer, rawDoubleFarPointer, landingPadNearPointer, orable30BitOffsetPart, NewStruct, NewRootStruct, copyStruct;
	bufio = $packages["bufio"];
	binary = $packages["encoding/binary"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	rbtree = $packages["github.com/glycerine/rbtree"];
	context = $packages["golang.org/x/net/context"];
	io = $packages["io"];
	math = $packages["math"];
	net = $packages["net"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	packed = $packages["zombiezen.com/go/capnproto2/internal/packed"];
	schemas = $packages["zombiezen.com/go/capnproto2/schemas"];
	Address = $pkg.Address = $newType(4, $kindUint32, "capnp.Address", true, "zombiezen.com/go/capnproto2", true, null);
	Size = $pkg.Size = $newType(4, $kindUint32, "capnp.Size", true, "zombiezen.com/go/capnproto2", true, null);
	DataOffset = $pkg.DataOffset = $newType(4, $kindUint32, "capnp.DataOffset", true, "zombiezen.com/go/capnproto2", true, null);
	ObjectSize = $pkg.ObjectSize = $newType(0, $kindStruct, "capnp.ObjectSize", true, "zombiezen.com/go/capnproto2", true, function(DataSize_, PointerCount_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.DataSize = 0;
			this.PointerCount = 0;
			return;
		}
		this.DataSize = DataSize_;
		this.PointerCount = PointerCount_;
	});
	BitOffset = $pkg.BitOffset = $newType(4, $kindUint32, "capnp.BitOffset", true, "zombiezen.com/go/capnproto2", true, null);
	Interface = $pkg.Interface = $newType(0, $kindStruct, "capnp.Interface", true, "zombiezen.com/go/capnproto2", true, function(seg_, cap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.seg = ptrType.nil;
			this.cap = 0;
			return;
		}
		this.seg = seg_;
		this.cap = cap_;
	});
	CapabilityID = $pkg.CapabilityID = $newType(4, $kindUint32, "capnp.CapabilityID", true, "zombiezen.com/go/capnproto2", true, null);
	Client = $pkg.Client = $newType(8, $kindInterface, "capnp.Client", true, "zombiezen.com/go/capnproto2", true, null);
	Call = $pkg.Call = $newType(0, $kindStruct, "capnp.Call", true, "zombiezen.com/go/capnproto2", true, function(Ctx_, Method_, Params_, ParamsFunc_, ParamsSize_, Options_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Ctx = $ifaceNil;
			this.Method = new Method.ptr(new $Uint64(0, 0), 0, "", "");
			this.Params = new Struct.ptr(ptrType.nil, 0, new ObjectSize.ptr(0, 0), 0, 0);
			this.ParamsFunc = $throwNilPointerError;
			this.ParamsSize = new ObjectSize.ptr(0, 0);
			this.Options = new CallOptions.ptr(false);
			return;
		}
		this.Ctx = Ctx_;
		this.Method = Method_;
		this.Params = Params_;
		this.ParamsFunc = ParamsFunc_;
		this.ParamsSize = ParamsSize_;
		this.Options = Options_;
	});
	CallOptions = $pkg.CallOptions = $newType(0, $kindStruct, "capnp.CallOptions", true, "zombiezen.com/go/capnproto2", true, function(m_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = false;
			return;
		}
		this.m = m_;
	});
	CallOption = $pkg.CallOption = $newType(0, $kindStruct, "capnp.CallOption", true, "zombiezen.com/go/capnproto2", true, function(f_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.f = $throwNilPointerError;
			return;
		}
		this.f = f_;
	});
	Answer = $pkg.Answer = $newType(8, $kindInterface, "capnp.Answer", true, "zombiezen.com/go/capnproto2", true, null);
	Pipeline = $pkg.Pipeline = $newType(0, $kindStruct, "capnp.Pipeline", true, "zombiezen.com/go/capnproto2", true, function(answer_, parent_, op_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.answer = $ifaceNil;
			this.parent = ptrType$2.nil;
			this.op = new PipelineOp.ptr(0, sliceType.nil);
			return;
		}
		this.answer = answer_;
		this.parent = parent_;
		this.op = op_;
	});
	PipelineClient = $pkg.PipelineClient = $newType(0, $kindStruct, "capnp.PipelineClient", true, "zombiezen.com/go/capnproto2", true, function(answer_, parent_, op_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.answer = $ifaceNil;
			this.parent = ptrType$2.nil;
			this.op = new PipelineOp.ptr(0, sliceType.nil);
			return;
		}
		this.answer = answer_;
		this.parent = parent_;
		this.op = op_;
	});
	PipelineOp = $pkg.PipelineOp = $newType(0, $kindStruct, "capnp.PipelineOp", true, "zombiezen.com/go/capnproto2", true, function(Field_, DefaultValue_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Field = 0;
			this.DefaultValue = sliceType.nil;
			return;
		}
		this.Field = Field_;
		this.DefaultValue = DefaultValue_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "capnp.Method", true, "zombiezen.com/go/capnproto2", true, function(InterfaceID_, MethodID_, InterfaceName_, MethodName_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.InterfaceID = new $Uint64(0, 0);
			this.MethodID = 0;
			this.InterfaceName = "";
			this.MethodName = "";
			return;
		}
		this.InterfaceID = InterfaceID_;
		this.MethodID = MethodID_;
		this.InterfaceName = InterfaceName_;
		this.MethodName = MethodName_;
	});
	immediateAnswer = $pkg.immediateAnswer = $newType(0, $kindStruct, "capnp.immediateAnswer", true, "zombiezen.com/go/capnproto2", false, function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = new Struct.ptr(ptrType.nil, 0, new ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.s = s_;
	});
	errorAnswer = $pkg.errorAnswer = $newType(0, $kindStruct, "capnp.errorAnswer", true, "zombiezen.com/go/capnproto2", false, function(e_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.e = $ifaceNil;
			return;
		}
		this.e = e_;
	});
	errorClient = $pkg.errorClient = $newType(0, $kindStruct, "capnp.errorClient", true, "zombiezen.com/go/capnproto2", false, function(e_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.e = $ifaceNil;
			return;
		}
		this.e = e_;
	});
	MethodError = $pkg.MethodError = $newType(0, $kindStruct, "capnp.MethodError", true, "zombiezen.com/go/capnproto2", true, function(Method_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = ptrType$12.nil;
			this.Err = $ifaceNil;
			return;
		}
		this.Method = Method_;
		this.Err = Err_;
	});
	SegmentID = $pkg.SegmentID = $newType(4, $kindUint32, "capnp.SegmentID", true, "zombiezen.com/go/capnproto2", true, null);
	Segment = $pkg.Segment = $newType(0, $kindStruct, "capnp.Segment", true, "zombiezen.com/go/capnproto2", true, function(msg_, id_, data_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.msg = ptrType$6.nil;
			this.id = 0;
			this.data = sliceType.nil;
			return;
		}
		this.msg = msg_;
		this.id = id_;
		this.data = data_;
	});
	offset = $pkg.offset = $newType(0, $kindStruct, "capnp.offset", true, "zombiezen.com/go/capnproto2", false, function(id_, boff_, bend_, newval_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.id = 0;
			this.boff = new $Int64(0, 0);
			this.bend = new $Int64(0, 0);
			this.newval = new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.id = id_;
		this.boff = boff_;
		this.bend = bend_;
		this.newval = newval_;
	});
	copyContext = $pkg.copyContext = $newType(0, $kindStruct, "capnp.copyContext", true, "zombiezen.com/go/capnproto2", false, function(copies_, depth_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.copies = ptrType$5.nil;
			this.depth = 0;
			return;
		}
		this.copies = copies_;
		this.depth = depth_;
	});
	List = $pkg.List = $newType(0, $kindStruct, "capnp.List", true, "zombiezen.com/go/capnproto2", true, function(seg_, off_, length_, size_, depthLimit_, flags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.seg = ptrType.nil;
			this.off = 0;
			this.length = 0;
			this.size = new ObjectSize.ptr(0, 0);
			this.depthLimit = 0;
			this.flags = 0;
			return;
		}
		this.seg = seg_;
		this.off = off_;
		this.length = length_;
		this.size = size_;
		this.depthLimit = depthLimit_;
		this.flags = flags_;
	});
	BitList = $pkg.BitList = $newType(0, $kindStruct, "capnp.BitList", true, "zombiezen.com/go/capnproto2", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	PointerList = $pkg.PointerList = $newType(0, $kindStruct, "capnp.PointerList", true, "zombiezen.com/go/capnproto2", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	TextList = $pkg.TextList = $newType(0, $kindStruct, "capnp.TextList", true, "zombiezen.com/go/capnproto2", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	DataList = $pkg.DataList = $newType(0, $kindStruct, "capnp.DataList", true, "zombiezen.com/go/capnproto2", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	UInt8List = $pkg.UInt8List = $newType(0, $kindStruct, "capnp.UInt8List", true, "zombiezen.com/go/capnproto2", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	Int8List = $pkg.Int8List = $newType(0, $kindStruct, "capnp.Int8List", true, "zombiezen.com/go/capnproto2", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	UInt16List = $pkg.UInt16List = $newType(0, $kindStruct, "capnp.UInt16List", true, "zombiezen.com/go/capnproto2", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	Int16List = $pkg.Int16List = $newType(0, $kindStruct, "capnp.Int16List", true, "zombiezen.com/go/capnproto2", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	UInt32List = $pkg.UInt32List = $newType(0, $kindStruct, "capnp.UInt32List", true, "zombiezen.com/go/capnproto2", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	Int32List = $pkg.Int32List = $newType(0, $kindStruct, "capnp.Int32List", true, "zombiezen.com/go/capnproto2", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	UInt64List = $pkg.UInt64List = $newType(0, $kindStruct, "capnp.UInt64List", true, "zombiezen.com/go/capnproto2", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	Int64List = $pkg.Int64List = $newType(0, $kindStruct, "capnp.Int64List", true, "zombiezen.com/go/capnproto2", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	Float32List = $pkg.Float32List = $newType(0, $kindStruct, "capnp.Float32List", true, "zombiezen.com/go/capnproto2", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	Float64List = $pkg.Float64List = $newType(0, $kindStruct, "capnp.Float64List", true, "zombiezen.com/go/capnproto2", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	listFlags = $pkg.listFlags = $newType(1, $kindUint8, "capnp.listFlags", true, "zombiezen.com/go/capnproto2", false, null);
	Message = $pkg.Message = $newType(0, $kindStruct, "capnp.Message", true, "zombiezen.com/go/capnproto2", true, function(rlimit_, rlimitInit_, Arena_, CapTable_, TraverseLimit_, DepthLimit_, mu_, segs_, firstSeg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rlimit = new ReadLimiter.ptr(new $Uint64(0, 0));
			this.rlimitInit = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
			this.Arena = $ifaceNil;
			this.CapTable = sliceType$3.nil;
			this.TraverseLimit = new $Uint64(0, 0);
			this.DepthLimit = 0;
			this.mu = new sync.Mutex.ptr(0, 0);
			this.segs = false;
			this.firstSeg = new Segment.ptr(ptrType$6.nil, 0, sliceType.nil);
			return;
		}
		this.rlimit = rlimit_;
		this.rlimitInit = rlimitInit_;
		this.Arena = Arena_;
		this.CapTable = CapTable_;
		this.TraverseLimit = TraverseLimit_;
		this.DepthLimit = DepthLimit_;
		this.mu = mu_;
		this.segs = segs_;
		this.firstSeg = firstSeg_;
	});
	Arena = $pkg.Arena = $newType(8, $kindInterface, "capnp.Arena", true, "zombiezen.com/go/capnproto2", true, null);
	singleSegmentArena = $pkg.singleSegmentArena = $newType(12, $kindSlice, "capnp.singleSegmentArena", true, "zombiezen.com/go/capnproto2", false, null);
	multiSegmentArena = $pkg.multiSegmentArena = $newType(12, $kindSlice, "capnp.multiSegmentArena", true, "zombiezen.com/go/capnproto2", false, null);
	Decoder = $pkg.Decoder = $newType(0, $kindStruct, "capnp.Decoder", true, "zombiezen.com/go/capnproto2", true, function(r_, MaxMessageSize_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.MaxMessageSize = new $Uint64(0, 0);
			return;
		}
		this.r = r_;
		this.MaxMessageSize = MaxMessageSize_;
	});
	Encoder = $pkg.Encoder = $newType(0, $kindStruct, "capnp.Encoder", true, "zombiezen.com/go/capnproto2", true, function(w_, hdrbuf_, bufs_, packed_, packbuf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = $ifaceNil;
			this.hdrbuf = sliceType.nil;
			this.bufs = sliceType$4.nil;
			this.packed = false;
			this.packbuf = sliceType.nil;
			return;
		}
		this.w = w_;
		this.hdrbuf = hdrbuf_;
		this.bufs = bufs_;
		this.packed = packed_;
		this.packbuf = packbuf_;
	});
	streamHeader = $pkg.streamHeader = $newType(0, $kindStruct, "capnp.streamHeader", true, "zombiezen.com/go/capnproto2", false, function(b_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.b = sliceType.nil;
			return;
		}
		this.b = b_;
	});
	Ptr = $pkg.Ptr = $newType(0, $kindStruct, "capnp.Ptr", true, "zombiezen.com/go/capnproto2", true, function(seg_, off_, lenOrCap_, size_, depthLimit_, flags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.seg = ptrType.nil;
			this.off = 0;
			this.lenOrCap = 0;
			this.size = new ObjectSize.ptr(0, 0);
			this.depthLimit = 0;
			this.flags = 0;
			return;
		}
		this.seg = seg_;
		this.off = off_;
		this.lenOrCap = lenOrCap_;
		this.size = size_;
		this.depthLimit = depthLimit_;
		this.flags = flags_;
	});
	Pointer = $pkg.Pointer = $newType(8, $kindInterface, "capnp.Pointer", true, "zombiezen.com/go/capnproto2", true, null);
	ptrFlags = $pkg.ptrFlags = $newType(1, $kindUint8, "capnp.ptrFlags", true, "zombiezen.com/go/capnproto2", false, null);
	pointerOffset = $pkg.pointerOffset = $newType(4, $kindInt32, "capnp.pointerOffset", true, "zombiezen.com/go/capnproto2", false, null);
	rawPointer = $pkg.rawPointer = $newType(8, $kindUint64, "capnp.rawPointer", true, "zombiezen.com/go/capnproto2", false, null);
	ReadLimiter = $pkg.ReadLimiter = $newType(0, $kindStruct, "capnp.ReadLimiter", true, "zombiezen.com/go/capnproto2", true, function(limit_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.limit = new $Uint64(0, 0);
			return;
		}
		this.limit = limit_;
	});
	Struct = $pkg.Struct = $newType(0, $kindStruct, "capnp.Struct", true, "zombiezen.com/go/capnproto2", true, function(seg_, off_, size_, depthLimit_, flags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.seg = ptrType.nil;
			this.off = 0;
			this.size = new ObjectSize.ptr(0, 0);
			this.depthLimit = 0;
			this.flags = 0;
			return;
		}
		this.seg = seg_;
		this.off = off_;
		this.size = size_;
		this.depthLimit = depthLimit_;
		this.flags = flags_;
	});
	structFlags = $pkg.structFlags = $newType(1, $kindUint8, "capnp.structFlags", true, "zombiezen.com/go/capnproto2", false, null);
	ptrType = $ptrType(Segment);
	ptrType$1 = $ptrType(Call);
	sliceType = $sliceType($Uint8);
	ptrType$2 = $ptrType(Pipeline);
	sliceType$1 = $sliceType(PipelineOp);
	ptrType$3 = $ptrType(PipelineClient);
	ptrType$4 = $ptrType(MethodError);
	ptrType$5 = $ptrType(rbtree.Tree);
	sliceType$2 = $sliceType($Uint64);
	ptrType$6 = $ptrType(Message);
	sliceType$3 = $sliceType(Client);
	ptrType$7 = $ptrType(singleSegmentArena);
	ptrType$8 = $ptrType(multiSegmentArena);
	sliceType$4 = $sliceType(sliceType);
	arrayType = $arrayType($Uint8, 4);
	sliceType$5 = $sliceType(Size);
	ptrType$9 = $ptrType(net.Buffers);
	ptrType$10 = $ptrType(sliceType$4);
	ptrType$11 = $ptrType($Uint64);
	sliceType$6 = $sliceType($emptyInterface);
	funcType = $funcType([Struct], [$error], false);
	sliceType$7 = $sliceType(CallOption);
	mapType = $mapType($emptyInterface, $emptyInterface);
	funcType$1 = $funcType([CallOptions], [], false);
	ptrType$12 = $ptrType(Method);
	ptrType$13 = $ptrType(ReadLimiter);
	mapType$1 = $mapType(SegmentID, ptrType);
	ptrType$14 = $ptrType(Decoder);
	ptrType$15 = $ptrType(Encoder);
	Address.prototype.addSize = function(sz) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, ok, sz, x, x$1, x$2;
		b = 0;
		ok = false;
		a = this.$val;
		x$2 = (x = new $Int64(0, a), x$1 = new $Int64(0, sz), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		if ((x$2.$high > 0 || (x$2.$high === 0 && x$2.$low > 4294967295))) {
			_tmp = 0;
			_tmp$1 = false;
			b = _tmp;
			ok = _tmp$1;
			return [b, ok];
		}
		_tmp$2 = (x$2.$low >>> 0);
		_tmp$3 = true;
		b = _tmp$2;
		ok = _tmp$3;
		return [b, ok];
	};
	$ptrType(Address).prototype.addSize = function(sz) { return new Address(this.$get()).addSize(sz); };
	Address.prototype.element = function(i, sz) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a, b, i, ok, sz, x, x$1;
		b = 0;
		ok = false;
		a = this.$val;
		x = $mul64(new $Int64(0, i), new $Int64(0, sz));
		if ((x.$high > 0 || (x.$high === 0 && x.$low > 4294967295))) {
			_tmp = 0;
			_tmp$1 = false;
			b = _tmp;
			ok = _tmp$1;
			return [b, ok];
		}
		x = (x$1 = new $Int64(0, a), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		if ((x.$high > 0 || (x.$high === 0 && x.$low > 4294967295))) {
			_tmp$2 = 0;
			_tmp$3 = false;
			b = _tmp$2;
			ok = _tmp$3;
			return [b, ok];
		}
		_tmp$4 = (x.$low >>> 0);
		_tmp$5 = true;
		b = _tmp$4;
		ok = _tmp$5;
		return [b, ok];
	};
	$ptrType(Address).prototype.element = function(i, sz) { return new Address(this.$get()).element(i, sz); };
	Address.prototype.addOffset = function(o) {
		var $ptr, a, o;
		a = this.$val;
		return a + (o >>> 0) >>> 0;
	};
	$ptrType(Address).prototype.addOffset = function(o) { return new Address(this.$get()).addOffset(o); };
	Size.prototype.times = function(n) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, n, ns, ok, sz, x;
		ns = 0;
		ok = false;
		sz = this.$val;
		x = $mul64(new $Int64(0, sz), new $Int64(0, n));
		if ((x.$high > 0 || (x.$high === 0 && x.$low > 4294967295))) {
			_tmp = 0;
			_tmp$1 = false;
			ns = _tmp;
			ok = _tmp$1;
			return [ns, ok];
		}
		_tmp$2 = (x.$low >>> 0);
		_tmp$3 = true;
		ns = _tmp$2;
		ok = _tmp$3;
		return [ns, ok];
	};
	$ptrType(Size).prototype.times = function(n) { return new Size(this.$get()).times(n); };
	Size.prototype.padToWord = function() {
		var $ptr, n, sz;
		sz = this.$val;
		n = 7;
		return (((sz + n >>> 0)) & ~n) >>> 0;
	};
	$ptrType(Size).prototype.padToWord = function() { return new Size(this.$get()).padToWord(); };
	ObjectSize.ptr.prototype.isZero = function() {
		var $ptr, sz;
		sz = this;
		return (sz.DataSize === 0) && (sz.PointerCount === 0);
	};
	ObjectSize.prototype.isZero = function() { return this.$val.isZero(); };
	ObjectSize.ptr.prototype.isOneByte = function() {
		var $ptr, sz;
		sz = this;
		return (sz.DataSize === 1) && (sz.PointerCount === 0);
	};
	ObjectSize.prototype.isOneByte = function() { return this.$val.isOneByte(); };
	ObjectSize.ptr.prototype.isValid = function() {
		var $ptr, sz;
		sz = this;
		return sz.DataSize <= 524280;
	};
	ObjectSize.prototype.isValid = function() { return this.$val.isValid(); };
	ObjectSize.ptr.prototype.pointerSize = function() {
		var $ptr, sz;
		sz = this;
		return $imul(8, (sz.PointerCount >>> 0)) >>> 0;
	};
	ObjectSize.prototype.pointerSize = function() { return this.$val.pointerSize(); };
	ObjectSize.ptr.prototype.totalSize = function() {
		var $ptr, sz;
		sz = this;
		return sz.DataSize + $clone(sz, ObjectSize).pointerSize() >>> 0;
	};
	ObjectSize.prototype.totalSize = function() { return this.$val.totalSize(); };
	ObjectSize.ptr.prototype.dataWordCount = function() {
		var $ptr, _q, _r, sz;
		sz = this;
		if (!(((_r = sz.DataSize % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0))) {
			$panic(new $String("data size not aligned by word"));
		}
		return ((_q = sz.DataSize / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
	};
	ObjectSize.prototype.dataWordCount = function() { return this.$val.dataWordCount(); };
	ObjectSize.ptr.prototype.totalWordCount = function() {
		var $ptr, sz;
		sz = this;
		return $clone(sz, ObjectSize).dataWordCount() + (sz.PointerCount >> 0) >> 0;
	};
	ObjectSize.prototype.totalWordCount = function() { return this.$val.totalWordCount(); };
	BitOffset.prototype.offset = function() {
		var $ptr, _q, bit;
		bit = this.$val;
		return ((_q = bit / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 0);
	};
	$ptrType(BitOffset).prototype.offset = function() { return new BitOffset(this.$get()).offset(); };
	BitOffset.prototype.mask = function() {
		var $ptr, _r, bit, y;
		bit = this.$val;
		return ((y = ((_r = bit % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))), y < 32 ? (1 << y) : 0) << 24 >>> 24);
	};
	$ptrType(BitOffset).prototype.mask = function() { return new BitOffset(this.$get()).mask(); };
	NewInterface = function(s, cap) {
		var $ptr, cap, s;
		return new Interface.ptr(s, cap);
	};
	$pkg.NewInterface = NewInterface;
	Interface.ptr.prototype.ToPtr = function() {
		var $ptr, p;
		p = this;
		return new Ptr.ptr(p.seg, 0, (p.cap >>> 0), new ObjectSize.ptr(0, 0), 0, 128);
	};
	Interface.prototype.ToPtr = function() { return this.$val.ToPtr(); };
	Interface.ptr.prototype.Segment = function() {
		var $ptr, i;
		i = this;
		return i.seg;
	};
	Interface.prototype.Segment = function() { return this.$val.Segment(); };
	Interface.ptr.prototype.IsValid = function() {
		var $ptr, i;
		i = this;
		return !(i.seg === ptrType.nil);
	};
	Interface.prototype.IsValid = function() { return this.$val.IsValid(); };
	Interface.ptr.prototype.HasData = function() {
		var $ptr, i;
		i = this;
		return true;
	};
	Interface.prototype.HasData = function() { return this.$val.HasData(); };
	Interface.ptr.prototype.Capability = function() {
		var $ptr, i;
		i = this;
		return i.cap;
	};
	Interface.prototype.Capability = function() { return this.$val.Capability(); };
	Interface.ptr.prototype.value = function(paddr) {
		var $ptr, i, paddr;
		i = this;
		if (i.seg === ptrType.nil) {
			return new rawPointer(0, 0);
		}
		return rawInterfacePointer(i.cap);
	};
	Interface.prototype.value = function(paddr) { return this.$val.value(paddr); };
	Interface.ptr.prototype.underlying = function() {
		var $ptr, i;
		i = this;
		return new i.constructor.elem(i);
	};
	Interface.prototype.underlying = function() { return this.$val.underlying(); };
	Interface.ptr.prototype.Client = function() {
		var $ptr, i, tab, x, x$1, x$2;
		i = this;
		if (i.seg === ptrType.nil) {
			return $ifaceNil;
		}
		tab = i.seg.msg.CapTable;
		if ((x = new $Int64(0, i.cap), x$1 = new $Int64(0, tab.$length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return $ifaceNil;
		}
		return (x$2 = i.cap, ((x$2 < 0 || x$2 >= tab.$length) ? ($throwRuntimeError("index out of range"), undefined) : tab.$array[tab.$offset + x$2]));
	};
	Interface.prototype.Client = function() { return this.$val.Client(); };
	Call.ptr.prototype.Copy = function(s) {
		var $ptr, _r, _tuple, call, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; call = $f.call; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = this;
		if (call.ParamsFunc === $throwNilPointerError) {
			$s = -1; return [call, $ifaceNil];
		}
		_r = call.PlaceParams(s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], Struct);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$1.nil, err];
		}
		$s = -1; return [new Call.ptr(call.Ctx, $clone(call.Method, Method), $clone(p, Struct), $throwNilPointerError, new ObjectSize.ptr(0, 0), $clone(call.Options, CallOptions)), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Call.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.call = call; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Call.prototype.Copy = function(s) { return this.$val.Copy(s); };
	Call.ptr.prototype.PlaceParams = function(s) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, call, err, err$1, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; call = $f.call; err = $f.err; err$1 = $f.err$1; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		call = this;
		if (call.ParamsFunc === $throwNilPointerError) {
			$s = -1; return [call.Params, $ifaceNil];
		}
		/* */ if (s === ptrType.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s === ptrType.nil) { */ case 1:
			err = $ifaceNil;
			_r = NewMessage(SingleSegment(sliceType.nil)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			s = _tuple[1];
			err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Struct.ptr(ptrType.nil, 0, new ObjectSize.ptr(0, 0), 0, 0), err];
			}
		/* } */ case 2:
		_r$1 = NewStruct(s, $clone(call.ParamsSize, ObjectSize)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		p = $clone(_tuple$1[0], Struct);
		err$1 = _tuple$1[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [new Struct.ptr(ptrType.nil, 0, new ObjectSize.ptr(0, 0), 0, 0), $ifaceNil];
		}
		_r$2 = call.ParamsFunc($clone(p, Struct)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		err$1 = _r$2;
		$s = -1; return [p, err$1];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Call.ptr.prototype.PlaceParams }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.call = call; $f.err = err; $f.err$1 = err$1; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Call.prototype.PlaceParams = function(s) { return this.$val.PlaceParams(s); };
	NewCallOptions = function(opts) {
		var $ptr, _i, _ref, co, o, opts, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; co = $f.co; o = $f.o; opts = $f.opts; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		co = new CallOptions.ptr({});
		_ref = opts;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			o = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), CallOption);
			$r = o.f($clone(co, CallOptions)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return co;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewCallOptions }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.co = co; $f.o = o; $f.opts = opts; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewCallOptions = NewCallOptions;
	CallOptions.ptr.prototype.Value = function(key) {
		var $ptr, _entry, co, key;
		co = this;
		return (_entry = co.m[$emptyInterface.keyFor(key)], _entry !== undefined ? _entry.v : $ifaceNil);
	};
	CallOptions.prototype.Value = function(key) { return this.$val.Value(key); };
	CallOptions.ptr.prototype.With = function(opts) {
		var $ptr, _entry, _i, _i$1, _key, _keys, _ref, _ref$1, co, k, newopts, o, opts, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _keys = $f._keys; _ref = $f._ref; _ref$1 = $f._ref$1; co = $f.co; k = $f.k; newopts = $f.newopts; o = $f.o; opts = $f.opts; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		co = this;
		newopts = new CallOptions.ptr({});
		_ref = co.m;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			v = _entry.v;
			_key = k; (newopts.m || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: v };
			_i++;
		}
		_ref$1 = opts;
		_i$1 = 0;
		/* while (true) { */ case 1:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 2; continue; }
			o = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), CallOption);
			$r = o.f($clone(newopts, CallOptions)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i$1++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return newopts;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CallOptions.ptr.prototype.With }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._keys = _keys; $f._ref = _ref; $f._ref$1 = _ref$1; $f.co = co; $f.k = k; $f.newopts = newopts; $f.o = o; $f.opts = opts; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	CallOptions.prototype.With = function(opts) { return this.$val.With(opts); };
	SetOptionValue = function(key, value) {
		var $ptr, key, value;
		return new CallOption.ptr((function(co) {
			var $ptr, _key, co;
			_key = key; (co.m || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: value };
		}));
	};
	$pkg.SetOptionValue = SetOptionValue;
	NewPipeline = function(ans) {
		var $ptr, ans;
		return new Pipeline.ptr(ans, ptrType$2.nil, new PipelineOp.ptr(0, sliceType.nil));
	};
	$pkg.NewPipeline = NewPipeline;
	Pipeline.ptr.prototype.Answer = function() {
		var $ptr, p;
		p = this;
		return p.answer;
	};
	Pipeline.prototype.Answer = function() { return this.$val.Answer(); };
	Pipeline.ptr.prototype.Transform = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, i, n, p, q, q$1, xform;
		p = this;
		n = 0;
		q = p;
		while (true) {
			if (!(!(q.parent === ptrType$2.nil))) { break; }
			n = n + (1) >> 0;
			q = q.parent;
		}
		xform = $makeSlice(sliceType$1, n);
		_tmp = n - 1 >> 0;
		_tmp$1 = p;
		i = _tmp;
		q$1 = _tmp$1;
		while (true) {
			if (!(!(q$1.parent === ptrType$2.nil))) { break; }
			PipelineOp.copy(((i < 0 || i >= xform.$length) ? ($throwRuntimeError("index out of range"), undefined) : xform.$array[xform.$offset + i]), q$1.op);
			_tmp$2 = i - 1 >> 0;
			_tmp$3 = q$1.parent;
			i = _tmp$2;
			q$1 = _tmp$3;
		}
		return xform;
	};
	Pipeline.prototype.Transform = function() { return this.$val.Transform(); };
	Pipeline.ptr.prototype.Struct = function() {
		var $ptr, _r, _r$1, _tuple, _tuple$1, err, p, ptr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; p = $f.p; ptr = $f.ptr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.answer.Struct(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		s = $clone(_tuple[0], Struct);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Struct.ptr(ptrType.nil, 0, new ObjectSize.ptr(0, 0), 0, 0), err];
		}
		_r$1 = TransformPtr($clone($clone(s, Struct).ToPtr(), Ptr), p.Transform()); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		ptr = $clone(_tuple$1[0], Ptr);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Struct.ptr(ptrType.nil, 0, new ObjectSize.ptr(0, 0), 0, 0), err];
		}
		$s = -1; return [$clone(ptr, Ptr).Struct(), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pipeline.ptr.prototype.Struct }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.p = p; $f.ptr = ptr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pipeline.prototype.Struct = function() { return this.$val.Struct(); };
	Pipeline.ptr.prototype.Client = function() {
		var $ptr, p;
		p = this;
		return $pointerOfStructConversion(p, ptrType$3);
	};
	Pipeline.prototype.Client = function() { return this.$val.Client(); };
	Pipeline.ptr.prototype.GetPipeline = function(off) {
		var $ptr, off, p;
		p = this;
		return p.GetPipelineDefault(off, sliceType.nil);
	};
	Pipeline.prototype.GetPipeline = function(off) { return this.$val.GetPipeline(off); };
	Pipeline.ptr.prototype.GetPipelineDefault = function(off, def) {
		var $ptr, def, off, p;
		p = this;
		return new Pipeline.ptr(p.answer, p, new PipelineOp.ptr(off, def));
	};
	Pipeline.prototype.GetPipelineDefault = function(off, def) { return this.$val.GetPipelineDefault(off, def); };
	PipelineClient.ptr.prototype.transform = function() {
		var $ptr, pc;
		pc = this;
		return $pointerOfStructConversion(pc, ptrType$2).Transform();
	};
	PipelineClient.prototype.transform = function() { return this.$val.transform(); };
	PipelineClient.ptr.prototype.Call = function(call) {
		var $ptr, _r, call, pc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; call = $f.call; pc = $f.pc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pc = this;
		_r = pc.answer.PipelineCall(pc.transform(), call); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PipelineClient.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r = _r; $f.call = call; $f.pc = pc; $f.$s = $s; $f.$r = $r; return $f;
	};
	PipelineClient.prototype.Call = function(call) { return this.$val.Call(call); };
	PipelineClient.ptr.prototype.Close = function() {
		var $ptr, _r, pc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; pc = $f.pc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pc = this;
		_r = pc.answer.PipelineClose(pc.transform()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PipelineClient.ptr.prototype.Close }; } $f.$ptr = $ptr; $f._r = _r; $f.pc = pc; $f.$s = $s; $f.$r = $r; return $f;
	};
	PipelineClient.prototype.Close = function() { return this.$val.Close(); };
	PipelineOp.ptr.prototype.String = function() {
		var $ptr, op, s;
		op = this;
		s = $makeSlice(sliceType, 0, 32);
		s = $appendSlice(s, "get field ");
		s = strconv.AppendInt(s, new $Int64(0, op.Field), 10);
		if (op.DefaultValue === sliceType.nil) {
			return $bytesToString(s);
		}
		s = $appendSlice(s, " with default");
		return $bytesToString(s);
	};
	PipelineOp.prototype.String = function() { return this.$val.String(); };
	Method.ptr.prototype.String = function() {
		var $ptr, buf, m;
		m = this;
		buf = $makeSlice(sliceType, 0, 128);
		if (m.InterfaceName === "") {
			buf = $append(buf, 64, 48, 120);
			buf = strconv.AppendUint(buf, m.InterfaceID, 16);
		} else {
			buf = $appendSlice(buf, m.InterfaceName);
		}
		buf = $append(buf, 46);
		if (m.MethodName === "") {
			buf = $append(buf, 64);
			buf = strconv.AppendUint(buf, new $Uint64(0, m.MethodID), 10);
		} else {
			buf = $appendSlice(buf, m.MethodName);
		}
		return $bytesToString(buf);
	};
	Method.prototype.String = function() { return this.$val.String(); };
	TransformPtr = function(p, transform) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, err, err$1, field, n, op, op$1, p, s, transform, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; err = $f.err; err$1 = $f.err$1; field = $f.field; n = $f.n; op = $f.op; op$1 = $f.op$1; p = $f.p; s = $f.s; transform = $f.transform; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = transform.$length;
		if (n === 0) {
			$s = -1; return [p, $ifaceNil];
		}
		s = $clone($clone(p, Ptr).Struct(), Struct);
		_ref = $subslice(transform, 0, (n - 1 >> 0));
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			op = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), PipelineOp);
			_r = $clone(s, Struct).Ptr(op.Field); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			field = $clone(_tuple[0], Ptr);
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), err];
			}
			_r$1 = $clone(field, Ptr).StructDefault(op.DefaultValue); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			Struct.copy(s, _tuple$1[0]);
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), err];
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		op$1 = $clone((x = n - 1 >> 0, ((x < 0 || x >= transform.$length) ? ($throwRuntimeError("index out of range"), undefined) : transform.$array[transform.$offset + x])), PipelineOp);
		_r$2 = $clone(s, Struct).Ptr(op$1.Field); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		p = $clone(_tuple$2[0], Ptr);
		err$1 = _tuple$2[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), err$1];
		}
		/* */ if (!(op$1.DefaultValue === sliceType.nil)) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!(op$1.DefaultValue === sliceType.nil)) { */ case 6:
			_r$3 = $clone(p, Ptr).Default(op$1.DefaultValue); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$3 = _r$3;
			Ptr.copy(p, _tuple$3[0]);
			err$1 = _tuple$3[1];
		/* } */ case 7:
		$s = -1; return [p, err$1];
		/* */ } return; } if ($f === undefined) { $f = { $blk: TransformPtr }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.err = err; $f.err$1 = err$1; $f.field = field; $f.n = n; $f.op = op; $f.op$1 = op$1; $f.p = p; $f.s = s; $f.transform = transform; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TransformPtr = TransformPtr;
	ImmediateAnswer = function(s) {
		var $ptr, s, x;
		return (x = new immediateAnswer.ptr($clone(s, Struct)), new x.constructor.elem(x));
	};
	$pkg.ImmediateAnswer = ImmediateAnswer;
	immediateAnswer.ptr.prototype.Struct = function() {
		var $ptr, ans;
		ans = this;
		return [ans.s, $ifaceNil];
	};
	immediateAnswer.prototype.Struct = function() { return this.$val.Struct(); };
	immediateAnswer.ptr.prototype.findClient = function(transform) {
		var $ptr, _r, _tuple, ans, err, p, transform, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ans = $f.ans; err = $f.err; p = $f.p; transform = $f.transform; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ans = this;
		_r = TransformPtr($clone($clone(ans.s, Struct).ToPtr(), Ptr), transform); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], Ptr);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ErrorClient(err);
		}
		$s = -1; return $clone($clone(p, Ptr).Interface(), Interface).Client();
		/* */ } return; } if ($f === undefined) { $f = { $blk: immediateAnswer.ptr.prototype.findClient }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ans = ans; $f.err = err; $f.p = p; $f.transform = transform; $f.$s = $s; $f.$r = $r; return $f;
	};
	immediateAnswer.prototype.findClient = function(transform) { return this.$val.findClient(transform); };
	immediateAnswer.ptr.prototype.PipelineCall = function(transform, call) {
		var $ptr, _r, _r$1, ans, c, call, transform, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; ans = $f.ans; c = $f.c; call = $f.call; transform = $f.transform; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ans = this;
		_r = $clone(ans, immediateAnswer).findClient(transform); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c = _r;
		if ($interfaceIsEqual(c, $ifaceNil)) {
			$s = -1; return ErrorAnswer($pkg.ErrNullClient);
		}
		_r$1 = c.Call(call); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: immediateAnswer.ptr.prototype.PipelineCall }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.ans = ans; $f.c = c; $f.call = call; $f.transform = transform; $f.$s = $s; $f.$r = $r; return $f;
	};
	immediateAnswer.prototype.PipelineCall = function(transform, call) { return this.$val.PipelineCall(transform, call); };
	immediateAnswer.ptr.prototype.PipelineClose = function(transform) {
		var $ptr, _r, _r$1, ans, c, transform, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; ans = $f.ans; c = $f.c; transform = $f.transform; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ans = this;
		_r = $clone(ans, immediateAnswer).findClient(transform); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c = _r;
		if ($interfaceIsEqual(c, $ifaceNil)) {
			$s = -1; return $pkg.ErrNullClient;
		}
		_r$1 = c.Close(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: immediateAnswer.ptr.prototype.PipelineClose }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.ans = ans; $f.c = c; $f.transform = transform; $f.$s = $s; $f.$r = $r; return $f;
	};
	immediateAnswer.prototype.PipelineClose = function(transform) { return this.$val.PipelineClose(transform); };
	ErrorAnswer = function(e) {
		var $ptr, e, x;
		return (x = new errorAnswer.ptr(e), new x.constructor.elem(x));
	};
	$pkg.ErrorAnswer = ErrorAnswer;
	errorAnswer.ptr.prototype.Struct = function() {
		var $ptr, ans;
		ans = this;
		return [new Struct.ptr(ptrType.nil, 0, new ObjectSize.ptr(0, 0), 0, 0), ans.e];
	};
	errorAnswer.prototype.Struct = function() { return this.$val.Struct(); };
	errorAnswer.ptr.prototype.PipelineCall = function(param, param$1) {
		var $ptr, ans, param, param$1;
		ans = this;
		return new ans.constructor.elem(ans);
	};
	errorAnswer.prototype.PipelineCall = function(param, param$1) { return this.$val.PipelineCall(param, param$1); };
	errorAnswer.ptr.prototype.PipelineClose = function(param) {
		var $ptr, ans, param;
		ans = this;
		return ans.e;
	};
	errorAnswer.prototype.PipelineClose = function(param) { return this.$val.PipelineClose(param); };
	IsFixedAnswer = function(ans) {
		var $ptr, _ref, ans;
		_ref = ans;
		if ($assertType(_ref, immediateAnswer, true)[1]) {
			return true;
		} else if ($assertType(_ref, errorAnswer, true)[1]) {
			return true;
		} else {
			return false;
		}
	};
	$pkg.IsFixedAnswer = IsFixedAnswer;
	ErrorClient = function(e) {
		var $ptr, e, x;
		return (x = new errorClient.ptr(e), new x.constructor.elem(x));
	};
	$pkg.ErrorClient = ErrorClient;
	errorClient.ptr.prototype.Call = function(param) {
		var $ptr, ec, param;
		ec = this;
		return ErrorAnswer(ec.e);
	};
	errorClient.prototype.Call = function(param) { return this.$val.Call(param); };
	errorClient.ptr.prototype.Close = function() {
		var $ptr, ec;
		ec = this;
		return $ifaceNil;
	};
	errorClient.prototype.Close = function() { return this.$val.Close(); };
	MethodError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Method.String() + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MethodError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	MethodError.prototype.Error = function() { return this.$val.Error(); };
	Segment.ptr.prototype.Message = function() {
		var $ptr, s;
		s = this;
		return s.msg;
	};
	Segment.prototype.Message = function() { return this.$val.Message(); };
	Segment.ptr.prototype.ID = function() {
		var $ptr, s;
		s = this;
		return s.id;
	};
	Segment.prototype.ID = function() { return this.$val.ID(); };
	Segment.ptr.prototype.Data = function() {
		var $ptr, s;
		s = this;
		return s.data;
	};
	Segment.prototype.Data = function() { return this.$val.Data(); };
	Segment.ptr.prototype.regionInBounds = function(base, sz) {
		var $ptr, _tuple, base, end, ok, s, sz;
		s = this;
		_tuple = new Address(base).addSize(sz);
		end = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return false;
		}
		return end <= (s.data.$length >>> 0);
	};
	Segment.prototype.regionInBounds = function(base, sz) { return this.$val.regionInBounds(base, sz); };
	Segment.ptr.prototype.slice = function(base, sz) {
		var $ptr, base, s, sz;
		s = this;
		return $subslice(s.data, base, (base + (sz >>> 0) >>> 0));
	};
	Segment.prototype.slice = function(base, sz) { return this.$val.slice(base, sz); };
	Segment.ptr.prototype.readUint8 = function(addr) {
		var $ptr, addr, s, x;
		s = this;
		return (x = s.slice(addr, 1), (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
	};
	Segment.prototype.readUint8 = function(addr) { return this.$val.readUint8(addr); };
	Segment.ptr.prototype.readUint16 = function(addr) {
		var $ptr, addr, s;
		s = this;
		return $clone(binary.LittleEndian, binary.littleEndian).Uint16(s.slice(addr, 2));
	};
	Segment.prototype.readUint16 = function(addr) { return this.$val.readUint16(addr); };
	Segment.ptr.prototype.readUint32 = function(addr) {
		var $ptr, addr, s;
		s = this;
		return $clone(binary.LittleEndian, binary.littleEndian).Uint32(s.slice(addr, 4));
	};
	Segment.prototype.readUint32 = function(addr) { return this.$val.readUint32(addr); };
	Segment.ptr.prototype.readUint64 = function(addr) {
		var $ptr, addr, s;
		s = this;
		return $clone(binary.LittleEndian, binary.littleEndian).Uint64(s.slice(addr, 8));
	};
	Segment.prototype.readUint64 = function(addr) { return this.$val.readUint64(addr); };
	Segment.ptr.prototype.readRawPointer = function(addr) {
		var $ptr, addr, s, x;
		s = this;
		return (x = s.readUint64(addr), new rawPointer(x.$high, x.$low));
	};
	Segment.prototype.readRawPointer = function(addr) { return this.$val.readRawPointer(addr); };
	Segment.ptr.prototype.writeUint8 = function(addr, val) {
		var $ptr, addr, s, val, x;
		s = this;
		(x = s.slice(addr, 1), (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0] = val));
	};
	Segment.prototype.writeUint8 = function(addr, val) { return this.$val.writeUint8(addr, val); };
	Segment.ptr.prototype.writeUint16 = function(addr, val) {
		var $ptr, addr, s, val;
		s = this;
		$clone(binary.LittleEndian, binary.littleEndian).PutUint16(s.slice(addr, 2), val);
	};
	Segment.prototype.writeUint16 = function(addr, val) { return this.$val.writeUint16(addr, val); };
	Segment.ptr.prototype.writeUint32 = function(addr, val) {
		var $ptr, addr, s, val;
		s = this;
		$clone(binary.LittleEndian, binary.littleEndian).PutUint32(s.slice(addr, 4), val);
	};
	Segment.prototype.writeUint32 = function(addr, val) { return this.$val.writeUint32(addr, val); };
	Segment.ptr.prototype.writeUint64 = function(addr, val) {
		var $ptr, addr, s, val;
		s = this;
		$clone(binary.LittleEndian, binary.littleEndian).PutUint64(s.slice(addr, 8), val);
	};
	Segment.prototype.writeUint64 = function(addr, val) { return this.$val.writeUint64(addr, val); };
	Segment.ptr.prototype.writeRawPointer = function(addr, val) {
		var $ptr, addr, s, val;
		s = this;
		s.writeUint64(addr, new $Uint64(val.$high, val.$low));
	};
	Segment.prototype.writeRawPointer = function(addr, val) { return this.$val.writeRawPointer(addr, val); };
	Segment.ptr.prototype.root = function() {
		var $ptr, s, sz;
		s = this;
		sz = new ObjectSize.ptr(0, 1);
		if (!s.regionInBounds(0, $clone(sz, ObjectSize).totalSize())) {
			return new PointerList.ptr(new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0));
		}
		return new PointerList.ptr(new List.ptr(s, 0, 1, $clone(sz, ObjectSize), s.msg.depthLimit(), 0));
	};
	Segment.prototype.root = function() { return this.$val.root(); };
	Segment.ptr.prototype.lookupSegment = function(id) {
		var $ptr, _r, id, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; id = $f.id; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (s.id === id) {
			$s = -1; return [s, $ifaceNil];
		}
		_r = s.msg.Segment(id); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Segment.ptr.prototype.lookupSegment }; } $f.$ptr = $ptr; $f._r = _r; $f.id = id; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Segment.prototype.lookupSegment = function(id) { return this.$val.lookupSegment(id); };
	Segment.ptr.prototype.readPtr = function(off, depthLimit) {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, depthLimit, err, err$1, err$2, lp, off, ptr, s, sp, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; depthLimit = $f.depthLimit; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; lp = $f.lp; off = $f.off; ptr = $f.ptr; s = $f.s; sp = $f.sp; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ptr = new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
		err = $ifaceNil;
		s = this;
		val = s.readRawPointer(off);
		_r = s.resolveFarPointer(off, val); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		s = _tuple[0];
		off = _tuple[1];
		val = _tuple[2];
		err = _tuple[3];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
			_tmp$1 = err;
			Ptr.copy(ptr, _tmp);
			err = _tmp$1;
			$s = -1; return [ptr, err];
		}
		if ((val.$high === 0 && val.$low === 0)) {
			_tmp$2 = new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
			_tmp$3 = $ifaceNil;
			Ptr.copy(ptr, _tmp$2);
			err = _tmp$3;
			$s = -1; return [ptr, err];
		}
		if (depthLimit === 0) {
			_tmp$4 = new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
			_tmp$5 = errDepthLimit;
			Ptr.copy(ptr, _tmp$4);
			err = _tmp$5;
			$s = -1; return [ptr, err];
		}
			_1 = val.pointerType();
			/* */ if (_1 === (0)) { $s = 3; continue; }
			/* */ if (_1 === (1)) { $s = 4; continue; }
			/* */ if (_1 === (3)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (0)) { */ case 3:
				_tuple$1 = s.readStructPtr(off, val);
				sp = $clone(_tuple$1[0], Struct);
				err$1 = _tuple$1[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					_tmp$6 = new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
					_tmp$7 = err$1;
					Ptr.copy(ptr, _tmp$6);
					err = _tmp$7;
					$s = -1; return [ptr, err];
				}
				_r$1 = s.msg.ReadLimiter(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.canRead($clone(sp, Struct).readSize()); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if (!_r$2) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!_r$2) { */ case 8:
					_tmp$8 = new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
					_tmp$9 = errReadLimit;
					Ptr.copy(ptr, _tmp$8);
					err = _tmp$9;
					$s = -1; return [ptr, err];
				/* } */ case 9:
				sp.depthLimit = depthLimit - 1 >>> 0;
				_tmp$10 = $clone($clone(sp, Struct).ToPtr(), Ptr);
				_tmp$11 = $ifaceNil;
				Ptr.copy(ptr, _tmp$10);
				err = _tmp$11;
				$s = -1; return [ptr, err];
			/* } else if (_1 === (1)) { */ case 4:
				_tuple$2 = s.readListPtr(off, val);
				lp = $clone(_tuple$2[0], List);
				err$2 = _tuple$2[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					_tmp$12 = new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
					_tmp$13 = err$2;
					Ptr.copy(ptr, _tmp$12);
					err = _tmp$13;
					$s = -1; return [ptr, err];
				}
				_r$3 = s.msg.ReadLimiter(); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$4 = _r$3.canRead($clone(lp, List).readSize()); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ if (!_r$4) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (!_r$4) { */ case 12:
					_tmp$14 = new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
					_tmp$15 = errReadLimit;
					Ptr.copy(ptr, _tmp$14);
					err = _tmp$15;
					$s = -1; return [ptr, err];
				/* } */ case 13:
				lp.depthLimit = depthLimit - 1 >>> 0;
				_tmp$16 = $clone($clone(lp, List).ToPtr(), Ptr);
				_tmp$17 = $ifaceNil;
				Ptr.copy(ptr, _tmp$16);
				err = _tmp$17;
				$s = -1; return [ptr, err];
			/* } else if (_1 === (3)) { */ case 5:
				if (!((val.otherPointerType() === 0))) {
					_tmp$18 = new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
					_tmp$19 = errOtherPointer;
					Ptr.copy(ptr, _tmp$18);
					err = _tmp$19;
					$s = -1; return [ptr, err];
				}
				_tmp$20 = $clone(new Interface.ptr(s, val.capabilityIndex()).ToPtr(), Ptr);
				_tmp$21 = $ifaceNil;
				Ptr.copy(ptr, _tmp$20);
				err = _tmp$21;
				$s = -1; return [ptr, err];
			/* } else { */ case 6:
				_tmp$22 = new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
				_tmp$23 = errBadLandingPad;
				Ptr.copy(ptr, _tmp$22);
				err = _tmp$23;
				$s = -1; return [ptr, err];
			/* } */ case 7:
		case 2:
		$s = -1; return [ptr, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Segment.ptr.prototype.readPtr }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.depthLimit = depthLimit; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.lp = lp; $f.off = off; $f.ptr = ptr; $f.s = s; $f.sp = sp; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Segment.prototype.readPtr = function(off, depthLimit) { return this.$val.readPtr(off, depthLimit); };
	Segment.ptr.prototype.readStructPtr = function(off, val) {
		var $ptr, _tuple, addr, off, ok, s, sz, val;
		s = this;
		_tuple = new pointerOffset(val.offset()).resolve(off);
		addr = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return [new Struct.ptr(ptrType.nil, 0, new ObjectSize.ptr(0, 0), 0, 0), errPointerAddress];
		}
		sz = $clone(val.structSize(), ObjectSize);
		if (!s.regionInBounds(addr, $clone(sz, ObjectSize).totalSize())) {
			return [new Struct.ptr(ptrType.nil, 0, new ObjectSize.ptr(0, 0), 0, 0), errPointerAddress];
		}
		return [new Struct.ptr(s, addr, $clone(sz, ObjectSize), 0, 0), $ifaceNil];
	};
	Segment.prototype.readStructPtr = function(off, val) { return this.$val.readStructPtr(off, val); };
	Segment.ptr.prototype.readListPtr = function(off, val) {
		var $ptr, _tuple, _tuple$1, _tuple$2, _tuple$3, addr, hdr, lsize, lt, n, off, ok, ok$1, ok$2, s, sz, tsize, val;
		s = this;
		_tuple = new pointerOffset(val.offset()).resolve(off);
		addr = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return [new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), errPointerAddress];
		}
		_tuple$1 = val.totalListSize();
		lsize = _tuple$1[0];
		ok = _tuple$1[1];
		if (!ok) {
			return [new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), errOverflow];
		}
		if (!s.regionInBounds(addr, lsize)) {
			return [new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), errPointerAddress];
		}
		lt = val.listType();
		if (lt === 7) {
			hdr = s.readRawPointer(addr);
			ok$1 = false;
			_tuple$2 = new Address(addr).addSize(8);
			addr = _tuple$2[0];
			ok$1 = _tuple$2[1];
			if (!ok$1) {
				return [new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), errOverflow];
			}
			if (!((hdr.pointerType() === 0))) {
				return [new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), errBadTag];
			}
			sz = $clone(hdr.structSize(), ObjectSize);
			n = (hdr.offset() >> 0);
			_tuple$3 = new Size($clone(sz, ObjectSize).totalSize()).times(n);
			tsize = _tuple$3[0];
			ok$2 = _tuple$3[1];
			if (!ok$2) {
				return [new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), errOverflow];
			} else if (!s.regionInBounds(addr, tsize)) {
				return [new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), errPointerAddress];
			}
			return [new List.ptr(s, addr, n, $clone(sz, ObjectSize), 0, 1), $ifaceNil];
		}
		if (lt === 1) {
			return [new List.ptr(s, addr, val.numListElements(), new ObjectSize.ptr(0, 0), 0, 2), $ifaceNil];
		}
		return [new List.ptr(s, addr, val.numListElements(), $clone(val.elementSize(), ObjectSize), 0, 0), $ifaceNil];
	};
	Segment.prototype.readListPtr = function(off, val) { return this.$val.readListPtr(off, val); };
	Segment.ptr.prototype.resolveFarPointer = function(off, val) {
		var $ptr, _1, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, _tuple$2, _tuple$3, err, err$1, far, faroff, faroff$1, off, ok, s, s$1, s$2, segid, segid$1, tag, tagStart, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; err = $f.err; err$1 = $f.err$1; far = $f.far; faroff = $f.faroff; faroff$1 = $f.faroff$1; off = $f.off; ok = $f.ok; s = $f.s; s$1 = $f.s$1; s$2 = $f.s$2; segid = $f.segid; segid$1 = $f.segid$1; tag = $f.tag; tagStart = $f.tagStart; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
			_1 = val.pointerType();
			/* */ if (_1 === (6)) { $s = 2; continue; }
			/* */ if (_1 === (2)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (6)) { */ case 2:
				_tmp = val.farAddress();
				_tmp$1 = val.farSegment();
				faroff = _tmp;
				segid = _tmp$1;
				_r = s.lookupSegment(segid); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				s$1 = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [ptrType.nil, 0, new rawPointer(0, 0), err];
				}
				if (!s$1.regionInBounds(faroff, 16)) {
					$s = -1; return [ptrType.nil, 0, new rawPointer(0, 0), errPointerAddress];
				}
				far = s$1.readRawPointer(faroff);
				_tuple$1 = new Address(faroff).addSize(8);
				tagStart = _tuple$1[0];
				ok = _tuple$1[1];
				if (!ok) {
					$s = -1; return [ptrType.nil, 0, new rawPointer(0, 0), errOverflow];
				}
				tag = s$1.readRawPointer(tagStart);
				if (!((far.pointerType() === 2)) || !((tag.offset() === 0))) {
					$s = -1; return [ptrType.nil, 0, new rawPointer(0, 0), errPointerAddress];
				}
				segid = far.farSegment();
				_r$1 = s$1.lookupSegment(segid); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$2 = _r$1;
				s$1 = _tuple$2[0];
				err = _tuple$2[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [ptrType.nil, 0, new rawPointer(0, 0), errBadLandingPad];
				}
				$s = -1; return [s$1, 0, landingPadNearPointer(far, tag), $ifaceNil];
			/* } else if (_1 === (2)) { */ case 3:
				_tmp$2 = val.farAddress();
				_tmp$3 = val.farSegment();
				faroff$1 = _tmp$2;
				segid$1 = _tmp$3;
				_r$2 = s.lookupSegment(segid$1); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$3 = _r$2;
				s$2 = _tuple$3[0];
				err$1 = _tuple$3[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return [ptrType.nil, 0, new rawPointer(0, 0), err$1];
				}
				if (!s$2.regionInBounds(faroff$1, 8)) {
					$s = -1; return [ptrType.nil, 0, new rawPointer(0, 0), errPointerAddress];
				}
				val = s$2.readRawPointer(faroff$1);
				$s = -1; return [s$2, faroff$1, val, $ifaceNil];
			/* } else { */ case 4:
				$s = -1; return [s, off, val, $ifaceNil];
			/* } */ case 5:
		case 1:
		$s = -1; return [ptrType.nil, 0, new rawPointer(0, 0), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Segment.ptr.prototype.resolveFarPointer }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.err = err; $f.err$1 = err$1; $f.far = far; $f.faroff = faroff; $f.faroff$1 = faroff$1; $f.off = off; $f.ok = ok; $f.s = s; $f.s$1 = s$1; $f.s$2 = s$2; $f.segid = segid; $f.segid$1 = segid$1; $f.tag = tag; $f.tagStart = tagStart; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Segment.prototype.resolveFarPointer = function(off, val) { return this.$val.resolveFarPointer(off, val); };
	makeOffsetKey = function(p) {
		var $ptr, _1, key, l, p, s, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		_1 = new ptrFlags(p.flags).ptrType();
		if (_1 === (0)) {
			s = $clone($clone(p, Ptr).Struct(), Struct);
			return new offset.ptr(s.seg.id, $mul64(new $Int64(0, s.off), new $Int64(0, 8)), $mul64(((x = new $Int64(0, s.off), x$1 = new $Int64(0, $clone(s.size, ObjectSize).totalSize()), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low))), new $Int64(0, 8)), new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0));
		} else if (_1 === (1)) {
			l = $clone($clone(p, Ptr).List(), List);
			key = new offset.ptr(l.seg.id, $mul64(new $Int64(0, l.off), new $Int64(0, 8)), new $Int64(0, 0), new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0));
			if (!((((l.flags & 2) >>> 0) === 0))) {
				key.bend = (x$2 = $mul64(new $Int64(0, l.off), new $Int64(0, 8)), x$3 = new $Int64(0, l.length), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
			} else {
				key.bend = $mul64(((x$4 = new $Int64(0, l.off), x$5 = $mul64(new $Int64(0, $clone(l.size, ObjectSize).totalSize()), new $Int64(0, l.length)), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low))), new $Int64(0, 8));
			}
			if (!((((l.flags & 1) >>> 0) === 0))) {
				key.boff = (x$6 = key.boff, x$7 = new $Int64(0, 64), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low));
			}
			return key;
		} else {
			$panic(new $String("unreachable"));
		}
	};
	compare = function(a, b) {
		var $ptr, a, ao, b, bo, x, x$1, x$2, x$3;
		ao = $clone($assertType(a, offset), offset);
		bo = $clone($assertType(b, offset), offset);
		if (!((ao.id === bo.id))) {
			return (ao.id >> 0) - (bo.id >> 0) >> 0;
		} else if ((x = ao.boff, x$1 = bo.boff, (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low > x$1.$low)))) {
			return 1;
		} else if ((x$2 = ao.boff, x$3 = bo.boff, (x$2.$high < x$3.$high || (x$2.$high === x$3.$high && x$2.$low < x$3.$low)))) {
			return -1;
		} else {
			return 0;
		}
	};
	needsCopy = function(dest, src) {
		var $ptr, dest, s, src;
		if (!(src.seg.msg === dest.msg)) {
			return true;
		}
		s = $clone($clone(src, Ptr).Struct(), Struct);
		if (s.seg === ptrType.nil) {
			return false;
		}
		return !((((s.flags & 1) >>> 0) === 0));
	};
	Segment.ptr.prototype.writePtr = function(cc, off, src) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, c, cc, dstAddr, err, i, off, s, src, srcAddr, srcAddr$1, srcSeg, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; cc = $f.cc; dstAddr = $f.dstAddr; err = $f.err; i = $f.i; off = $f.off; s = $f.s; src = $f.src; srcAddr = $f.srcAddr; srcAddr$1 = $f.srcAddr$1; srcSeg = $f.srcSeg; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!$clone(src, Ptr).IsValid()) {
			s.writeRawPointer(off, new rawPointer(0, 0));
			$s = -1; return $ifaceNil;
		}
		srcSeg = $clone(src, Ptr).Segment();
		i = $clone($clone(src, Ptr).Interface(), Interface);
		if (!($clone(i, Interface).Segment() === ptrType.nil)) {
			if (!(s.msg === srcSeg.msg)) {
				c = s.msg.AddCap($clone(i, Interface).Client());
				Interface.copy(i, NewInterface(s, c));
			}
			s.writeRawPointer(off, $clone(i, Interface).value(off));
			$s = -1; return $ifaceNil;
		}
		/* */ if (!(s === srcSeg)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(s === srcSeg)) { */ case 1:
			/* */ if (needsCopy(s, $clone(src, Ptr))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (needsCopy(s, $clone(src, Ptr))) { */ case 3:
				_r = copyPointer($clone(cc, copyContext), s, off, $clone(src, Ptr)); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 4:
			/* */ if (!hasCapacity(srcSeg.data, 8)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!hasCapacity(srcSeg.data, 8)) { */ case 6:
				_r$1 = alloc(s, 16); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				t = _tuple[0];
				dstAddr = _tuple[1];
				err = _tuple[2];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return err;
				}
				srcAddr = $clone(src, Ptr).address();
				t.writeRawPointer(dstAddr, rawFarPointer(srcSeg.id, srcAddr));
				t.writeRawPointer(dstAddr + 8 >>> 0, $clone(src, Ptr).value(srcAddr - 8 >>> 0));
				s.writeRawPointer(off, rawDoubleFarPointer(t.id, dstAddr));
				$s = -1; return $ifaceNil;
			/* } */ case 7:
			_r$2 = alloc(srcSeg, 8); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			srcAddr$1 = _tuple$1[1];
			srcSeg.writeRawPointer(srcAddr$1, $clone(src, Ptr).value(srcAddr$1));
			s.writeRawPointer(off, rawFarPointer(srcSeg.id, srcAddr$1));
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		s.writeRawPointer(off, $clone(src, Ptr).value(off));
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Segment.ptr.prototype.writePtr }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.cc = cc; $f.dstAddr = dstAddr; $f.err = err; $f.i = i; $f.off = off; $f.s = s; $f.src = src; $f.srcAddr = srcAddr; $f.srcAddr$1 = srcAddr$1; $f.srcSeg = srcSeg; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Segment.prototype.writePtr = function(cc, off, src) { return this.$val.writePtr(cc, off, src); };
	copyPointer = function(cc, dstSeg, dstAddr, src) {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _tuple$1, cc, dst, dst$1, dstAddr, dstSeg, err, err$1, err$2, i, iter, key, l, newAddr, newSeg, ok, other, other$1, s, src, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; cc = $f.cc; dst = $f.dst; dst$1 = $f.dst$1; dstAddr = $f.dstAddr; dstSeg = $f.dstSeg; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; i = $f.i; iter = $f.iter; key = $f.key; l = $f.l; newAddr = $f.newAddr; newSeg = $f.newSeg; ok = $f.ok; other = $f.other; other$1 = $f.other$1; s = $f.s; src = $f.src; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (cc.depth >= 32) {
			$s = -1; return errCopyDepth;
		}
		copyContext.copy(cc, $clone(cc, copyContext).init());
		key = $clone(makeOffsetKey($clone(src, Ptr)), offset);
		_r = cc.copies.FindLE(new key.constructor.elem(key)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		iter = $clone(_r, rbtree.Iterator);
		/* */ if ((x = key.bend, x$1 = key.boff, (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low > x$1.$low)))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ((x = key.bend, x$1 = key.boff, (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low > x$1.$low)))) { */ case 2:
			/* */ if (!$clone(iter, rbtree.Iterator).NegativeLimit()) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!$clone(iter, rbtree.Iterator).NegativeLimit()) { */ case 4:
				other = $clone($assertType($clone(iter, rbtree.Iterator).Item(), offset), offset);
				/* */ if (key.id === other.id) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (key.id === other.id) { */ case 6:
					/* */ if ((x$2 = key.boff, x$3 = other.boff, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && (x$4 = key.bend, x$5 = other.bend, (x$4.$high === x$5.$high && x$4.$low === x$5.$low))) { $s = 8; continue; }
					/* */ if ((x$6 = other.bend, x$7 = key.bend, (x$6.$high > x$7.$high || (x$6.$high === x$7.$high && x$6.$low >= x$7.$low)))) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if ((x$2 = key.boff, x$3 = other.boff, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && (x$4 = key.bend, x$5 = other.bend, (x$4.$high === x$5.$high && x$4.$low === x$5.$low))) { */ case 8:
						_r$1 = dstSeg.writePtr($clone($clone(cc, copyContext).incDepth(), copyContext), dstAddr, $clone(other.newval, Ptr)); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$s = -1; return _r$1;
					/* } else if ((x$6 = other.bend, x$7 = key.bend, (x$6.$high > x$7.$high || (x$6.$high === x$7.$high && x$6.$low >= x$7.$low)))) { */ case 9:
						$s = -1; return errOverlap;
					/* } */ case 10:
				/* } */ case 7:
			/* } */ case 5:
			rbtree.Iterator.copy(iter, $clone(iter, rbtree.Iterator).Next());
			if (!$clone(iter, rbtree.Iterator).Limit()) {
				other$1 = $clone($assertType($clone(iter, rbtree.Iterator).Item(), offset), offset);
				if ((key.id === other$1.id) && (x$8 = other$1.boff, x$9 = key.bend, (x$8.$high < x$9.$high || (x$8.$high === x$9.$high && x$8.$low < x$9.$low)))) {
					$s = -1; return errOverlap;
				}
			}
		/* } */ case 3:
		_r$2 = alloc(dstSeg, ($div64(((x$10 = key.bend, x$11 = key.boff, new $Int64(x$10.$high - x$11.$high, x$10.$low - x$11.$low))), new $Int64(0, 8), false).$low >>> 0)); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		newSeg = _tuple[0];
		newAddr = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
			_1 = new ptrFlags(src.flags).ptrType();
			/* */ if (_1 === (0)) { $s = 14; continue; }
			/* */ if (_1 === (1)) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (_1 === (0)) { */ case 14:
				s = $clone($clone(src, Ptr).Struct(), Struct);
				dst = new Struct.ptr(newSeg, newAddr, $clone(s.size, ObjectSize), 4294967295, 0);
				Ptr.copy(key.newval, $clone(dst, Struct).ToPtr());
				_r$3 = cc.copies.Insert(new key.constructor.elem(key)); /* */ $s = 18; case 18: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				_r$4 = copyStruct($clone(cc, copyContext), $clone(dst, Struct), $clone(s, Struct)); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				err$1 = _r$4;
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
				}
				$s = 17; continue;
			/* } else if (_1 === (1)) { */ case 15:
				l = $clone($clone(src, Ptr).List(), List);
				dst$1 = new List.ptr(newSeg, newAddr, l.length, $clone(l.size, ObjectSize), 4294967295, l.flags);
				if (!((((dst$1.flags & 1) >>> 0) === 0))) {
					newSeg.writeRawPointer(newAddr, l.seg.readRawPointer(l.off - 8 >>> 0));
					ok = false;
					_tuple$1 = new Address(dst$1.off).addSize(8);
					dst$1.off = _tuple$1[0];
					ok = _tuple$1[1];
					if (!ok) {
						$s = -1; return errOverflow;
					}
				}
				Ptr.copy(key.newval, $clone(dst$1, List).ToPtr());
				_r$5 = cc.copies.Insert(new key.constructor.elem(key)); /* */ $s = 20; case 20: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				/* */ if (!((((dst$1.flags & 2) >>> 0) === 0))) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (!((((dst$1.flags & 2) >>> 0) === 0))) { */ case 21:
					$copySlice($subslice(newSeg.data, newAddr), $subslice(l.seg.data, l.off, (l.length + 0 >> 0)));
					$s = 23; continue;
				/* } else { */ case 22:
					i = 0;
					/* while (true) { */ case 24:
						/* if (!(i < $clone(l, List).Len())) { break; } */ if(!(i < $clone(l, List).Len())) { $s = 25; continue; }
						_r$6 = copyStruct($clone(cc, copyContext), $clone($clone(dst$1, List).Struct(i), Struct), $clone($clone(l, List).Struct(i), Struct)); /* */ $s = 26; case 26: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						err$2 = _r$6;
						if (!($interfaceIsEqual(err$2, $ifaceNil))) {
							$s = -1; return err$2;
						}
						i = i + (1) >> 0;
					/* } */ $s = 24; continue; case 25:
				/* } */ case 23:
				$s = 17; continue;
			/* } else { */ case 16:
				$panic(new $String("unreachable"));
			/* } */ case 17:
		case 13:
		_r$7 = dstSeg.writePtr($clone($clone(cc, copyContext).incDepth(), copyContext), dstAddr, $clone(key.newval, Ptr)); /* */ $s = 27; case 27: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$s = -1; return _r$7;
		/* */ } return; } if ($f === undefined) { $f = { $blk: copyPointer }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.cc = cc; $f.dst = dst; $f.dst$1 = dst$1; $f.dstAddr = dstAddr; $f.dstSeg = dstSeg; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.i = i; $f.iter = iter; $f.key = key; $f.l = l; $f.newAddr = newAddr; $f.newSeg = newSeg; $f.ok = ok; $f.other = other; $f.other$1 = other$1; $f.s = s; $f.src = src; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	copyContext.ptr.prototype.init = function() {
		var $ptr, cc;
		cc = this;
		if (cc.copies === ptrType$5.nil) {
			return new copyContext.ptr(rbtree.NewTree(compare), 0);
		}
		return cc;
	};
	copyContext.prototype.init = function() { return this.$val.init(); };
	copyContext.ptr.prototype.incDepth = function() {
		var $ptr, cc;
		cc = this;
		return new copyContext.ptr(cc.copies, cc.depth + 1 >> 0);
	};
	copyContext.prototype.incDepth = function() { return this.$val.incDepth(); };
	init = function() {
		var $ptr;
		schemas.Register("x\xDA\x12\x98\xE2\xC0d\xC8z\x9C\x89\x81!P\x81\x95\xED\xFF\xF1\xF7\xA7T$\xB7\x94,e\b\xE4e\xE5\xF8\xDF\x91s\xF7_\xA0\x8C\xD6E\x06\x06FaO\xC6.\xE1@Fv\x06\x86`\x1FFfF\x06\xC6\xFF\x0F\xB4+\x95\x05\xEAW\xEE\x03)eDQj\xCB\xB8J\xD8\x15\xAC\xD4\x01\xA2\xF4c\xAF\xBE\xB8P\xC2\xCEC\f\x17yY\xFF\xF1\xA3\xA85d\x9C$l\tVk\x02Q\x1B7y~\xE0\xDEk]GA\xC6\x9A\xA0(Ue\xEC\x12\xD6\x05+\xD5\x80(\x15z\x10\xF4\xA6\xB2\xAD\xEC\x04\xA6c%\x19g\t+\x82\x95\xCA@\x94nu\xE1Sc\xDCf\xF0\x10\xD3\xB1\xBC\x8C\x8B\x84E\xC1J\x05 J'+\xE8?\x98\x95*\xF0\v\xA4T\x01E)#\xE3!aN\xB0R\x16\x90R\x9E\xFF\xC5%)\xFA\xE9\xF9z\xC9\x8C\x89\x05y\x05V%\x89\xE9\f\f\x01\x8C\x8C\x8C<\fLhR\x05\x89\xC9\xFC\xD9\x89\xE9\xA9\xD8e\xF3\x12s\x19qH\xA5\xE4'\xE323/\xBF\x8491=\x80\x91\x91\x81\x19M&3\xB7\x80=\xBF\xA8\x04]\x1B\x13X2\xB9\xB4\xB8$?\xB7\xA4\xB2 \x15f. \x00\x00\xFF\xFF\x89\xFF\x94\xDF", new sliceType$2([new $Uint64(2775888921, 617279431), new $Uint64(3198779152, 595143648), new $Uint64(3266928658, 388992497), new $Uint64(3314210493, 1369412446), new $Uint64(3363210873, 3964854290), new $Uint64(3778065921, 638469301), new $Uint64(4195378586, 3761184915)]));
	};
	newPrimitiveList = function(s, sz, n) {
		var $ptr, _r, _tuple, _tuple$1, addr, err, n, ok, s, sz, total, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; addr = $f.addr; err = $f.err; n = $f.n; ok = $f.ok; s = $f.s; sz = $f.sz; total = $f.total; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = new Size(sz).times(n);
		total = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return [new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), errOverflow];
		}
		_r = alloc(s, total); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		s = _tuple$1[0];
		addr = _tuple$1[1];
		err = _tuple$1[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), err];
		}
		$s = -1; return [new List.ptr(s, addr, n, new ObjectSize.ptr(sz, 0), 4294967295, 0), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: newPrimitiveList }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.addr = addr; $f.err = err; $f.n = n; $f.ok = ok; $f.s = s; $f.sz = sz; $f.total = total; $f.$s = $s; $f.$r = $r; return $f;
	};
	NewCompositeList = function(s, sz, n) {
		var $ptr, _r, _tuple, _tuple$1, addr, err, n, ok, s, sz, total, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; addr = $f.addr; err = $f.err; n = $f.n; ok = $f.ok; s = $f.s; sz = $f.sz; total = $f.total; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(sz, ObjectSize).isValid()) {
			$s = -1; return [new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), errObjectSize];
		}
		sz.DataSize = new Size(sz.DataSize).padToWord();
		_tuple = new Size($clone(sz, ObjectSize).totalSize()).times(n);
		total = _tuple[0];
		ok = _tuple[1];
		if (!ok || total > 4294967287) {
			$s = -1; return [new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), errOverflow];
		}
		_r = alloc(s, 8 + total >>> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		s = _tuple$1[0];
		addr = _tuple$1[1];
		err = _tuple$1[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), err];
		}
		s.writeRawPointer(addr, rawStructPointer((n >> 0), $clone(sz, ObjectSize)));
		$s = -1; return [new List.ptr(s, addr + 8 >>> 0, n, $clone(sz, ObjectSize), 4294967295, 1), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewCompositeList }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.addr = addr; $f.err = err; $f.n = n; $f.ok = ok; $f.s = s; $f.sz = sz; $f.total = total; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewCompositeList = NewCompositeList;
	List.ptr.prototype.ToPtr = function() {
		var $ptr, p;
		p = this;
		return new Ptr.ptr(p.seg, p.off, (p.length >>> 0), $clone(p.size, ObjectSize), p.depthLimit, listPtrFlag(p.flags));
	};
	List.prototype.ToPtr = function() { return this.$val.ToPtr(); };
	List.ptr.prototype.Segment = function() {
		var $ptr, p;
		p = this;
		return p.seg;
	};
	List.prototype.Segment = function() { return this.$val.Segment(); };
	List.ptr.prototype.IsValid = function() {
		var $ptr, p;
		p = this;
		return !(p.seg === ptrType.nil);
	};
	List.prototype.IsValid = function() { return this.$val.IsValid(); };
	List.ptr.prototype.HasData = function() {
		var $ptr, _tuple, ok, p, sz;
		p = this;
		_tuple = new Size($clone(p.size, ObjectSize).totalSize()).times(p.length);
		sz = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return false;
		}
		return sz > 0;
	};
	List.prototype.HasData = function() { return this.$val.HasData(); };
	List.ptr.prototype.readSize = function() {
		var $ptr, _tuple, e, ok, p, sz;
		p = this;
		if (p.seg === ptrType.nil) {
			return 0;
		}
		e = $clone(p.size, ObjectSize).totalSize();
		if (e === 0) {
			e = 8;
		}
		_tuple = new Size(e).times(p.length);
		sz = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return 4294967295;
		}
		return sz;
	};
	List.prototype.readSize = function() { return this.$val.readSize(); };
	List.ptr.prototype.value = function(paddr) {
		var $ptr, _1, off, p, paddr;
		p = this;
		if (p.seg === ptrType.nil) {
			return new rawPointer(0, 0);
		}
		off = makePointerOffset(paddr, p.off);
		if (!((((p.flags & 1) >>> 0) === 0))) {
			return rawListPointer(off - 1 >> 0, 7, $imul(p.length, $clone(p.size, ObjectSize).totalWordCount()));
		}
		if (!((((p.flags & 2) >>> 0) === 0))) {
			return rawListPointer(off, 1, p.length);
		}
		if ((p.size.PointerCount === 1) && (p.size.DataSize === 0)) {
			return rawListPointer(off, 6, p.length);
		}
		if (!((p.size.PointerCount === 0))) {
			$panic(errListSize);
		}
		_1 = p.size.DataSize;
		if (_1 === (0)) {
			return rawListPointer(off, 0, p.length);
		} else if (_1 === (1)) {
			return rawListPointer(off, 2, p.length);
		} else if (_1 === (2)) {
			return rawListPointer(off, 3, p.length);
		} else if (_1 === (4)) {
			return rawListPointer(off, 4, p.length);
		} else if (_1 === (8)) {
			return rawListPointer(off, 5, p.length);
		} else {
			$panic(errListSize);
		}
	};
	List.prototype.value = function(paddr) { return this.$val.value(paddr); };
	List.ptr.prototype.underlying = function() {
		var $ptr, p;
		p = this;
		return new p.constructor.elem(p);
	};
	List.prototype.underlying = function() { return this.$val.underlying(); };
	List.ptr.prototype.Address = function() {
		var $ptr, p;
		p = this;
		return p.off;
	};
	List.prototype.Address = function() { return this.$val.Address(); };
	List.ptr.prototype.Len = function() {
		var $ptr, p;
		p = this;
		if (p.seg === ptrType.nil) {
			return 0;
		}
		return (p.length >> 0);
	};
	List.prototype.Len = function() { return this.$val.Len(); };
	List.ptr.prototype.primitiveElem = function(i, expectedSize) {
		var $ptr, _tuple, addr, expectedSize, i, ok, p;
		p = this;
		if (p.seg === ptrType.nil || i < 0 || i >= (p.length >> 0)) {
			$panic(errOutOfBounds);
		}
		if (!((((p.flags & 2) >>> 0) === 0)) || (((p.flags & 7) >>> 0) === 0) && !($equal(p.size, expectedSize, ObjectSize)) || !((((p.flags & 7) >>> 0) === 0)) && (p.size.DataSize < expectedSize.DataSize || p.size.PointerCount < expectedSize.PointerCount)) {
			return [0, errElementSize];
		}
		_tuple = new Address(p.off).element((i >> 0), $clone(p.size, ObjectSize).totalSize());
		addr = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return [0, errOverflow];
		}
		return [addr, $ifaceNil];
	};
	List.prototype.primitiveElem = function(i, expectedSize) { return this.$val.primitiveElem(i, expectedSize); };
	List.ptr.prototype.Struct = function(i) {
		var $ptr, _tuple, addr, i, ok, p;
		p = this;
		if (p.seg === ptrType.nil || i < 0 || i >= (p.length >> 0)) {
			$panic(errOutOfBounds);
		}
		if (!((((p.flags & 2) >>> 0) === 0))) {
			return new Struct.ptr(ptrType.nil, 0, new ObjectSize.ptr(0, 0), 0, 0);
		}
		_tuple = new Address(p.off).element((i >> 0), $clone(p.size, ObjectSize).totalSize());
		addr = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return new Struct.ptr(ptrType.nil, 0, new ObjectSize.ptr(0, 0), 0, 0);
		}
		return new Struct.ptr(p.seg, addr, $clone(p.size, ObjectSize), p.depthLimit - 1 >>> 0, 1);
	};
	List.prototype.Struct = function(i) { return this.$val.Struct(i); };
	List.ptr.prototype.SetStruct = function(i, s) {
		var $ptr, _r, i, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!((((p.flags & 2) >>> 0) === 0))) {
			$s = -1; return errBitListStruct;
		}
		_r = copyStruct(new copyContext.ptr(ptrType$5.nil, 0), $clone($clone(p, List).Struct(i), Struct), $clone(s, Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: List.ptr.prototype.SetStruct }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	List.prototype.SetStruct = function(i, s) { return this.$val.SetStruct(i, s); };
	BitList.ptr.prototype.At = function(i) {
		var $ptr, addr, bit, i, p;
		p = this;
		if (p.List.seg === ptrType.nil || i < 0 || i >= (p.List.length >> 0)) {
			$panic(errOutOfBounds);
		}
		if (((p.List.flags & 2) >>> 0) === 0) {
			return false;
		}
		bit = (i >>> 0);
		addr = new Address(p.List.off).addOffset(new BitOffset(bit).offset());
		return !((((p.List.seg.readUint8(addr) & new BitOffset(bit).mask()) >>> 0) === 0));
	};
	BitList.prototype.At = function(i) { return this.$val.At(i); };
	BitList.ptr.prototype.Set = function(i, v) {
		var $ptr, addr, b, bit, i, p, v;
		p = this;
		if (p.List.seg === ptrType.nil || i < 0 || i >= (p.List.length >> 0)) {
			$panic(errOutOfBounds);
		}
		if (((p.List.flags & 2) >>> 0) === 0) {
			$panic(errElementSize);
		}
		bit = (i >>> 0);
		addr = new Address(p.List.off).addOffset(new BitOffset(bit).offset());
		b = p.List.seg.slice(addr, 1);
		if (v) {
			(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) | (new BitOffset(bit).mask())) >>> 0));
		} else {
			(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) & ~(new BitOffset(bit).mask())) << 24 >>> 24));
		}
	};
	BitList.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	PointerList.ptr.prototype.At = function(i) {
		var $ptr, _r, _tuple, err, i, p, pi, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; i = $f.i; p = $f.p; pi = $f.pi; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = $clone(p, PointerList).PtrAt(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		pi = $clone(_tuple[0], Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(pi, Ptr).toPointer(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: PointerList.ptr.prototype.At }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.i = i; $f.p = p; $f.pi = pi; $f.$s = $s; $f.$r = $r; return $f;
	};
	PointerList.prototype.At = function(i) { return this.$val.At(i); };
	PointerList.ptr.prototype.PtrAt = function(i) {
		var $ptr, _r, _tuple, addr, err, i, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; addr = $f.addr; err = $f.err; i = $f.i; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_tuple = $clone(p.List, List).primitiveElem(i, new ObjectSize.ptr(0, 1));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), err];
		}
		_r = p.List.seg.readPtr(addr, p.List.depthLimit); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PointerList.ptr.prototype.PtrAt }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.addr = addr; $f.err = err; $f.i = i; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	PointerList.prototype.PtrAt = function(i) { return this.$val.PtrAt(i); };
	PointerList.ptr.prototype.Set = function(i, v) {
		var $ptr, _arg, _arg$1, _r, _r$1, i, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; i = $f.i; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_arg = i;
		_r = toPtr(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r, Ptr);
		_r$1 = $clone(p, PointerList).SetPtr(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PointerList.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	PointerList.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	PointerList.ptr.prototype.SetPtr = function(i, v) {
		var $ptr, _r, _tuple, addr, err, i, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; addr = $f.addr; err = $f.err; i = $f.i; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_tuple = $clone(p.List, List).primitiveElem(i, new ObjectSize.ptr(0, 1));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = p.List.seg.writePtr(new copyContext.ptr(ptrType$5.nil, 0), addr, $clone(v, Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PointerList.ptr.prototype.SetPtr }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.addr = addr; $f.err = err; $f.i = i; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	PointerList.prototype.SetPtr = function(i, v) { return this.$val.SetPtr(i, v); };
	TextList.ptr.prototype.At = function(i) {
		var $ptr, _r, _tuple, _tuple$1, addr, err, i, l, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; addr = $f.addr; err = $f.err; i = $f.i; l = $f.l; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(0, 1));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		_r = l.List.seg.readPtr(addr, l.List.depthLimit); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		p = $clone(_tuple$1[0], Ptr);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		$s = -1; return [$clone(p, Ptr).Text(), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: TextList.ptr.prototype.At }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.addr = addr; $f.err = err; $f.i = i; $f.l = l; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	TextList.prototype.At = function(i) { return this.$val.At(i); };
	TextList.ptr.prototype.BytesAt = function(i) {
		var $ptr, _r, _tuple, _tuple$1, addr, err, i, l, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; addr = $f.addr; err = $f.err; i = $f.i; l = $f.l; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(0, 1));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType.nil, err];
		}
		_r = l.List.seg.readPtr(addr, l.List.depthLimit); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		p = $clone(_tuple$1[0], Ptr);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType.nil, err];
		}
		$s = -1; return [$clone(p, Ptr).TextBytes(), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: TextList.ptr.prototype.BytesAt }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.addr = addr; $f.err = err; $f.i = i; $f.l = l; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	TextList.prototype.BytesAt = function(i) { return this.$val.BytesAt(i); };
	TextList.ptr.prototype.Set = function(i, v) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, addr, err, i, l, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; addr = $f.addr; err = $f.err; i = $f.i; l = $f.l; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(0, 1));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		/* */ if (v === "") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v === "") { */ case 1:
			_r = l.List.seg.writePtr(new copyContext.ptr(ptrType$5.nil, 0), addr, new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = NewText(l.List.seg, v); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		p = $clone(_tuple$1[0], UInt8List);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$2 = l.List.seg.writePtr(new copyContext.ptr(ptrType$5.nil, 0), addr, $clone($clone(p.List, List).ToPtr(), Ptr)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TextList.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.addr = addr; $f.err = err; $f.i = i; $f.l = l; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	TextList.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	DataList.ptr.prototype.At = function(i) {
		var $ptr, _r, _tuple, _tuple$1, addr, err, i, l, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; addr = $f.addr; err = $f.err; i = $f.i; l = $f.l; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(0, 1));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType.nil, err];
		}
		_r = l.List.seg.readPtr(addr, l.List.depthLimit); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		p = $clone(_tuple$1[0], Ptr);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType.nil, err];
		}
		$s = -1; return [$clone(p, Ptr).Data(), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: DataList.ptr.prototype.At }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.addr = addr; $f.err = err; $f.i = i; $f.l = l; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	DataList.prototype.At = function(i) { return this.$val.At(i); };
	DataList.ptr.prototype.Set = function(i, v) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, addr, err, i, l, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; addr = $f.addr; err = $f.err; i = $f.i; l = $f.l; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(0, 1));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		/* */ if (v.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v.$length === 0) { */ case 1:
			_r = l.List.seg.writePtr(new copyContext.ptr(ptrType$5.nil, 0), addr, new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = NewData(l.List.seg, v); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		p = $clone(_tuple$1[0], UInt8List);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$2 = l.List.seg.writePtr(new copyContext.ptr(ptrType$5.nil, 0), addr, $clone($clone(p.List, List).ToPtr(), Ptr)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DataList.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.addr = addr; $f.err = err; $f.i = i; $f.l = l; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	DataList.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	NewUInt8List = function(s, n) {
		var $ptr, _r, _tuple, err, l, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrimitiveList(s, 1, n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new UInt8List.ptr(new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		$s = -1; return [new UInt8List.ptr($clone(l, List)), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewUInt8List }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewUInt8List = NewUInt8List;
	NewText = function(s, v) {
		var $ptr, _r, _tuple, err, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = NewUInt8List(s, ((v.length + 1 >> 0) >> 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], UInt8List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new UInt8List.ptr(new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		$copyString(l.List.seg.slice(l.List.off, (v.length >>> 0)), v);
		$s = -1; return [l, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewText }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewText = NewText;
	NewTextFromBytes = function(s, v) {
		var $ptr, _r, _tuple, err, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = NewUInt8List(s, ((v.$length + 1 >> 0) >> 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], UInt8List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new UInt8List.ptr(new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		$copySlice(l.List.seg.slice(l.List.off, (v.$length >>> 0)), v);
		$s = -1; return [l, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewTextFromBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewTextFromBytes = NewTextFromBytes;
	NewData = function(s, v) {
		var $ptr, _r, _tuple, err, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = NewUInt8List(s, (v.$length >> 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], UInt8List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new UInt8List.ptr(new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		$copySlice(l.List.seg.slice(l.List.off, (v.$length >>> 0)), v);
		$s = -1; return [l, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewData }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewData = NewData;
	isOneByteList = function(p) {
		var $ptr, p;
		return !(p.seg === ptrType.nil) && (new ptrFlags(p.flags).ptrType() === 1) && $clone(p.size, ObjectSize).isOneByte() && (((new ptrFlags(p.flags).listFlags() & 1) >>> 0) === 0);
	};
	UInt8List.ptr.prototype.At = function(i) {
		var $ptr, _tuple, addr, err, i, l;
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(1, 0));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 0;
		}
		return l.List.seg.readUint8(addr);
	};
	UInt8List.prototype.At = function(i) { return this.$val.At(i); };
	UInt8List.ptr.prototype.Set = function(i, v) {
		var $ptr, _tuple, addr, err, i, l, v;
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(1, 0));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		l.List.seg.writeUint8(addr, v);
	};
	UInt8List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	Int8List.ptr.prototype.At = function(i) {
		var $ptr, _tuple, addr, err, i, l;
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(1, 0));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 0;
		}
		return (l.List.seg.readUint8(addr) << 24 >> 24);
	};
	Int8List.prototype.At = function(i) { return this.$val.At(i); };
	Int8List.ptr.prototype.Set = function(i, v) {
		var $ptr, _tuple, addr, err, i, l, v;
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(1, 0));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		l.List.seg.writeUint8(addr, (v << 24 >>> 24));
	};
	Int8List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	UInt16List.ptr.prototype.At = function(i) {
		var $ptr, _tuple, addr, err, i, l;
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(2, 0));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 0;
		}
		return l.List.seg.readUint16(addr);
	};
	UInt16List.prototype.At = function(i) { return this.$val.At(i); };
	UInt16List.ptr.prototype.Set = function(i, v) {
		var $ptr, _tuple, addr, err, i, l, v;
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(2, 0));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		l.List.seg.writeUint16(addr, v);
	};
	UInt16List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	Int16List.ptr.prototype.At = function(i) {
		var $ptr, _tuple, addr, err, i, l;
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(2, 0));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 0;
		}
		return (l.List.seg.readUint16(addr) << 16 >> 16);
	};
	Int16List.prototype.At = function(i) { return this.$val.At(i); };
	Int16List.ptr.prototype.Set = function(i, v) {
		var $ptr, _tuple, addr, err, i, l, v;
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(2, 0));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		l.List.seg.writeUint16(addr, (v << 16 >>> 16));
	};
	Int16List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	UInt32List.ptr.prototype.At = function(i) {
		var $ptr, _tuple, addr, err, i, l;
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(4, 0));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 0;
		}
		return l.List.seg.readUint32(addr);
	};
	UInt32List.prototype.At = function(i) { return this.$val.At(i); };
	UInt32List.ptr.prototype.Set = function(i, v) {
		var $ptr, _tuple, addr, err, i, l, v;
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(4, 0));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		l.List.seg.writeUint32(addr, v);
	};
	UInt32List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	Int32List.ptr.prototype.At = function(i) {
		var $ptr, _tuple, addr, err, i, l;
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(4, 0));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 0;
		}
		return (l.List.seg.readUint32(addr) >> 0);
	};
	Int32List.prototype.At = function(i) { return this.$val.At(i); };
	Int32List.ptr.prototype.Set = function(i, v) {
		var $ptr, _tuple, addr, err, i, l, v;
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(4, 0));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		l.List.seg.writeUint32(addr, (v >>> 0));
	};
	Int32List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	UInt64List.ptr.prototype.At = function(i) {
		var $ptr, _tuple, addr, err, i, l;
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(8, 0));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return new $Uint64(0, 0);
		}
		return l.List.seg.readUint64(addr);
	};
	UInt64List.prototype.At = function(i) { return this.$val.At(i); };
	UInt64List.ptr.prototype.Set = function(i, v) {
		var $ptr, _tuple, addr, err, i, l, v;
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(8, 0));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		l.List.seg.writeUint64(addr, v);
	};
	UInt64List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	Int64List.ptr.prototype.At = function(i) {
		var $ptr, _tuple, addr, err, i, l, x;
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(8, 0));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return new $Int64(0, 0);
		}
		return (x = l.List.seg.readUint64(addr), new $Int64(x.$high, x.$low));
	};
	Int64List.prototype.At = function(i) { return this.$val.At(i); };
	Int64List.ptr.prototype.Set = function(i, v) {
		var $ptr, _tuple, addr, err, i, l, v;
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(8, 0));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		l.List.seg.writeUint64(addr, new $Uint64(v.$high, v.$low));
	};
	Int64List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	Float32List.ptr.prototype.At = function(i) {
		var $ptr, _tuple, addr, err, i, l;
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(4, 0));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 0;
		}
		return math.Float32frombits(l.List.seg.readUint32(addr));
	};
	Float32List.prototype.At = function(i) { return this.$val.At(i); };
	Float32List.ptr.prototype.Set = function(i, v) {
		var $ptr, _tuple, addr, err, i, l, v;
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(4, 0));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		l.List.seg.writeUint32(addr, math.Float32bits(v));
	};
	Float32List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	Float64List.ptr.prototype.At = function(i) {
		var $ptr, _tuple, addr, err, i, l;
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(8, 0));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 0;
		}
		return math.Float64frombits(l.List.seg.readUint64(addr));
	};
	Float64List.prototype.At = function(i) { return this.$val.At(i); };
	Float64List.ptr.prototype.Set = function(i, v) {
		var $ptr, _tuple, addr, err, i, l, v;
		l = this;
		_tuple = $clone(l.List, List).primitiveElem(i, new ObjectSize.ptr(8, 0));
		addr = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		l.List.seg.writeUint64(addr, math.Float64bits(v));
	};
	Float64List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	NewMessage = function(arena) {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, arena, err, first, msg, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; arena = $f.arena; err = $f.err; first = $f.first; msg = $f.msg; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		msg = ptrType$6.nil;
		first = ptrType.nil;
		err = $ifaceNil;
		msg = new Message.ptr(new ReadLimiter.ptr(new $Uint64(0, 0)), new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0), arena, sliceType$3.nil, new $Uint64(0, 0), 0, new sync.Mutex.ptr(0, 0), false, new Segment.ptr(ptrType$6.nil, 0, sliceType.nil));
			_r = arena.NumSegments(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_1 = _r;
			/* */ if ((x = new $Int64(0, 0), (_1.$high === x.$high && _1.$low === x.$low))) { $s = 3; continue; }
			/* */ if ((x$1 = new $Int64(0, 1), (_1.$high === x$1.$high && _1.$low === x$1.$low))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((x = new $Int64(0, 0), (_1.$high === x.$high && _1.$low === x.$low))) { */ case 3:
				_r$1 = msg.allocSegment(4096); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				first = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp = ptrType$6.nil;
					_tmp$1 = ptrType.nil;
					_tmp$2 = err;
					msg = _tmp;
					first = _tmp$1;
					err = _tmp$2;
					$s = -1; return [msg, first, err];
				}
				$s = 6; continue;
			/* } else if ((x$1 = new $Int64(0, 1), (_1.$high === x$1.$high && _1.$low === x$1.$low))) { */ case 4:
				_r$2 = msg.Segment(0); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				first = _tuple$1[0];
				err = _tuple$1[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp$3 = ptrType$6.nil;
					_tmp$4 = ptrType.nil;
					_tmp$5 = err;
					msg = _tmp$3;
					first = _tmp$4;
					err = _tmp$5;
					$s = -1; return [msg, first, err];
				}
				if (first.data.$length > 0) {
					_tmp$6 = ptrType$6.nil;
					_tmp$7 = ptrType.nil;
					_tmp$8 = errHasData;
					msg = _tmp$6;
					first = _tmp$7;
					err = _tmp$8;
					$s = -1; return [msg, first, err];
				}
				if (!hasCapacity(first.data, 8)) {
					_tmp$9 = ptrType$6.nil;
					_tmp$10 = ptrType.nil;
					_tmp$11 = errSegmentTooSmall;
					msg = _tmp$9;
					first = _tmp$10;
					err = _tmp$11;
					$s = -1; return [msg, first, err];
				}
				$s = 6; continue;
			/* } else { */ case 5:
				_tmp$12 = ptrType$6.nil;
				_tmp$13 = ptrType.nil;
				_tmp$14 = errHasData;
				msg = _tmp$12;
				first = _tmp$13;
				err = _tmp$14;
				$s = -1; return [msg, first, err];
			/* } */ case 6:
		case 1:
		_r$3 = alloc(first, 8); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_tmp$15 = msg;
		_tmp$16 = first;
		_tmp$17 = $ifaceNil;
		msg = _tmp$15;
		first = _tmp$16;
		err = _tmp$17;
		$s = -1; return [msg, first, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewMessage }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.arena = arena; $f.err = err; $f.first = first; $f.msg = msg; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewMessage = NewMessage;
	Message.ptr.prototype.Reset = function(arena) {
		var $ptr, _r, arena, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; arena = $f.arena; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		$r = m.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		m.Arena = arena;
		m.CapTable = sliceType$3.nil;
		m.segs = false;
		Segment.copy(m.firstSeg, new Segment.ptr(ptrType$6.nil, 0, sliceType.nil));
		$r = m.mu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = m.ReadLimiter(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = _r.Reset(m.TraverseLimit); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.Reset }; } $f.$ptr = $ptr; $f._r = _r; $f.arena = arena; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.Reset = function(arena) { return this.$val.Reset(arena); };
	Message.ptr.prototype.Root = function() {
		var $ptr, _r, _tuple, err, m, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; m = $f.m; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = m.RootPtr(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, Ptr).toPointer(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.Root }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.m = m; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.Root = function() { return this.$val.Root(); };
	Message.ptr.prototype.RootPtr = function() {
		var $ptr, _r, _r$1, _tuple, err, m, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; m = $f.m; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = m.Segment(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		s = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), err];
		}
		_r$1 = $clone(s.root(), PointerList).PtrAt(0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.RootPtr }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.m = m; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.RootPtr = function() { return this.$val.RootPtr(); };
	Message.ptr.prototype.SetRoot = function(p) {
		var $ptr, _r, _r$1, m, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; m = $f.m; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = toPtr(p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = m.SetRootPtr($clone(_r, Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.SetRoot }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.m = m; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.SetRoot = function(p) { return this.$val.SetRoot(p); };
	Message.ptr.prototype.SetRootPtr = function(p) {
		var $ptr, _r, _r$1, _tuple, err, m, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; m = $f.m; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = m.Segment(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		s = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = $clone(s.root(), PointerList).SetPtr(0, $clone(p, Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.SetRootPtr }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.m = m; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.SetRootPtr = function(p) { return this.$val.SetRootPtr(p); };
	Message.ptr.prototype.AddCap = function(c) {
		var $ptr, c, m, n;
		m = this;
		n = (m.CapTable.$length >>> 0);
		m.CapTable = $append(m.CapTable, c);
		return n;
	};
	Message.prototype.AddCap = function(c) { return this.$val.AddCap(c); };
	Message.ptr.prototype.ReadLimiter = function() {
		var $ptr, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = [m];
		m[0] = this;
		$r = m[0].rlimitInit.Do((function(m) { return function() {
			var $ptr, x;
			if ((x = m[0].TraverseLimit, (x.$high === 0 && x.$low === 0))) {
				m[0].rlimit.limit = new $Uint64(0, 67108864);
			} else {
				m[0].rlimit.limit = m[0].TraverseLimit;
			}
		}; })(m)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return m[0].rlimit;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.ReadLimiter }; } $f.$ptr = $ptr; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.ReadLimiter = function() { return this.$val.ReadLimiter(); };
	Message.ptr.prototype.depthLimit = function() {
		var $ptr, m;
		m = this;
		if (!((m.DepthLimit === 0))) {
			return m.DepthLimit;
		}
		return 64;
	};
	Message.prototype.depthLimit = function() { return this.$val.depthLimit(); };
	Message.ptr.prototype.NumSegments = function() {
		var $ptr, _r, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = m.Arena.NumSegments(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.NumSegments }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.NumSegments = function() { return this.$val.NumSegments(); };
	Message.ptr.prototype.Segment = function(id) {
		var $ptr, _r, _r$1, _tuple, data, err, id, m, seg, seg$1, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; data = $f.data; err = $f.err; id = $f.id; m = $f.m; seg = $f.seg; seg$1 = $f.seg$1; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (isInt32Bit() && id > 2147483647) {
			$s = -1; return [ptrType.nil, errSegment32Bit];
		}
		_r = m.Arena.NumSegments(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if ((x = new $Int64(0, id), x$1 = _r, (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x = new $Int64(0, id), x$1 = _r, (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) { */ case 1:
			$s = -1; return [ptrType.nil, errSegmentOutOfBounds];
		/* } */ case 2:
		$r = m.mu.Lock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		seg = m.segment(id);
		/* */ if (!(seg === ptrType.nil)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!(seg === ptrType.nil)) { */ case 5:
			$r = m.mu.Unlock(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return [seg, $ifaceNil];
		/* } */ case 6:
		_r$1 = m.Arena.Data(id); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		data = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 9:
			$r = m.mu.Unlock(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return [ptrType.nil, err];
		/* } */ case 10:
		seg$1 = m.setSegment(id, data);
		$r = m.mu.Unlock(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return [seg$1, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.Segment }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.id = id; $f.m = m; $f.seg = seg; $f.seg$1 = seg$1; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.Segment = function(id) { return this.$val.Segment(id); };
	Message.ptr.prototype.segment = function(id) {
		var $ptr, _entry, id, m;
		m = this;
		if (m.segs === false) {
			if ((id === 0) && !(m.firstSeg.msg === ptrType$6.nil)) {
				return m.firstSeg;
			}
			return ptrType.nil;
		}
		return (_entry = m.segs[SegmentID.keyFor(id)], _entry !== undefined ? _entry.v : ptrType.nil);
	};
	Message.prototype.segment = function(id) { return this.$val.segment(id); };
	Message.ptr.prototype.setSegment = function(id, data) {
		var $ptr, _entry, _key, _key$1, data, id, m, seg, seg$1;
		m = this;
		if (m.segs === false) {
			if (id === 0) {
				Segment.copy(m.firstSeg, new Segment.ptr(m, id, data));
				return m.firstSeg;
			}
			m.segs = {};
			if (!(m.firstSeg.msg === ptrType$6.nil)) {
				_key = 0; (m.segs || $throwRuntimeError("assignment to entry in nil map"))[SegmentID.keyFor(_key)] = { k: _key, v: m.firstSeg };
			}
		} else {
			seg = (_entry = m.segs[SegmentID.keyFor(id)], _entry !== undefined ? _entry.v : ptrType.nil);
			if (!(seg === ptrType.nil)) {
				seg.data = data;
				return seg;
			}
		}
		seg$1 = new Segment.ptr(m, id, data);
		_key$1 = id; (m.segs || $throwRuntimeError("assignment to entry in nil map"))[SegmentID.keyFor(_key$1)] = { k: _key$1, v: seg$1 };
		return seg$1;
	};
	Message.prototype.setSegment = function(id, data) { return this.$val.setSegment(id, data); };
	Message.ptr.prototype.allocSegment = function(sz) {
		var $ptr, _key, _r, _tuple, data, err, id, m, seg, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r = $f._r; _tuple = $f._tuple; data = $f.data; err = $f.err; id = $f.id; m = $f.m; seg = $f.seg; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		$r = m.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (m.segs === false && !(m.firstSeg.msg === ptrType$6.nil)) {
			m.segs = {};
			_key = 0; (m.segs || $throwRuntimeError("assignment to entry in nil map"))[SegmentID.keyFor(_key)] = { k: _key, v: m.firstSeg };
		}
		_r = m.Arena.Allocate(sz, m.segs); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		id = _tuple[0];
		data = _tuple[1];
		err = _tuple[2];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 3:
			$r = m.mu.Unlock(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return [ptrType.nil, err];
		/* } */ case 4:
		/* */ if (isInt32Bit() && id > 2147483647) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (isInt32Bit() && id > 2147483647) { */ case 6:
			$r = m.mu.Unlock(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return [ptrType.nil, errSegment32Bit];
		/* } */ case 7:
		seg = m.setSegment(id, data);
		$r = m.mu.Unlock(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return [seg, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.allocSegment }; } $f.$ptr = $ptr; $f._key = _key; $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.id = id; $f.m = m; $f.seg = seg; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.allocSegment = function(sz) { return this.$val.allocSegment(sz); };
	alloc = function(s, sz) {
		var $ptr, _r, _tuple, _tuple$1, addr, end, err, i, ok, s, sz, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; addr = $f.addr; end = $f.end; err = $f.err; i = $f.i; ok = $f.ok; s = $f.s; sz = $f.sz; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		sz = new Size(sz).padToWord();
		if (sz > 4294967287) {
			$s = -1; return [ptrType.nil, 0, errOverflow];
		}
		/* */ if (!hasCapacity(s.data, sz)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!hasCapacity(s.data, sz)) { */ case 1:
			err = $ifaceNil;
			_r = s.msg.allocSegment(sz); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			s = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ptrType.nil, 0, err];
			}
		/* } */ case 2:
		addr = (s.data.$length >>> 0);
		_tuple$1 = new Address(addr).addSize(sz);
		end = _tuple$1[0];
		ok = _tuple$1[1];
		if (!ok) {
			$s = -1; return [ptrType.nil, 0, errOverflow];
		}
		s.data = $subslice(s.data, 0, end);
		i = addr;
		while (true) {
			if (!(i < end)) { break; }
			(x = s.data, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = 0));
			i = i + (1) >>> 0;
		}
		$s = -1; return [s, addr, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: alloc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.addr = addr; $f.end = end; $f.err = err; $f.i = i; $f.ok = ok; $f.s = s; $f.sz = sz; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	SingleSegment = function(b) {
		var $ptr, b, ssa;
		if (b.$capacity === 0) {
			b = $makeSlice(sliceType, 0, 4096);
		}
		ssa = $newDataPointer(singleSegmentArena.nil, ptrType$7);
		ssa.$set($subslice(new singleSegmentArena(b.$array), b.$offset, b.$offset + b.$length));
		return ssa;
	};
	$pkg.SingleSegment = SingleSegment;
	$ptrType(singleSegmentArena).prototype.NumSegments = function() {
		var $ptr, ssa;
		ssa = this;
		return new $Int64(0, 1);
	};
	$ptrType(singleSegmentArena).prototype.Data = function(id) {
		var $ptr, id, ssa, x;
		ssa = this;
		if (!((id === 0))) {
			return [sliceType.nil, errSegmentOutOfBounds];
		}
		return [(x = ssa.$get(), $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length)), $ifaceNil];
	};
	$ptrType(singleSegmentArena).prototype.Allocate = function(sz, segs) {
		var $ptr, _entry, _entry$1, buf, data, segs, ssa, sz, x, x$1;
		ssa = this;
		data = (x = ssa.$get(), $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length));
		if (!((_entry = segs[SegmentID.keyFor(0)], _entry !== undefined ? _entry.v : ptrType.nil) === ptrType.nil)) {
			data = (_entry$1 = segs[SegmentID.keyFor(0)], _entry$1 !== undefined ? _entry$1.v : ptrType.nil).data;
		}
		if (hasCapacity(data, sz)) {
			return [0, data, $ifaceNil];
		}
		if (sz < 4096) {
			sz = 4096;
		} else {
			sz = new Size(sz).padToWord();
		}
		buf = $makeSlice(sliceType, data.$length, (data.$capacity + (sz >> 0) >> 0));
		$copySlice(buf, data);
		ssa.$set($subslice(new singleSegmentArena(buf.$array), buf.$offset, buf.$offset + buf.$length));
		return [0, (x$1 = ssa.$get(), $subslice(new sliceType(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $ifaceNil];
	};
	MultiSegment = function(b) {
		var $ptr, b, msa;
		msa = $newDataPointer(multiSegmentArena.nil, ptrType$8);
		msa.$set($subslice(new multiSegmentArena(b.$array), b.$offset, b.$offset + b.$length));
		return msa;
	};
	$pkg.MultiSegment = MultiSegment;
	demuxArena = function(hdr, data) {
		var $ptr, _i, _ref, _tmp, _tmp$1, _tuple, data, err, hdr, i, segs, sz;
		segs = $makeSlice(sliceType$4, (($clone(hdr, streamHeader).maxSegment() >> 0) + 1 >> 0));
		_ref = segs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			_tuple = $clone(hdr, streamHeader).segmentSize((i >>> 0));
			sz = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [$ifaceNil, err];
			}
			_tmp = $subslice(data, 0, sz, sz);
			_tmp$1 = $subslice(data, sz);
			((i < 0 || i >= segs.$length) ? ($throwRuntimeError("index out of range"), undefined) : segs.$array[segs.$offset + i] = _tmp);
			data = _tmp$1;
			_i++;
		}
		return [MultiSegment(segs), $ifaceNil];
	};
	$ptrType(multiSegmentArena).prototype.NumSegments = function() {
		var $ptr, msa;
		msa = this;
		return new $Int64(0, msa.$get().$length);
	};
	$ptrType(multiSegmentArena).prototype.Data = function(id) {
		var $ptr, id, msa, x, x$1, x$2;
		msa = this;
		if ((x = new $Int64(0, id), x$1 = new $Int64(0, msa.$get().$length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return [sliceType.nil, errSegmentOutOfBounds];
		}
		return [(x$2 = msa.$get(), ((id < 0 || id >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + id])), $ifaceNil];
	};
	$ptrType(multiSegmentArena).prototype.Allocate = function(sz, segs) {
		var $ptr, _entry, _i, _ref, buf, data, i, id, id$1, msa, s, segs, sz;
		msa = this;
		_ref = msa.$get();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			data = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			id = (i >>> 0);
			s = (_entry = segs[SegmentID.keyFor(id)], _entry !== undefined ? _entry.v : ptrType.nil);
			if (!(s === ptrType.nil)) {
				data = s.data;
			}
			if (hasCapacity(data, sz)) {
				return [id, data, $ifaceNil];
			}
			_i++;
		}
		if (sz < 4096) {
			sz = 4096;
		} else {
			sz = new Size(sz).padToWord();
		}
		buf = $makeSlice(sliceType, 0, (sz >> 0));
		id$1 = (msa.$get().$length >>> 0);
		msa.$set($append(msa.$get(), buf));
		return [id$1, buf, $ifaceNil];
	};
	NewDecoder = function(r) {
		var $ptr, r;
		return new Decoder.ptr(r, new $Uint64(0, 0));
	};
	$pkg.NewDecoder = NewDecoder;
	Decoder.ptr.prototype.Decode = function() {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, arena, buf, d, err, err$1, err$2, err$3, hdr, hdrBuf, hdrSize, maxSeg, maxSegBuf, maxSize, total, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; arena = $f.arena; buf = $f.buf; d = $f.d; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; hdr = $f.hdr; hdrBuf = $f.hdrBuf; hdrSize = $f.hdrSize; maxSeg = $f.maxSeg; maxSegBuf = $f.maxSegBuf; maxSize = $f.maxSize; total = $f.total; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		maxSize = d.MaxMessageSize;
		if ((maxSize.$high === 0 && maxSize.$low === 0)) {
			maxSize = new $Uint64(0, 67108864);
		}
		maxSegBuf = arrayType.zero();
		_r = io.ReadFull(d.r, new sliceType(maxSegBuf)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$6.nil, err];
		}
		maxSeg = $clone(binary.LittleEndian, binary.littleEndian).Uint32(new sliceType(maxSegBuf));
		if (maxSeg > 512) {
			$s = -1; return [ptrType$6.nil, errTooManySegments];
		}
		hdrSize = streamHeaderSize(maxSeg);
		if ((hdrSize.$high > maxSize.$high || (hdrSize.$high === maxSize.$high && hdrSize.$low > maxSize.$low))) {
			$s = -1; return [ptrType$6.nil, errDecodeLimit];
		}
		hdrBuf = $makeSlice(sliceType, $flatten64(hdrSize));
		$copySlice(hdrBuf, new sliceType(maxSegBuf));
		_r$1 = io.ReadFull(d.r, $subslice(hdrBuf, 4)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		err$1 = _tuple$1[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [ptrType$6.nil, err$1];
		}
		_tuple$2 = parseStreamHeader(hdrBuf);
		hdr = $clone(_tuple$2[0], streamHeader);
		err$2 = _tuple$2[2];
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			$s = -1; return [ptrType$6.nil, err$2];
		}
		_tuple$3 = $clone(hdr, streamHeader).totalSize();
		total = _tuple$3[0];
		err$2 = _tuple$3[1];
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			$s = -1; return [ptrType$6.nil, err$2];
		}
		if ((x = new $Uint64(maxSize.$high - hdrSize.$high, maxSize.$low - hdrSize.$low), (total.$high > x.$high || (total.$high === x.$high && total.$low > x.$low)))) {
			$s = -1; return [ptrType$6.nil, errDecodeLimit];
		}
		buf = $makeSlice(sliceType, (total.$low >> 0));
		_r$2 = io.ReadFull(d.r, buf); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$4 = _r$2;
		err$3 = _tuple$4[1];
		if (!($interfaceIsEqual(err$3, $ifaceNil))) {
			$s = -1; return [ptrType$6.nil, err$3];
		}
		_tuple$5 = demuxArena($clone(hdr, streamHeader), buf);
		arena = _tuple$5[0];
		err$2 = _tuple$5[1];
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			$s = -1; return [ptrType$6.nil, err$2];
		}
		$s = -1; return [new Message.ptr(new ReadLimiter.ptr(new $Uint64(0, 0)), new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0), arena, sliceType$3.nil, new $Uint64(0, 0), 0, new sync.Mutex.ptr(0, 0), false, new Segment.ptr(ptrType$6.nil, 0, sliceType.nil)), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.Decode }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.arena = arena; $f.buf = buf; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.hdr = hdr; $f.hdrBuf = hdrBuf; $f.hdrSize = hdrSize; $f.maxSeg = maxSeg; $f.maxSegBuf = maxSegBuf; $f.maxSize = maxSize; $f.total = total; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.Decode = function() { return this.$val.Decode(); };
	Unmarshal = function(data) {
		var $ptr, _tuple, _tuple$1, _tuple$2, arena, data, err, err$1, hdr, tot, x;
		if (data.$length === 0) {
			return [ptrType$6.nil, io.EOF];
		}
		_tuple = parseStreamHeader(data);
		hdr = $clone(_tuple[0], streamHeader);
		data = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$6.nil, err];
		}
		_tuple$1 = $clone(hdr, streamHeader).totalSize();
		tot = _tuple$1[0];
		err$1 = _tuple$1[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return [ptrType$6.nil, err$1];
		} else if ((x = new $Uint64(0, data.$length), (tot.$high > x.$high || (tot.$high === x.$high && tot.$low > x.$low)))) {
			return [ptrType$6.nil, io.ErrUnexpectedEOF];
		}
		_tuple$2 = demuxArena($clone(hdr, streamHeader), data);
		arena = _tuple$2[0];
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$6.nil, err];
		}
		return [new Message.ptr(new ReadLimiter.ptr(new $Uint64(0, 0)), new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0), arena, sliceType$3.nil, new $Uint64(0, 0), 0, new sync.Mutex.ptr(0, 0), false, new Segment.ptr(ptrType$6.nil, 0, sliceType.nil)), $ifaceNil];
	};
	$pkg.Unmarshal = Unmarshal;
	NewEncoder = function(w) {
		var $ptr, w;
		return new Encoder.ptr(w, sliceType.nil, sliceType$4.nil, false, sliceType.nil);
	};
	$pkg.NewEncoder = NewEncoder;
	Encoder.ptr.prototype.Encode = function(m) {
		var $ptr, _q, _r, _r$1, _r$2, _r$3, _r$4, _tuple, e, err, hdrSize, i, m, maxSeg, n, nsegs, s, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; e = $f.e; err = $f.err; hdrSize = $f.hdrSize; i = $f.i; m = $f.m; maxSeg = $f.maxSeg; n = $f.n; nsegs = $f.nsegs; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = m.NumSegments(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		nsegs = _r;
		if ((nsegs.$high === 0 && nsegs.$low === 0)) {
			$s = -1; return errMessageEmpty;
		}
		e.bufs = $append($subslice(e.bufs, 0, 0), sliceType.nil);
		maxSeg = (new $Int64(nsegs.$high - 0, nsegs.$low - 1).$low >>> 0);
		hdrSize = streamHeaderSize(maxSeg);
		if ((x = new $Uint64(0, e.hdrbuf.$capacity), (x.$high < hdrSize.$high || (x.$high === hdrSize.$high && x.$low < hdrSize.$low)))) {
			e.hdrbuf = $makeSlice(sliceType, 0, $flatten64(hdrSize));
		}
		e.hdrbuf = appendUint32($subslice(e.hdrbuf, 0, 0), maxSeg);
		i = new $Int64(0, 0);
		/* while (true) { */ case 2:
			/* if (!((i.$high < nsegs.$high || (i.$high === nsegs.$high && i.$low < nsegs.$low)))) { break; } */ if(!((i.$high < nsegs.$high || (i.$high === nsegs.$high && i.$low < nsegs.$low)))) { $s = 3; continue; }
			_r$1 = m.Segment((i.$low >>> 0)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			s = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			n = s.data.$length;
			if ((x$1 = new $Int64(0, n), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low > 4294967295)))) {
				$s = -1; return errSegmentTooLarge;
			}
			e.hdrbuf = appendUint32(e.hdrbuf, ((_q = (n >>> 0) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 0));
			e.bufs = $append(e.bufs, s.data);
			i = (x$2 = new $Int64(0, 1), new $Int64(i.$high + x$2.$high, i.$low + x$2.$low));
		/* } */ $s = 2; continue; case 3:
		if (!(((_r$2 = e.hdrbuf.$length % 8, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0))) {
			e.hdrbuf = appendUint32(e.hdrbuf, 0);
		}
		(x$3 = e.bufs, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0] = e.hdrbuf));
		/* */ if (e.packed) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (e.packed) { */ case 5:
			_r$3 = e.writePacked(e.bufs); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 6:
		_r$4 = e.write(e.bufs); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.Encode }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.e = e; $f.err = err; $f.hdrSize = hdrSize; $f.i = i; $f.m = m; $f.maxSeg = maxSeg; $f.n = n; $f.nsegs = nsegs; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.Encode = function(m) { return this.$val.Encode(m); };
	Encoder.ptr.prototype.writePacked = function(bufs) {
		var $ptr, _i, _r, _ref, _tuple, b, bufs, e, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; b = $f.b; bufs = $f.bufs; e = $f.e; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_ref = bufs;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			e.packbuf = packed.Pack($subslice(e.packbuf, 0, 0), b);
			_r = e.w.Write(e.packbuf); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.writePacked }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.b = b; $f.bufs = bufs; $f.e = e; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.writePacked = function(bufs) { return this.$val.writePacked(bufs); };
	Message.ptr.prototype.segmentSizes = function() {
		var $ptr, _r, _r$1, _tuple, err, i, m, n, nsegs, s, sizes, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; i = $f.i; m = $f.m; n = $f.n; nsegs = $f.nsegs; s = $f.s; sizes = $f.sizes; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = m.NumSegments(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		nsegs = _r;
		sizes = $makeSlice(sliceType$5, $flatten64(nsegs));
		i = new $Int64(0, 0);
		/* while (true) { */ case 2:
			/* if (!((i.$high < nsegs.$high || (i.$high === nsegs.$high && i.$low < nsegs.$low)))) { break; } */ if(!((i.$high < nsegs.$high || (i.$high === nsegs.$high && i.$low < nsegs.$low)))) { $s = 3; continue; }
			_r$1 = m.Segment((i.$low >>> 0)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			s = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [$subslice(sizes, 0, $flatten64(i)), err];
			}
			n = s.data.$length;
			if ((x = new $Int64(0, n), (x.$high > 0 || (x.$high === 0 && x.$low > 4294967295)))) {
				$s = -1; return [$subslice(sizes, 0, $flatten64(i)), errSegmentTooLarge];
			}
			(($flatten64(i) < 0 || $flatten64(i) >= sizes.$length) ? ($throwRuntimeError("index out of range"), undefined) : sizes.$array[sizes.$offset + $flatten64(i)] = (n >>> 0));
			i = (x$1 = new $Int64(0, 1), new $Int64(i.$high + x$1.$high, i.$low + x$1.$low));
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [sizes, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.segmentSizes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.i = i; $f.m = m; $f.n = n; $f.nsegs = nsegs; $f.s = s; $f.sizes = sizes; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.segmentSizes = function() { return this.$val.segmentSizes(); };
	Message.ptr.prototype.Marshal = function() {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, buf, err, err$1, hdrSize, i, m, maxSeg, nsegs, s, sizes, total, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buf = $f.buf; err = $f.err; err$1 = $f.err$1; hdrSize = $f.hdrSize; i = $f.i; m = $f.m; maxSeg = $f.maxSeg; nsegs = $f.nsegs; s = $f.s; sizes = $f.sizes; total = $f.total; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = m.NumSegments(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		nsegs = _r;
		if ((nsegs.$high === 0 && nsegs.$low === 0)) {
			$s = -1; return [sliceType.nil, errMessageEmpty];
		}
		maxSeg = (new $Int64(nsegs.$high - 0, nsegs.$low - 1).$low >>> 0);
		hdrSize = streamHeaderSize(maxSeg);
		_r$1 = m.segmentSizes(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		sizes = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType.nil, err];
		}
		total = (x = hdrSize, x$1 = totalSize(sizes), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
		buf = $makeSlice(sliceType, $flatten64(hdrSize), $flatten64(total));
		marshalStreamHeader(buf, sizes);
		i = new $Int64(0, 0);
		/* while (true) { */ case 3:
			/* if (!((i.$high < nsegs.$high || (i.$high === nsegs.$high && i.$low < nsegs.$low)))) { break; } */ if(!((i.$high < nsegs.$high || (i.$high === nsegs.$high && i.$low < nsegs.$low)))) { $s = 4; continue; }
			_r$2 = m.Segment((i.$low >>> 0)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			s = _tuple$1[0];
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [sliceType.nil, err$1];
			}
			buf = $appendSlice(buf, s.data);
			i = (x$2 = new $Int64(0, 1), new $Int64(i.$high + x$2.$high, i.$low + x$2.$low));
		/* } */ $s = 3; continue; case 4:
		$s = -1; return [buf, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.Marshal }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.err = err; $f.err$1 = err$1; $f.hdrSize = hdrSize; $f.i = i; $f.m = m; $f.maxSeg = maxSeg; $f.nsegs = nsegs; $f.s = s; $f.sizes = sizes; $f.total = total; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.Marshal = function() { return this.$val.Marshal(); };
	Message.ptr.prototype.MarshalPacked = function() {
		var $ptr, _r, _tuple, buf, data, err, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; data = $f.data; err = $f.err; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = m.Marshal(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		data = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType.nil, err];
		}
		buf = $makeSlice(sliceType, 0, data.$length);
		buf = packed.Pack(buf, data);
		$s = -1; return [buf, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.MarshalPacked }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.data = data; $f.err = err; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.MarshalPacked = function() { return this.$val.MarshalPacked(); };
	streamHeaderSize = function(n) {
		var $ptr, n, x, x$1, x$2, x$3;
		return (x = (x$1 = (x$2 = $mul64(new $Uint64(0, 4), ((x$3 = new $Uint64(0, n), new $Uint64(x$3.$high + 0, x$3.$low + 1)))), new $Uint64(0 + x$2.$high, 4 + x$2.$low)), new $Uint64(x$1.$high + 0, x$1.$low + 7)), new $Uint64(x.$high & ~0, (x.$low & ~7) >>> 0));
	};
	marshalStreamHeader = function(b, sizes) {
		var $ptr, _i, _q, _ref, b, i, loc, sizes, sz;
		$clone(binary.LittleEndian, binary.littleEndian).PutUint32(b, ((sizes.$length - 1 >> 0) >>> 0));
		_ref = sizes;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			sz = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			loc = 4 + ($imul(i, 4)) >> 0;
			$clone(binary.LittleEndian, binary.littleEndian).PutUint32($subslice(b, loc), ((_q = sz / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 0));
			_i++;
		}
	};
	appendUint32 = function(b, v) {
		var $ptr, b, v;
		b = $append(b, 0, 0, 0, 0);
		$clone(binary.LittleEndian, binary.littleEndian).PutUint32($subslice(b, (b.$length - 4 >> 0)), v);
		return b;
	};
	parseStreamHeader = function(data) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, data, err, h, hdrSize, maxSeg, tail, x, x$1, x$2;
		h = new streamHeader.ptr(sliceType.nil);
		tail = sliceType.nil;
		err = $ifaceNil;
		if ((x = new $Uint64(0, data.$length), x$1 = streamHeaderSize(0), (x.$high < x$1.$high || (x.$high === x$1.$high && x.$low < x$1.$low)))) {
			_tmp = new streamHeader.ptr(sliceType.nil);
			_tmp$1 = sliceType.nil;
			_tmp$2 = io.ErrUnexpectedEOF;
			streamHeader.copy(h, _tmp);
			tail = _tmp$1;
			err = _tmp$2;
			return [h, tail, err];
		}
		maxSeg = $clone(binary.LittleEndian, binary.littleEndian).Uint32(data);
		hdrSize = streamHeaderSize(maxSeg);
		if ((x$2 = new $Uint64(0, data.$length), (x$2.$high < hdrSize.$high || (x$2.$high === hdrSize.$high && x$2.$low < hdrSize.$low)))) {
			_tmp$3 = new streamHeader.ptr(sliceType.nil);
			_tmp$4 = sliceType.nil;
			_tmp$5 = io.ErrUnexpectedEOF;
			streamHeader.copy(h, _tmp$3);
			tail = _tmp$4;
			err = _tmp$5;
			return [h, tail, err];
		}
		_tmp$6 = new streamHeader.ptr(data);
		_tmp$7 = $subslice(data, $flatten64(hdrSize));
		_tmp$8 = $ifaceNil;
		streamHeader.copy(h, _tmp$6);
		tail = _tmp$7;
		err = _tmp$8;
		return [h, tail, err];
	};
	streamHeader.ptr.prototype.maxSegment = function() {
		var $ptr, h;
		h = this;
		return $clone(binary.LittleEndian, binary.littleEndian).Uint32(h.b);
	};
	streamHeader.prototype.maxSegment = function() { return this.$val.maxSegment(); };
	streamHeader.ptr.prototype.segmentSize = function(i) {
		var $ptr, _tuple, h, i, ok, s, sz;
		h = this;
		s = $clone(binary.LittleEndian, binary.littleEndian).Uint32($subslice(h.b, (4 + ($imul(i, 4) >>> 0) >>> 0)));
		_tuple = new Size(8).times((s >> 0));
		sz = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return [0, errSegmentTooLarge];
		}
		return [sz, $ifaceNil];
	};
	streamHeader.prototype.segmentSize = function(i) { return this.$val.segmentSize(i); };
	streamHeader.ptr.prototype.totalSize = function() {
		var $ptr, _tuple, err, h, i, sum, x, x$1, x$2, x$3;
		h = this;
		sum = new $Uint64(0, 0);
		i = new $Uint64(0, 0);
		while (true) {
			if (!((x = new $Uint64(0, $clone(h, streamHeader).maxSegment()), (i.$high < x.$high || (i.$high === x.$high && i.$low <= x.$low))))) { break; }
			_tuple = $clone(h, streamHeader).segmentSize((i.$low >>> 0));
			x$1 = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [sum, err];
			}
			sum = (x$2 = new $Uint64(0, x$1), new $Uint64(sum.$high + x$2.$high, sum.$low + x$2.$low));
			i = (x$3 = new $Uint64(0, 1), new $Uint64(i.$high + x$3.$high, i.$low + x$3.$low));
		}
		return [sum, $ifaceNil];
	};
	streamHeader.prototype.totalSize = function() { return this.$val.totalSize(); };
	hasCapacity = function(b, sz) {
		var $ptr, b, sz;
		return sz <= ((b.$capacity - b.$length >> 0) >>> 0);
	};
	totalSize = function(s) {
		var $ptr, _i, _ref, s, sum, sz, x;
		sum = new $Uint64(0, 0);
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			sz = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			sum = (x = new $Uint64(0, sz), new $Uint64(sum.$high + x.$high, sum.$low + x.$low));
			_i++;
		}
		return sum;
	};
	isInt32Bit = function() {
		var $ptr;
		return true;
	};
	Encoder.ptr.prototype.write = function(bufs) {
		var $ptr, _ptr, _r, _tuple, bufs, e, err, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ptr = $f._ptr; _r = $f._r; _tuple = $f._tuple; bufs = $f.bufs; e = $f.e; err = $f.err; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bufs = [bufs];
		e = this;
		_r = (_ptr = (bufs.$ptr || (bufs.$ptr = new ptrType$10(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, bufs))), new ptrType$9(function() { return (x = _ptr.$get(), $subslice(new net.Buffers(x.$array), x.$offset, x.$offset + x.$length)); }, function($v) { _ptr.$set($subslice(new sliceType$4($v.$array), $v.$offset, $v.$offset + $v.$length)); }, _ptr.$target)).WriteTo(e.w); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.write }; } $f.$ptr = $ptr; $f._ptr = _ptr; $f._r = _r; $f._tuple = _tuple; $f.bufs = bufs; $f.e = e; $f.err = err; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.write = function(bufs) { return this.$val.write(bufs); };
	toPtr = function(p) {
		var $ptr, _r, _ref, p, p$1, p$2, p$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; p = $f.p; p$1 = $f.p$1; p$2 = $f.p$2; p$3 = $f.p$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(p, $ifaceNil)) {
			$s = -1; return new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
		}
		_r = p.underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_ref = _r;
		/* */ if ($assertType(_ref, Struct, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, List, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, Interface, true)[1]) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ($assertType(_ref, Struct, true)[1]) { */ case 2:
			p$1 = $clone(_ref.$val, Struct);
			$s = -1; return $clone(p$1, Struct).ToPtr();
		/* } else if ($assertType(_ref, List, true)[1]) { */ case 3:
			p$2 = $clone(_ref.$val, List);
			$s = -1; return $clone(p$2, List).ToPtr();
		/* } else if ($assertType(_ref, Interface, true)[1]) { */ case 4:
			p$3 = $clone(_ref.$val, Interface);
			$s = -1; return $clone(p$3, Interface).ToPtr();
		/* } */ case 5:
		$s = -1; return new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: toPtr }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.p = p; $f.p$1 = p$1; $f.p$2 = p$2; $f.p$3 = p$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Ptr.ptr.prototype.Struct = function() {
		var $ptr, p;
		p = this;
		if (!((new ptrFlags(p.flags).ptrType() === 0))) {
			return new Struct.ptr(ptrType.nil, 0, new ObjectSize.ptr(0, 0), 0, 0);
		}
		return new Struct.ptr(p.seg, p.off, $clone(p.size, ObjectSize), p.depthLimit, new ptrFlags(p.flags).structFlags());
	};
	Ptr.prototype.Struct = function() { return this.$val.Struct(); };
	Ptr.ptr.prototype.StructDefault = function(def) {
		var $ptr, _r, _tuple, def, defp, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; def = $f.def; defp = $f.defp; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		s = $clone($clone(p, Ptr).Struct(), Struct);
		/* */ if (s.seg === ptrType.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.seg === ptrType.nil) { */ case 1:
			if (def === sliceType.nil) {
				$s = -1; return [new Struct.ptr(ptrType.nil, 0, new ObjectSize.ptr(0, 0), 0, 0), $ifaceNil];
			}
			_r = unmarshalDefault(def); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			defp = $clone(_tuple[0], Ptr);
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Struct.ptr(ptrType.nil, 0, new ObjectSize.ptr(0, 0), 0, 0), err];
			}
			$s = -1; return [$clone(defp, Ptr).Struct(), $ifaceNil];
		/* } */ case 2:
		$s = -1; return [s, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Ptr.ptr.prototype.StructDefault }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.def = def; $f.defp = defp; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Ptr.prototype.StructDefault = function(def) { return this.$val.StructDefault(def); };
	Ptr.ptr.prototype.List = function() {
		var $ptr, p;
		p = this;
		if (!((new ptrFlags(p.flags).ptrType() === 1))) {
			return new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0);
		}
		return new List.ptr(p.seg, p.off, (p.lenOrCap >> 0), $clone(p.size, ObjectSize), p.depthLimit, new ptrFlags(p.flags).listFlags());
	};
	Ptr.prototype.List = function() { return this.$val.List(); };
	Ptr.ptr.prototype.ListDefault = function(def) {
		var $ptr, _r, _tuple, def, defp, err, l, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; def = $f.def; defp = $f.defp; err = $f.err; l = $f.l; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		l = $clone($clone(p, Ptr).List(), List);
		/* */ if (l.seg === ptrType.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l.seg === ptrType.nil) { */ case 1:
			if (def === sliceType.nil) {
				$s = -1; return [new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), $ifaceNil];
			}
			_r = unmarshalDefault(def); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			defp = $clone(_tuple[0], Ptr);
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new List.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), err];
			}
			$s = -1; return [$clone(defp, Ptr).List(), $ifaceNil];
		/* } */ case 2:
		$s = -1; return [l, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Ptr.ptr.prototype.ListDefault }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.def = def; $f.defp = defp; $f.err = err; $f.l = l; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	Ptr.prototype.ListDefault = function(def) { return this.$val.ListDefault(def); };
	Ptr.ptr.prototype.Interface = function() {
		var $ptr, p;
		p = this;
		if (!((new ptrFlags(p.flags).ptrType() === 2))) {
			return new Interface.ptr(ptrType.nil, 0);
		}
		return new Interface.ptr(p.seg, (p.lenOrCap >>> 0));
	};
	Ptr.prototype.Interface = function() { return this.$val.Interface(); };
	Ptr.ptr.prototype.Text = function() {
		var $ptr, _tuple, b, ok, p;
		p = this;
		_tuple = $clone(p, Ptr).text();
		b = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return "";
		}
		return $bytesToString(b);
	};
	Ptr.prototype.Text = function() { return this.$val.Text(); };
	Ptr.ptr.prototype.TextDefault = function(def) {
		var $ptr, _tuple, b, def, ok, p;
		p = this;
		_tuple = $clone(p, Ptr).text();
		b = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return def;
		}
		return $bytesToString(b);
	};
	Ptr.prototype.TextDefault = function(def) { return this.$val.TextDefault(def); };
	Ptr.ptr.prototype.TextBytes = function() {
		var $ptr, _tuple, b, ok, p;
		p = this;
		_tuple = $clone(p, Ptr).text();
		b = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return sliceType.nil;
		}
		return b;
	};
	Ptr.prototype.TextBytes = function() { return this.$val.TextBytes(); };
	Ptr.ptr.prototype.TextBytesDefault = function(def) {
		var $ptr, _tuple, b, def, ok, p;
		p = this;
		_tuple = $clone(p, Ptr).text();
		b = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return new sliceType($stringToBytes(def));
		}
		return b;
	};
	Ptr.prototype.TextBytesDefault = function(def) { return this.$val.TextBytesDefault(def); };
	Ptr.ptr.prototype.text = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, l, ok, p, x;
		b = sliceType.nil;
		ok = false;
		p = this;
		if (!isOneByteList($clone(p, Ptr))) {
			_tmp = sliceType.nil;
			_tmp$1 = false;
			b = _tmp;
			ok = _tmp$1;
			return [b, ok];
		}
		l = $clone($clone(p, Ptr).List(), List);
		b = l.seg.slice(l.off, (l.length >>> 0));
		if ((b.$length === 0) || !(((x = b.$length - 1 >> 0, ((x < 0 || x >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + x])) === 0))) {
			_tmp$2 = sliceType.nil;
			_tmp$3 = false;
			b = _tmp$2;
			ok = _tmp$3;
			return [b, ok];
		}
		_tmp$4 = $subslice(b, 0, (b.$length - 1 >> 0), b.$length);
		_tmp$5 = true;
		b = _tmp$4;
		ok = _tmp$5;
		return [b, ok];
	};
	Ptr.prototype.text = function() { return this.$val.text(); };
	Ptr.ptr.prototype.Data = function() {
		var $ptr, p;
		p = this;
		return $clone(p, Ptr).DataDefault(sliceType.nil);
	};
	Ptr.prototype.Data = function() { return this.$val.Data(); };
	Ptr.ptr.prototype.DataDefault = function(def) {
		var $ptr, b, def, l, p;
		p = this;
		if (!isOneByteList($clone(p, Ptr))) {
			return def;
		}
		l = $clone($clone(p, Ptr).List(), List);
		b = l.seg.slice(l.off, (l.length >>> 0));
		if (b === sliceType.nil) {
			return def;
		}
		return b;
	};
	Ptr.prototype.DataDefault = function(def) { return this.$val.DataDefault(def); };
	Ptr.ptr.prototype.toPointer = function() {
		var $ptr, _1, p, x, x$1, x$2;
		p = this;
		if (p.seg === ptrType.nil) {
			return $ifaceNil;
		}
		_1 = new ptrFlags(p.flags).ptrType();
		if (_1 === (0)) {
			return (x = $clone(p, Ptr).Struct(), new x.constructor.elem(x));
		} else if (_1 === (1)) {
			return (x$1 = $clone(p, Ptr).List(), new x$1.constructor.elem(x$1));
		} else if (_1 === (2)) {
			return (x$2 = $clone(p, Ptr).Interface(), new x$2.constructor.elem(x$2));
		}
		return $ifaceNil;
	};
	Ptr.prototype.toPointer = function() { return this.$val.toPointer(); };
	Ptr.ptr.prototype.IsValid = function() {
		var $ptr, p;
		p = this;
		return !(p.seg === ptrType.nil);
	};
	Ptr.prototype.IsValid = function() { return this.$val.IsValid(); };
	Ptr.ptr.prototype.Segment = function() {
		var $ptr, p;
		p = this;
		return p.seg;
	};
	Ptr.prototype.Segment = function() { return this.$val.Segment(); };
	Ptr.ptr.prototype.Default = function(def) {
		var $ptr, _r, def, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; def = $f.def; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (!$clone(p, Ptr).IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!$clone(p, Ptr).IsValid()) { */ case 1:
			_r = unmarshalDefault(def); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		$s = -1; return [p, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Ptr.ptr.prototype.Default }; } $f.$ptr = $ptr; $f._r = _r; $f.def = def; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	Ptr.prototype.Default = function(def) { return this.$val.Default(def); };
	Ptr.ptr.prototype.value = function(paddr) {
		var $ptr, _1, p, paddr;
		p = this;
		_1 = new ptrFlags(p.flags).ptrType();
		if (_1 === (0)) {
			return $clone($clone(p, Ptr).Struct(), Struct).value(paddr);
		} else if (_1 === (1)) {
			return $clone($clone(p, Ptr).List(), List).value(paddr);
		} else if (_1 === (2)) {
			return $clone($clone(p, Ptr).Interface(), Interface).value(paddr);
		}
		return new rawPointer(0, 0);
	};
	Ptr.prototype.value = function(paddr) { return this.$val.value(paddr); };
	Ptr.ptr.prototype.address = function() {
		var $ptr, _1, p;
		p = this;
		_1 = new ptrFlags(p.flags).ptrType();
		if (_1 === (0)) {
			return $clone($clone(p, Ptr).Struct(), Struct).Address();
		} else if (_1 === (1)) {
			return $clone($clone(p, Ptr).List(), List).Address();
		}
		$panic(new $String("ptr not a valid struct or list"));
	};
	Ptr.prototype.address = function() { return this.$val.address(); };
	unmarshalDefault = function(def) {
		var $ptr, _r, _tuple, _tuple$1, def, err, msg, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; def = $f.def; err = $f.err; msg = $f.msg; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = Unmarshal(def);
		msg = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), err];
		}
		_r = msg.RootPtr(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		p = $clone(_tuple$1[0], Ptr);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), err];
		}
		$s = -1; return [p, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: unmarshalDefault }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.def = def; $f.err = err; $f.msg = msg; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	structPtrFlag = function(f) {
		var $ptr, f;
		return (0 | (((f << 24 >>> 24) & 63) >>> 0)) >>> 0;
	};
	listPtrFlag = function(f) {
		var $ptr, f;
		return (64 | (((f << 24 >>> 24) & 63) >>> 0)) >>> 0;
	};
	ptrFlags.prototype.ptrType = function() {
		var $ptr, f;
		f = this.$val;
		return ((f >>> 6 << 24 >>> 24) >> 0);
	};
	$ptrType(ptrFlags).prototype.ptrType = function() { return new ptrFlags(this.$get()).ptrType(); };
	ptrFlags.prototype.listFlags = function() {
		var $ptr, f;
		f = this.$val;
		return (((f & 63) >>> 0) << 24 >>> 24);
	};
	$ptrType(ptrFlags).prototype.listFlags = function() { return new ptrFlags(this.$get()).listFlags(); };
	ptrFlags.prototype.structFlags = function() {
		var $ptr, f;
		f = this.$val;
		return (((f & 63) >>> 0) << 24 >>> 24);
	};
	$ptrType(ptrFlags).prototype.structFlags = function() { return new ptrFlags(this.$get()).structFlags(); };
	pointerOffset.prototype.resolve = function(paddr) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, addr, off, ok, paddr;
		addr = 0;
		ok = false;
		off = this.$val;
		if (off < 0 && (-off >>> 0) > paddr) {
			_tmp = 0;
			_tmp$1 = false;
			addr = _tmp;
			ok = _tmp$1;
			return [addr, ok];
		}
		_tmp$2 = (paddr + (($imul(off, 8)) >>> 0) >>> 0) + 8 >>> 0;
		_tmp$3 = true;
		addr = _tmp$2;
		ok = _tmp$3;
		return [addr, ok];
	};
	$ptrType(pointerOffset).prototype.resolve = function(paddr) { return new pointerOffset(this.$get()).resolve(paddr); };
	makePointerOffset = function(paddr, addr) {
		var $ptr, _q, _q$1, addr, paddr;
		return ((((_q = addr / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) - (_q$1 = paddr / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 0) - 1 >>> 0) >> 0);
	};
	rawStructPointer = function(off, sz) {
		var $ptr, off, sz, x, x$1, x$2, x$3, x$4;
		return (x = (x$1 = (x$2 = orable30BitOffsetPart(off), new rawPointer(0 | x$2.$high, (0 | x$2.$low) >>> 0)), x$3 = $shiftLeft64(new rawPointer(0, $clone(sz, ObjectSize).dataWordCount()), 32), new rawPointer(x$1.$high | x$3.$high, (x$1.$low | x$3.$low) >>> 0)), x$4 = $shiftLeft64(new rawPointer(0, sz.PointerCount), 48), new rawPointer(x.$high | x$4.$high, (x.$low | x$4.$low) >>> 0));
	};
	rawListPointer = function(off, listType, length) {
		var $ptr, length, listType, off, x, x$1, x$2, x$3, x$4;
		return (x = (x$1 = (x$2 = orable30BitOffsetPart(off), new rawPointer(0 | x$2.$high, (1 | x$2.$low) >>> 0)), x$3 = $shiftLeft64(new rawPointer(0, listType), 32), new rawPointer(x$1.$high | x$3.$high, (x$1.$low | x$3.$low) >>> 0)), x$4 = $shiftLeft64(new rawPointer(0, length), 35), new rawPointer(x.$high | x$4.$high, (x.$low | x$4.$low) >>> 0));
	};
	rawInterfacePointer = function(capability) {
		var $ptr, capability, x;
		return (x = $shiftLeft64(new rawPointer(0, capability), 32), new rawPointer(0 | x.$high, (3 | x.$low) >>> 0));
	};
	rawFarPointer = function(segID, off) {
		var $ptr, off, segID, x, x$1, x$2;
		return (x = (x$1 = new rawPointer(0, ((off & ~7) >>> 0)), new rawPointer(0 | x$1.$high, (2 | x$1.$low) >>> 0)), x$2 = $shiftLeft64(new rawPointer(0, segID), 32), new rawPointer(x.$high | x$2.$high, (x.$low | x$2.$low) >>> 0));
	};
	rawDoubleFarPointer = function(segID, off) {
		var $ptr, off, segID, x, x$1, x$2;
		return (x = (x$1 = new rawPointer(0, ((off & ~7) >>> 0)), new rawPointer(0 | x$1.$high, (6 | x$1.$low) >>> 0)), x$2 = $shiftLeft64(new rawPointer(0, segID), 32), new rawPointer(x.$high | x$2.$high, (x.$low | x$2.$low) >>> 0));
	};
	landingPadNearPointer = function(far, tag) {
		var $ptr, _q, far, rawFarFarPointer, tag, x;
		rawFarFarPointer = new rawPointer(0, ((_q = far.farAddress() / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) - 1 >>> 0));
		return (x = $shiftLeft64(rawFarFarPointer, 2), new rawPointer(tag.$high | x.$high, (tag.$low | x.$low) >>> 0));
	};
	rawPointer.prototype.pointerType = function() {
		var $ptr, p, t;
		p = this;
		t = new rawPointer(p.$high & 0, (p.$low & 3) >>> 0);
		if ((t.$high === 0 && t.$low === 2)) {
			return (new rawPointer(p.$high & 0, (p.$low & 7) >>> 0).$low >> 0);
		}
		return (t.$low >> 0);
	};
	$ptrType(rawPointer).prototype.pointerType = function() { return this.$get().pointerType(); };
	rawPointer.prototype.structSize = function() {
		var $ptr, c, d, p;
		p = this;
		c = ($shiftRightUint64(p, 32).$low << 16 >>> 16);
		d = ($shiftRightUint64(p, 48).$low << 16 >>> 16);
		return new ObjectSize.ptr($imul((c >>> 0), 8) >>> 0, d);
	};
	$ptrType(rawPointer).prototype.structSize = function() { return this.$get().structSize(); };
	rawPointer.prototype.listType = function() {
		var $ptr, p, x;
		p = this;
		return ((x = $shiftRightUint64(p, 32), new rawPointer(x.$high & 0, (x.$low & 7) >>> 0)).$low >> 0);
	};
	$ptrType(rawPointer).prototype.listType = function() { return this.$get().listType(); };
	rawPointer.prototype.numListElements = function() {
		var $ptr, p;
		p = this;
		return ($shiftRightUint64(p, 35).$low >> 0);
	};
	$ptrType(rawPointer).prototype.numListElements = function() { return this.$get().numListElements(); };
	rawPointer.prototype.elementSize = function() {
		var $ptr, _1, p;
		p = this;
		_1 = p.listType();
		if (_1 === (0)) {
			return new ObjectSize.ptr(0, 0);
		} else if (_1 === (1)) {
			return new ObjectSize.ptr(0, 0);
		} else if (_1 === (2)) {
			return new ObjectSize.ptr(1, 0);
		} else if (_1 === (3)) {
			return new ObjectSize.ptr(2, 0);
		} else if (_1 === (4)) {
			return new ObjectSize.ptr(4, 0);
		} else if (_1 === (5)) {
			return new ObjectSize.ptr(8, 0);
		} else if (_1 === (6)) {
			return new ObjectSize.ptr(0, 1);
		} else {
			$panic(new $String("elementSize not supposed to be called on composite or unknown list type"));
		}
	};
	$ptrType(rawPointer).prototype.elementSize = function() { return this.$get().elementSize(); };
	rawPointer.prototype.totalListSize = function() {
		var $ptr, _1, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, n, ok, p, sz;
		sz = 0;
		ok = false;
		p = this;
		n = p.numListElements();
		_1 = p.listType();
		if (_1 === (0)) {
			_tmp = 0;
			_tmp$1 = true;
			sz = _tmp;
			ok = _tmp$1;
			return [sz, ok];
		} else if (_1 === (1)) {
			_tmp$2 = ((_q = ((n + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >>> 0);
			_tmp$3 = true;
			sz = _tmp$2;
			ok = _tmp$3;
			return [sz, ok];
		} else if (_1 === (7)) {
			_tuple = new Size(8).times(n + 1 >> 0);
			sz = _tuple[0];
			ok = _tuple[1];
			return [sz, ok];
		} else {
			_tuple$1 = new Size($clone(p.elementSize(), ObjectSize).totalSize()).times(n);
			sz = _tuple$1[0];
			ok = _tuple$1[1];
			return [sz, ok];
		}
	};
	$ptrType(rawPointer).prototype.totalListSize = function() { return this.$get().totalListSize(); };
	orable30BitOffsetPart = function(signedOff) {
		var $ptr, d32, signedOff, x;
		d32 = signedOff << 2 >> 0;
		return (x = new rawPointer(0, d32), new rawPointer(x.$high & 0, (x.$low & 4294967295) >>> 0));
	};
	rawPointer.prototype.offset = function() {
		var $ptr, p, s32, u32, u64;
		p = this;
		u64 = new rawPointer(p.$high & 0, (p.$low & 4294967295) >>> 0);
		u32 = (u64.$low >>> 0);
		s32 = (u32 >> 0) >> 2 >> 0;
		return (s32 >> 0);
	};
	$ptrType(rawPointer).prototype.offset = function() { return this.$get().offset(); };
	rawPointer.prototype.otherPointerType = function() {
		var $ptr, p;
		p = this;
		return ($shiftRightUint64(new rawPointer(p.$high & 0, (p.$low & 4294967295) >>> 0), 2).$low >>> 0);
	};
	$ptrType(rawPointer).prototype.otherPointerType = function() { return this.$get().otherPointerType(); };
	rawPointer.prototype.farAddress = function() {
		var $ptr, p;
		p = this;
		return $imul(($shiftRightUint64(new rawPointer(p.$high & 0, (p.$low & 4294967295) >>> 0), 3).$low >>> 0), 8) >>> 0;
	};
	$ptrType(rawPointer).prototype.farAddress = function() { return this.$get().farAddress(); };
	rawPointer.prototype.farSegment = function() {
		var $ptr, p;
		p = this;
		return ($shiftRightUint64(p, 32).$low >>> 0);
	};
	$ptrType(rawPointer).prototype.farSegment = function() { return this.$get().farSegment(); };
	rawPointer.prototype.capabilityIndex = function() {
		var $ptr, p;
		p = this;
		return ($shiftRightUint64(p, 32).$low >>> 0);
	};
	$ptrType(rawPointer).prototype.capabilityIndex = function() { return this.$get().capabilityIndex(); };
	ReadLimiter.ptr.prototype.canRead = function(sz) {
		var $ptr, curr, new$1, ok, rl, sz, x, x$1;
		rl = this;
		while (true) {
			curr = atomic.LoadUint64((rl.$ptr_limit || (rl.$ptr_limit = new ptrType$11(function() { return this.$target.limit; }, function($v) { this.$target.limit = $v; }, rl))));
			ok = (x = new $Uint64(0, sz), (curr.$high > x.$high || (curr.$high === x.$high && curr.$low >= x.$low)));
			new$1 = new $Uint64(0, 0);
			if (ok) {
				new$1 = (x$1 = new $Uint64(0, sz), new $Uint64(curr.$high - x$1.$high, curr.$low - x$1.$low));
			} else {
				new$1 = new $Uint64(0, 0);
			}
			if (atomic.CompareAndSwapUint64((rl.$ptr_limit || (rl.$ptr_limit = new ptrType$11(function() { return this.$target.limit; }, function($v) { this.$target.limit = $v; }, rl))), curr, new$1)) {
				return ok;
			}
		}
	};
	ReadLimiter.prototype.canRead = function(sz) { return this.$val.canRead(sz); };
	ReadLimiter.ptr.prototype.Reset = function(limit) {
		var $ptr, limit, rl;
		rl = this;
		atomic.StoreUint64((rl.$ptr_limit || (rl.$ptr_limit = new ptrType$11(function() { return this.$target.limit; }, function($v) { this.$target.limit = $v; }, rl))), limit);
	};
	ReadLimiter.prototype.Reset = function(limit) { return this.$val.Reset(limit); };
	ReadLimiter.ptr.prototype.Unread = function(sz) {
		var $ptr, rl, sz;
		rl = this;
		atomic.AddUint64((rl.$ptr_limit || (rl.$ptr_limit = new ptrType$11(function() { return this.$target.limit; }, function($v) { this.$target.limit = $v; }, rl))), new $Uint64(0, sz));
	};
	ReadLimiter.prototype.Unread = function(sz) { return this.$val.Unread(sz); };
	Address.prototype.String = function() {
		var $ptr, _r, addr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; addr = $f.addr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		addr = this.$val;
		_r = fmt.Sprintf("%#08x", new sliceType$6([new $Uint64(0, addr)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Address.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.addr = addr; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Address).prototype.String = function() { return new Address(this.$get()).String(); };
	Address.prototype.GoString = function() {
		var $ptr, _r, addr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; addr = $f.addr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		addr = this.$val;
		_r = fmt.Sprintf("capnp.Address(%#08x)", new sliceType$6([new $Uint64(0, addr)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Address.prototype.GoString }; } $f.$ptr = $ptr; $f._r = _r; $f.addr = addr; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Address).prototype.GoString = function() { return new Address(this.$get()).GoString(); };
	Size.prototype.String = function() {
		var $ptr, _r, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		sz = this.$val;
		if (sz === 1) {
			$s = -1; return "1 byte";
		}
		_r = fmt.Sprintf("%d bytes", new sliceType$6([new Size(sz)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Size.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Size).prototype.String = function() { return new Size(this.$get()).String(); };
	Size.prototype.GoString = function() {
		var $ptr, _r, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		sz = this.$val;
		_r = fmt.Sprintf("capnp.Size(%d)", new sliceType$6([new Size(sz)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Size.prototype.GoString }; } $f.$ptr = $ptr; $f._r = _r; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Size).prototype.GoString = function() { return new Size(this.$get()).GoString(); };
	DataOffset.prototype.String = function() {
		var $ptr, _r, off, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; off = $f.off; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		off = this.$val;
		if (off === 1) {
			$s = -1; return "+1 byte";
		}
		_r = fmt.Sprintf("+%d bytes", new sliceType$6([new DataOffset(off)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DataOffset.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.off = off; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(DataOffset).prototype.String = function() { return new DataOffset(this.$get()).String(); };
	DataOffset.prototype.GoString = function() {
		var $ptr, _r, off, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; off = $f.off; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		off = this.$val;
		_r = fmt.Sprintf("capnp.DataOffset(%d)", new sliceType$6([new DataOffset(off)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DataOffset.prototype.GoString }; } $f.$ptr = $ptr; $f._r = _r; $f.off = off; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(DataOffset).prototype.GoString = function() { return new DataOffset(this.$get()).GoString(); };
	ObjectSize.ptr.prototype.String = function() {
		var $ptr, _r, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		sz = this;
		_r = fmt.Sprintf("{datasz=%d ptrs=%d}", new sliceType$6([new Size(sz.DataSize), new $Uint16(sz.PointerCount)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ObjectSize.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	ObjectSize.prototype.String = function() { return this.$val.String(); };
	ObjectSize.ptr.prototype.GoString = function() {
		var $ptr, _r, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		sz = this;
		_r = fmt.Sprintf("capnp.ObjectSize{DataSize: %d, PointerCount: %d}", new sliceType$6([new Size(sz.DataSize), new $Uint16(sz.PointerCount)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ObjectSize.ptr.prototype.GoString }; } $f.$ptr = $ptr; $f._r = _r; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	ObjectSize.prototype.GoString = function() { return this.$val.GoString(); };
	BitOffset.prototype.String = function() {
		var $ptr, _r, bit, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; bit = $f.bit; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bit = this.$val;
		_r = fmt.Sprintf("bit %d", new sliceType$6([new BitOffset(bit)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BitOffset.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.bit = bit; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(BitOffset).prototype.String = function() { return new BitOffset(this.$get()).String(); };
	BitOffset.prototype.GoString = function() {
		var $ptr, _r, bit, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; bit = $f.bit; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bit = this.$val;
		_r = fmt.Sprintf("capnp.BitOffset(%d)", new sliceType$6([new BitOffset(bit)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BitOffset.prototype.GoString }; } $f.$ptr = $ptr; $f._r = _r; $f.bit = bit; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(BitOffset).prototype.GoString = function() { return new BitOffset(this.$get()).GoString(); };
	CapabilityID.prototype.String = function() {
		var $ptr, _r, id, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; id = $f.id; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		id = this.$val;
		_r = fmt.Sprintf("capability %d", new sliceType$6([new CapabilityID(id)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CapabilityID.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.id = id; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(CapabilityID).prototype.String = function() { return new CapabilityID(this.$get()).String(); };
	CapabilityID.prototype.GoString = function() {
		var $ptr, _r, id, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; id = $f.id; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		id = this.$val;
		_r = fmt.Sprintf("capnp.CapabilityID(%d)", new sliceType$6([new CapabilityID(id)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CapabilityID.prototype.GoString }; } $f.$ptr = $ptr; $f._r = _r; $f.id = id; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(CapabilityID).prototype.GoString = function() { return new CapabilityID(this.$get()).GoString(); };
	rawPointer.prototype.GoString = function() {
		var $ptr, _1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, lt, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; lt = $f.lt; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if ((p.$high === 0 && p.$low === 0)) {
			$s = -1; return "rawPointer(0)";
		}
			_1 = p.pointerType();
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (6)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (0)) { */ case 2:
				_r = fmt.Sprintf("rawStructPointer(%d, %#v)", new sliceType$6([new pointerOffset(p.offset()), (x = p.structSize(), new x.constructor.elem(x))])); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (1)) { */ case 3:
				lt = "";
				_2 = p.listType();
				if (_2 === (0)) {
					lt = "voidList";
				} else if (_2 === (1)) {
					lt = "bit1List";
				} else if (_2 === (2)) {
					lt = "byte1List";
				} else if (_2 === (3)) {
					lt = "byte2List";
				} else if (_2 === (4)) {
					lt = "byte4List";
				} else if (_2 === (5)) {
					lt = "byte8List";
				} else if (_2 === (6)) {
					lt = "pointerList";
				} else if (_2 === (7)) {
					lt = "compositeList";
				}
				_r$1 = fmt.Sprintf("rawListPointer(%d, %s, %d)", new sliceType$6([new pointerOffset(p.offset()), new $String(lt), new $Int32(p.numListElements())])); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } else if (_1 === (2)) { */ case 4:
				_r$2 = fmt.Sprintf("rawFarPointer(%d, %v)", new sliceType$6([new SegmentID(p.farSegment()), new Address(p.farAddress())])); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return _r$2;
			/* } else if (_1 === (6)) { */ case 5:
				_r$3 = fmt.Sprintf("rawDoubleFarPointer(%d, %v)", new sliceType$6([new SegmentID(p.farSegment()), new Address(p.farAddress())])); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$s = -1; return _r$3;
			/* } else { */ case 6:
				/* */ if (!((p.otherPointerType() === 0))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (!((p.otherPointerType() === 0))) { */ case 12:
					_r$4 = fmt.Sprintf("rawPointer(%#016x)", new sliceType$6([new $Uint64(p.$high, p.$low)])); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					$s = -1; return _r$4;
				/* } */ case 13:
				_r$5 = fmt.Sprintf("rawInterfacePointer(%d)", new sliceType$6([new CapabilityID(p.capabilityIndex())])); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return _r$5;
			/* } */ case 7:
		case 1:
		$s = -1; return "";
		/* */ } return; } if ($f === undefined) { $f = { $blk: rawPointer.prototype.GoString }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.lt = lt; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(rawPointer).prototype.GoString = function() { return this.$get().GoString(); };
	$ptrType(singleSegmentArena).prototype.String = function() {
		var $ptr, _r, ssa, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ssa = $f.ssa; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ssa = this;
		_r = fmt.Sprintf("single-segment arena [len=%d cap=%d]", new sliceType$6([new $Int(ssa.$get().$length), new $Int(ssa.$get().$capacity)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(singleSegmentArena).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.ssa = ssa; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(multiSegmentArena).prototype.String = function() {
		var $ptr, _r, msa, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; msa = $f.msa; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		msa = this;
		_r = fmt.Sprintf("multi-segment arena [%d segments]", new sliceType$6([new $Int(msa.$get().$length)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(multiSegmentArena).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.msa = msa; $f.$s = $s; $f.$r = $r; return $f;
	};
	NewStruct = function(s, sz) {
		var $ptr, _r, _tuple, addr, err, s, seg, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; addr = $f.addr; err = $f.err; s = $f.s; seg = $f.seg; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(sz, ObjectSize).isValid()) {
			$s = -1; return [new Struct.ptr(ptrType.nil, 0, new ObjectSize.ptr(0, 0), 0, 0), errObjectSize];
		}
		sz.DataSize = new Size(sz.DataSize).padToWord();
		_r = alloc(s, $clone(sz, ObjectSize).totalSize()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		seg = _tuple[0];
		addr = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Struct.ptr(ptrType.nil, 0, new ObjectSize.ptr(0, 0), 0, 0), err];
		}
		$s = -1; return [new Struct.ptr(seg, addr, $clone(sz, ObjectSize), 4294967295, 0), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewStruct }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.addr = addr; $f.err = err; $f.s = s; $f.seg = seg; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewStruct = NewStruct;
	NewRootStruct = function(s, sz) {
		var $ptr, _r, _r$1, _tuple, err, err$1, s, st, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; s = $f.s; st = $f.st; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = NewStruct(s, $clone(sz, ObjectSize)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], Struct);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [st, err];
		}
		_r$1 = s.msg.SetRootPtr($clone($clone(st, Struct).ToPtr(), Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err$1 = _r$1;
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [st, err$1];
		}
		$s = -1; return [st, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewRootStruct }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.s = s; $f.st = st; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewRootStruct = NewRootStruct;
	Struct.ptr.prototype.ToPtr = function() {
		var $ptr, p;
		p = this;
		return new Ptr.ptr(p.seg, p.off, 0, $clone(p.size, ObjectSize), p.depthLimit, structPtrFlag(p.flags));
	};
	Struct.prototype.ToPtr = function() { return this.$val.ToPtr(); };
	Struct.ptr.prototype.Segment = function() {
		var $ptr, p;
		p = this;
		return p.seg;
	};
	Struct.prototype.Segment = function() { return this.$val.Segment(); };
	Struct.ptr.prototype.IsValid = function() {
		var $ptr, p;
		p = this;
		return !(p.seg === ptrType.nil);
	};
	Struct.prototype.IsValid = function() { return this.$val.IsValid(); };
	Struct.ptr.prototype.Address = function() {
		var $ptr, p;
		p = this;
		return p.off;
	};
	Struct.prototype.Address = function() { return this.$val.Address(); };
	Struct.ptr.prototype.Size = function() {
		var $ptr, p;
		p = this;
		return p.size;
	};
	Struct.prototype.Size = function() { return this.$val.Size(); };
	Struct.ptr.prototype.HasData = function() {
		var $ptr, p;
		p = this;
		return !$clone(p.size, ObjectSize).isZero();
	};
	Struct.prototype.HasData = function() { return this.$val.HasData(); };
	Struct.ptr.prototype.readSize = function() {
		var $ptr, p;
		p = this;
		if (p.seg === ptrType.nil) {
			return 0;
		}
		return $clone(p.size, ObjectSize).totalSize();
	};
	Struct.prototype.readSize = function() { return this.$val.readSize(); };
	Struct.ptr.prototype.value = function(paddr) {
		var $ptr, off, p, paddr;
		p = this;
		off = makePointerOffset(paddr, p.off);
		return rawStructPointer(off, $clone(p.size, ObjectSize));
	};
	Struct.prototype.value = function(paddr) { return this.$val.value(paddr); };
	Struct.ptr.prototype.underlying = function() {
		var $ptr, p;
		p = this;
		return new p.constructor.elem(p);
	};
	Struct.prototype.underlying = function() { return this.$val.underlying(); };
	Struct.ptr.prototype.Pointer = function(i) {
		var $ptr, _r, _tuple, err, i, p, pp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; i = $f.i; p = $f.p; pp = $f.pp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = $clone(p, Struct).Ptr(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		pp = $clone(_tuple[0], Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(pp, Ptr).toPointer(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Struct.ptr.prototype.Pointer }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.i = i; $f.p = p; $f.pp = pp; $f.$s = $s; $f.$r = $r; return $f;
	};
	Struct.prototype.Pointer = function(i) { return this.$val.Pointer(i); };
	Struct.ptr.prototype.Ptr = function(i) {
		var $ptr, _r, i, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (p.seg === ptrType.nil || i >= p.size.PointerCount) {
			$s = -1; return [new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0), $ifaceNil];
		}
		_r = p.seg.readPtr($clone(p, Struct).pointerAddress(i), p.depthLimit); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Struct.ptr.prototype.Ptr }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	Struct.prototype.Ptr = function(i) { return this.$val.Ptr(i); };
	Struct.ptr.prototype.SetPointer = function(i, src) {
		var $ptr, _arg, _arg$1, _r, _r$1, i, p, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; i = $f.i; p = $f.p; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_arg = i;
		_r = toPtr(src); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r, Ptr);
		_r$1 = $clone(p, Struct).SetPtr(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Struct.ptr.prototype.SetPointer }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.p = p; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	Struct.prototype.SetPointer = function(i, src) { return this.$val.SetPointer(i, src); };
	Struct.ptr.prototype.SetPtr = function(i, src) {
		var $ptr, _r, i, p, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; p = $f.p; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (p.seg === ptrType.nil || i >= p.size.PointerCount) {
			$panic(errOutOfBounds);
		}
		_r = p.seg.writePtr(new copyContext.ptr(ptrType$5.nil, 0), $clone(p, Struct).pointerAddress(i), $clone(src, Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Struct.ptr.prototype.SetPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.p = p; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	Struct.prototype.SetPtr = function(i, src) { return this.$val.SetPtr(i, src); };
	Struct.ptr.prototype.SetText = function(i, v) {
		var $ptr, _r, _r$1, i, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; i = $f.i; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (v === "") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v === "") { */ case 1:
			_r = $clone(p, Struct).SetPtr(i, new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = $clone(p, Struct).SetNewText(i, v); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Struct.ptr.prototype.SetText }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Struct.prototype.SetText = function(i, v) { return this.$val.SetText(i, v); };
	Struct.ptr.prototype.SetNewText = function(i, v) {
		var $ptr, _r, _r$1, _tuple, err, i, p, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; i = $f.i; p = $f.p; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = NewText(p.seg, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		t = $clone(_tuple[0], UInt8List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = $clone(p, Struct).SetPtr(i, $clone($clone(t.List, List).ToPtr(), Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Struct.ptr.prototype.SetNewText }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.i = i; $f.p = p; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Struct.prototype.SetNewText = function(i, v) { return this.$val.SetNewText(i, v); };
	Struct.ptr.prototype.SetTextFromBytes = function(i, v) {
		var $ptr, _r, _r$1, _r$2, _tuple, err, i, p, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; err = $f.err; i = $f.i; p = $f.p; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (v === sliceType.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v === sliceType.nil) { */ case 1:
			_r = $clone(p, Struct).SetPtr(i, new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = NewTextFromBytes(p.seg, v); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		t = $clone(_tuple[0], UInt8List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$2 = $clone(p, Struct).SetPtr(i, $clone($clone(t.List, List).ToPtr(), Ptr)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Struct.ptr.prototype.SetTextFromBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.err = err; $f.i = i; $f.p = p; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Struct.prototype.SetTextFromBytes = function(i, v) { return this.$val.SetTextFromBytes(i, v); };
	Struct.ptr.prototype.SetData = function(i, v) {
		var $ptr, _r, _r$1, _r$2, _tuple, d, err, i, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; d = $f.d; err = $f.err; i = $f.i; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (v === sliceType.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v === sliceType.nil) { */ case 1:
			_r = $clone(p, Struct).SetPtr(i, new Ptr.ptr(ptrType.nil, 0, 0, new ObjectSize.ptr(0, 0), 0, 0)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = NewData(p.seg, v); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		d = $clone(_tuple[0], UInt8List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$2 = $clone(p, Struct).SetPtr(i, $clone($clone(d.List, List).ToPtr(), Ptr)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Struct.ptr.prototype.SetData }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.i = i; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Struct.prototype.SetData = function(i, v) { return this.$val.SetData(i, v); };
	Struct.ptr.prototype.pointerAddress = function(i) {
		var $ptr, _tuple, _tuple$1, a, i, p, ptrStart;
		p = this;
		_tuple = new Address(p.off).addSize(p.size.DataSize);
		ptrStart = _tuple[0];
		_tuple$1 = new Address(ptrStart).element((i >> 0), 8);
		a = _tuple$1[0];
		return a;
	};
	Struct.prototype.pointerAddress = function(i) { return this.$val.pointerAddress(i); };
	Struct.ptr.prototype.bitInData = function(bit) {
		var $ptr, bit, p;
		p = this;
		return !(p.seg === ptrType.nil) && bit < (($imul(p.size.DataSize, 8) >>> 0) >>> 0);
	};
	Struct.prototype.bitInData = function(bit) { return this.$val.bitInData(bit); };
	Struct.ptr.prototype.Bit = function(n) {
		var $ptr, addr, n, p;
		p = this;
		if (!$clone(p, Struct).bitInData(n)) {
			return false;
		}
		addr = new Address(p.off).addOffset(new BitOffset(n).offset());
		return !((((p.seg.readUint8(addr) & new BitOffset(n).mask()) >>> 0) === 0));
	};
	Struct.prototype.Bit = function(n) { return this.$val.Bit(n); };
	Struct.ptr.prototype.SetBit = function(n, v) {
		var $ptr, addr, b, n, p, v;
		p = this;
		if (!$clone(p, Struct).bitInData(n)) {
			$panic(errOutOfBounds);
		}
		addr = new Address(p.off).addOffset(new BitOffset(n).offset());
		b = p.seg.readUint8(addr);
		if (v) {
			b = (b | (new BitOffset(n).mask())) >>> 0;
		} else {
			b = (b & ~(new BitOffset(n).mask())) << 24 >>> 24;
		}
		p.seg.writeUint8(addr, b);
	};
	Struct.prototype.SetBit = function(n, v) { return this.$val.SetBit(n, v); };
	Struct.ptr.prototype.dataAddress = function(off, sz) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, addr, off, ok, p, sz;
		addr = 0;
		ok = false;
		p = this;
		if (p.seg === ptrType.nil || ((off >>> 0) + sz >>> 0) > p.size.DataSize) {
			_tmp = 0;
			_tmp$1 = false;
			addr = _tmp;
			ok = _tmp$1;
			return [addr, ok];
		}
		_tmp$2 = new Address(p.off).addOffset(off);
		_tmp$3 = true;
		addr = _tmp$2;
		ok = _tmp$3;
		return [addr, ok];
	};
	Struct.prototype.dataAddress = function(off, sz) { return this.$val.dataAddress(off, sz); };
	Struct.ptr.prototype.Uint8 = function(off) {
		var $ptr, _tuple, addr, off, ok, p;
		p = this;
		_tuple = $clone(p, Struct).dataAddress(off, 1);
		addr = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return 0;
		}
		return p.seg.readUint8(addr);
	};
	Struct.prototype.Uint8 = function(off) { return this.$val.Uint8(off); };
	Struct.ptr.prototype.Uint16 = function(off) {
		var $ptr, _tuple, addr, off, ok, p;
		p = this;
		_tuple = $clone(p, Struct).dataAddress(off, 2);
		addr = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return 0;
		}
		return p.seg.readUint16(addr);
	};
	Struct.prototype.Uint16 = function(off) { return this.$val.Uint16(off); };
	Struct.ptr.prototype.Uint32 = function(off) {
		var $ptr, _tuple, addr, off, ok, p;
		p = this;
		_tuple = $clone(p, Struct).dataAddress(off, 4);
		addr = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return 0;
		}
		return p.seg.readUint32(addr);
	};
	Struct.prototype.Uint32 = function(off) { return this.$val.Uint32(off); };
	Struct.ptr.prototype.Uint64 = function(off) {
		var $ptr, _tuple, addr, off, ok, p;
		p = this;
		_tuple = $clone(p, Struct).dataAddress(off, 8);
		addr = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return new $Uint64(0, 0);
		}
		return p.seg.readUint64(addr);
	};
	Struct.prototype.Uint64 = function(off) { return this.$val.Uint64(off); };
	Struct.ptr.prototype.SetUint8 = function(off, v) {
		var $ptr, _tuple, addr, off, ok, p, v;
		p = this;
		_tuple = $clone(p, Struct).dataAddress(off, 1);
		addr = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$panic(errOutOfBounds);
		}
		p.seg.writeUint8(addr, v);
	};
	Struct.prototype.SetUint8 = function(off, v) { return this.$val.SetUint8(off, v); };
	Struct.ptr.prototype.SetUint16 = function(off, v) {
		var $ptr, _tuple, addr, off, ok, p, v;
		p = this;
		_tuple = $clone(p, Struct).dataAddress(off, 2);
		addr = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$panic(errOutOfBounds);
		}
		p.seg.writeUint16(addr, v);
	};
	Struct.prototype.SetUint16 = function(off, v) { return this.$val.SetUint16(off, v); };
	Struct.ptr.prototype.SetUint32 = function(off, v) {
		var $ptr, _tuple, addr, off, ok, p, v;
		p = this;
		_tuple = $clone(p, Struct).dataAddress(off, 4);
		addr = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$panic(errOutOfBounds);
		}
		p.seg.writeUint32(addr, v);
	};
	Struct.prototype.SetUint32 = function(off, v) { return this.$val.SetUint32(off, v); };
	Struct.ptr.prototype.SetUint64 = function(off, v) {
		var $ptr, _tuple, addr, off, ok, p, v;
		p = this;
		_tuple = $clone(p, Struct).dataAddress(off, 8);
		addr = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$panic(errOutOfBounds);
		}
		p.seg.writeUint64(addr, v);
	};
	Struct.prototype.SetUint64 = function(off, v) { return this.$val.SetUint64(off, v); };
	copyStruct = function(cc, dst, src) {
		var $ptr, _i, _r, _r$1, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, addr, cc, copyCount, dst, dstAddr, dstData, dstPtrSect, err, j, j$1, j$2, m, numDstPtrs, numSrcPtrs, src, srcAddr, srcData, srcPtrSect, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; addr = $f.addr; cc = $f.cc; copyCount = $f.copyCount; dst = $f.dst; dstAddr = $f.dstAddr; dstData = $f.dstData; dstPtrSect = $f.dstPtrSect; err = $f.err; j = $f.j; j$1 = $f.j$1; j$2 = $f.j$2; m = $f.m; numDstPtrs = $f.numDstPtrs; numSrcPtrs = $f.numSrcPtrs; src = $f.src; srcAddr = $f.srcAddr; srcData = $f.srcData; srcPtrSect = $f.srcPtrSect; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (dst.seg === ptrType.nil) {
			$s = -1; return $ifaceNil;
		}
		srcData = src.seg.slice(src.off, src.size.DataSize);
		dstData = dst.seg.slice(dst.off, dst.size.DataSize);
		copyCount = $copySlice(dstData, srcData);
		dstData = $subslice(dstData, copyCount);
		_ref = dstData;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			j = _i;
			((j < 0 || j >= dstData.$length) ? ($throwRuntimeError("index out of range"), undefined) : dstData.$array[dstData.$offset + j] = 0);
			_i++;
		}
		_tuple = new Address(src.off).addSize(src.size.DataSize);
		srcPtrSect = _tuple[0];
		_tuple$1 = new Address(dst.off).addSize(dst.size.DataSize);
		dstPtrSect = _tuple$1[0];
		numSrcPtrs = src.size.PointerCount;
		numDstPtrs = dst.size.PointerCount;
		j$1 = 0;
		/* while (true) { */ case 1:
			/* if (!(j$1 < numSrcPtrs && j$1 < numDstPtrs)) { break; } */ if(!(j$1 < numSrcPtrs && j$1 < numDstPtrs)) { $s = 2; continue; }
			_tuple$2 = new Address(srcPtrSect).element((j$1 >> 0), 8);
			srcAddr = _tuple$2[0];
			_tuple$3 = new Address(dstPtrSect).element((j$1 >> 0), 8);
			dstAddr = _tuple$3[0];
			_r = src.seg.readPtr(srcAddr, 4294967295); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$4 = _r;
			m = $clone(_tuple$4[0], Ptr);
			err = _tuple$4[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			_r$1 = dst.seg.writePtr($clone($clone(cc, copyContext).incDepth(), copyContext), dstAddr, $clone(m, Ptr)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			err = _r$1;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			j$1 = j$1 + (1) << 16 >>> 16;
		/* } */ $s = 1; continue; case 2:
		j$2 = numSrcPtrs;
		while (true) {
			if (!(j$2 < numDstPtrs)) { break; }
			_tuple$5 = new Address(dstPtrSect).element((j$2 >> 0), 8);
			addr = _tuple$5[0];
			dst.seg.writeRawPointer(addr, new rawPointer(0, 0));
			j$2 = j$2 + (1) << 16 >>> 16;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: copyStruct }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.addr = addr; $f.cc = cc; $f.copyCount = copyCount; $f.dst = dst; $f.dstAddr = dstAddr; $f.dstData = dstData; $f.dstPtrSect = dstPtrSect; $f.err = err; $f.j = j; $f.j$1 = j$1; $f.j$2 = j$2; $f.m = m; $f.numDstPtrs = numDstPtrs; $f.numSrcPtrs = numSrcPtrs; $f.src = src; $f.srcAddr = srcAddr; $f.srcData = srcData; $f.srcPtrSect = srcPtrSect; $f.$s = $s; $f.$r = $r; return $f;
	};
	Address.methods = [{prop: "addSize", name: "addSize", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Size], [Address, $Bool], false)}, {prop: "element", name: "element", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([$Int32, Size], [Address, $Bool], false)}, {prop: "addOffset", name: "addOffset", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([DataOffset], [Address], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}];
	Size.methods = [{prop: "times", name: "times", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([$Int32], [Size, $Bool], false)}, {prop: "padToWord", name: "padToWord", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [Size], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}];
	DataOffset.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}];
	ObjectSize.methods = [{prop: "isZero", name: "isZero", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [$Bool], false)}, {prop: "isOneByte", name: "isOneByte", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [$Bool], false)}, {prop: "isValid", name: "isValid", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [$Bool], false)}, {prop: "pointerSize", name: "pointerSize", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [Size], false)}, {prop: "totalSize", name: "totalSize", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [Size], false)}, {prop: "dataWordCount", name: "dataWordCount", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [$Int32], false)}, {prop: "totalWordCount", name: "totalWordCount", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [$Int32], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}];
	BitOffset.methods = [{prop: "offset", name: "offset", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [DataOffset], false)}, {prop: "mask", name: "mask", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [$Uint8], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}];
	Interface.methods = [{prop: "ToPtr", name: "ToPtr", pkg: "", typ: $funcType([], [Ptr], false)}, {prop: "Segment", name: "Segment", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "HasData", name: "HasData", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Capability", name: "Capability", pkg: "", typ: $funcType([], [CapabilityID], false)}, {prop: "value", name: "value", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address], [rawPointer], false)}, {prop: "underlying", name: "underlying", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [Pointer], false)}, {prop: "Client", name: "Client", pkg: "", typ: $funcType([], [Client], false)}];
	CapabilityID.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType], [ptrType$1, $error], false)}, {prop: "PlaceParams", name: "PlaceParams", pkg: "", typ: $funcType([ptrType], [Struct, $error], false)}];
	CallOptions.methods = [{prop: "Value", name: "Value", pkg: "", typ: $funcType([$emptyInterface], [$emptyInterface], false)}, {prop: "With", name: "With", pkg: "", typ: $funcType([sliceType$7], [CallOptions], false)}];
	ptrType$2.methods = [{prop: "Answer", name: "Answer", pkg: "", typ: $funcType([], [Answer], false)}, {prop: "Transform", name: "Transform", pkg: "", typ: $funcType([], [sliceType$1], false)}, {prop: "Struct", name: "Struct", pkg: "", typ: $funcType([], [Struct, $error], false)}, {prop: "Client", name: "Client", pkg: "", typ: $funcType([], [ptrType$3], false)}, {prop: "GetPipeline", name: "GetPipeline", pkg: "", typ: $funcType([$Uint16], [ptrType$2], false)}, {prop: "GetPipelineDefault", name: "GetPipelineDefault", pkg: "", typ: $funcType([$Uint16, sliceType], [ptrType$2], false)}];
	ptrType$3.methods = [{prop: "transform", name: "transform", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [sliceType$1], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([ptrType$1], [Answer], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	PipelineOp.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$12.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	immediateAnswer.methods = [{prop: "Struct", name: "Struct", pkg: "", typ: $funcType([], [Struct, $error], false)}, {prop: "findClient", name: "findClient", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([sliceType$1], [Client], false)}, {prop: "PipelineCall", name: "PipelineCall", pkg: "", typ: $funcType([sliceType$1, ptrType$1], [Answer], false)}, {prop: "PipelineClose", name: "PipelineClose", pkg: "", typ: $funcType([sliceType$1], [$error], false)}];
	errorAnswer.methods = [{prop: "Struct", name: "Struct", pkg: "", typ: $funcType([], [Struct, $error], false)}, {prop: "PipelineCall", name: "PipelineCall", pkg: "", typ: $funcType([sliceType$1, ptrType$1], [Answer], false)}, {prop: "PipelineClose", name: "PipelineClose", pkg: "", typ: $funcType([sliceType$1], [$error], false)}];
	errorClient.methods = [{prop: "Call", name: "Call", pkg: "", typ: $funcType([ptrType$1], [Answer], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType.methods = [{prop: "Message", name: "Message", pkg: "", typ: $funcType([], [ptrType$6], false)}, {prop: "ID", name: "ID", pkg: "", typ: $funcType([], [SegmentID], false)}, {prop: "Data", name: "Data", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "inBounds", name: "inBounds", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address], [$Bool], false)}, {prop: "regionInBounds", name: "regionInBounds", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address, Size], [$Bool], false)}, {prop: "slice", name: "slice", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address, Size], [sliceType], false)}, {prop: "readUint8", name: "readUint8", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address], [$Uint8], false)}, {prop: "readUint16", name: "readUint16", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address], [$Uint16], false)}, {prop: "readUint32", name: "readUint32", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address], [$Uint32], false)}, {prop: "readUint64", name: "readUint64", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address], [$Uint64], false)}, {prop: "readRawPointer", name: "readRawPointer", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address], [rawPointer], false)}, {prop: "writeUint8", name: "writeUint8", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address, $Uint8], [], false)}, {prop: "writeUint16", name: "writeUint16", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address, $Uint16], [], false)}, {prop: "writeUint32", name: "writeUint32", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address, $Uint32], [], false)}, {prop: "writeUint64", name: "writeUint64", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address, $Uint64], [], false)}, {prop: "writeRawPointer", name: "writeRawPointer", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address, rawPointer], [], false)}, {prop: "root", name: "root", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [PointerList], false)}, {prop: "lookupSegment", name: "lookupSegment", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([SegmentID], [ptrType, $error], false)}, {prop: "readPtr", name: "readPtr", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address, $Uint], [Ptr, $error], false)}, {prop: "readStructPtr", name: "readStructPtr", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address, rawPointer], [Struct, $error], false)}, {prop: "readListPtr", name: "readListPtr", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address, rawPointer], [List, $error], false)}, {prop: "resolveFarPointer", name: "resolveFarPointer", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address, rawPointer], [ptrType, Address, rawPointer, $error], false)}, {prop: "writePtr", name: "writePtr", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([copyContext, Address, Ptr], [$error], false)}];
	copyContext.methods = [{prop: "init", name: "init", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [copyContext], false)}, {prop: "incDepth", name: "incDepth", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [copyContext], false)}];
	List.methods = [{prop: "ToPtr", name: "ToPtr", pkg: "", typ: $funcType([], [Ptr], false)}, {prop: "Segment", name: "Segment", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "HasData", name: "HasData", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "readSize", name: "readSize", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [Size], false)}, {prop: "value", name: "value", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address], [rawPointer], false)}, {prop: "underlying", name: "underlying", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [Pointer], false)}, {prop: "Address", name: "Address", pkg: "", typ: $funcType([], [Address], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "primitiveElem", name: "primitiveElem", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([$Int, ObjectSize], [Address, $error], false)}, {prop: "Struct", name: "Struct", pkg: "", typ: $funcType([$Int], [Struct], false)}, {prop: "SetStruct", name: "SetStruct", pkg: "", typ: $funcType([$Int, Struct], [$error], false)}];
	BitList.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Bool], [], false)}];
	PointerList.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [Pointer, $error], false)}, {prop: "PtrAt", name: "PtrAt", pkg: "", typ: $funcType([$Int], [Ptr, $error], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, Pointer], [$error], false)}, {prop: "SetPtr", name: "SetPtr", pkg: "", typ: $funcType([$Int, Ptr], [$error], false)}];
	TextList.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [$String, $error], false)}, {prop: "BytesAt", name: "BytesAt", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $String], [$error], false)}];
	DataList.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, sliceType], [$error], false)}];
	UInt8List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [$Uint8], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Uint8], [], false)}];
	Int8List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [$Int8], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int8], [], false)}];
	UInt16List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [$Uint16], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Uint16], [], false)}];
	Int16List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [$Int16], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int16], [], false)}];
	UInt32List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [$Uint32], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Uint32], [], false)}];
	Int32List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [$Int32], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int32], [], false)}];
	UInt64List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [$Uint64], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Uint64], [], false)}];
	Int64List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [$Int64], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int64], [], false)}];
	Float32List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [$Float32], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Float32], [], false)}];
	Float64List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [$Float64], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Float64], [], false)}];
	ptrType$6.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([Arena], [], false)}, {prop: "Root", name: "Root", pkg: "", typ: $funcType([], [Pointer, $error], false)}, {prop: "RootPtr", name: "RootPtr", pkg: "", typ: $funcType([], [Ptr, $error], false)}, {prop: "SetRoot", name: "SetRoot", pkg: "", typ: $funcType([Pointer], [$error], false)}, {prop: "SetRootPtr", name: "SetRootPtr", pkg: "", typ: $funcType([Ptr], [$error], false)}, {prop: "AddCap", name: "AddCap", pkg: "", typ: $funcType([Client], [CapabilityID], false)}, {prop: "ReadLimiter", name: "ReadLimiter", pkg: "", typ: $funcType([], [ptrType$13], false)}, {prop: "depthLimit", name: "depthLimit", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [$Uint], false)}, {prop: "NumSegments", name: "NumSegments", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Segment", name: "Segment", pkg: "", typ: $funcType([SegmentID], [ptrType, $error], false)}, {prop: "segment", name: "segment", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([SegmentID], [ptrType], false)}, {prop: "setSegment", name: "setSegment", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([SegmentID, sliceType], [ptrType], false)}, {prop: "allocSegment", name: "allocSegment", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Size], [ptrType, $error], false)}, {prop: "segmentSizes", name: "segmentSizes", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [sliceType$5, $error], false)}, {prop: "Marshal", name: "Marshal", pkg: "", typ: $funcType([], [sliceType, $error], false)}, {prop: "MarshalPacked", name: "MarshalPacked", pkg: "", typ: $funcType([], [sliceType, $error], false)}];
	ptrType$7.methods = [{prop: "NumSegments", name: "NumSegments", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Data", name: "Data", pkg: "", typ: $funcType([SegmentID], [sliceType, $error], false)}, {prop: "Allocate", name: "Allocate", pkg: "", typ: $funcType([Size, mapType$1], [SegmentID, sliceType, $error], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$8.methods = [{prop: "NumSegments", name: "NumSegments", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Data", name: "Data", pkg: "", typ: $funcType([SegmentID], [sliceType, $error], false)}, {prop: "Allocate", name: "Allocate", pkg: "", typ: $funcType([Size, mapType$1], [SegmentID, sliceType, $error], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$14.methods = [{prop: "Decode", name: "Decode", pkg: "", typ: $funcType([], [ptrType$6, $error], false)}];
	ptrType$15.methods = [{prop: "Encode", name: "Encode", pkg: "", typ: $funcType([ptrType$6], [$error], false)}, {prop: "writePacked", name: "writePacked", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([sliceType$4], [$error], false)}, {prop: "write", name: "write", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([sliceType$4], [$error], false)}];
	streamHeader.methods = [{prop: "maxSegment", name: "maxSegment", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [$Uint32], false)}, {prop: "segmentSize", name: "segmentSize", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([$Uint32], [Size, $error], false)}, {prop: "totalSize", name: "totalSize", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [$Uint64, $error], false)}];
	Ptr.methods = [{prop: "Struct", name: "Struct", pkg: "", typ: $funcType([], [Struct], false)}, {prop: "StructDefault", name: "StructDefault", pkg: "", typ: $funcType([sliceType], [Struct, $error], false)}, {prop: "List", name: "List", pkg: "", typ: $funcType([], [List], false)}, {prop: "ListDefault", name: "ListDefault", pkg: "", typ: $funcType([sliceType], [List, $error], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [Interface], false)}, {prop: "Text", name: "Text", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TextDefault", name: "TextDefault", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "TextBytes", name: "TextBytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "TextBytesDefault", name: "TextBytesDefault", pkg: "", typ: $funcType([$String], [sliceType], false)}, {prop: "text", name: "text", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [sliceType, $Bool], false)}, {prop: "Data", name: "Data", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "DataDefault", name: "DataDefault", pkg: "", typ: $funcType([sliceType], [sliceType], false)}, {prop: "toPointer", name: "toPointer", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [Pointer], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Segment", name: "Segment", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "Default", name: "Default", pkg: "", typ: $funcType([sliceType], [Ptr, $error], false)}, {prop: "value", name: "value", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address], [rawPointer], false)}, {prop: "address", name: "address", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [Address], false)}];
	ptrFlags.methods = [{prop: "ptrType", name: "ptrType", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [$Int], false)}, {prop: "listFlags", name: "listFlags", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [listFlags], false)}, {prop: "structFlags", name: "structFlags", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [structFlags], false)}];
	pointerOffset.methods = [{prop: "resolve", name: "resolve", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address], [Address, $Bool], false)}];
	rawPointer.methods = [{prop: "pointerType", name: "pointerType", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [$Int], false)}, {prop: "structSize", name: "structSize", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [ObjectSize], false)}, {prop: "listType", name: "listType", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [$Int], false)}, {prop: "numListElements", name: "numListElements", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [$Int32], false)}, {prop: "elementSize", name: "elementSize", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [ObjectSize], false)}, {prop: "totalListSize", name: "totalListSize", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [Size, $Bool], false)}, {prop: "offset", name: "offset", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [pointerOffset], false)}, {prop: "otherPointerType", name: "otherPointerType", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [$Uint32], false)}, {prop: "farAddress", name: "farAddress", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [Address], false)}, {prop: "farSegment", name: "farSegment", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [SegmentID], false)}, {prop: "capabilityIndex", name: "capabilityIndex", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [CapabilityID], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$13.methods = [{prop: "canRead", name: "canRead", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Size], [$Bool], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Unread", name: "Unread", pkg: "", typ: $funcType([Size], [], false)}];
	Struct.methods = [{prop: "ToPtr", name: "ToPtr", pkg: "", typ: $funcType([], [Ptr], false)}, {prop: "Segment", name: "Segment", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Address", name: "Address", pkg: "", typ: $funcType([], [Address], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [ObjectSize], false)}, {prop: "HasData", name: "HasData", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "readSize", name: "readSize", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [Size], false)}, {prop: "value", name: "value", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address], [rawPointer], false)}, {prop: "underlying", name: "underlying", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [Pointer], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([$Uint16], [Pointer, $error], false)}, {prop: "Ptr", name: "Ptr", pkg: "", typ: $funcType([$Uint16], [Ptr, $error], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", typ: $funcType([$Uint16, Pointer], [$error], false)}, {prop: "SetPtr", name: "SetPtr", pkg: "", typ: $funcType([$Uint16, Ptr], [$error], false)}, {prop: "SetText", name: "SetText", pkg: "", typ: $funcType([$Uint16, $String], [$error], false)}, {prop: "SetNewText", name: "SetNewText", pkg: "", typ: $funcType([$Uint16, $String], [$error], false)}, {prop: "SetTextFromBytes", name: "SetTextFromBytes", pkg: "", typ: $funcType([$Uint16, sliceType], [$error], false)}, {prop: "SetData", name: "SetData", pkg: "", typ: $funcType([$Uint16, sliceType], [$error], false)}, {prop: "pointerAddress", name: "pointerAddress", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([$Uint16], [Address], false)}, {prop: "bitInData", name: "bitInData", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([BitOffset], [$Bool], false)}, {prop: "Bit", name: "Bit", pkg: "", typ: $funcType([BitOffset], [$Bool], false)}, {prop: "SetBit", name: "SetBit", pkg: "", typ: $funcType([BitOffset, $Bool], [], false)}, {prop: "dataAddress", name: "dataAddress", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([DataOffset, Size], [Address, $Bool], false)}, {prop: "Uint8", name: "Uint8", pkg: "", typ: $funcType([DataOffset], [$Uint8], false)}, {prop: "Uint16", name: "Uint16", pkg: "", typ: $funcType([DataOffset], [$Uint16], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([DataOffset], [$Uint32], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([DataOffset], [$Uint64], false)}, {prop: "SetUint8", name: "SetUint8", pkg: "", typ: $funcType([DataOffset, $Uint8], [], false)}, {prop: "SetUint16", name: "SetUint16", pkg: "", typ: $funcType([DataOffset, $Uint16], [], false)}, {prop: "SetUint32", name: "SetUint32", pkg: "", typ: $funcType([DataOffset, $Uint32], [], false)}, {prop: "SetUint64", name: "SetUint64", pkg: "", typ: $funcType([DataOffset, $Uint64], [], false)}];
	ObjectSize.init("", [{prop: "DataSize", name: "DataSize", exported: true, typ: Size, tag: ""}, {prop: "PointerCount", name: "PointerCount", exported: true, typ: $Uint16, tag: ""}]);
	Interface.init("zombiezen.com/go/capnproto2", [{prop: "seg", name: "seg", exported: false, typ: ptrType, tag: ""}, {prop: "cap", name: "cap", exported: false, typ: CapabilityID, tag: ""}]);
	Client.init([{prop: "Call", name: "Call", pkg: "", typ: $funcType([ptrType$1], [Answer], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}]);
	Call.init("", [{prop: "Ctx", name: "Ctx", exported: true, typ: context.Context, tag: ""}, {prop: "Method", name: "Method", exported: true, typ: Method, tag: ""}, {prop: "Params", name: "Params", exported: true, typ: Struct, tag: ""}, {prop: "ParamsFunc", name: "ParamsFunc", exported: true, typ: funcType, tag: ""}, {prop: "ParamsSize", name: "ParamsSize", exported: true, typ: ObjectSize, tag: ""}, {prop: "Options", name: "Options", exported: true, typ: CallOptions, tag: ""}]);
	CallOptions.init("zombiezen.com/go/capnproto2", [{prop: "m", name: "m", exported: false, typ: mapType, tag: ""}]);
	CallOption.init("zombiezen.com/go/capnproto2", [{prop: "f", name: "f", exported: false, typ: funcType$1, tag: ""}]);
	Answer.init([{prop: "PipelineCall", name: "PipelineCall", pkg: "", typ: $funcType([sliceType$1, ptrType$1], [Answer], false)}, {prop: "PipelineClose", name: "PipelineClose", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "Struct", name: "Struct", pkg: "", typ: $funcType([], [Struct, $error], false)}]);
	Pipeline.init("zombiezen.com/go/capnproto2", [{prop: "answer", name: "answer", exported: false, typ: Answer, tag: ""}, {prop: "parent", name: "parent", exported: false, typ: ptrType$2, tag: ""}, {prop: "op", name: "op", exported: false, typ: PipelineOp, tag: ""}]);
	PipelineClient.init("zombiezen.com/go/capnproto2", [{prop: "answer", name: "answer", exported: false, typ: Answer, tag: ""}, {prop: "parent", name: "parent", exported: false, typ: ptrType$2, tag: ""}, {prop: "op", name: "op", exported: false, typ: PipelineOp, tag: ""}]);
	PipelineOp.init("", [{prop: "Field", name: "Field", exported: true, typ: $Uint16, tag: ""}, {prop: "DefaultValue", name: "DefaultValue", exported: true, typ: sliceType, tag: ""}]);
	Method.init("", [{prop: "InterfaceID", name: "InterfaceID", exported: true, typ: $Uint64, tag: ""}, {prop: "MethodID", name: "MethodID", exported: true, typ: $Uint16, tag: ""}, {prop: "InterfaceName", name: "InterfaceName", exported: true, typ: $String, tag: ""}, {prop: "MethodName", name: "MethodName", exported: true, typ: $String, tag: ""}]);
	immediateAnswer.init("zombiezen.com/go/capnproto2", [{prop: "s", name: "s", exported: false, typ: Struct, tag: ""}]);
	errorAnswer.init("zombiezen.com/go/capnproto2", [{prop: "e", name: "e", exported: false, typ: $error, tag: ""}]);
	errorClient.init("zombiezen.com/go/capnproto2", [{prop: "e", name: "e", exported: false, typ: $error, tag: ""}]);
	MethodError.init("", [{prop: "Method", name: "Method", exported: true, typ: ptrType$12, tag: ""}, {prop: "Err", name: "Err", exported: true, typ: $error, tag: ""}]);
	Segment.init("zombiezen.com/go/capnproto2", [{prop: "msg", name: "msg", exported: false, typ: ptrType$6, tag: ""}, {prop: "id", name: "id", exported: false, typ: SegmentID, tag: ""}, {prop: "data", name: "data", exported: false, typ: sliceType, tag: ""}]);
	offset.init("zombiezen.com/go/capnproto2", [{prop: "id", name: "id", exported: false, typ: SegmentID, tag: ""}, {prop: "boff", name: "boff", exported: false, typ: $Int64, tag: ""}, {prop: "bend", name: "bend", exported: false, typ: $Int64, tag: ""}, {prop: "newval", name: "newval", exported: false, typ: Ptr, tag: ""}]);
	copyContext.init("zombiezen.com/go/capnproto2", [{prop: "copies", name: "copies", exported: false, typ: ptrType$5, tag: ""}, {prop: "depth", name: "depth", exported: false, typ: $Int, tag: ""}]);
	List.init("zombiezen.com/go/capnproto2", [{prop: "seg", name: "seg", exported: false, typ: ptrType, tag: ""}, {prop: "off", name: "off", exported: false, typ: Address, tag: ""}, {prop: "length", name: "length", exported: false, typ: $Int32, tag: ""}, {prop: "size", name: "size", exported: false, typ: ObjectSize, tag: ""}, {prop: "depthLimit", name: "depthLimit", exported: false, typ: $Uint, tag: ""}, {prop: "flags", name: "flags", exported: false, typ: listFlags, tag: ""}]);
	BitList.init("", [{prop: "List", name: "", exported: true, typ: List, tag: ""}]);
	PointerList.init("", [{prop: "List", name: "", exported: true, typ: List, tag: ""}]);
	TextList.init("", [{prop: "List", name: "", exported: true, typ: List, tag: ""}]);
	DataList.init("", [{prop: "List", name: "", exported: true, typ: List, tag: ""}]);
	UInt8List.init("", [{prop: "List", name: "", exported: true, typ: List, tag: ""}]);
	Int8List.init("", [{prop: "List", name: "", exported: true, typ: List, tag: ""}]);
	UInt16List.init("", [{prop: "List", name: "", exported: true, typ: List, tag: ""}]);
	Int16List.init("", [{prop: "List", name: "", exported: true, typ: List, tag: ""}]);
	UInt32List.init("", [{prop: "List", name: "", exported: true, typ: List, tag: ""}]);
	Int32List.init("", [{prop: "List", name: "", exported: true, typ: List, tag: ""}]);
	UInt64List.init("", [{prop: "List", name: "", exported: true, typ: List, tag: ""}]);
	Int64List.init("", [{prop: "List", name: "", exported: true, typ: List, tag: ""}]);
	Float32List.init("", [{prop: "List", name: "", exported: true, typ: List, tag: ""}]);
	Float64List.init("", [{prop: "List", name: "", exported: true, typ: List, tag: ""}]);
	Message.init("zombiezen.com/go/capnproto2", [{prop: "rlimit", name: "rlimit", exported: false, typ: ReadLimiter, tag: ""}, {prop: "rlimitInit", name: "rlimitInit", exported: false, typ: sync.Once, tag: ""}, {prop: "Arena", name: "Arena", exported: true, typ: Arena, tag: ""}, {prop: "CapTable", name: "CapTable", exported: true, typ: sliceType$3, tag: ""}, {prop: "TraverseLimit", name: "TraverseLimit", exported: true, typ: $Uint64, tag: ""}, {prop: "DepthLimit", name: "DepthLimit", exported: true, typ: $Uint, tag: ""}, {prop: "mu", name: "mu", exported: false, typ: sync.Mutex, tag: ""}, {prop: "segs", name: "segs", exported: false, typ: mapType$1, tag: ""}, {prop: "firstSeg", name: "firstSeg", exported: false, typ: Segment, tag: ""}]);
	Arena.init([{prop: "Allocate", name: "Allocate", pkg: "", typ: $funcType([Size, mapType$1], [SegmentID, sliceType, $error], false)}, {prop: "Data", name: "Data", pkg: "", typ: $funcType([SegmentID], [sliceType, $error], false)}, {prop: "NumSegments", name: "NumSegments", pkg: "", typ: $funcType([], [$Int64], false)}]);
	singleSegmentArena.init($Uint8);
	multiSegmentArena.init(sliceType);
	Decoder.init("zombiezen.com/go/capnproto2", [{prop: "r", name: "r", exported: false, typ: io.Reader, tag: ""}, {prop: "MaxMessageSize", name: "MaxMessageSize", exported: true, typ: $Uint64, tag: ""}]);
	Encoder.init("zombiezen.com/go/capnproto2", [{prop: "w", name: "w", exported: false, typ: io.Writer, tag: ""}, {prop: "hdrbuf", name: "hdrbuf", exported: false, typ: sliceType, tag: ""}, {prop: "bufs", name: "bufs", exported: false, typ: sliceType$4, tag: ""}, {prop: "packed", name: "packed", exported: false, typ: $Bool, tag: ""}, {prop: "packbuf", name: "packbuf", exported: false, typ: sliceType, tag: ""}]);
	streamHeader.init("zombiezen.com/go/capnproto2", [{prop: "b", name: "b", exported: false, typ: sliceType, tag: ""}]);
	Ptr.init("zombiezen.com/go/capnproto2", [{prop: "seg", name: "seg", exported: false, typ: ptrType, tag: ""}, {prop: "off", name: "off", exported: false, typ: Address, tag: ""}, {prop: "lenOrCap", name: "lenOrCap", exported: false, typ: $Uint32, tag: ""}, {prop: "size", name: "size", exported: false, typ: ObjectSize, tag: ""}, {prop: "depthLimit", name: "depthLimit", exported: false, typ: $Uint, tag: ""}, {prop: "flags", name: "flags", exported: false, typ: ptrFlags, tag: ""}]);
	Pointer.init([{prop: "HasData", name: "HasData", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Segment", name: "Segment", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "underlying", name: "underlying", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([], [Pointer], false)}, {prop: "value", name: "value", pkg: "zombiezen.com/go/capnproto2", typ: $funcType([Address], [rawPointer], false)}]);
	ReadLimiter.init("zombiezen.com/go/capnproto2", [{prop: "limit", name: "limit", exported: false, typ: $Uint64, tag: ""}]);
	Struct.init("zombiezen.com/go/capnproto2", [{prop: "seg", name: "seg", exported: false, typ: ptrType, tag: ""}, {prop: "off", name: "off", exported: false, typ: Address, tag: ""}, {prop: "size", name: "size", exported: false, typ: ObjectSize, tag: ""}, {prop: "depthLimit", name: "depthLimit", exported: false, typ: $Uint, tag: ""}, {prop: "flags", name: "flags", exported: false, typ: structFlags, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rbtree.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = context.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = net.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = packed.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = schemas.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrNullClient = errors.New("capnp: call on null client");
		$pkg.ErrUnimplemented = errors.New("capnp: method not implemented");
		errPointerAddress = errors.New("capnp: invalid pointer address");
		errBadLandingPad = errors.New("capnp: invalid far pointer landing pad");
		errBadTag = errors.New("capnp: invalid tag word");
		errOtherPointer = errors.New("capnp: unknown pointer type");
		errObjectSize = errors.New("capnp: invalid object size");
		errElementSize = errors.New("capnp: mismatched list element size");
		errReadLimit = errors.New("capnp: read traversal limit reached");
		errDepthLimit = errors.New("capnp: depth limit reached");
		errOverflow = errors.New("capnp: address or size overflow");
		errOutOfBounds = errors.New("capnp: address out of bounds");
		errCopyDepth = errors.New("capnp: copy depth too large");
		errOverlap = errors.New("capnp: overlapping data on copy");
		errListSize = errors.New("capnp: invalid list size");
		errBitListStruct = errors.New("capnp: SetStruct called on bit list");
		errSegmentOutOfBounds = errors.New("capnp: segment ID out of bounds");
		errSegment32Bit = errors.New("capnp: segment ID larger than 31 bits");
		errMessageEmpty = errors.New("capnp: marshalling an empty message");
		errHasData = errors.New("capnp: NewMessage called on arena with data");
		errSegmentTooSmall = errors.New("capnp: segment too small");
		errSegmentTooLarge = errors.New("capnp: segment too large");
		errTooManySegments = errors.New("capnp: too many segments to decode");
		errDecodeLimit = errors.New("capnp: message too large");
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["zombiezen.com/go/capnproto2/std/capnp/schema"] = (function() {
	var $pkg = {}, $init, math, strconv, capnp, schemas, Node, Node_structNode, Node_enum, Node_interface, Node_const, Node_annotation, Node_Which, Node_List, Node_Parameter, Node_Parameter_List, Node_NestedNode, Node_NestedNode_List, Field, Field_slot, Field_group, Field_ordinal, Field_Which, Field_ordinal_Which, Field_List, Enumerant, Enumerant_List, Superclass, Superclass_List, Method, Method_List, Type, Type_list, Type_enum, Type_structType, Type_interface, Type_anyPointer, Type_anyPointer_unconstrained, Type_anyPointer_parameter, Type_anyPointer_implicitMethodParameter, Type_Which, Type_anyPointer_Which, Type_anyPointer_unconstrained_Which, Brand, Brand_Scope, Brand_Scope_Which, Brand_Scope_List, Brand_Binding, Brand_Binding_Which, Brand_Binding_List, Value, Value_Which, Annotation, Annotation_List, ElementSize, CodeGeneratorRequest, CodeGeneratorRequest_RequestedFile, CodeGeneratorRequest_RequestedFile_List, CodeGeneratorRequest_RequestedFile_Import, CodeGeneratorRequest_RequestedFile_Import_List, ptrType, sliceType, sliceType$1, NewNode_List, NewNode_Parameter_List, NewNode_NestedNode_List, NewField_List, NewEnumerant_List, NewSuperclass_List, NewMethod_List, NewType, NewBrand, NewBrand_Scope_List, NewBrand_Binding_List, NewValue, NewAnnotation_List, ReadRootCodeGeneratorRequest, NewCodeGeneratorRequest_RequestedFile_List, NewCodeGeneratorRequest_RequestedFile_Import_List, init;
	math = $packages["math"];
	strconv = $packages["strconv"];
	capnp = $packages["zombiezen.com/go/capnproto2"];
	schemas = $packages["zombiezen.com/go/capnproto2/schemas"];
	Node = $pkg.Node = $newType(0, $kindStruct, "schema.Node", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Node_structNode = $pkg.Node_structNode = $newType(0, $kindStruct, "schema.Node_structNode", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Node_enum = $pkg.Node_enum = $newType(0, $kindStruct, "schema.Node_enum", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Node_interface = $pkg.Node_interface = $newType(0, $kindStruct, "schema.Node_interface", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Node_const = $pkg.Node_const = $newType(0, $kindStruct, "schema.Node_const", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Node_annotation = $pkg.Node_annotation = $newType(0, $kindStruct, "schema.Node_annotation", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Node_Which = $pkg.Node_Which = $newType(2, $kindUint16, "schema.Node_Which", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, null);
	Node_List = $pkg.Node_List = $newType(0, $kindStruct, "schema.Node_List", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	Node_Parameter = $pkg.Node_Parameter = $newType(0, $kindStruct, "schema.Node_Parameter", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Node_Parameter_List = $pkg.Node_Parameter_List = $newType(0, $kindStruct, "schema.Node_Parameter_List", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	Node_NestedNode = $pkg.Node_NestedNode = $newType(0, $kindStruct, "schema.Node_NestedNode", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Node_NestedNode_List = $pkg.Node_NestedNode_List = $newType(0, $kindStruct, "schema.Node_NestedNode_List", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	Field = $pkg.Field = $newType(0, $kindStruct, "schema.Field", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Field_slot = $pkg.Field_slot = $newType(0, $kindStruct, "schema.Field_slot", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Field_group = $pkg.Field_group = $newType(0, $kindStruct, "schema.Field_group", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Field_ordinal = $pkg.Field_ordinal = $newType(0, $kindStruct, "schema.Field_ordinal", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Field_Which = $pkg.Field_Which = $newType(2, $kindUint16, "schema.Field_Which", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, null);
	Field_ordinal_Which = $pkg.Field_ordinal_Which = $newType(2, $kindUint16, "schema.Field_ordinal_Which", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, null);
	Field_List = $pkg.Field_List = $newType(0, $kindStruct, "schema.Field_List", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	Enumerant = $pkg.Enumerant = $newType(0, $kindStruct, "schema.Enumerant", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Enumerant_List = $pkg.Enumerant_List = $newType(0, $kindStruct, "schema.Enumerant_List", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	Superclass = $pkg.Superclass = $newType(0, $kindStruct, "schema.Superclass", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Superclass_List = $pkg.Superclass_List = $newType(0, $kindStruct, "schema.Superclass_List", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "schema.Method", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Method_List = $pkg.Method_List = $newType(0, $kindStruct, "schema.Method_List", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	Type = $pkg.Type = $newType(0, $kindStruct, "schema.Type", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Type_list = $pkg.Type_list = $newType(0, $kindStruct, "schema.Type_list", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Type_enum = $pkg.Type_enum = $newType(0, $kindStruct, "schema.Type_enum", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Type_structType = $pkg.Type_structType = $newType(0, $kindStruct, "schema.Type_structType", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Type_interface = $pkg.Type_interface = $newType(0, $kindStruct, "schema.Type_interface", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Type_anyPointer = $pkg.Type_anyPointer = $newType(0, $kindStruct, "schema.Type_anyPointer", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Type_anyPointer_unconstrained = $pkg.Type_anyPointer_unconstrained = $newType(0, $kindStruct, "schema.Type_anyPointer_unconstrained", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Type_anyPointer_parameter = $pkg.Type_anyPointer_parameter = $newType(0, $kindStruct, "schema.Type_anyPointer_parameter", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Type_anyPointer_implicitMethodParameter = $pkg.Type_anyPointer_implicitMethodParameter = $newType(0, $kindStruct, "schema.Type_anyPointer_implicitMethodParameter", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Type_Which = $pkg.Type_Which = $newType(2, $kindUint16, "schema.Type_Which", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, null);
	Type_anyPointer_Which = $pkg.Type_anyPointer_Which = $newType(2, $kindUint16, "schema.Type_anyPointer_Which", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, null);
	Type_anyPointer_unconstrained_Which = $pkg.Type_anyPointer_unconstrained_Which = $newType(2, $kindUint16, "schema.Type_anyPointer_unconstrained_Which", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, null);
	Brand = $pkg.Brand = $newType(0, $kindStruct, "schema.Brand", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Brand_Scope = $pkg.Brand_Scope = $newType(0, $kindStruct, "schema.Brand_Scope", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Brand_Scope_Which = $pkg.Brand_Scope_Which = $newType(2, $kindUint16, "schema.Brand_Scope_Which", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, null);
	Brand_Scope_List = $pkg.Brand_Scope_List = $newType(0, $kindStruct, "schema.Brand_Scope_List", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	Brand_Binding = $pkg.Brand_Binding = $newType(0, $kindStruct, "schema.Brand_Binding", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Brand_Binding_Which = $pkg.Brand_Binding_Which = $newType(2, $kindUint16, "schema.Brand_Binding_Which", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, null);
	Brand_Binding_List = $pkg.Brand_Binding_List = $newType(0, $kindStruct, "schema.Brand_Binding_List", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "schema.Value", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Value_Which = $pkg.Value_Which = $newType(2, $kindUint16, "schema.Value_Which", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, null);
	Annotation = $pkg.Annotation = $newType(0, $kindStruct, "schema.Annotation", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Annotation_List = $pkg.Annotation_List = $newType(0, $kindStruct, "schema.Annotation_List", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	ElementSize = $pkg.ElementSize = $newType(2, $kindUint16, "schema.ElementSize", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, null);
	CodeGeneratorRequest = $pkg.CodeGeneratorRequest = $newType(0, $kindStruct, "schema.CodeGeneratorRequest", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	CodeGeneratorRequest_RequestedFile = $pkg.CodeGeneratorRequest_RequestedFile = $newType(0, $kindStruct, "schema.CodeGeneratorRequest_RequestedFile", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	CodeGeneratorRequest_RequestedFile_List = $pkg.CodeGeneratorRequest_RequestedFile_List = $newType(0, $kindStruct, "schema.CodeGeneratorRequest_RequestedFile_List", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	CodeGeneratorRequest_RequestedFile_Import = $pkg.CodeGeneratorRequest_RequestedFile_Import = $newType(0, $kindStruct, "schema.CodeGeneratorRequest_RequestedFile_Import", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	CodeGeneratorRequest_RequestedFile_Import_List = $pkg.CodeGeneratorRequest_RequestedFile_Import_List = $newType(0, $kindStruct, "schema.CodeGeneratorRequest_RequestedFile_Import_List", true, "zombiezen.com/go/capnproto2/std/capnp/schema", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	ptrType = $ptrType(capnp.Segment);
	sliceType = $sliceType($Uint64);
	sliceType$1 = $sliceType($Uint8);
	Node_Which.prototype.String = function() {
		var $ptr, _1, w;
		w = this.$val;
		_1 = w;
		if (_1 === (0)) {
			return $substring("filestructNodeenuminterfaceconstannotation", 0, 4);
		} else if (_1 === (1)) {
			return $substring("filestructNodeenuminterfaceconstannotation", 4, 14);
		} else if (_1 === (2)) {
			return $substring("filestructNodeenuminterfaceconstannotation", 14, 18);
		} else if (_1 === (3)) {
			return $substring("filestructNodeenuminterfaceconstannotation", 18, 27);
		} else if (_1 === (4)) {
			return $substring("filestructNodeenuminterfaceconstannotation", 27, 32);
		} else if (_1 === (5)) {
			return $substring("filestructNodeenuminterfaceconstannotation", 32, 42);
		}
		return "Node_Which(" + strconv.FormatUint(new $Uint64(0, w), 10) + ")";
	};
	$ptrType(Node_Which).prototype.String = function() { return new Node_Which(this.$get()).String(); };
	Node.ptr.prototype.Which = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(12) << 16 >>> 16);
	};
	Node.prototype.Which = function() { return this.$val.Which(); };
	Node.ptr.prototype.Id = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint64(0);
	};
	Node.prototype.Id = function() { return this.$val.Id(); };
	Node.ptr.prototype.SetId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint64(0, v);
	};
	Node.prototype.SetId = function(v) { return this.$val.SetId(v); };
	Node.ptr.prototype.DisplayName = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).Text(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node.ptr.prototype.DisplayName }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node.prototype.DisplayName = function() { return this.$val.DisplayName(); };
	Node.ptr.prototype.HasDisplayName = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node.ptr.prototype.HasDisplayName }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node.prototype.HasDisplayName = function() { return this.$val.HasDisplayName(); };
	Node.ptr.prototype.DisplayNameBytes = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).TextBytes(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node.ptr.prototype.DisplayNameBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node.prototype.DisplayNameBytes = function() { return this.$val.DisplayNameBytes(); };
	Node.ptr.prototype.SetDisplayName = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetText(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node.ptr.prototype.SetDisplayName }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node.prototype.SetDisplayName = function(v) { return this.$val.SetDisplayName(v); };
	Node.ptr.prototype.DisplayNamePrefixLength = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(8);
	};
	Node.prototype.DisplayNamePrefixLength = function() { return this.$val.DisplayNamePrefixLength(); };
	Node.ptr.prototype.SetDisplayNamePrefixLength = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint32(8, v);
	};
	Node.prototype.SetDisplayNamePrefixLength = function(v) { return this.$val.SetDisplayNamePrefixLength(v); };
	Node.ptr.prototype.ScopeId = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint64(16);
	};
	Node.prototype.ScopeId = function() { return this.$val.ScopeId(); };
	Node.ptr.prototype.SetScopeId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint64(16, v);
	};
	Node.prototype.SetScopeId = function(v) { return this.$val.SetScopeId(v); };
	Node.ptr.prototype.Parameters = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(5); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Node_Parameter_List.ptr($clone($clone(p, capnp.Ptr).List(), capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node.ptr.prototype.Parameters }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node.prototype.Parameters = function() { return this.$val.Parameters(); };
	Node.ptr.prototype.HasParameters = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(5); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node.ptr.prototype.HasParameters }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node.prototype.HasParameters = function() { return this.$val.HasParameters(); };
	Node.ptr.prototype.SetParameters = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(5, $clone($clone(v.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node.ptr.prototype.SetParameters }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node.prototype.SetParameters = function(v) { return this.$val.SetParameters(v); };
	Node.ptr.prototype.NewParameters = function(n) {
		var $ptr, _r, _r$1, _tuple, err, l, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewNode_Parameter_List($clone(s.Struct, capnp.Struct).Segment(), n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], Node_Parameter_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Node_Parameter_List.ptr(new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(5, $clone($clone(l.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [l, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node.ptr.prototype.NewParameters }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node.prototype.NewParameters = function(n) { return this.$val.NewParameters(n); };
	Node.ptr.prototype.IsGeneric = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Bit(288);
	};
	Node.prototype.IsGeneric = function() { return this.$val.IsGeneric(); };
	Node.ptr.prototype.SetIsGeneric = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetBit(288, v);
	};
	Node.prototype.SetIsGeneric = function(v) { return this.$val.SetIsGeneric(v); };
	Node.ptr.prototype.NestedNodes = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Node_NestedNode_List.ptr($clone($clone(p, capnp.Ptr).List(), capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node.ptr.prototype.NestedNodes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node.prototype.NestedNodes = function() { return this.$val.NestedNodes(); };
	Node.ptr.prototype.HasNestedNodes = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node.ptr.prototype.HasNestedNodes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node.prototype.HasNestedNodes = function() { return this.$val.HasNestedNodes(); };
	Node.ptr.prototype.SetNestedNodes = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(1, $clone($clone(v.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node.ptr.prototype.SetNestedNodes }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node.prototype.SetNestedNodes = function(v) { return this.$val.SetNestedNodes(v); };
	Node.ptr.prototype.NewNestedNodes = function(n) {
		var $ptr, _r, _r$1, _tuple, err, l, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewNode_NestedNode_List($clone(s.Struct, capnp.Struct).Segment(), n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], Node_NestedNode_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Node_NestedNode_List.ptr(new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(1, $clone($clone(l.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [l, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node.ptr.prototype.NewNestedNodes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node.prototype.NewNestedNodes = function(n) { return this.$val.NewNestedNodes(n); };
	Node.ptr.prototype.Annotations = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(2); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Annotation_List.ptr($clone($clone(p, capnp.Ptr).List(), capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node.ptr.prototype.Annotations }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node.prototype.Annotations = function() { return this.$val.Annotations(); };
	Node.ptr.prototype.HasAnnotations = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(2); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node.ptr.prototype.HasAnnotations }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node.prototype.HasAnnotations = function() { return this.$val.HasAnnotations(); };
	Node.ptr.prototype.SetAnnotations = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(2, $clone($clone(v.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node.ptr.prototype.SetAnnotations }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node.prototype.SetAnnotations = function(v) { return this.$val.SetAnnotations(v); };
	Node.ptr.prototype.NewAnnotations = function(n) {
		var $ptr, _r, _r$1, _tuple, err, l, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewAnnotation_List($clone(s.Struct, capnp.Struct).Segment(), n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], Annotation_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Annotation_List.ptr(new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(2, $clone($clone(l.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [l, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node.ptr.prototype.NewAnnotations }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node.prototype.NewAnnotations = function(n) { return this.$val.NewAnnotations(n); };
	Node.ptr.prototype.SetFile = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(12, 0);
	};
	Node.prototype.SetFile = function() { return this.$val.SetFile(); };
	Node.ptr.prototype.StructNode = function() {
		var $ptr, s;
		s = this;
		return $clone(s, Node_structNode);
	};
	Node.prototype.StructNode = function() { return this.$val.StructNode(); };
	Node.ptr.prototype.SetStructNode = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(12, 1);
	};
	Node.prototype.SetStructNode = function() { return this.$val.SetStructNode(); };
	Node_structNode.ptr.prototype.DataWordCount = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint16(14);
	};
	Node_structNode.prototype.DataWordCount = function() { return this.$val.DataWordCount(); };
	Node_structNode.ptr.prototype.SetDataWordCount = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(14, v);
	};
	Node_structNode.prototype.SetDataWordCount = function(v) { return this.$val.SetDataWordCount(v); };
	Node_structNode.ptr.prototype.PointerCount = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint16(24);
	};
	Node_structNode.prototype.PointerCount = function() { return this.$val.PointerCount(); };
	Node_structNode.ptr.prototype.SetPointerCount = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(24, v);
	};
	Node_structNode.prototype.SetPointerCount = function(v) { return this.$val.SetPointerCount(v); };
	Node_structNode.ptr.prototype.PreferredListEncoding = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(26) << 16 >>> 16);
	};
	Node_structNode.prototype.PreferredListEncoding = function() { return this.$val.PreferredListEncoding(); };
	Node_structNode.ptr.prototype.SetPreferredListEncoding = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(26, (v << 16 >>> 16));
	};
	Node_structNode.prototype.SetPreferredListEncoding = function(v) { return this.$val.SetPreferredListEncoding(v); };
	Node_structNode.ptr.prototype.IsGroup = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Bit(224);
	};
	Node_structNode.prototype.IsGroup = function() { return this.$val.IsGroup(); };
	Node_structNode.ptr.prototype.SetIsGroup = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetBit(224, v);
	};
	Node_structNode.prototype.SetIsGroup = function(v) { return this.$val.SetIsGroup(v); };
	Node_structNode.ptr.prototype.DiscriminantCount = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint16(30);
	};
	Node_structNode.prototype.DiscriminantCount = function() { return this.$val.DiscriminantCount(); };
	Node_structNode.ptr.prototype.SetDiscriminantCount = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(30, v);
	};
	Node_structNode.prototype.SetDiscriminantCount = function(v) { return this.$val.SetDiscriminantCount(v); };
	Node_structNode.ptr.prototype.DiscriminantOffset = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(32);
	};
	Node_structNode.prototype.DiscriminantOffset = function() { return this.$val.DiscriminantOffset(); };
	Node_structNode.ptr.prototype.SetDiscriminantOffset = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint32(32, v);
	};
	Node_structNode.prototype.SetDiscriminantOffset = function(v) { return this.$val.SetDiscriminantOffset(v); };
	Node_structNode.ptr.prototype.Fields = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(3); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Field_List.ptr($clone($clone(p, capnp.Ptr).List(), capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_structNode.ptr.prototype.Fields }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_structNode.prototype.Fields = function() { return this.$val.Fields(); };
	Node_structNode.ptr.prototype.HasFields = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(3); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_structNode.ptr.prototype.HasFields }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_structNode.prototype.HasFields = function() { return this.$val.HasFields(); };
	Node_structNode.ptr.prototype.SetFields = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(3, $clone($clone(v.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_structNode.ptr.prototype.SetFields }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_structNode.prototype.SetFields = function(v) { return this.$val.SetFields(v); };
	Node_structNode.ptr.prototype.NewFields = function(n) {
		var $ptr, _r, _r$1, _tuple, err, l, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewField_List($clone(s.Struct, capnp.Struct).Segment(), n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], Field_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Field_List.ptr(new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(3, $clone($clone(l.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [l, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_structNode.ptr.prototype.NewFields }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_structNode.prototype.NewFields = function(n) { return this.$val.NewFields(n); };
	Node.ptr.prototype.Enum = function() {
		var $ptr, s;
		s = this;
		return $clone(s, Node_enum);
	};
	Node.prototype.Enum = function() { return this.$val.Enum(); };
	Node.ptr.prototype.SetEnum = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(12, 2);
	};
	Node.prototype.SetEnum = function() { return this.$val.SetEnum(); };
	Node_enum.ptr.prototype.Enumerants = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(3); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Enumerant_List.ptr($clone($clone(p, capnp.Ptr).List(), capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_enum.ptr.prototype.Enumerants }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_enum.prototype.Enumerants = function() { return this.$val.Enumerants(); };
	Node_enum.ptr.prototype.HasEnumerants = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(3); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_enum.ptr.prototype.HasEnumerants }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_enum.prototype.HasEnumerants = function() { return this.$val.HasEnumerants(); };
	Node_enum.ptr.prototype.SetEnumerants = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(3, $clone($clone(v.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_enum.ptr.prototype.SetEnumerants }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_enum.prototype.SetEnumerants = function(v) { return this.$val.SetEnumerants(v); };
	Node_enum.ptr.prototype.NewEnumerants = function(n) {
		var $ptr, _r, _r$1, _tuple, err, l, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewEnumerant_List($clone(s.Struct, capnp.Struct).Segment(), n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], Enumerant_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Enumerant_List.ptr(new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(3, $clone($clone(l.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [l, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_enum.ptr.prototype.NewEnumerants }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_enum.prototype.NewEnumerants = function(n) { return this.$val.NewEnumerants(n); };
	Node.ptr.prototype.Interface = function() {
		var $ptr, s;
		s = this;
		return $clone(s, Node_interface);
	};
	Node.prototype.Interface = function() { return this.$val.Interface(); };
	Node.ptr.prototype.SetInterface = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(12, 3);
	};
	Node.prototype.SetInterface = function() { return this.$val.SetInterface(); };
	Node_interface.ptr.prototype.Methods = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(3); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Method_List.ptr($clone($clone(p, capnp.Ptr).List(), capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_interface.ptr.prototype.Methods }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_interface.prototype.Methods = function() { return this.$val.Methods(); };
	Node_interface.ptr.prototype.HasMethods = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(3); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_interface.ptr.prototype.HasMethods }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_interface.prototype.HasMethods = function() { return this.$val.HasMethods(); };
	Node_interface.ptr.prototype.SetMethods = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(3, $clone($clone(v.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_interface.ptr.prototype.SetMethods }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_interface.prototype.SetMethods = function(v) { return this.$val.SetMethods(v); };
	Node_interface.ptr.prototype.NewMethods = function(n) {
		var $ptr, _r, _r$1, _tuple, err, l, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewMethod_List($clone(s.Struct, capnp.Struct).Segment(), n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], Method_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Method_List.ptr(new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(3, $clone($clone(l.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [l, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_interface.ptr.prototype.NewMethods }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_interface.prototype.NewMethods = function(n) { return this.$val.NewMethods(n); };
	Node_interface.ptr.prototype.Superclasses = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(4); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Superclass_List.ptr($clone($clone(p, capnp.Ptr).List(), capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_interface.ptr.prototype.Superclasses }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_interface.prototype.Superclasses = function() { return this.$val.Superclasses(); };
	Node_interface.ptr.prototype.HasSuperclasses = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(4); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_interface.ptr.prototype.HasSuperclasses }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_interface.prototype.HasSuperclasses = function() { return this.$val.HasSuperclasses(); };
	Node_interface.ptr.prototype.SetSuperclasses = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(4, $clone($clone(v.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_interface.ptr.prototype.SetSuperclasses }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_interface.prototype.SetSuperclasses = function(v) { return this.$val.SetSuperclasses(v); };
	Node_interface.ptr.prototype.NewSuperclasses = function(n) {
		var $ptr, _r, _r$1, _tuple, err, l, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewSuperclass_List($clone(s.Struct, capnp.Struct).Segment(), n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], Superclass_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Superclass_List.ptr(new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(4, $clone($clone(l.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [l, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_interface.ptr.prototype.NewSuperclasses }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_interface.prototype.NewSuperclasses = function(n) { return this.$val.NewSuperclasses(n); };
	Node.ptr.prototype.Const = function() {
		var $ptr, s;
		s = this;
		return $clone(s, Node_const);
	};
	Node.prototype.Const = function() { return this.$val.Const(); };
	Node.ptr.prototype.SetConst = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(12, 4);
	};
	Node.prototype.SetConst = function() { return this.$val.SetConst(); };
	Node_const.ptr.prototype.Type = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(3); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Type.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_const.ptr.prototype.Type }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_const.prototype.Type = function() { return this.$val.Type(); };
	Node_const.ptr.prototype.HasType = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(3); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_const.ptr.prototype.HasType }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_const.prototype.HasType = function() { return this.$val.HasType(); };
	Node_const.ptr.prototype.SetType = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(3, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_const.ptr.prototype.SetType }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_const.prototype.SetType = function(v) { return this.$val.SetType(v); };
	Node_const.ptr.prototype.NewType = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewType($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Type);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Type.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(3, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_const.ptr.prototype.NewType }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_const.prototype.NewType = function() { return this.$val.NewType(); };
	Node_const.ptr.prototype.Value = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(4); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Value.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_const.ptr.prototype.Value }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_const.prototype.Value = function() { return this.$val.Value(); };
	Node_const.ptr.prototype.HasValue = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(4); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_const.ptr.prototype.HasValue }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_const.prototype.HasValue = function() { return this.$val.HasValue(); };
	Node_const.ptr.prototype.SetValue = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(4, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_const.ptr.prototype.SetValue }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_const.prototype.SetValue = function(v) { return this.$val.SetValue(v); };
	Node_const.ptr.prototype.NewValue = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewValue($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Value);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Value.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(4, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_const.ptr.prototype.NewValue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_const.prototype.NewValue = function() { return this.$val.NewValue(); };
	Node.ptr.prototype.Annotation = function() {
		var $ptr, s;
		s = this;
		return $clone(s, Node_annotation);
	};
	Node.prototype.Annotation = function() { return this.$val.Annotation(); };
	Node.ptr.prototype.SetAnnotation = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(12, 5);
	};
	Node.prototype.SetAnnotation = function() { return this.$val.SetAnnotation(); };
	Node_annotation.ptr.prototype.Type = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(3); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Type.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_annotation.ptr.prototype.Type }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_annotation.prototype.Type = function() { return this.$val.Type(); };
	Node_annotation.ptr.prototype.HasType = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(3); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_annotation.ptr.prototype.HasType }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_annotation.prototype.HasType = function() { return this.$val.HasType(); };
	Node_annotation.ptr.prototype.SetType = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(3, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_annotation.ptr.prototype.SetType }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_annotation.prototype.SetType = function(v) { return this.$val.SetType(v); };
	Node_annotation.ptr.prototype.NewType = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewType($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Type);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Type.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(3, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_annotation.ptr.prototype.NewType }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_annotation.prototype.NewType = function() { return this.$val.NewType(); };
	Node_annotation.ptr.prototype.TargetsFile = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Bit(112);
	};
	Node_annotation.prototype.TargetsFile = function() { return this.$val.TargetsFile(); };
	Node_annotation.ptr.prototype.SetTargetsFile = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetBit(112, v);
	};
	Node_annotation.prototype.SetTargetsFile = function(v) { return this.$val.SetTargetsFile(v); };
	Node_annotation.ptr.prototype.TargetsConst = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Bit(113);
	};
	Node_annotation.prototype.TargetsConst = function() { return this.$val.TargetsConst(); };
	Node_annotation.ptr.prototype.SetTargetsConst = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetBit(113, v);
	};
	Node_annotation.prototype.SetTargetsConst = function(v) { return this.$val.SetTargetsConst(v); };
	Node_annotation.ptr.prototype.TargetsEnum = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Bit(114);
	};
	Node_annotation.prototype.TargetsEnum = function() { return this.$val.TargetsEnum(); };
	Node_annotation.ptr.prototype.SetTargetsEnum = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetBit(114, v);
	};
	Node_annotation.prototype.SetTargetsEnum = function(v) { return this.$val.SetTargetsEnum(v); };
	Node_annotation.ptr.prototype.TargetsEnumerant = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Bit(115);
	};
	Node_annotation.prototype.TargetsEnumerant = function() { return this.$val.TargetsEnumerant(); };
	Node_annotation.ptr.prototype.SetTargetsEnumerant = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetBit(115, v);
	};
	Node_annotation.prototype.SetTargetsEnumerant = function(v) { return this.$val.SetTargetsEnumerant(v); };
	Node_annotation.ptr.prototype.TargetsStruct = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Bit(116);
	};
	Node_annotation.prototype.TargetsStruct = function() { return this.$val.TargetsStruct(); };
	Node_annotation.ptr.prototype.SetTargetsStruct = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetBit(116, v);
	};
	Node_annotation.prototype.SetTargetsStruct = function(v) { return this.$val.SetTargetsStruct(v); };
	Node_annotation.ptr.prototype.TargetsField = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Bit(117);
	};
	Node_annotation.prototype.TargetsField = function() { return this.$val.TargetsField(); };
	Node_annotation.ptr.prototype.SetTargetsField = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetBit(117, v);
	};
	Node_annotation.prototype.SetTargetsField = function(v) { return this.$val.SetTargetsField(v); };
	Node_annotation.ptr.prototype.TargetsUnion = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Bit(118);
	};
	Node_annotation.prototype.TargetsUnion = function() { return this.$val.TargetsUnion(); };
	Node_annotation.ptr.prototype.SetTargetsUnion = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetBit(118, v);
	};
	Node_annotation.prototype.SetTargetsUnion = function(v) { return this.$val.SetTargetsUnion(v); };
	Node_annotation.ptr.prototype.TargetsGroup = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Bit(119);
	};
	Node_annotation.prototype.TargetsGroup = function() { return this.$val.TargetsGroup(); };
	Node_annotation.ptr.prototype.SetTargetsGroup = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetBit(119, v);
	};
	Node_annotation.prototype.SetTargetsGroup = function(v) { return this.$val.SetTargetsGroup(v); };
	Node_annotation.ptr.prototype.TargetsInterface = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Bit(120);
	};
	Node_annotation.prototype.TargetsInterface = function() { return this.$val.TargetsInterface(); };
	Node_annotation.ptr.prototype.SetTargetsInterface = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetBit(120, v);
	};
	Node_annotation.prototype.SetTargetsInterface = function(v) { return this.$val.SetTargetsInterface(v); };
	Node_annotation.ptr.prototype.TargetsMethod = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Bit(121);
	};
	Node_annotation.prototype.TargetsMethod = function() { return this.$val.TargetsMethod(); };
	Node_annotation.ptr.prototype.SetTargetsMethod = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetBit(121, v);
	};
	Node_annotation.prototype.SetTargetsMethod = function(v) { return this.$val.SetTargetsMethod(v); };
	Node_annotation.ptr.prototype.TargetsParam = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Bit(122);
	};
	Node_annotation.prototype.TargetsParam = function() { return this.$val.TargetsParam(); };
	Node_annotation.ptr.prototype.SetTargetsParam = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetBit(122, v);
	};
	Node_annotation.prototype.SetTargetsParam = function(v) { return this.$val.SetTargetsParam(v); };
	Node_annotation.ptr.prototype.TargetsAnnotation = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Bit(123);
	};
	Node_annotation.prototype.TargetsAnnotation = function() { return this.$val.TargetsAnnotation(); };
	Node_annotation.ptr.prototype.SetTargetsAnnotation = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetBit(123, v);
	};
	Node_annotation.prototype.SetTargetsAnnotation = function(v) { return this.$val.SetTargetsAnnotation(v); };
	NewNode_List = function(s, sz) {
		var $ptr, _r, _tuple, err, l, s, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; l = $f.l; s = $f.s; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewCompositeList(s, new capnp.ObjectSize.ptr(40, 6), sz); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], capnp.List);
		err = _tuple[1];
		$s = -1; return [new Node_List.ptr($clone(l, capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewNode_List }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.s = s; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewNode_List = NewNode_List;
	Node_List.ptr.prototype.At = function(i) {
		var $ptr, i, s;
		s = this;
		return new Node.ptr($clone($clone(s.List, capnp.List).Struct(i), capnp.Struct));
	};
	Node_List.prototype.At = function(i) { return this.$val.At(i); };
	Node_List.ptr.prototype.Set = function(i, v) {
		var $ptr, _r, i, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.List, capnp.List).SetStruct(i, $clone(v.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_List.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	Node_Parameter.ptr.prototype.Name = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).Text(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_Parameter.ptr.prototype.Name }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_Parameter.prototype.Name = function() { return this.$val.Name(); };
	Node_Parameter.ptr.prototype.HasName = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_Parameter.ptr.prototype.HasName }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_Parameter.prototype.HasName = function() { return this.$val.HasName(); };
	Node_Parameter.ptr.prototype.NameBytes = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).TextBytes(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_Parameter.ptr.prototype.NameBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_Parameter.prototype.NameBytes = function() { return this.$val.NameBytes(); };
	Node_Parameter.ptr.prototype.SetName = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetText(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_Parameter.ptr.prototype.SetName }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_Parameter.prototype.SetName = function(v) { return this.$val.SetName(v); };
	NewNode_Parameter_List = function(s, sz) {
		var $ptr, _r, _tuple, err, l, s, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; l = $f.l; s = $f.s; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewCompositeList(s, new capnp.ObjectSize.ptr(0, 1), sz); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], capnp.List);
		err = _tuple[1];
		$s = -1; return [new Node_Parameter_List.ptr($clone(l, capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewNode_Parameter_List }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.s = s; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewNode_Parameter_List = NewNode_Parameter_List;
	Node_Parameter_List.ptr.prototype.At = function(i) {
		var $ptr, i, s;
		s = this;
		return new Node_Parameter.ptr($clone($clone(s.List, capnp.List).Struct(i), capnp.Struct));
	};
	Node_Parameter_List.prototype.At = function(i) { return this.$val.At(i); };
	Node_Parameter_List.ptr.prototype.Set = function(i, v) {
		var $ptr, _r, i, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.List, capnp.List).SetStruct(i, $clone(v.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_Parameter_List.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_Parameter_List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	Node_NestedNode.ptr.prototype.Name = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).Text(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_NestedNode.ptr.prototype.Name }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_NestedNode.prototype.Name = function() { return this.$val.Name(); };
	Node_NestedNode.ptr.prototype.HasName = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_NestedNode.ptr.prototype.HasName }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_NestedNode.prototype.HasName = function() { return this.$val.HasName(); };
	Node_NestedNode.ptr.prototype.NameBytes = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).TextBytes(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_NestedNode.ptr.prototype.NameBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_NestedNode.prototype.NameBytes = function() { return this.$val.NameBytes(); };
	Node_NestedNode.ptr.prototype.SetName = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetText(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_NestedNode.ptr.prototype.SetName }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_NestedNode.prototype.SetName = function(v) { return this.$val.SetName(v); };
	Node_NestedNode.ptr.prototype.Id = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint64(0);
	};
	Node_NestedNode.prototype.Id = function() { return this.$val.Id(); };
	Node_NestedNode.ptr.prototype.SetId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint64(0, v);
	};
	Node_NestedNode.prototype.SetId = function(v) { return this.$val.SetId(v); };
	NewNode_NestedNode_List = function(s, sz) {
		var $ptr, _r, _tuple, err, l, s, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; l = $f.l; s = $f.s; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewCompositeList(s, new capnp.ObjectSize.ptr(8, 1), sz); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], capnp.List);
		err = _tuple[1];
		$s = -1; return [new Node_NestedNode_List.ptr($clone(l, capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewNode_NestedNode_List }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.s = s; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewNode_NestedNode_List = NewNode_NestedNode_List;
	Node_NestedNode_List.ptr.prototype.At = function(i) {
		var $ptr, i, s;
		s = this;
		return new Node_NestedNode.ptr($clone($clone(s.List, capnp.List).Struct(i), capnp.Struct));
	};
	Node_NestedNode_List.prototype.At = function(i) { return this.$val.At(i); };
	Node_NestedNode_List.ptr.prototype.Set = function(i, v) {
		var $ptr, _r, i, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.List, capnp.List).SetStruct(i, $clone(v.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Node_NestedNode_List.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Node_NestedNode_List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	Field_Which.prototype.String = function() {
		var $ptr, _1, w;
		w = this.$val;
		_1 = w;
		if (_1 === (0)) {
			return $substring("slotgroup", 0, 4);
		} else if (_1 === (1)) {
			return $substring("slotgroup", 4, 9);
		}
		return "Field_Which(" + strconv.FormatUint(new $Uint64(0, w), 10) + ")";
	};
	$ptrType(Field_Which).prototype.String = function() { return new Field_Which(this.$get()).String(); };
	Field_ordinal_Which.prototype.String = function() {
		var $ptr, _1, w;
		w = this.$val;
		_1 = w;
		if (_1 === (0)) {
			return $substring("implicitexplicit", 0, 8);
		} else if (_1 === (1)) {
			return $substring("implicitexplicit", 8, 16);
		}
		return "Field_ordinal_Which(" + strconv.FormatUint(new $Uint64(0, w), 10) + ")";
	};
	$ptrType(Field_ordinal_Which).prototype.String = function() { return new Field_ordinal_Which(this.$get()).String(); };
	Field.ptr.prototype.Which = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(8) << 16 >>> 16);
	};
	Field.prototype.Which = function() { return this.$val.Which(); };
	Field.ptr.prototype.Name = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).Text(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field.ptr.prototype.Name }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field.prototype.Name = function() { return this.$val.Name(); };
	Field.ptr.prototype.HasName = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field.ptr.prototype.HasName }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field.prototype.HasName = function() { return this.$val.HasName(); };
	Field.ptr.prototype.NameBytes = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).TextBytes(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field.ptr.prototype.NameBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field.prototype.NameBytes = function() { return this.$val.NameBytes(); };
	Field.ptr.prototype.SetName = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetText(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field.ptr.prototype.SetName }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field.prototype.SetName = function(v) { return this.$val.SetName(v); };
	Field.ptr.prototype.CodeOrder = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint16(0);
	};
	Field.prototype.CodeOrder = function() { return this.$val.CodeOrder(); };
	Field.ptr.prototype.SetCodeOrder = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, v);
	};
	Field.prototype.SetCodeOrder = function(v) { return this.$val.SetCodeOrder(v); };
	Field.ptr.prototype.Annotations = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Annotation_List.ptr($clone($clone(p, capnp.Ptr).List(), capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field.ptr.prototype.Annotations }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field.prototype.Annotations = function() { return this.$val.Annotations(); };
	Field.ptr.prototype.HasAnnotations = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field.ptr.prototype.HasAnnotations }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field.prototype.HasAnnotations = function() { return this.$val.HasAnnotations(); };
	Field.ptr.prototype.SetAnnotations = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(1, $clone($clone(v.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field.ptr.prototype.SetAnnotations }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field.prototype.SetAnnotations = function(v) { return this.$val.SetAnnotations(v); };
	Field.ptr.prototype.NewAnnotations = function(n) {
		var $ptr, _r, _r$1, _tuple, err, l, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewAnnotation_List($clone(s.Struct, capnp.Struct).Segment(), n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], Annotation_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Annotation_List.ptr(new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(1, $clone($clone(l.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [l, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field.ptr.prototype.NewAnnotations }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field.prototype.NewAnnotations = function(n) { return this.$val.NewAnnotations(n); };
	Field.ptr.prototype.DiscriminantValue = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(2) ^ 65535) << 16 >>> 16;
	};
	Field.prototype.DiscriminantValue = function() { return this.$val.DiscriminantValue(); };
	Field.ptr.prototype.SetDiscriminantValue = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(2, (v ^ 65535) << 16 >>> 16);
	};
	Field.prototype.SetDiscriminantValue = function(v) { return this.$val.SetDiscriminantValue(v); };
	Field.ptr.prototype.Slot = function() {
		var $ptr, s;
		s = this;
		return $clone(s, Field_slot);
	};
	Field.prototype.Slot = function() { return this.$val.Slot(); };
	Field.ptr.prototype.SetSlot = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(8, 0);
	};
	Field.prototype.SetSlot = function() { return this.$val.SetSlot(); };
	Field_slot.ptr.prototype.Offset = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(4);
	};
	Field_slot.prototype.Offset = function() { return this.$val.Offset(); };
	Field_slot.ptr.prototype.SetOffset = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint32(4, v);
	};
	Field_slot.prototype.SetOffset = function(v) { return this.$val.SetOffset(v); };
	Field_slot.ptr.prototype.Type = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(2); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Type.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field_slot.ptr.prototype.Type }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field_slot.prototype.Type = function() { return this.$val.Type(); };
	Field_slot.ptr.prototype.HasType = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(2); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field_slot.ptr.prototype.HasType }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field_slot.prototype.HasType = function() { return this.$val.HasType(); };
	Field_slot.ptr.prototype.SetType = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(2, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field_slot.ptr.prototype.SetType }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field_slot.prototype.SetType = function(v) { return this.$val.SetType(v); };
	Field_slot.ptr.prototype.NewType = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewType($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Type);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Type.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(2, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field_slot.ptr.prototype.NewType }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field_slot.prototype.NewType = function() { return this.$val.NewType(); };
	Field_slot.ptr.prototype.DefaultValue = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(3); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Value.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field_slot.ptr.prototype.DefaultValue }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field_slot.prototype.DefaultValue = function() { return this.$val.DefaultValue(); };
	Field_slot.ptr.prototype.HasDefaultValue = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(3); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field_slot.ptr.prototype.HasDefaultValue }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field_slot.prototype.HasDefaultValue = function() { return this.$val.HasDefaultValue(); };
	Field_slot.ptr.prototype.SetDefaultValue = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(3, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field_slot.ptr.prototype.SetDefaultValue }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field_slot.prototype.SetDefaultValue = function(v) { return this.$val.SetDefaultValue(v); };
	Field_slot.ptr.prototype.NewDefaultValue = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewValue($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Value);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Value.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(3, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field_slot.ptr.prototype.NewDefaultValue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field_slot.prototype.NewDefaultValue = function() { return this.$val.NewDefaultValue(); };
	Field_slot.ptr.prototype.HadExplicitDefault = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Bit(128);
	};
	Field_slot.prototype.HadExplicitDefault = function() { return this.$val.HadExplicitDefault(); };
	Field_slot.ptr.prototype.SetHadExplicitDefault = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetBit(128, v);
	};
	Field_slot.prototype.SetHadExplicitDefault = function(v) { return this.$val.SetHadExplicitDefault(v); };
	Field.ptr.prototype.Group = function() {
		var $ptr, s;
		s = this;
		return $clone(s, Field_group);
	};
	Field.prototype.Group = function() { return this.$val.Group(); };
	Field.ptr.prototype.SetGroup = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(8, 1);
	};
	Field.prototype.SetGroup = function() { return this.$val.SetGroup(); };
	Field_group.ptr.prototype.TypeId = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint64(16);
	};
	Field_group.prototype.TypeId = function() { return this.$val.TypeId(); };
	Field_group.ptr.prototype.SetTypeId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint64(16, v);
	};
	Field_group.prototype.SetTypeId = function(v) { return this.$val.SetTypeId(v); };
	Field.ptr.prototype.Ordinal = function() {
		var $ptr, s;
		s = this;
		return $clone(s, Field_ordinal);
	};
	Field.prototype.Ordinal = function() { return this.$val.Ordinal(); };
	Field_ordinal.ptr.prototype.Which = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(10) << 16 >>> 16);
	};
	Field_ordinal.prototype.Which = function() { return this.$val.Which(); };
	Field_ordinal.ptr.prototype.SetImplicit = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(10, 0);
	};
	Field_ordinal.prototype.SetImplicit = function() { return this.$val.SetImplicit(); };
	Field_ordinal.ptr.prototype.Explicit = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint16(12);
	};
	Field_ordinal.prototype.Explicit = function() { return this.$val.Explicit(); };
	Field_ordinal.ptr.prototype.SetExplicit = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(10, 1);
		$clone(s.Struct, capnp.Struct).SetUint16(12, v);
	};
	Field_ordinal.prototype.SetExplicit = function(v) { return this.$val.SetExplicit(v); };
	NewField_List = function(s, sz) {
		var $ptr, _r, _tuple, err, l, s, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; l = $f.l; s = $f.s; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewCompositeList(s, new capnp.ObjectSize.ptr(24, 4), sz); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], capnp.List);
		err = _tuple[1];
		$s = -1; return [new Field_List.ptr($clone(l, capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewField_List }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.s = s; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewField_List = NewField_List;
	Field_List.ptr.prototype.At = function(i) {
		var $ptr, i, s;
		s = this;
		return new Field.ptr($clone($clone(s.List, capnp.List).Struct(i), capnp.Struct));
	};
	Field_List.prototype.At = function(i) { return this.$val.At(i); };
	Field_List.ptr.prototype.Set = function(i, v) {
		var $ptr, _r, i, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.List, capnp.List).SetStruct(i, $clone(v.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field_List.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field_List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	Enumerant.ptr.prototype.Name = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).Text(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Enumerant.ptr.prototype.Name }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Enumerant.prototype.Name = function() { return this.$val.Name(); };
	Enumerant.ptr.prototype.HasName = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Enumerant.ptr.prototype.HasName }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Enumerant.prototype.HasName = function() { return this.$val.HasName(); };
	Enumerant.ptr.prototype.NameBytes = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).TextBytes(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Enumerant.ptr.prototype.NameBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Enumerant.prototype.NameBytes = function() { return this.$val.NameBytes(); };
	Enumerant.ptr.prototype.SetName = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetText(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Enumerant.ptr.prototype.SetName }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Enumerant.prototype.SetName = function(v) { return this.$val.SetName(v); };
	Enumerant.ptr.prototype.CodeOrder = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint16(0);
	};
	Enumerant.prototype.CodeOrder = function() { return this.$val.CodeOrder(); };
	Enumerant.ptr.prototype.SetCodeOrder = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, v);
	};
	Enumerant.prototype.SetCodeOrder = function(v) { return this.$val.SetCodeOrder(v); };
	Enumerant.ptr.prototype.Annotations = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Annotation_List.ptr($clone($clone(p, capnp.Ptr).List(), capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Enumerant.ptr.prototype.Annotations }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Enumerant.prototype.Annotations = function() { return this.$val.Annotations(); };
	Enumerant.ptr.prototype.HasAnnotations = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Enumerant.ptr.prototype.HasAnnotations }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Enumerant.prototype.HasAnnotations = function() { return this.$val.HasAnnotations(); };
	Enumerant.ptr.prototype.SetAnnotations = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(1, $clone($clone(v.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Enumerant.ptr.prototype.SetAnnotations }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Enumerant.prototype.SetAnnotations = function(v) { return this.$val.SetAnnotations(v); };
	Enumerant.ptr.prototype.NewAnnotations = function(n) {
		var $ptr, _r, _r$1, _tuple, err, l, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewAnnotation_List($clone(s.Struct, capnp.Struct).Segment(), n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], Annotation_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Annotation_List.ptr(new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(1, $clone($clone(l.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [l, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Enumerant.ptr.prototype.NewAnnotations }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Enumerant.prototype.NewAnnotations = function(n) { return this.$val.NewAnnotations(n); };
	NewEnumerant_List = function(s, sz) {
		var $ptr, _r, _tuple, err, l, s, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; l = $f.l; s = $f.s; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewCompositeList(s, new capnp.ObjectSize.ptr(8, 2), sz); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], capnp.List);
		err = _tuple[1];
		$s = -1; return [new Enumerant_List.ptr($clone(l, capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewEnumerant_List }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.s = s; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewEnumerant_List = NewEnumerant_List;
	Enumerant_List.ptr.prototype.At = function(i) {
		var $ptr, i, s;
		s = this;
		return new Enumerant.ptr($clone($clone(s.List, capnp.List).Struct(i), capnp.Struct));
	};
	Enumerant_List.prototype.At = function(i) { return this.$val.At(i); };
	Enumerant_List.ptr.prototype.Set = function(i, v) {
		var $ptr, _r, i, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.List, capnp.List).SetStruct(i, $clone(v.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Enumerant_List.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Enumerant_List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	Superclass.ptr.prototype.Id = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint64(0);
	};
	Superclass.prototype.Id = function() { return this.$val.Id(); };
	Superclass.ptr.prototype.SetId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint64(0, v);
	};
	Superclass.prototype.SetId = function(v) { return this.$val.SetId(v); };
	Superclass.ptr.prototype.Brand = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Brand.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Superclass.ptr.prototype.Brand }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Superclass.prototype.Brand = function() { return this.$val.Brand(); };
	Superclass.ptr.prototype.HasBrand = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Superclass.ptr.prototype.HasBrand }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Superclass.prototype.HasBrand = function() { return this.$val.HasBrand(); };
	Superclass.ptr.prototype.SetBrand = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Superclass.ptr.prototype.SetBrand }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Superclass.prototype.SetBrand = function(v) { return this.$val.SetBrand(v); };
	Superclass.ptr.prototype.NewBrand = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewBrand($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Brand);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Brand.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Superclass.ptr.prototype.NewBrand }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Superclass.prototype.NewBrand = function() { return this.$val.NewBrand(); };
	NewSuperclass_List = function(s, sz) {
		var $ptr, _r, _tuple, err, l, s, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; l = $f.l; s = $f.s; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewCompositeList(s, new capnp.ObjectSize.ptr(8, 1), sz); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], capnp.List);
		err = _tuple[1];
		$s = -1; return [new Superclass_List.ptr($clone(l, capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewSuperclass_List }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.s = s; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewSuperclass_List = NewSuperclass_List;
	Superclass_List.ptr.prototype.At = function(i) {
		var $ptr, i, s;
		s = this;
		return new Superclass.ptr($clone($clone(s.List, capnp.List).Struct(i), capnp.Struct));
	};
	Superclass_List.prototype.At = function(i) { return this.$val.At(i); };
	Superclass_List.ptr.prototype.Set = function(i, v) {
		var $ptr, _r, i, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.List, capnp.List).SetStruct(i, $clone(v.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Superclass_List.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Superclass_List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	Method.ptr.prototype.Name = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).Text(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method.ptr.prototype.Name }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method.prototype.Name = function() { return this.$val.Name(); };
	Method.ptr.prototype.HasName = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method.ptr.prototype.HasName }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method.prototype.HasName = function() { return this.$val.HasName(); };
	Method.ptr.prototype.NameBytes = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).TextBytes(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method.ptr.prototype.NameBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method.prototype.NameBytes = function() { return this.$val.NameBytes(); };
	Method.ptr.prototype.SetName = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetText(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method.ptr.prototype.SetName }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method.prototype.SetName = function(v) { return this.$val.SetName(v); };
	Method.ptr.prototype.CodeOrder = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint16(0);
	};
	Method.prototype.CodeOrder = function() { return this.$val.CodeOrder(); };
	Method.ptr.prototype.SetCodeOrder = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, v);
	};
	Method.prototype.SetCodeOrder = function(v) { return this.$val.SetCodeOrder(v); };
	Method.ptr.prototype.ImplicitParameters = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(4); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Node_Parameter_List.ptr($clone($clone(p, capnp.Ptr).List(), capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method.ptr.prototype.ImplicitParameters }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method.prototype.ImplicitParameters = function() { return this.$val.ImplicitParameters(); };
	Method.ptr.prototype.HasImplicitParameters = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(4); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method.ptr.prototype.HasImplicitParameters }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method.prototype.HasImplicitParameters = function() { return this.$val.HasImplicitParameters(); };
	Method.ptr.prototype.SetImplicitParameters = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(4, $clone($clone(v.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method.ptr.prototype.SetImplicitParameters }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method.prototype.SetImplicitParameters = function(v) { return this.$val.SetImplicitParameters(v); };
	Method.ptr.prototype.NewImplicitParameters = function(n) {
		var $ptr, _r, _r$1, _tuple, err, l, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewNode_Parameter_List($clone(s.Struct, capnp.Struct).Segment(), n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], Node_Parameter_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Node_Parameter_List.ptr(new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(4, $clone($clone(l.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [l, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method.ptr.prototype.NewImplicitParameters }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method.prototype.NewImplicitParameters = function(n) { return this.$val.NewImplicitParameters(n); };
	Method.ptr.prototype.ParamStructType = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint64(8);
	};
	Method.prototype.ParamStructType = function() { return this.$val.ParamStructType(); };
	Method.ptr.prototype.SetParamStructType = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint64(8, v);
	};
	Method.prototype.SetParamStructType = function(v) { return this.$val.SetParamStructType(v); };
	Method.ptr.prototype.ParamBrand = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(2); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Brand.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method.ptr.prototype.ParamBrand }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method.prototype.ParamBrand = function() { return this.$val.ParamBrand(); };
	Method.ptr.prototype.HasParamBrand = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(2); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method.ptr.prototype.HasParamBrand }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method.prototype.HasParamBrand = function() { return this.$val.HasParamBrand(); };
	Method.ptr.prototype.SetParamBrand = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(2, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method.ptr.prototype.SetParamBrand }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method.prototype.SetParamBrand = function(v) { return this.$val.SetParamBrand(v); };
	Method.ptr.prototype.NewParamBrand = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewBrand($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Brand);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Brand.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(2, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method.ptr.prototype.NewParamBrand }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method.prototype.NewParamBrand = function() { return this.$val.NewParamBrand(); };
	Method.ptr.prototype.ResultStructType = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint64(16);
	};
	Method.prototype.ResultStructType = function() { return this.$val.ResultStructType(); };
	Method.ptr.prototype.SetResultStructType = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint64(16, v);
	};
	Method.prototype.SetResultStructType = function(v) { return this.$val.SetResultStructType(v); };
	Method.ptr.prototype.ResultBrand = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(3); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Brand.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method.ptr.prototype.ResultBrand }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method.prototype.ResultBrand = function() { return this.$val.ResultBrand(); };
	Method.ptr.prototype.HasResultBrand = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(3); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method.ptr.prototype.HasResultBrand }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method.prototype.HasResultBrand = function() { return this.$val.HasResultBrand(); };
	Method.ptr.prototype.SetResultBrand = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(3, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method.ptr.prototype.SetResultBrand }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method.prototype.SetResultBrand = function(v) { return this.$val.SetResultBrand(v); };
	Method.ptr.prototype.NewResultBrand = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewBrand($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Brand);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Brand.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(3, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method.ptr.prototype.NewResultBrand }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method.prototype.NewResultBrand = function() { return this.$val.NewResultBrand(); };
	Method.ptr.prototype.Annotations = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Annotation_List.ptr($clone($clone(p, capnp.Ptr).List(), capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method.ptr.prototype.Annotations }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method.prototype.Annotations = function() { return this.$val.Annotations(); };
	Method.ptr.prototype.HasAnnotations = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method.ptr.prototype.HasAnnotations }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method.prototype.HasAnnotations = function() { return this.$val.HasAnnotations(); };
	Method.ptr.prototype.SetAnnotations = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(1, $clone($clone(v.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method.ptr.prototype.SetAnnotations }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method.prototype.SetAnnotations = function(v) { return this.$val.SetAnnotations(v); };
	Method.ptr.prototype.NewAnnotations = function(n) {
		var $ptr, _r, _r$1, _tuple, err, l, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewAnnotation_List($clone(s.Struct, capnp.Struct).Segment(), n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], Annotation_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Annotation_List.ptr(new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(1, $clone($clone(l.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [l, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method.ptr.prototype.NewAnnotations }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method.prototype.NewAnnotations = function(n) { return this.$val.NewAnnotations(n); };
	NewMethod_List = function(s, sz) {
		var $ptr, _r, _tuple, err, l, s, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; l = $f.l; s = $f.s; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewCompositeList(s, new capnp.ObjectSize.ptr(24, 5), sz); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], capnp.List);
		err = _tuple[1];
		$s = -1; return [new Method_List.ptr($clone(l, capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewMethod_List }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.s = s; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewMethod_List = NewMethod_List;
	Method_List.ptr.prototype.At = function(i) {
		var $ptr, i, s;
		s = this;
		return new Method.ptr($clone($clone(s.List, capnp.List).Struct(i), capnp.Struct));
	};
	Method_List.prototype.At = function(i) { return this.$val.At(i); };
	Method_List.ptr.prototype.Set = function(i, v) {
		var $ptr, _r, i, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.List, capnp.List).SetStruct(i, $clone(v.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Method_List.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Method_List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	Type_Which.prototype.String = function() {
		var $ptr, _1, w;
		w = this.$val;
		_1 = w;
		if (_1 === (0)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructTypeinterfaceanyPointer", 0, 4);
		} else if (_1 === (1)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructTypeinterfaceanyPointer", 4, 8);
		} else if (_1 === (2)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructTypeinterfaceanyPointer", 8, 12);
		} else if (_1 === (3)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructTypeinterfaceanyPointer", 12, 17);
		} else if (_1 === (4)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructTypeinterfaceanyPointer", 17, 22);
		} else if (_1 === (5)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructTypeinterfaceanyPointer", 22, 27);
		} else if (_1 === (6)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructTypeinterfaceanyPointer", 27, 32);
		} else if (_1 === (7)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructTypeinterfaceanyPointer", 32, 38);
		} else if (_1 === (8)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructTypeinterfaceanyPointer", 38, 44);
		} else if (_1 === (9)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructTypeinterfaceanyPointer", 44, 50);
		} else if (_1 === (10)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructTypeinterfaceanyPointer", 50, 57);
		} else if (_1 === (11)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructTypeinterfaceanyPointer", 57, 64);
		} else if (_1 === (12)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructTypeinterfaceanyPointer", 64, 68);
		} else if (_1 === (13)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructTypeinterfaceanyPointer", 68, 72);
		} else if (_1 === (14)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructTypeinterfaceanyPointer", 72, 76);
		} else if (_1 === (15)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructTypeinterfaceanyPointer", 76, 80);
		} else if (_1 === (16)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructTypeinterfaceanyPointer", 80, 90);
		} else if (_1 === (17)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructTypeinterfaceanyPointer", 90, 99);
		} else if (_1 === (18)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructTypeinterfaceanyPointer", 99, 109);
		}
		return "Type_Which(" + strconv.FormatUint(new $Uint64(0, w), 10) + ")";
	};
	$ptrType(Type_Which).prototype.String = function() { return new Type_Which(this.$get()).String(); };
	Type_anyPointer_Which.prototype.String = function() {
		var $ptr, _1, w;
		w = this.$val;
		_1 = w;
		if (_1 === (0)) {
			return $substring("unconstrainedparameterimplicitMethodParameter", 0, 13);
		} else if (_1 === (1)) {
			return $substring("unconstrainedparameterimplicitMethodParameter", 13, 22);
		} else if (_1 === (2)) {
			return $substring("unconstrainedparameterimplicitMethodParameter", 22, 45);
		}
		return "Type_anyPointer_Which(" + strconv.FormatUint(new $Uint64(0, w), 10) + ")";
	};
	$ptrType(Type_anyPointer_Which).prototype.String = function() { return new Type_anyPointer_Which(this.$get()).String(); };
	Type_anyPointer_unconstrained_Which.prototype.String = function() {
		var $ptr, _1, w;
		w = this.$val;
		_1 = w;
		if (_1 === (0)) {
			return $substring("anyKindstructlistcapability", 0, 7);
		} else if (_1 === (1)) {
			return $substring("anyKindstructlistcapability", 7, 13);
		} else if (_1 === (2)) {
			return $substring("anyKindstructlistcapability", 13, 17);
		} else if (_1 === (3)) {
			return $substring("anyKindstructlistcapability", 17, 27);
		}
		return "Type_anyPointer_unconstrained_Which(" + strconv.FormatUint(new $Uint64(0, w), 10) + ")";
	};
	$ptrType(Type_anyPointer_unconstrained_Which).prototype.String = function() { return new Type_anyPointer_unconstrained_Which(this.$get()).String(); };
	NewType = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewStruct(s, new capnp.ObjectSize.ptr(24, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new Type.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewType }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewType = NewType;
	Type.ptr.prototype.Which = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(0) << 16 >>> 16);
	};
	Type.prototype.Which = function() { return this.$val.Which(); };
	Type.ptr.prototype.SetVoid = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 0);
	};
	Type.prototype.SetVoid = function() { return this.$val.SetVoid(); };
	Type.ptr.prototype.SetBool = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 1);
	};
	Type.prototype.SetBool = function() { return this.$val.SetBool(); };
	Type.ptr.prototype.SetInt8 = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 2);
	};
	Type.prototype.SetInt8 = function() { return this.$val.SetInt8(); };
	Type.ptr.prototype.SetInt16 = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 3);
	};
	Type.prototype.SetInt16 = function() { return this.$val.SetInt16(); };
	Type.ptr.prototype.SetInt32 = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 4);
	};
	Type.prototype.SetInt32 = function() { return this.$val.SetInt32(); };
	Type.ptr.prototype.SetInt64 = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 5);
	};
	Type.prototype.SetInt64 = function() { return this.$val.SetInt64(); };
	Type.ptr.prototype.SetUint8 = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 6);
	};
	Type.prototype.SetUint8 = function() { return this.$val.SetUint8(); };
	Type.ptr.prototype.SetUint16 = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 7);
	};
	Type.prototype.SetUint16 = function() { return this.$val.SetUint16(); };
	Type.ptr.prototype.SetUint32 = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 8);
	};
	Type.prototype.SetUint32 = function() { return this.$val.SetUint32(); };
	Type.ptr.prototype.SetUint64 = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 9);
	};
	Type.prototype.SetUint64 = function() { return this.$val.SetUint64(); };
	Type.ptr.prototype.SetFloat32 = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 10);
	};
	Type.prototype.SetFloat32 = function() { return this.$val.SetFloat32(); };
	Type.ptr.prototype.SetFloat64 = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 11);
	};
	Type.prototype.SetFloat64 = function() { return this.$val.SetFloat64(); };
	Type.ptr.prototype.SetText = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 12);
	};
	Type.prototype.SetText = function() { return this.$val.SetText(); };
	Type.ptr.prototype.SetData = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 13);
	};
	Type.prototype.SetData = function() { return this.$val.SetData(); };
	Type.ptr.prototype.List = function() {
		var $ptr, s;
		s = this;
		return $clone(s, Type_list);
	};
	Type.prototype.List = function() { return this.$val.List(); };
	Type.ptr.prototype.SetList = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 14);
	};
	Type.prototype.SetList = function() { return this.$val.SetList(); };
	Type_list.ptr.prototype.ElementType = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Type.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Type_list.ptr.prototype.ElementType }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Type_list.prototype.ElementType = function() { return this.$val.ElementType(); };
	Type_list.ptr.prototype.HasElementType = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Type_list.ptr.prototype.HasElementType }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Type_list.prototype.HasElementType = function() { return this.$val.HasElementType(); };
	Type_list.ptr.prototype.SetElementType = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Type_list.ptr.prototype.SetElementType }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Type_list.prototype.SetElementType = function(v) { return this.$val.SetElementType(v); };
	Type_list.ptr.prototype.NewElementType = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewType($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Type);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Type.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Type_list.ptr.prototype.NewElementType }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Type_list.prototype.NewElementType = function() { return this.$val.NewElementType(); };
	Type.ptr.prototype.Enum = function() {
		var $ptr, s;
		s = this;
		return $clone(s, Type_enum);
	};
	Type.prototype.Enum = function() { return this.$val.Enum(); };
	Type.ptr.prototype.SetEnum = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 15);
	};
	Type.prototype.SetEnum = function() { return this.$val.SetEnum(); };
	Type_enum.ptr.prototype.TypeId = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint64(8);
	};
	Type_enum.prototype.TypeId = function() { return this.$val.TypeId(); };
	Type_enum.ptr.prototype.SetTypeId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint64(8, v);
	};
	Type_enum.prototype.SetTypeId = function(v) { return this.$val.SetTypeId(v); };
	Type_enum.ptr.prototype.Brand = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Brand.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Type_enum.ptr.prototype.Brand }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Type_enum.prototype.Brand = function() { return this.$val.Brand(); };
	Type_enum.ptr.prototype.HasBrand = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Type_enum.ptr.prototype.HasBrand }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Type_enum.prototype.HasBrand = function() { return this.$val.HasBrand(); };
	Type_enum.ptr.prototype.SetBrand = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Type_enum.ptr.prototype.SetBrand }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Type_enum.prototype.SetBrand = function(v) { return this.$val.SetBrand(v); };
	Type_enum.ptr.prototype.NewBrand = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewBrand($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Brand);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Brand.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Type_enum.ptr.prototype.NewBrand }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Type_enum.prototype.NewBrand = function() { return this.$val.NewBrand(); };
	Type.ptr.prototype.StructType = function() {
		var $ptr, s;
		s = this;
		return $clone(s, Type_structType);
	};
	Type.prototype.StructType = function() { return this.$val.StructType(); };
	Type.ptr.prototype.SetStructType = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 16);
	};
	Type.prototype.SetStructType = function() { return this.$val.SetStructType(); };
	Type_structType.ptr.prototype.TypeId = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint64(8);
	};
	Type_structType.prototype.TypeId = function() { return this.$val.TypeId(); };
	Type_structType.ptr.prototype.SetTypeId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint64(8, v);
	};
	Type_structType.prototype.SetTypeId = function(v) { return this.$val.SetTypeId(v); };
	Type_structType.ptr.prototype.Brand = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Brand.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Type_structType.ptr.prototype.Brand }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Type_structType.prototype.Brand = function() { return this.$val.Brand(); };
	Type_structType.ptr.prototype.HasBrand = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Type_structType.ptr.prototype.HasBrand }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Type_structType.prototype.HasBrand = function() { return this.$val.HasBrand(); };
	Type_structType.ptr.prototype.SetBrand = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Type_structType.ptr.prototype.SetBrand }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Type_structType.prototype.SetBrand = function(v) { return this.$val.SetBrand(v); };
	Type_structType.ptr.prototype.NewBrand = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewBrand($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Brand);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Brand.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Type_structType.ptr.prototype.NewBrand }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Type_structType.prototype.NewBrand = function() { return this.$val.NewBrand(); };
	Type.ptr.prototype.Interface = function() {
		var $ptr, s;
		s = this;
		return $clone(s, Type_interface);
	};
	Type.prototype.Interface = function() { return this.$val.Interface(); };
	Type.ptr.prototype.SetInterface = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 17);
	};
	Type.prototype.SetInterface = function() { return this.$val.SetInterface(); };
	Type_interface.ptr.prototype.TypeId = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint64(8);
	};
	Type_interface.prototype.TypeId = function() { return this.$val.TypeId(); };
	Type_interface.ptr.prototype.SetTypeId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint64(8, v);
	};
	Type_interface.prototype.SetTypeId = function(v) { return this.$val.SetTypeId(v); };
	Type_interface.ptr.prototype.Brand = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Brand.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Type_interface.ptr.prototype.Brand }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Type_interface.prototype.Brand = function() { return this.$val.Brand(); };
	Type_interface.ptr.prototype.HasBrand = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Type_interface.ptr.prototype.HasBrand }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Type_interface.prototype.HasBrand = function() { return this.$val.HasBrand(); };
	Type_interface.ptr.prototype.SetBrand = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Type_interface.ptr.prototype.SetBrand }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Type_interface.prototype.SetBrand = function(v) { return this.$val.SetBrand(v); };
	Type_interface.ptr.prototype.NewBrand = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewBrand($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Brand);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Brand.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Type_interface.ptr.prototype.NewBrand }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Type_interface.prototype.NewBrand = function() { return this.$val.NewBrand(); };
	Type.ptr.prototype.AnyPointer = function() {
		var $ptr, s;
		s = this;
		return $clone(s, Type_anyPointer);
	};
	Type.prototype.AnyPointer = function() { return this.$val.AnyPointer(); };
	Type.ptr.prototype.SetAnyPointer = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 18);
	};
	Type.prototype.SetAnyPointer = function() { return this.$val.SetAnyPointer(); };
	Type_anyPointer.ptr.prototype.Which = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(8) << 16 >>> 16);
	};
	Type_anyPointer.prototype.Which = function() { return this.$val.Which(); };
	Type_anyPointer.ptr.prototype.Unconstrained = function() {
		var $ptr, s;
		s = this;
		return $clone(s, Type_anyPointer_unconstrained);
	};
	Type_anyPointer.prototype.Unconstrained = function() { return this.$val.Unconstrained(); };
	Type_anyPointer.ptr.prototype.SetUnconstrained = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(8, 0);
	};
	Type_anyPointer.prototype.SetUnconstrained = function() { return this.$val.SetUnconstrained(); };
	Type_anyPointer_unconstrained.ptr.prototype.Which = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(10) << 16 >>> 16);
	};
	Type_anyPointer_unconstrained.prototype.Which = function() { return this.$val.Which(); };
	Type_anyPointer_unconstrained.ptr.prototype.SetAnyKind = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(10, 0);
	};
	Type_anyPointer_unconstrained.prototype.SetAnyKind = function() { return this.$val.SetAnyKind(); };
	Type_anyPointer_unconstrained.ptr.prototype.SetStruct = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(10, 1);
	};
	Type_anyPointer_unconstrained.prototype.SetStruct = function() { return this.$val.SetStruct(); };
	Type_anyPointer_unconstrained.ptr.prototype.SetList = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(10, 2);
	};
	Type_anyPointer_unconstrained.prototype.SetList = function() { return this.$val.SetList(); };
	Type_anyPointer_unconstrained.ptr.prototype.SetCapability = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(10, 3);
	};
	Type_anyPointer_unconstrained.prototype.SetCapability = function() { return this.$val.SetCapability(); };
	Type_anyPointer.ptr.prototype.Parameter = function() {
		var $ptr, s;
		s = this;
		return $clone(s, Type_anyPointer_parameter);
	};
	Type_anyPointer.prototype.Parameter = function() { return this.$val.Parameter(); };
	Type_anyPointer.ptr.prototype.SetParameter = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(8, 1);
	};
	Type_anyPointer.prototype.SetParameter = function() { return this.$val.SetParameter(); };
	Type_anyPointer_parameter.ptr.prototype.ScopeId = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint64(16);
	};
	Type_anyPointer_parameter.prototype.ScopeId = function() { return this.$val.ScopeId(); };
	Type_anyPointer_parameter.ptr.prototype.SetScopeId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint64(16, v);
	};
	Type_anyPointer_parameter.prototype.SetScopeId = function(v) { return this.$val.SetScopeId(v); };
	Type_anyPointer_parameter.ptr.prototype.ParameterIndex = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint16(10);
	};
	Type_anyPointer_parameter.prototype.ParameterIndex = function() { return this.$val.ParameterIndex(); };
	Type_anyPointer_parameter.ptr.prototype.SetParameterIndex = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(10, v);
	};
	Type_anyPointer_parameter.prototype.SetParameterIndex = function(v) { return this.$val.SetParameterIndex(v); };
	Type_anyPointer.ptr.prototype.ImplicitMethodParameter = function() {
		var $ptr, s;
		s = this;
		return $clone(s, Type_anyPointer_implicitMethodParameter);
	};
	Type_anyPointer.prototype.ImplicitMethodParameter = function() { return this.$val.ImplicitMethodParameter(); };
	Type_anyPointer.ptr.prototype.SetImplicitMethodParameter = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(8, 2);
	};
	Type_anyPointer.prototype.SetImplicitMethodParameter = function() { return this.$val.SetImplicitMethodParameter(); };
	Type_anyPointer_implicitMethodParameter.ptr.prototype.ParameterIndex = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint16(10);
	};
	Type_anyPointer_implicitMethodParameter.prototype.ParameterIndex = function() { return this.$val.ParameterIndex(); };
	Type_anyPointer_implicitMethodParameter.ptr.prototype.SetParameterIndex = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(10, v);
	};
	Type_anyPointer_implicitMethodParameter.prototype.SetParameterIndex = function(v) { return this.$val.SetParameterIndex(v); };
	NewBrand = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewStruct(s, new capnp.ObjectSize.ptr(0, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new Brand.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewBrand }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewBrand = NewBrand;
	Brand.ptr.prototype.Scopes = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Brand_Scope_List.ptr($clone($clone(p, capnp.Ptr).List(), capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Brand.ptr.prototype.Scopes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Brand.prototype.Scopes = function() { return this.$val.Scopes(); };
	Brand.ptr.prototype.HasScopes = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Brand.ptr.prototype.HasScopes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Brand.prototype.HasScopes = function() { return this.$val.HasScopes(); };
	Brand.ptr.prototype.SetScopes = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Brand.ptr.prototype.SetScopes }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Brand.prototype.SetScopes = function(v) { return this.$val.SetScopes(v); };
	Brand.ptr.prototype.NewScopes = function(n) {
		var $ptr, _r, _r$1, _tuple, err, l, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewBrand_Scope_List($clone(s.Struct, capnp.Struct).Segment(), n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], Brand_Scope_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Brand_Scope_List.ptr(new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(l.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [l, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Brand.ptr.prototype.NewScopes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Brand.prototype.NewScopes = function(n) { return this.$val.NewScopes(n); };
	Brand_Scope_Which.prototype.String = function() {
		var $ptr, _1, w;
		w = this.$val;
		_1 = w;
		if (_1 === (0)) {
			return $substring("bindinherit", 0, 4);
		} else if (_1 === (1)) {
			return $substring("bindinherit", 4, 11);
		}
		return "Brand_Scope_Which(" + strconv.FormatUint(new $Uint64(0, w), 10) + ")";
	};
	$ptrType(Brand_Scope_Which).prototype.String = function() { return new Brand_Scope_Which(this.$get()).String(); };
	Brand_Scope.ptr.prototype.Which = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(8) << 16 >>> 16);
	};
	Brand_Scope.prototype.Which = function() { return this.$val.Which(); };
	Brand_Scope.ptr.prototype.ScopeId = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint64(0);
	};
	Brand_Scope.prototype.ScopeId = function() { return this.$val.ScopeId(); };
	Brand_Scope.ptr.prototype.SetScopeId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint64(0, v);
	};
	Brand_Scope.prototype.SetScopeId = function(v) { return this.$val.SetScopeId(v); };
	Brand_Scope.ptr.prototype.Bind = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Brand_Binding_List.ptr($clone($clone(p, capnp.Ptr).List(), capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Brand_Scope.ptr.prototype.Bind }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Brand_Scope.prototype.Bind = function() { return this.$val.Bind(); };
	Brand_Scope.ptr.prototype.HasBind = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(8) === 0))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Brand_Scope.ptr.prototype.HasBind }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Brand_Scope.prototype.HasBind = function() { return this.$val.HasBind(); };
	Brand_Scope.ptr.prototype.SetBind = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(8, 0);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Brand_Scope.ptr.prototype.SetBind }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Brand_Scope.prototype.SetBind = function(v) { return this.$val.SetBind(v); };
	Brand_Scope.ptr.prototype.NewBind = function(n) {
		var $ptr, _r, _r$1, _tuple, err, l, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(8, 0);
		_r = NewBrand_Binding_List($clone(s.Struct, capnp.Struct).Segment(), n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], Brand_Binding_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Brand_Binding_List.ptr(new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(l.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [l, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Brand_Scope.ptr.prototype.NewBind }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Brand_Scope.prototype.NewBind = function(n) { return this.$val.NewBind(n); };
	Brand_Scope.ptr.prototype.SetInherit = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(8, 1);
	};
	Brand_Scope.prototype.SetInherit = function() { return this.$val.SetInherit(); };
	NewBrand_Scope_List = function(s, sz) {
		var $ptr, _r, _tuple, err, l, s, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; l = $f.l; s = $f.s; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewCompositeList(s, new capnp.ObjectSize.ptr(16, 1), sz); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], capnp.List);
		err = _tuple[1];
		$s = -1; return [new Brand_Scope_List.ptr($clone(l, capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewBrand_Scope_List }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.s = s; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewBrand_Scope_List = NewBrand_Scope_List;
	Brand_Scope_List.ptr.prototype.At = function(i) {
		var $ptr, i, s;
		s = this;
		return new Brand_Scope.ptr($clone($clone(s.List, capnp.List).Struct(i), capnp.Struct));
	};
	Brand_Scope_List.prototype.At = function(i) { return this.$val.At(i); };
	Brand_Scope_List.ptr.prototype.Set = function(i, v) {
		var $ptr, _r, i, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.List, capnp.List).SetStruct(i, $clone(v.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Brand_Scope_List.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Brand_Scope_List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	Brand_Binding_Which.prototype.String = function() {
		var $ptr, _1, w;
		w = this.$val;
		_1 = w;
		if (_1 === (0)) {
			return $substring("unboundtype", 0, 7);
		} else if (_1 === (1)) {
			return $substring("unboundtype", 7, 11);
		}
		return "Brand_Binding_Which(" + strconv.FormatUint(new $Uint64(0, w), 10) + ")";
	};
	$ptrType(Brand_Binding_Which).prototype.String = function() { return new Brand_Binding_Which(this.$get()).String(); };
	Brand_Binding.ptr.prototype.Which = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(0) << 16 >>> 16);
	};
	Brand_Binding.prototype.Which = function() { return this.$val.Which(); };
	Brand_Binding.ptr.prototype.SetUnbound = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 0);
	};
	Brand_Binding.prototype.SetUnbound = function() { return this.$val.SetUnbound(); };
	Brand_Binding.ptr.prototype.Type = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Type.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Brand_Binding.ptr.prototype.Type }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Brand_Binding.prototype.Type = function() { return this.$val.Type(); };
	Brand_Binding.ptr.prototype.HasType = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 1))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Brand_Binding.ptr.prototype.HasType }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Brand_Binding.prototype.HasType = function() { return this.$val.HasType(); };
	Brand_Binding.ptr.prototype.SetType = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 1);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Brand_Binding.ptr.prototype.SetType }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Brand_Binding.prototype.SetType = function(v) { return this.$val.SetType(v); };
	Brand_Binding.ptr.prototype.NewType = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 1);
		_r = NewType($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Type);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Type.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Brand_Binding.ptr.prototype.NewType }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Brand_Binding.prototype.NewType = function() { return this.$val.NewType(); };
	NewBrand_Binding_List = function(s, sz) {
		var $ptr, _r, _tuple, err, l, s, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; l = $f.l; s = $f.s; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewCompositeList(s, new capnp.ObjectSize.ptr(8, 1), sz); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], capnp.List);
		err = _tuple[1];
		$s = -1; return [new Brand_Binding_List.ptr($clone(l, capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewBrand_Binding_List }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.s = s; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewBrand_Binding_List = NewBrand_Binding_List;
	Brand_Binding_List.ptr.prototype.At = function(i) {
		var $ptr, i, s;
		s = this;
		return new Brand_Binding.ptr($clone($clone(s.List, capnp.List).Struct(i), capnp.Struct));
	};
	Brand_Binding_List.prototype.At = function(i) { return this.$val.At(i); };
	Brand_Binding_List.ptr.prototype.Set = function(i, v) {
		var $ptr, _r, i, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.List, capnp.List).SetStruct(i, $clone(v.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Brand_Binding_List.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Brand_Binding_List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	Value_Which.prototype.String = function() {
		var $ptr, _1, w;
		w = this.$val;
		_1 = w;
		if (_1 === (0)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructValueinterfaceanyPointer", 0, 4);
		} else if (_1 === (1)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructValueinterfaceanyPointer", 4, 8);
		} else if (_1 === (2)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructValueinterfaceanyPointer", 8, 12);
		} else if (_1 === (3)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructValueinterfaceanyPointer", 12, 17);
		} else if (_1 === (4)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructValueinterfaceanyPointer", 17, 22);
		} else if (_1 === (5)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructValueinterfaceanyPointer", 22, 27);
		} else if (_1 === (6)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructValueinterfaceanyPointer", 27, 32);
		} else if (_1 === (7)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructValueinterfaceanyPointer", 32, 38);
		} else if (_1 === (8)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructValueinterfaceanyPointer", 38, 44);
		} else if (_1 === (9)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructValueinterfaceanyPointer", 44, 50);
		} else if (_1 === (10)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructValueinterfaceanyPointer", 50, 57);
		} else if (_1 === (11)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructValueinterfaceanyPointer", 57, 64);
		} else if (_1 === (12)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructValueinterfaceanyPointer", 64, 68);
		} else if (_1 === (13)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructValueinterfaceanyPointer", 68, 72);
		} else if (_1 === (14)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructValueinterfaceanyPointer", 72, 76);
		} else if (_1 === (15)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructValueinterfaceanyPointer", 76, 80);
		} else if (_1 === (16)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructValueinterfaceanyPointer", 80, 91);
		} else if (_1 === (17)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructValueinterfaceanyPointer", 91, 100);
		} else if (_1 === (18)) {
			return $substring("voidboolint8int16int32int64uint8uint16uint32uint64float32float64textdatalistenumstructValueinterfaceanyPointer", 100, 110);
		}
		return "Value_Which(" + strconv.FormatUint(new $Uint64(0, w), 10) + ")";
	};
	$ptrType(Value_Which).prototype.String = function() { return new Value_Which(this.$get()).String(); };
	NewValue = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewStruct(s, new capnp.ObjectSize.ptr(16, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new Value.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewValue }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewValue = NewValue;
	Value.ptr.prototype.Which = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(0) << 16 >>> 16);
	};
	Value.prototype.Which = function() { return this.$val.Which(); };
	Value.ptr.prototype.SetVoid = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 0);
	};
	Value.prototype.SetVoid = function() { return this.$val.SetVoid(); };
	Value.ptr.prototype.Bool = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Bit(16);
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.ptr.prototype.SetBool = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 1);
		$clone(s.Struct, capnp.Struct).SetBit(16, v);
	};
	Value.prototype.SetBool = function(v) { return this.$val.SetBool(v); };
	Value.ptr.prototype.Int8 = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint8(2) << 24 >> 24);
	};
	Value.prototype.Int8 = function() { return this.$val.Int8(); };
	Value.ptr.prototype.SetInt8 = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 2);
		$clone(s.Struct, capnp.Struct).SetUint8(2, (v << 24 >>> 24));
	};
	Value.prototype.SetInt8 = function(v) { return this.$val.SetInt8(v); };
	Value.ptr.prototype.Int16 = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(2) << 16 >> 16);
	};
	Value.prototype.Int16 = function() { return this.$val.Int16(); };
	Value.ptr.prototype.SetInt16 = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 3);
		$clone(s.Struct, capnp.Struct).SetUint16(2, (v << 16 >>> 16));
	};
	Value.prototype.SetInt16 = function(v) { return this.$val.SetInt16(v); };
	Value.ptr.prototype.Int32 = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint32(4) >> 0);
	};
	Value.prototype.Int32 = function() { return this.$val.Int32(); };
	Value.ptr.prototype.SetInt32 = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 4);
		$clone(s.Struct, capnp.Struct).SetUint32(4, (v >>> 0));
	};
	Value.prototype.SetInt32 = function(v) { return this.$val.SetInt32(v); };
	Value.ptr.prototype.Int64 = function() {
		var $ptr, s, x;
		s = this;
		return (x = $clone(s.Struct, capnp.Struct).Uint64(8), new $Int64(x.$high, x.$low));
	};
	Value.prototype.Int64 = function() { return this.$val.Int64(); };
	Value.ptr.prototype.SetInt64 = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 5);
		$clone(s.Struct, capnp.Struct).SetUint64(8, new $Uint64(v.$high, v.$low));
	};
	Value.prototype.SetInt64 = function(v) { return this.$val.SetInt64(v); };
	Value.ptr.prototype.Uint8 = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint8(2);
	};
	Value.prototype.Uint8 = function() { return this.$val.Uint8(); };
	Value.ptr.prototype.SetUint8 = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 6);
		$clone(s.Struct, capnp.Struct).SetUint8(2, v);
	};
	Value.prototype.SetUint8 = function(v) { return this.$val.SetUint8(v); };
	Value.ptr.prototype.Uint16 = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint16(2);
	};
	Value.prototype.Uint16 = function() { return this.$val.Uint16(); };
	Value.ptr.prototype.SetUint16 = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 7);
		$clone(s.Struct, capnp.Struct).SetUint16(2, v);
	};
	Value.prototype.SetUint16 = function(v) { return this.$val.SetUint16(v); };
	Value.ptr.prototype.Uint32 = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(4);
	};
	Value.prototype.Uint32 = function() { return this.$val.Uint32(); };
	Value.ptr.prototype.SetUint32 = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 8);
		$clone(s.Struct, capnp.Struct).SetUint32(4, v);
	};
	Value.prototype.SetUint32 = function(v) { return this.$val.SetUint32(v); };
	Value.ptr.prototype.Uint64 = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint64(8);
	};
	Value.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Value.ptr.prototype.SetUint64 = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 9);
		$clone(s.Struct, capnp.Struct).SetUint64(8, v);
	};
	Value.prototype.SetUint64 = function(v) { return this.$val.SetUint64(v); };
	Value.ptr.prototype.Float32 = function() {
		var $ptr, s;
		s = this;
		return math.Float32frombits($clone(s.Struct, capnp.Struct).Uint32(4));
	};
	Value.prototype.Float32 = function() { return this.$val.Float32(); };
	Value.ptr.prototype.SetFloat32 = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 10);
		$clone(s.Struct, capnp.Struct).SetUint32(4, math.Float32bits(v));
	};
	Value.prototype.SetFloat32 = function(v) { return this.$val.SetFloat32(v); };
	Value.ptr.prototype.Float64 = function() {
		var $ptr, s;
		s = this;
		return math.Float64frombits($clone(s.Struct, capnp.Struct).Uint64(8));
	};
	Value.prototype.Float64 = function() { return this.$val.Float64(); };
	Value.ptr.prototype.SetFloat64 = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 11);
		$clone(s.Struct, capnp.Struct).SetUint64(8, math.Float64bits(v));
	};
	Value.prototype.SetFloat64 = function(v) { return this.$val.SetFloat64(v); };
	Value.ptr.prototype.Text = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).Text(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Text }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Text = function() { return this.$val.Text(); };
	Value.ptr.prototype.HasText = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 12))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.HasText }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.HasText = function() { return this.$val.HasText(); };
	Value.ptr.prototype.TextBytes = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).TextBytes(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TextBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TextBytes = function() { return this.$val.TextBytes(); };
	Value.ptr.prototype.SetText = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 12);
		_r = $clone(s.Struct, capnp.Struct).SetText(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetText }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetText = function(v) { return this.$val.SetText(v); };
	Value.ptr.prototype.Data = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).Data(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Data }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Data = function() { return this.$val.Data(); };
	Value.ptr.prototype.HasData = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 13))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.HasData }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.HasData = function() { return this.$val.HasData(); };
	Value.ptr.prototype.SetData = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 13);
		_r = $clone(s.Struct, capnp.Struct).SetData(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetData }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetData = function(v) { return this.$val.SetData(v); };
	Value.ptr.prototype.List = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Pointer(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.List }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.List = function() { return this.$val.List(); };
	Value.ptr.prototype.HasList = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 14))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.HasList }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.HasList = function() { return this.$val.HasList(); };
	Value.ptr.prototype.ListPtr = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.ListPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.ListPtr = function() { return this.$val.ListPtr(); };
	Value.ptr.prototype.SetList = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 14);
		_r = $clone(s.Struct, capnp.Struct).SetPointer(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetList }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetList = function(v) { return this.$val.SetList(v); };
	Value.ptr.prototype.SetListPtr = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 14);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone(v, capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetListPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetListPtr = function(v) { return this.$val.SetListPtr(v); };
	Value.ptr.prototype.Enum = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint16(2);
	};
	Value.prototype.Enum = function() { return this.$val.Enum(); };
	Value.ptr.prototype.SetEnum = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 15);
		$clone(s.Struct, capnp.Struct).SetUint16(2, v);
	};
	Value.prototype.SetEnum = function(v) { return this.$val.SetEnum(v); };
	Value.ptr.prototype.StructValue = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Pointer(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.StructValue }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.StructValue = function() { return this.$val.StructValue(); };
	Value.ptr.prototype.HasStructValue = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 16))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.HasStructValue }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.HasStructValue = function() { return this.$val.HasStructValue(); };
	Value.ptr.prototype.StructValuePtr = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.StructValuePtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.StructValuePtr = function() { return this.$val.StructValuePtr(); };
	Value.ptr.prototype.SetStructValue = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 16);
		_r = $clone(s.Struct, capnp.Struct).SetPointer(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetStructValue }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetStructValue = function(v) { return this.$val.SetStructValue(v); };
	Value.ptr.prototype.SetStructValuePtr = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 16);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone(v, capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetStructValuePtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetStructValuePtr = function(v) { return this.$val.SetStructValuePtr(v); };
	Value.ptr.prototype.SetInterface = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 17);
	};
	Value.prototype.SetInterface = function() { return this.$val.SetInterface(); };
	Value.ptr.prototype.AnyPointer = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Pointer(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.AnyPointer }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.AnyPointer = function() { return this.$val.AnyPointer(); };
	Value.ptr.prototype.HasAnyPointer = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 18))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.HasAnyPointer }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.HasAnyPointer = function() { return this.$val.HasAnyPointer(); };
	Value.ptr.prototype.AnyPointerPtr = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.AnyPointerPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.AnyPointerPtr = function() { return this.$val.AnyPointerPtr(); };
	Value.ptr.prototype.SetAnyPointer = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 18);
		_r = $clone(s.Struct, capnp.Struct).SetPointer(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetAnyPointer }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetAnyPointer = function(v) { return this.$val.SetAnyPointer(v); };
	Value.ptr.prototype.SetAnyPointerPtr = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 18);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone(v, capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetAnyPointerPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetAnyPointerPtr = function(v) { return this.$val.SetAnyPointerPtr(v); };
	Annotation.ptr.prototype.Id = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint64(0);
	};
	Annotation.prototype.Id = function() { return this.$val.Id(); };
	Annotation.ptr.prototype.SetId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint64(0, v);
	};
	Annotation.prototype.SetId = function(v) { return this.$val.SetId(v); };
	Annotation.ptr.prototype.Brand = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Brand.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Annotation.ptr.prototype.Brand }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Annotation.prototype.Brand = function() { return this.$val.Brand(); };
	Annotation.ptr.prototype.HasBrand = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Annotation.ptr.prototype.HasBrand }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Annotation.prototype.HasBrand = function() { return this.$val.HasBrand(); };
	Annotation.ptr.prototype.SetBrand = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(1, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Annotation.ptr.prototype.SetBrand }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Annotation.prototype.SetBrand = function(v) { return this.$val.SetBrand(v); };
	Annotation.ptr.prototype.NewBrand = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewBrand($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Brand);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Brand.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(1, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Annotation.ptr.prototype.NewBrand }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Annotation.prototype.NewBrand = function() { return this.$val.NewBrand(); };
	Annotation.ptr.prototype.Value = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Value.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Annotation.ptr.prototype.Value }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Annotation.prototype.Value = function() { return this.$val.Value(); };
	Annotation.ptr.prototype.HasValue = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Annotation.ptr.prototype.HasValue }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Annotation.prototype.HasValue = function() { return this.$val.HasValue(); };
	Annotation.ptr.prototype.SetValue = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Annotation.ptr.prototype.SetValue }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Annotation.prototype.SetValue = function(v) { return this.$val.SetValue(v); };
	Annotation.ptr.prototype.NewValue = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewValue($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Value);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Value.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Annotation.ptr.prototype.NewValue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Annotation.prototype.NewValue = function() { return this.$val.NewValue(); };
	NewAnnotation_List = function(s, sz) {
		var $ptr, _r, _tuple, err, l, s, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; l = $f.l; s = $f.s; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewCompositeList(s, new capnp.ObjectSize.ptr(8, 2), sz); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], capnp.List);
		err = _tuple[1];
		$s = -1; return [new Annotation_List.ptr($clone(l, capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewAnnotation_List }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.s = s; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewAnnotation_List = NewAnnotation_List;
	Annotation_List.ptr.prototype.At = function(i) {
		var $ptr, i, s;
		s = this;
		return new Annotation.ptr($clone($clone(s.List, capnp.List).Struct(i), capnp.Struct));
	};
	Annotation_List.prototype.At = function(i) { return this.$val.At(i); };
	Annotation_List.ptr.prototype.Set = function(i, v) {
		var $ptr, _r, i, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.List, capnp.List).SetStruct(i, $clone(v.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Annotation_List.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Annotation_List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	ElementSize.prototype.String = function() {
		var $ptr, _1, c;
		c = this.$val;
		_1 = c;
		if (_1 === (0)) {
			return "empty";
		} else if (_1 === (1)) {
			return "bit";
		} else if (_1 === (2)) {
			return "byte";
		} else if (_1 === (3)) {
			return "twoBytes";
		} else if (_1 === (4)) {
			return "fourBytes";
		} else if (_1 === (5)) {
			return "eightBytes";
		} else if (_1 === (6)) {
			return "pointer";
		} else if (_1 === (7)) {
			return "inlineComposite";
		} else {
			return "";
		}
	};
	$ptrType(ElementSize).prototype.String = function() { return new ElementSize(this.$get()).String(); };
	ReadRootCodeGeneratorRequest = function(msg) {
		var $ptr, _r, _tuple, err, msg, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; msg = $f.msg; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = msg.RootPtr(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		root = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new CodeGeneratorRequest.ptr($clone($clone(root, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadRootCodeGeneratorRequest }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.msg = msg; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadRootCodeGeneratorRequest = ReadRootCodeGeneratorRequest;
	CodeGeneratorRequest.ptr.prototype.Nodes = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Node_List.ptr($clone($clone(p, capnp.Ptr).List(), capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest.ptr.prototype.Nodes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest.prototype.Nodes = function() { return this.$val.Nodes(); };
	CodeGeneratorRequest.ptr.prototype.HasNodes = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest.ptr.prototype.HasNodes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest.prototype.HasNodes = function() { return this.$val.HasNodes(); };
	CodeGeneratorRequest.ptr.prototype.SetNodes = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest.ptr.prototype.SetNodes }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest.prototype.SetNodes = function(v) { return this.$val.SetNodes(v); };
	CodeGeneratorRequest.ptr.prototype.NewNodes = function(n) {
		var $ptr, _r, _r$1, _tuple, err, l, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewNode_List($clone(s.Struct, capnp.Struct).Segment(), n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], Node_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Node_List.ptr(new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(l.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [l, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest.ptr.prototype.NewNodes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest.prototype.NewNodes = function(n) { return this.$val.NewNodes(n); };
	CodeGeneratorRequest.ptr.prototype.RequestedFiles = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new CodeGeneratorRequest_RequestedFile_List.ptr($clone($clone(p, capnp.Ptr).List(), capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest.ptr.prototype.RequestedFiles }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest.prototype.RequestedFiles = function() { return this.$val.RequestedFiles(); };
	CodeGeneratorRequest.ptr.prototype.HasRequestedFiles = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest.ptr.prototype.HasRequestedFiles }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest.prototype.HasRequestedFiles = function() { return this.$val.HasRequestedFiles(); };
	CodeGeneratorRequest.ptr.prototype.SetRequestedFiles = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(1, $clone($clone(v.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest.ptr.prototype.SetRequestedFiles }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest.prototype.SetRequestedFiles = function(v) { return this.$val.SetRequestedFiles(v); };
	CodeGeneratorRequest.ptr.prototype.NewRequestedFiles = function(n) {
		var $ptr, _r, _r$1, _tuple, err, l, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewCodeGeneratorRequest_RequestedFile_List($clone(s.Struct, capnp.Struct).Segment(), n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], CodeGeneratorRequest_RequestedFile_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new CodeGeneratorRequest_RequestedFile_List.ptr(new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(1, $clone($clone(l.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [l, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest.ptr.prototype.NewRequestedFiles }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest.prototype.NewRequestedFiles = function(n) { return this.$val.NewRequestedFiles(n); };
	CodeGeneratorRequest_RequestedFile.ptr.prototype.Id = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint64(0);
	};
	CodeGeneratorRequest_RequestedFile.prototype.Id = function() { return this.$val.Id(); };
	CodeGeneratorRequest_RequestedFile.ptr.prototype.SetId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint64(0, v);
	};
	CodeGeneratorRequest_RequestedFile.prototype.SetId = function(v) { return this.$val.SetId(v); };
	CodeGeneratorRequest_RequestedFile.ptr.prototype.Filename = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).Text(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest_RequestedFile.ptr.prototype.Filename }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest_RequestedFile.prototype.Filename = function() { return this.$val.Filename(); };
	CodeGeneratorRequest_RequestedFile.ptr.prototype.HasFilename = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest_RequestedFile.ptr.prototype.HasFilename }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest_RequestedFile.prototype.HasFilename = function() { return this.$val.HasFilename(); };
	CodeGeneratorRequest_RequestedFile.ptr.prototype.FilenameBytes = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).TextBytes(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest_RequestedFile.ptr.prototype.FilenameBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest_RequestedFile.prototype.FilenameBytes = function() { return this.$val.FilenameBytes(); };
	CodeGeneratorRequest_RequestedFile.ptr.prototype.SetFilename = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetText(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest_RequestedFile.ptr.prototype.SetFilename }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest_RequestedFile.prototype.SetFilename = function(v) { return this.$val.SetFilename(v); };
	CodeGeneratorRequest_RequestedFile.ptr.prototype.Imports = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new CodeGeneratorRequest_RequestedFile_Import_List.ptr($clone($clone(p, capnp.Ptr).List(), capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest_RequestedFile.ptr.prototype.Imports }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest_RequestedFile.prototype.Imports = function() { return this.$val.Imports(); };
	CodeGeneratorRequest_RequestedFile.ptr.prototype.HasImports = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest_RequestedFile.ptr.prototype.HasImports }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest_RequestedFile.prototype.HasImports = function() { return this.$val.HasImports(); };
	CodeGeneratorRequest_RequestedFile.ptr.prototype.SetImports = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(1, $clone($clone(v.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest_RequestedFile.ptr.prototype.SetImports }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest_RequestedFile.prototype.SetImports = function(v) { return this.$val.SetImports(v); };
	CodeGeneratorRequest_RequestedFile.ptr.prototype.NewImports = function(n) {
		var $ptr, _r, _r$1, _tuple, err, l, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewCodeGeneratorRequest_RequestedFile_Import_List($clone(s.Struct, capnp.Struct).Segment(), n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], CodeGeneratorRequest_RequestedFile_Import_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new CodeGeneratorRequest_RequestedFile_Import_List.ptr(new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(1, $clone($clone(l.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [l, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest_RequestedFile.ptr.prototype.NewImports }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest_RequestedFile.prototype.NewImports = function(n) { return this.$val.NewImports(n); };
	NewCodeGeneratorRequest_RequestedFile_List = function(s, sz) {
		var $ptr, _r, _tuple, err, l, s, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; l = $f.l; s = $f.s; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewCompositeList(s, new capnp.ObjectSize.ptr(8, 2), sz); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], capnp.List);
		err = _tuple[1];
		$s = -1; return [new CodeGeneratorRequest_RequestedFile_List.ptr($clone(l, capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewCodeGeneratorRequest_RequestedFile_List }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.s = s; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewCodeGeneratorRequest_RequestedFile_List = NewCodeGeneratorRequest_RequestedFile_List;
	CodeGeneratorRequest_RequestedFile_List.ptr.prototype.At = function(i) {
		var $ptr, i, s;
		s = this;
		return new CodeGeneratorRequest_RequestedFile.ptr($clone($clone(s.List, capnp.List).Struct(i), capnp.Struct));
	};
	CodeGeneratorRequest_RequestedFile_List.prototype.At = function(i) { return this.$val.At(i); };
	CodeGeneratorRequest_RequestedFile_List.ptr.prototype.Set = function(i, v) {
		var $ptr, _r, i, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.List, capnp.List).SetStruct(i, $clone(v.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest_RequestedFile_List.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest_RequestedFile_List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	CodeGeneratorRequest_RequestedFile_Import.ptr.prototype.Id = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint64(0);
	};
	CodeGeneratorRequest_RequestedFile_Import.prototype.Id = function() { return this.$val.Id(); };
	CodeGeneratorRequest_RequestedFile_Import.ptr.prototype.SetId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint64(0, v);
	};
	CodeGeneratorRequest_RequestedFile_Import.prototype.SetId = function(v) { return this.$val.SetId(v); };
	CodeGeneratorRequest_RequestedFile_Import.ptr.prototype.Name = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).Text(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest_RequestedFile_Import.ptr.prototype.Name }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest_RequestedFile_Import.prototype.Name = function() { return this.$val.Name(); };
	CodeGeneratorRequest_RequestedFile_Import.ptr.prototype.HasName = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest_RequestedFile_Import.ptr.prototype.HasName }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest_RequestedFile_Import.prototype.HasName = function() { return this.$val.HasName(); };
	CodeGeneratorRequest_RequestedFile_Import.ptr.prototype.NameBytes = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).TextBytes(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest_RequestedFile_Import.ptr.prototype.NameBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest_RequestedFile_Import.prototype.NameBytes = function() { return this.$val.NameBytes(); };
	CodeGeneratorRequest_RequestedFile_Import.ptr.prototype.SetName = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetText(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest_RequestedFile_Import.ptr.prototype.SetName }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest_RequestedFile_Import.prototype.SetName = function(v) { return this.$val.SetName(v); };
	NewCodeGeneratorRequest_RequestedFile_Import_List = function(s, sz) {
		var $ptr, _r, _tuple, err, l, s, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; l = $f.l; s = $f.s; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewCompositeList(s, new capnp.ObjectSize.ptr(8, 1), sz); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], capnp.List);
		err = _tuple[1];
		$s = -1; return [new CodeGeneratorRequest_RequestedFile_Import_List.ptr($clone(l, capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewCodeGeneratorRequest_RequestedFile_Import_List }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.s = s; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewCodeGeneratorRequest_RequestedFile_Import_List = NewCodeGeneratorRequest_RequestedFile_Import_List;
	CodeGeneratorRequest_RequestedFile_Import_List.ptr.prototype.At = function(i) {
		var $ptr, i, s;
		s = this;
		return new CodeGeneratorRequest_RequestedFile_Import.ptr($clone($clone(s.List, capnp.List).Struct(i), capnp.Struct));
	};
	CodeGeneratorRequest_RequestedFile_Import_List.prototype.At = function(i) { return this.$val.At(i); };
	CodeGeneratorRequest_RequestedFile_Import_List.ptr.prototype.Set = function(i, v) {
		var $ptr, _r, i, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.List, capnp.List).SetStruct(i, $clone(v.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CodeGeneratorRequest_RequestedFile_Import_List.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	CodeGeneratorRequest_RequestedFile_Import_List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	init = function() {
		var $ptr;
		schemas.Register("x\xDA\xACY}\x94\x14\xD5\x95\xBF\xF7U\x7F\xCCG\x17\xDD5\xAF\x10\x8784\xA8\xA8\x10\x9D\xC0\f\xB08\x91\x1D\x18\x18\f,\x90)\x1AP8\xEB\t5\xD35L\x99\x9E\xEA\xA6\xBAZi\x16\xCF\x80'\x1E\xB3\xEE\xBA~\xACD\x97$\x9El\x96\x9C\x13W\xDD\xC0\xAE\x9C\x13\x89Y\xCD\x1CY\x81\x83\x89\xEE\x9AcHt7xBt\xD9e\x85]P\x91\x8F\xDAs_UW\xD74=\xD1\x9C\xF8WW\xDF\xFB\xEA\xBD\xFB\xEE\xBD\xBF\xFBU\xB3>\xDF\xBC\x90\xCD\x8E\xA6'\x00h\xBB\xA31\xF7\xF1\x13\x1B\x9B\xA6\xDF\xFC\xEE\xFD\xA0\xB5\xA0\xE4n<r\xEE\xD8\xC9-\xC5\xD7`\"\xC6\x11\x80\x9F\x8D\xED\x07\xE4gc\xDD\x80\xEE\xBAy\xEB/\x95\xBF\xF2\xC5\xBF\x02\xAD\r%\xF7\xF4\xB2?\xFE\xEE{\xDD\xB7\x8D\xC2Z\x8Cc\x04\xA3\x9D\xAD\xF1\r\b\xC8\xA7\xC7\xDF\x05t?\xDFcl<\xB5v\xCE\xC3\xA0\xC8\xE8\x1E\xB5W\xF47\x1E\xE8~\n\xA2\x18\x07\xE0\x17\xE3\xBBx\xB4\xE1z\x00\xDE\xDA\xD0\r\xF8\xE2\xF6\x95\x9D_|\xE7\xC8NMF)\xB44JK\x975|\x97k\rq\x80\xCE\x95\r\xAF \xA0\xBBr\xD7\x9A\xB7\xFEk\xDB\x03\x8F\x83&cxcF\xAB\xD76\xED\xE7w4\xD1\xD3\xFA\xA6\x1F\x00\xBA-\xAF\\\xDA\xF6\xCF+\xF6>\x0E\n\x8F\xB8_9\xB3<\xBD\xBB\xEF\xD9]\x00\xD8\xD9\xD8\xDC\x82\xBC\xB59\x0E\x90Q\x9B%\xCCLmf\bP]2V\x94\xDEH\x9Ca\x84+\xCD\xBBxk\xF3$\x80\xCE\xE9\xCD\x0F\x91,\xF7-\xD7\xCF\\\xFB\xE1\xEB\xDF\xAE\xD1\x87\xA7\xB9\xCEr\xA2\x8B\xD4\xB1#q7\xA0\xFB\xD4\xFD#\x937o\x99\xF0d}%\x1FK\x90\x92\x8F\x89\x95s\x97\x9C\xFF\xA3o\xEE\xFD\x8EX\x19u'\xED\xBE\xE6\xDC\x8A\xA7\xEF\xFD-L\x8C\x89\x95\v\xE4\xC3\x80\x9D\x8Bdq\xFEGo\xEE~\xED\xC9\x99\xDFx\xAAV\x17B\xC9\xE7&\x8CrL\nuO\xA0}\x0F}u\xE0\xA9\xFB\xE6\xBC\xF94h\x1CY\xD5<\xBD(\xEE\xB6>y\x98\x1Bb\xB5\x9E$\xCD\xFD\xDB\xBF\xACx\x7Fc\xBE\xEB\x99\xFA\xF26\xA6\x0E\x03r9E\xFB\x1E\xBF\xED\x9A\x96\xBF^\xD4\xF7\x0F\xA0\xCDB\xBC\xD8\xBF\xA3}\xCF\x84\x13?\x13\"t\x9A\xA9\xFD\xC8w\xA4h\xD7{\xC4\xDA\xA9\x8F\xC9[\x9F\xF9\xDE\x03{\xEB\xDF\xEDhj\x14\x90\x1F\x15+\x9F8\xDB\xB9x\xDE?-\xDFW\x7F\xE5\\\x85\xF45W!\xA7\xDC\xFBw\xC9\xD3G>\xB7\xFAyPZ\xB0\xBA\xD0\xD3\x81\xA9\xBC\xC3K\n=m\x16k\x9Dw\xD6%Z\x0E\xBD\xBF\xBF\xBE\xC1\x1EQ\xFE\x9E\f\xF6\xB7b\xE9o\x9B\xEF\xBF\x7F\xF4\xE7\x0F\xFF\x88\xD4%U\x1Dcm$\x8E\f\xA3\xFC\x80\xF2K@~H!Y\x7F\xFAf\xD3\xB4\x0F\x96\x1Ex\xB1\xC6\xD5\xC9#;ojiA\xBE\xA0e\x12\xB9r\v-\x0E\x0E\x1D\xABX\xC2\x90\x84\x11~\xA8\xE5\x04 \x7F\xB5\x85l\x90w\x9E\xFB\xEA\xAD\xD1k^\xAE\x11abD\xE8`\x1A'mM\xE3\x04\xB6\v\xEF>\xF9\x8D+^\x1D8H+q\xACm\x018\xAA\xBF\xE4\xB2JZhTI\x04\xA5\xEDWC\xBFz\xF5\xC2\xE1\xFA\xFB\x1A*\xD9\xD6TI\t\xDFL\xECy\xF3_\xDF\xBA\xE6\xA7\xE4`,\x84\x07\x8Cs\x00\xFE\xE7\xEA.\xFE\b\xED\xDB\xF9\xA0\xFA\x85\b\x04\xC6\xD7\xAE\xC6\x90R<=Ll\xBD\x17\xF9\x8CV\xD2\xC3\xECV\xBA\\p\xF3\x1A\xA8y[\xBF\xDD\xFA(?\xDEJ/\x1Ek\xA5\xAD\xDD\xEBZW\xEF\xBF\xE7\xA1\x9D\xAF\x83\"\x87\x04\x01\xE4o\xB7\x1D\xE6\xFF\xD9F\x97;\xDE\xF6\n\xA0\xDB3\x9A\xFC\xF8Gk_\xFCw\xD2\xEFe\xFE\xB0~\xCA\tnL\x11^>\x854\x11\xB05\x19\xA3!!b\xF1\x18\xC6\xF8\x8F\xA7<\xCA\x0FL\xB9\x9E\x84\x982I\x02t\x1F\x9A6z\xEAg\x99\xEB\xDF\xAB\xEF\x94\x17\xA7\xBD\x03\xC8\xF1j\xDA\xF8a\xD6\xB4\xF0\x8D\xD6+\xFE\xBB\xFE\xCA\x1DW\x9F\x00\xEC\xBC\xEF\xEA\xFF`\x80\xEE\x8B\x89\xF3\x1F\x9A\x87\xFF\xE2d}\xA4\xED\x9DN\x9B\xEE\x9BN\x9B\xF6\x94\xA6?-\xEF<x\xBAn\xE8S\xAE\x1B\xE5\xAD\xD7\xD1\xD3\xC4\xEB~\x00\xAB\xDC\xE2\xC0\x901\xAC\xB7\x0F\xA0^\xB0\n]k\xCA\x85n\xA3=g\x16\x1D-\"E\x00T\x9C\x00\xA0\xC8\xFD\x00ZBB\xEDJ\x86\xAE\x913\x86\r\xCBY\x03\xF1r\xC1\xC0TU\x12@L\x01\x06\x1BF*\x1B\x1A\xED\xBAU\xEE\xCB\x9B\x96c\xD8\xED%k o\x15\x1D[7-\xC9\xC8j))\x92p]\x15[\x00\x14\xBD\x07@\xFBS\t\xB5!\x862^rUl\x05P\x8C.\x00m\xA3\x84Z\x8E\xA1\xCC.\xBA*N\x06P\xCC\x99\x00ZVB\xAD\xC0P\x96.\xB8*~\x0E@\x19\xDE\x00\xA0\xE5$\xD4\xB60\x1C\xD1\xAD\xF2\x9F\x98V\x16b\xDDE\xC7.\r8\x10K\xD2\xBD \xE6\x0E\xE8\x05\xBD\xDF\xCC\x99 9e\x88\xD5h\xA0\xC7\xD6%+\xAB5`(\x12*\x8D\x1DU\xE8(\xD1\x9Etf _0FzL+kZ\x9B<ME\x90\x14E\xC26H\xA8]\xCB\xB0\xBBH\x8B\x8A8\x01\xB0OBLU\xB7\x03$b\xCD\xB9+\r'>\x94\xCF\xF6!jS\x83\xFD^\xA7k\x1E\x91P\xFB\x05CD\x15\x89\xF6\xF3\xD5\x00\xDA\x1B\x12j\xBFf\xA8H\xA8\"\x03P\xDE\xBE\x17@{KB\xED=\x86J\x94\xA9(\x01(\xC7\x1F\x00\xD0\xDE\x93P;\xC3P\x89\xA3\x8A\x11\x00\xE54\xD9\xF2\x94\x84\x99\x042T\"L\xC5(\x01\x1E7\x00d\x1AP\xC2\x8CJ\xF4\x98\xA4b\x8C\xBC\x05\xFB\x012)\xA2_Et\x16Q\x05@Zq\x17@\xE6*\xA2\xCFG\x86IK\x1F60\x01\f\x13\x80\xEE@>k|\xD9\xCE\x1A\x806\xC6\x81a\x1C\xD0-\xE8\xB6>\x9Cql,\r8\xE4\x13\x80\x8D\xC0\xB0\x11\xD0\xB5\x8Db)\xE7d\x1C\xB4+\xAC*O\xB7\xAC\xBC\xA3;&\xC4\xF3VH\x93\x81\x83\xFB\x9A\x14\x9B\xF7\xD8:HV\x16S\xD5\xB8\xE6{\xA4wB\x8F\rq\xBD.\xDF\x1C.\xE4\xCC\x01\xD3\xC1>\xDA\xC7p\f\xC9\x0E\x1D\x16\xE4\x8D\xBAf\xEB\xB5J\xDD\xC3\x86\xAD[\x0EY.\x11X\xAE\x97,\xB7PBmE\xD5r\xCB\xC8r_\x92P[C\x9A\xF4-\xA7\x91=\xFA<\xFF\xFEd5~J\x85Td\x94\x84\x8CKM#\x97m\xB7\xF2K\xCC\xE2\x80m\x0E\x9B\x96n!\x89K\xBB\xCAq\xD7\xBD\xECRKMC\xCAe\xB5\b\x86+#\xDC\xEAV\xB6\x80n\xB1\x89\xA3]\x15\xDCw\x1F\xDDw\x8F\x84\xDA\v\xD5\xFB>O\xF7\xFD\xA1\x84\xDA\xCB\xA1\xFB\xFE\x84\xEE\xFB\x92\x84\xDA[\xBE\xFBJ\x88\xCA\xD1G\xAB\xEE+G\\\x17CIM9>\x13\x98\x1C\xBDD\xC4 #)\xAFv\x00\xC3\x18\x86\xF2\xAF\xB2\xAF\x07\xD8g\xA6\xC1\xAC\xAF+\xA4{\xAE\xD3s%4\xAA\xEAJ\x16sy'\xBD\xC9\xCE\x97\n#y;kZz\xAEF\xE5\xB5a\xAF\xA0\xDB\xDD\xC2\xB5l\xADA\x8A\xA4\x98\x8A\x1C@\x99A\x11\xEFZ\t\xB5Y\f\x15\x8C\xAA\xA8\x02(7m\x05\xD0n\x94P\x9B\xCFpD\xC4\x90e\xD9\x00\x10\x05\xDFC\xA1\xDB^fe\x8D-\xC1\xB5\xEA\x85q\xC3*\r\x8B\xE3P\xC5$\x1D\xD7U=\x8El4\x91N\xEB\x00\xD0n\x90P\x9B\xC3\xB0\xDB)\x87\x0FK\xF7\xDB\xF5\xF1R9\x8B\x89\xB3V\xE5\xB3F\xBB\x1Fb\x81<\"\x15\x171B\xD9g\x03h\xCFI\xA8\xBDD\xB7K\xA8\xD8\x00\xA0\xFC\xF8N\x00\xED\x05\t\xB5\x83\xE4\x13\xB2\x8A\x8D\x00\xCA\x81\x7F\x04\xD0\x0EJ\xA8\xBDA>\xF1k\x15\x9B(\xF6\xF5Tc\x9F\x12I\xAA\xD8L\xC1\x8F\x1C\xE5\x17\x12j\xBF\xA18\xD7\xA0b\x02@9\xB6\v@\xFB\x8D\x84\xDA)?r\xC9\x00\xCA\xC9./\xF8e\"\xC8\xD0\xCD\xEA\x8E~[\xDE\xCEBzq\xBEd9\xD5\xB0\xE4\xD9g1$\xC7\x92mc\xD0\xB0m\x03\xB3+\xCC\xA2\xD3k\r\xA4\xF3\x14\xE91Y\xAD/\x001\t8b\x16o%7@\x04\x86X\xEB7t\x16Vw\x1D\xC3\xFB\xF2\xE0`Q2\x1Cl\x00\x86\r\x80\xDD\x83\x04\xD2\x90C\x86\xBA\x901\x90\xF6\x94\x9E)\x15\f{ \xA7\x17\x8B@q\xA7!\xC0\xE1\x8C\xC9cm\x8C56\x96\xCC\xDF\xD7\xBE=\xB4\xAA]d<\x80\x9A \xD7S\rr2R\x1E\x17a\x8EB\xC1\x12\t\xB5\x8D\x94\xB1)\x8F\x13\xEE\xEF\xA0\xB5\xB7K\xA8e/w\xEBd\xBFie\xABW\x0FR\xADw\xF5\x11\xD3\x1A2l\xD3\t\xA5jV\x05Y\xE0y\xBE\xA3\xA7\xEA8\xFA\x15\x7F\xA0\xA3G\xC5q\x8B\xF3Y\xE3V\xC32l\xDD\xC9\xDB\xAB\x8D\xCD%\xA3\xE8\xB4\xFB\xBFFv\xA9\x993\xDA\xBB\x97\r\x17\xF2\xB6\xF3)L2\xB3\xAEI\xC6\x86\xAF:8\x13\xC5\x93wW\xC9\xBF\xEB\xCCp\f\x89\xA8\xA8\xD4\\6\xE9\xD4\xAD\xD3\xD2w\xE9\xB9\x12\xD1\x83\xDA\xBD\xE6\xD2X9\xB5\x12I\"\xDE\xA1\xA2 \xDC\xE0\x17\x847PAh\x95D\x06\x04\xC9\t\xF9o\xD0\x7F\xD7\xF5_q\x19/\xDD\xC6\x1D\xC3&\x85\x85\xAA\xA8\x99~\x15\xA5\xB2q4\x12\xAD\x1Bd+y|\xA5\xE1P%E\xBB'E\xC8%\xC9\xA3*^I{o\r\x95\xB2\x9F\x18MY(\x7F\x8A@/\xE99R\xBE\xA8Y)\x9C\xCDX^Ut\x1B^rc^@\x9BM\xE4Y\x12j\xB7\xB0jy\x01\x10w\x8D-\x95g\xB8\xEC0i</C\x87Rq\xA5kR\xD0v+^\x07i\xE1wag\xEB\xF0\xDDa!\xB9\x83\xEFm\v\xE8\xD2\xB7H\xA8\xDD\xCE0m\xE5\xB3\xE1\xAA4\xE89|;\xD9\x95\xAD\xBB\xC5\xD6\xD5\x95\x95\xF3\xEB\xDA3d\x8A$\xD9\x82\x82DB\xE4\xF1`\x16\xA4\xF4\xDA\xC0\xA8\xAE\xC7\xD0@D\x99\xBD\x1A\x18\x95\xF5\x18j\xBA\x95\xB6Q`n\xA5S\x80\xB4nZF\xB6j,\xB4\x03\x95FC\xA6&KCE\xAA\x90\xDD(W\x035\x1A)\xBF\x02\xD6\xBB\xAA}\x86\x82^\x01\xAC\x183\xABm\x86\xC2\xBC\xEAW1)Y\rI\xA89\x94\x97\xB6{yi3e\x1BGBm;\xC3\xEE\xFC\xE0`\xB1\x1A\xC4\xC7\x81\x9A\x9B5\x06\xF5R\xCEY\x07\xC9q07\xA4g{\xC93p\xC0t\x96\xD0b)\xE7\x04)\xA5^8\x16\xAD\x87dm\xF2#M\xC2u=\xEB\x87\n\n\xAF\x85\xAA\r6#%\xAB?_\xA2\xB6h<a\xEB\xF9\xBE(u\x00\x04\x90\x98\x97\xDD\x83VG\xBD,\x9E\xD6\x84\x90uzN*\x19$\xE9\x8A@R\x1Ee3\x01V3\xEAC\x98\x07\x9D\x94\x10\x967\x12#\x13!N\x8A8\xEC\xA2\xCBD\x06\xE1\xB2\xE04\x10G%\x8Et\xC1E\xD1\xE8p\x85u\x00d\x12\xC4\xB9\x928\x91\xF3\xAEgk>QpR\xC4\xB9\x8A8\xD1\x8F\x89C\x1DO\xAB\xE0\xA8\xC4\x99J\x9C\xD89:\x87z\x9E6\xC1\xB9\x928\xD7\x12'\xFE\x11\xBDC]\xCF4\xD6E]\x0Fqn N\xC3\x87\xC4i\x00\xE0\xD3\x05g*qn$N\xE3\x07\xC4i\x04\xE03\x04\xE7Z\xE2\xCC\"N\xD3Y\xE24\x01\xF0\x9BX\x0F@\xE6\x06\xE2\xCC!N\xF3\x19\xE24\x03\xF0\xD9\x82s#q\xE63\x86r\xE2\xFF\\Q\xE9\xF0\xB9B\x05\xB3\x88q\v1\xE4\xFFuE\xB5\xC3o\x16\x8C9\xC4XH\x8C\t\xA7]\x11\xA9\xF9\x02\xC1\x98O\x8C%tH\xF2\x94\xEBU\x83|\x91\xE0\xDCB\x9C/\xD1+\xA9\xF7]\x91Qx/\xEB\xE2\xBD,\x9D\x19\"\x96C,\xE5\x7F\\\x91W\xF8f\xB6\x1A S \xC66b\xB4\x9C\xF4zw^f\xD4?n!\xC6\xD7\x18\xC3\xE4]y\x93\\\xAC?\x9F\xCFU\xFC8iZ\xCE|d\xC0\x90\x01\xA6M\xCB\x99=\x0F%`(y\xFF:;0\x02\f#\xDE\xBFys0\n\f\xA3\x80\xE9\x92x/F\xE5>`w\xC9{\xD1\x8F\x9D\xE2ogGPD\x95\xBCW}?\x1C\x19\xCC\xE5ub7\x01\xC3\xA6\xCA\xFFys\xB0\x19\x186\x13\\\x8D-N%\xB7$\xA9DD\x19\x18\xCA\x80bR\x80-\xC0\xB0\x050I\t.8\xD1\xAB7\xB4\b2\xF7\xF4\x83_\x98\xD4\xB2\xF1\xF9Q\xD0\"\f\x17\xA9(\x8AQ\xECw\xBD%\xEBt\x88\xE7J\xD4\xCD\xFA\xFB\xB8\"K\r\xEA\x03\x80\x06\xC4\xDCJ\xE2\x02\xC9\xB0\x83%\xBFo\xC5\x01\xA2I\vF\xAB\nv\xF9%H\xB8J\x9B\\\xA7\x15]^\xAF\x15\xA5\xE8\xB1\xC2\v\x8C\xA1\xA2\xC4\x1D4s\x06\xA5aJZ\xBE\xB6FLqJ(\x8F\x042\xD4m\x93\xD7\x94\v\xF8\xBBC@\x10\xAEj#\x807\xF4\xA9\x13\x00\xBC\xB9O\x1D\xFC\xCB\x91\xF3n]\xF8\xCB\xD1\x8F\xDD\xBA\xE8\x97c\xE7\xDC\xBA\xE0\x97\xE3\x1F\xB9u\xB1/7|\xE8\xD6\x85\xBE\xDC\xF8\x81[\x17\xF9r\xD3Y\xB7.\xF0\xE5\xE63\xEEg\x88{\xC4\xEA\x97\x1A\x01\x7F&\x13\xE8C\x9F\x16\xF8tAM\xBDO\xD4`\x80\xCFe\xD6\xC5e\x96\x06\x81w\f\r\x1Cy\x1B\xA3,\xDDr\x92\xA8\xC1\\\x9A7\xB2\r\xC0\xC2H\x87\x98\xC08\xC4<t{\xBF\x9D\x1D\xDE\xEF\xBC9\x10\xF3\xB0\f1\x1F\xC5\xFE\x03\xAD\xF0\x91\v\xB1\nf+OD\x138\x85\x98@\xA8?\xC5\x13\x98\xFCd,n\xF0\xB1\xB8\xA6\f\x12\xB5/a\b\x8E\x01`M\xD6\xEB\xF5f\x9C\x19s\xAB\xDF\xF3L\x15\x00Y\xDFA\xDE\xADhW\x03 \x13}\x0EJ\xCA\xA2\xE5\x00\x18Q\x16\xAC\x06\xC0\xA8r\xF3\x06\x00\x8C)s{\xA8\xC0Sn\xBA\x17 m\f\x17\x9Cr\xBC\xDFt\x92\xFDe\xC7p\x9D\xBB\xF3=e\xC7(\x02\x80;\x98/\xD9\xF4\x07\xB0\xE8\x1A\xE6\xA6!\xA7\xA7L\xE2\x14G\xFC\xBE\xD45\xAD\x9Ci\x19\x8B\xF3\x91\xE1B\xBEh:\xC6\xD8\x02GT\xD1\xABD0H\xD2sM\xDF1\xB3N\xDF19\xD4\x18\x84K\xEB0\xDE/\xEB\x00\xD0\x10\xF3\xD0\xEA\x17\x94\xC6\xD5\xD5\xF9\xB9\xD2\xB8\xC1\xED\v\xD5f\x9E<\xAB\xF2 e\rm~E\x1A^\xC6\xC9\x00\x19\x07%\xCCl\xC7@ ~\x8F\x180n#\xF2\xD7\xC5\x80\xD1O\xF6\xF7\xE1(@\xE6\xEBD\x7F\x8C\xE8\x927\xD3\xE4\x8F A\xE4/\x89\xFE\x84\x18T\xFA\x89~\xA7\xD8\xE71\xA2\xEF!z\xDC\x1Fl>+\xE8\xCF\x10\xFD \x12l]\x1F\xE8\x07\x90\x90\xF3\x121\x8E\x10\xA3Q\x14\xA6\xC1G5~\b\xBB\xF8!$44\x89\xEA4\xF8\xD0\xC4\x8F\"\xA1\xA7\xF9\x02Q\x83I?\xFF\t\x12F\x12\xE7\x89\x1A|\xBE\xE2\xCFb\x070Y\xFE\x98\xA8\xC1\xAC\x9F\xEF\xC4\r\xC0\x94HT\xC5\xA9\x00|\x87\x98\xBDn'I\xBE\x85\fgG\xA7\xA2\x8A\xD3\x00\xF8\xDF e\xDB'\x88\xB1\x1B\xC7\x86\xE4\xACY,\xE4\xF4\xF2*\x88\x87\xDB\xA3\n\x95\xE9\xC3F\x9Fm\f\x9A[V\x18\xD6&g\b*\t\xF2\xB2y\x92U1V|LS\x10\x18\xD7\x0F\xE6\x9Fnh\x96\xA4D\x11\xCC\xDB?\x05,='\x01\x10h\x0Ec3-J\xFF\xEA\xB1R\xDE\xAA\xD6\xFF\xBFs:k\x16E\xC24\x01\x07\xC6)\xA0\x05h\xBC\xB3\xE2\xFA\x80Q\xE9\xA5\x93\xE1\xF2y\xA1\xDFK\xA7\xA9y\xBA\xB3\xDA<\x8D\f\x8B~\xA3z~\xE5\x93t%\xE9\xF9c\x19H\x16\x8Ba}\x06\x1F`\xC7o\x86\xBD\xBB&\x1D3ois<\x91\xA8\xB0\xBAC\xB8\xE9\xED\xE4\x03Y\xF2k,\x88\xD1!\xD7\x85_o$zN\xE0f\xB3\x98\x1Er\x13\xEF\x04\xC8\f\x11\xDD\x11\xB8\xB1\xC5\x9C\x8Fo\x16\xEB\vD\xDF&\x06\xFFE1\x16\xE1e|`\f\xFE\xA2\x8E\x8A\x93\x04\xFEl\x80\xCC\xD7\x88\xFE\xB0\xC0YI\xF4\xCF\xFCA\xB1\x7F\x15\x7F\xF1\xBB\xC4g\x1A\xBES\xD0\x05\xFE\xBEC\xF4\x86\xBB\xC5\x87\x1A\xFEmA\xFF\x16\xD1\xBFO\xF4\xC6-\xE2S\r\xFF\x9E8\xF7\xFBD\x7F\x8E\xE8Me\x15\xAF\x02\xE0{\xC5\xB9{\x88\xFE\x02\xD1\x9B\xB7\xAA\xD8\x06\xC0\x9F\x17\xFB\xFC\x90\xE8/\x13=\xF1g*N\x01\x82\xDD\xA3\x00\x99\x97\x89\xFE\x1A\x8E;\xECp\x1D\xDD\xDEd8\xC5\xA5\x107sF\xE0\x18>u1$\xC9\xDDj\xC9\xBD\x10\xA7\xC2\xAF\x96\x8A\xFE\xB8\xC3\xA1\xBD\xC7\xF22\x90\x16~]K_\nIj\xA3j\xC9k!i\x99y\xAB\x96|+$\xC7\x8C\x14}\xF22\xF4\xF1a\\~\xF0JH\v\xC7\xAC\xA5\xF7A\x92PSK^\x84>\xB0\xF2h\x8D\x83\x12\xD1\xD0\xD7\xA0\x04\xBD\xE1R\xEDtm\xD2g2F^T\x11\xC9\xAA\x1D2\x86\xCBW\xE6\x97\xAF\x1D\xFE\x88\xB1\xCF\x9FrPv^\xD9Q\xADi\xC3c\xCEq\x06]\xE3\xC9\xF5\xFF\x01\x00\x00\xFF\xFF\\\xB8\xBC\xD5", new sliceType([new $Uint64(2280077605, 174123671), new $Uint64(2386255737, 4267259478), new $Uint64(2419348976, 1617248811), new $Uint64(2499857634, 993217920), new $Uint64(2542435563, 3696532045), new $Uint64(2544979134, 2097071890), new $Uint64(2595049636, 525005919), new $Uint64(2647783204, 4100016773), new $Uint64(2651748465, 444565417), new $Uint64(2661331355, 939213877), new $Uint64(2845190814, 3500464120), new $Uint64(2883007621, 2841865161), new $Uint64(2889510752, 4014786259), new $Uint64(2924495251, 304306149), new $Uint64(2978653612, 2047710240), new $Uint64(3041571638, 1127478680), new $Uint64(3109166028, 4044334001), new $Uint64(3136276754, 207020660), new $Uint64(3146831298, 2273774566), new $Uint64(3217377014, 554358734), new $Uint64(3260497896, 2721991153), new $Uint64(3290629447, 1806988399), new $Uint64(3361983766, 2526996476), new $Uint64(3405565403, 1759190289), new $Uint64(3458456786, 3618639003), new $Uint64(3488222896, 780206178), new $Uint64(3497228525, 3791244384), new $Uint64(3516239741, 3125942566), new $Uint64(3737081275, 4195336770), new $Uint64(3867323212, 4179862551), new $Uint64(3894891471, 4039254415), new $Uint64(3960871380, 1074397840), new $Uint64(3985361513, 4160425151), new $Uint64(4056454413, 2871358786)]));
	};
	Node.methods = [{prop: "Which", name: "Which", pkg: "", typ: $funcType([], [Node_Which], false)}, {prop: "Id", name: "Id", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "SetId", name: "SetId", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "DisplayName", name: "DisplayName", pkg: "", typ: $funcType([], [$String, $error], false)}, {prop: "HasDisplayName", name: "HasDisplayName", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "DisplayNameBytes", name: "DisplayNameBytes", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "SetDisplayName", name: "SetDisplayName", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "DisplayNamePrefixLength", name: "DisplayNamePrefixLength", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetDisplayNamePrefixLength", name: "SetDisplayNamePrefixLength", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "ScopeId", name: "ScopeId", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "SetScopeId", name: "SetScopeId", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Parameters", name: "Parameters", pkg: "", typ: $funcType([], [Node_Parameter_List, $error], false)}, {prop: "HasParameters", name: "HasParameters", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetParameters", name: "SetParameters", pkg: "", typ: $funcType([Node_Parameter_List], [$error], false)}, {prop: "NewParameters", name: "NewParameters", pkg: "", typ: $funcType([$Int32], [Node_Parameter_List, $error], false)}, {prop: "IsGeneric", name: "IsGeneric", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetIsGeneric", name: "SetIsGeneric", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "NestedNodes", name: "NestedNodes", pkg: "", typ: $funcType([], [Node_NestedNode_List, $error], false)}, {prop: "HasNestedNodes", name: "HasNestedNodes", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetNestedNodes", name: "SetNestedNodes", pkg: "", typ: $funcType([Node_NestedNode_List], [$error], false)}, {prop: "NewNestedNodes", name: "NewNestedNodes", pkg: "", typ: $funcType([$Int32], [Node_NestedNode_List, $error], false)}, {prop: "Annotations", name: "Annotations", pkg: "", typ: $funcType([], [Annotation_List, $error], false)}, {prop: "HasAnnotations", name: "HasAnnotations", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetAnnotations", name: "SetAnnotations", pkg: "", typ: $funcType([Annotation_List], [$error], false)}, {prop: "NewAnnotations", name: "NewAnnotations", pkg: "", typ: $funcType([$Int32], [Annotation_List, $error], false)}, {prop: "SetFile", name: "SetFile", pkg: "", typ: $funcType([], [], false)}, {prop: "StructNode", name: "StructNode", pkg: "", typ: $funcType([], [Node_structNode], false)}, {prop: "SetStructNode", name: "SetStructNode", pkg: "", typ: $funcType([], [], false)}, {prop: "Enum", name: "Enum", pkg: "", typ: $funcType([], [Node_enum], false)}, {prop: "SetEnum", name: "SetEnum", pkg: "", typ: $funcType([], [], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [Node_interface], false)}, {prop: "SetInterface", name: "SetInterface", pkg: "", typ: $funcType([], [], false)}, {prop: "Const", name: "Const", pkg: "", typ: $funcType([], [Node_const], false)}, {prop: "SetConst", name: "SetConst", pkg: "", typ: $funcType([], [], false)}, {prop: "Annotation", name: "Annotation", pkg: "", typ: $funcType([], [Node_annotation], false)}, {prop: "SetAnnotation", name: "SetAnnotation", pkg: "", typ: $funcType([], [], false)}];
	Node_structNode.methods = [{prop: "DataWordCount", name: "DataWordCount", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "SetDataWordCount", name: "SetDataWordCount", pkg: "", typ: $funcType([$Uint16], [], false)}, {prop: "PointerCount", name: "PointerCount", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "SetPointerCount", name: "SetPointerCount", pkg: "", typ: $funcType([$Uint16], [], false)}, {prop: "PreferredListEncoding", name: "PreferredListEncoding", pkg: "", typ: $funcType([], [ElementSize], false)}, {prop: "SetPreferredListEncoding", name: "SetPreferredListEncoding", pkg: "", typ: $funcType([ElementSize], [], false)}, {prop: "IsGroup", name: "IsGroup", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetIsGroup", name: "SetIsGroup", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "DiscriminantCount", name: "DiscriminantCount", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "SetDiscriminantCount", name: "SetDiscriminantCount", pkg: "", typ: $funcType([$Uint16], [], false)}, {prop: "DiscriminantOffset", name: "DiscriminantOffset", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetDiscriminantOffset", name: "SetDiscriminantOffset", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "Fields", name: "Fields", pkg: "", typ: $funcType([], [Field_List, $error], false)}, {prop: "HasFields", name: "HasFields", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetFields", name: "SetFields", pkg: "", typ: $funcType([Field_List], [$error], false)}, {prop: "NewFields", name: "NewFields", pkg: "", typ: $funcType([$Int32], [Field_List, $error], false)}];
	Node_enum.methods = [{prop: "Enumerants", name: "Enumerants", pkg: "", typ: $funcType([], [Enumerant_List, $error], false)}, {prop: "HasEnumerants", name: "HasEnumerants", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetEnumerants", name: "SetEnumerants", pkg: "", typ: $funcType([Enumerant_List], [$error], false)}, {prop: "NewEnumerants", name: "NewEnumerants", pkg: "", typ: $funcType([$Int32], [Enumerant_List, $error], false)}];
	Node_interface.methods = [{prop: "Methods", name: "Methods", pkg: "", typ: $funcType([], [Method_List, $error], false)}, {prop: "HasMethods", name: "HasMethods", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetMethods", name: "SetMethods", pkg: "", typ: $funcType([Method_List], [$error], false)}, {prop: "NewMethods", name: "NewMethods", pkg: "", typ: $funcType([$Int32], [Method_List, $error], false)}, {prop: "Superclasses", name: "Superclasses", pkg: "", typ: $funcType([], [Superclass_List, $error], false)}, {prop: "HasSuperclasses", name: "HasSuperclasses", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetSuperclasses", name: "SetSuperclasses", pkg: "", typ: $funcType([Superclass_List], [$error], false)}, {prop: "NewSuperclasses", name: "NewSuperclasses", pkg: "", typ: $funcType([$Int32], [Superclass_List, $error], false)}];
	Node_const.methods = [{prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type, $error], false)}, {prop: "HasType", name: "HasType", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetType", name: "SetType", pkg: "", typ: $funcType([Type], [$error], false)}, {prop: "NewType", name: "NewType", pkg: "", typ: $funcType([], [Type, $error], false)}, {prop: "Value", name: "Value", pkg: "", typ: $funcType([], [Value, $error], false)}, {prop: "HasValue", name: "HasValue", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetValue", name: "SetValue", pkg: "", typ: $funcType([Value], [$error], false)}, {prop: "NewValue", name: "NewValue", pkg: "", typ: $funcType([], [Value, $error], false)}];
	Node_annotation.methods = [{prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type, $error], false)}, {prop: "HasType", name: "HasType", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetType", name: "SetType", pkg: "", typ: $funcType([Type], [$error], false)}, {prop: "NewType", name: "NewType", pkg: "", typ: $funcType([], [Type, $error], false)}, {prop: "TargetsFile", name: "TargetsFile", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetTargetsFile", name: "SetTargetsFile", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "TargetsConst", name: "TargetsConst", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetTargetsConst", name: "SetTargetsConst", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "TargetsEnum", name: "TargetsEnum", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetTargetsEnum", name: "SetTargetsEnum", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "TargetsEnumerant", name: "TargetsEnumerant", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetTargetsEnumerant", name: "SetTargetsEnumerant", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "TargetsStruct", name: "TargetsStruct", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetTargetsStruct", name: "SetTargetsStruct", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "TargetsField", name: "TargetsField", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetTargetsField", name: "SetTargetsField", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "TargetsUnion", name: "TargetsUnion", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetTargetsUnion", name: "SetTargetsUnion", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "TargetsGroup", name: "TargetsGroup", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetTargetsGroup", name: "SetTargetsGroup", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "TargetsInterface", name: "TargetsInterface", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetTargetsInterface", name: "SetTargetsInterface", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "TargetsMethod", name: "TargetsMethod", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetTargetsMethod", name: "SetTargetsMethod", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "TargetsParam", name: "TargetsParam", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetTargetsParam", name: "SetTargetsParam", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "TargetsAnnotation", name: "TargetsAnnotation", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetTargetsAnnotation", name: "SetTargetsAnnotation", pkg: "", typ: $funcType([$Bool], [], false)}];
	Node_Which.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Node_List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [Node], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, Node], [$error], false)}];
	Node_Parameter.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String, $error], false)}, {prop: "HasName", name: "HasName", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "NameBytes", name: "NameBytes", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "SetName", name: "SetName", pkg: "", typ: $funcType([$String], [$error], false)}];
	Node_Parameter_List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [Node_Parameter], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, Node_Parameter], [$error], false)}];
	Node_NestedNode.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String, $error], false)}, {prop: "HasName", name: "HasName", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "NameBytes", name: "NameBytes", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "SetName", name: "SetName", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Id", name: "Id", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "SetId", name: "SetId", pkg: "", typ: $funcType([$Uint64], [], false)}];
	Node_NestedNode_List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [Node_NestedNode], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, Node_NestedNode], [$error], false)}];
	Field.methods = [{prop: "Which", name: "Which", pkg: "", typ: $funcType([], [Field_Which], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String, $error], false)}, {prop: "HasName", name: "HasName", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "NameBytes", name: "NameBytes", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "SetName", name: "SetName", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "CodeOrder", name: "CodeOrder", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "SetCodeOrder", name: "SetCodeOrder", pkg: "", typ: $funcType([$Uint16], [], false)}, {prop: "Annotations", name: "Annotations", pkg: "", typ: $funcType([], [Annotation_List, $error], false)}, {prop: "HasAnnotations", name: "HasAnnotations", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetAnnotations", name: "SetAnnotations", pkg: "", typ: $funcType([Annotation_List], [$error], false)}, {prop: "NewAnnotations", name: "NewAnnotations", pkg: "", typ: $funcType([$Int32], [Annotation_List, $error], false)}, {prop: "DiscriminantValue", name: "DiscriminantValue", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "SetDiscriminantValue", name: "SetDiscriminantValue", pkg: "", typ: $funcType([$Uint16], [], false)}, {prop: "Slot", name: "Slot", pkg: "", typ: $funcType([], [Field_slot], false)}, {prop: "SetSlot", name: "SetSlot", pkg: "", typ: $funcType([], [], false)}, {prop: "Group", name: "Group", pkg: "", typ: $funcType([], [Field_group], false)}, {prop: "SetGroup", name: "SetGroup", pkg: "", typ: $funcType([], [], false)}, {prop: "Ordinal", name: "Ordinal", pkg: "", typ: $funcType([], [Field_ordinal], false)}];
	Field_slot.methods = [{prop: "Offset", name: "Offset", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetOffset", name: "SetOffset", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type, $error], false)}, {prop: "HasType", name: "HasType", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetType", name: "SetType", pkg: "", typ: $funcType([Type], [$error], false)}, {prop: "NewType", name: "NewType", pkg: "", typ: $funcType([], [Type, $error], false)}, {prop: "DefaultValue", name: "DefaultValue", pkg: "", typ: $funcType([], [Value, $error], false)}, {prop: "HasDefaultValue", name: "HasDefaultValue", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetDefaultValue", name: "SetDefaultValue", pkg: "", typ: $funcType([Value], [$error], false)}, {prop: "NewDefaultValue", name: "NewDefaultValue", pkg: "", typ: $funcType([], [Value, $error], false)}, {prop: "HadExplicitDefault", name: "HadExplicitDefault", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetHadExplicitDefault", name: "SetHadExplicitDefault", pkg: "", typ: $funcType([$Bool], [], false)}];
	Field_group.methods = [{prop: "TypeId", name: "TypeId", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "SetTypeId", name: "SetTypeId", pkg: "", typ: $funcType([$Uint64], [], false)}];
	Field_ordinal.methods = [{prop: "Which", name: "Which", pkg: "", typ: $funcType([], [Field_ordinal_Which], false)}, {prop: "SetImplicit", name: "SetImplicit", pkg: "", typ: $funcType([], [], false)}, {prop: "Explicit", name: "Explicit", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "SetExplicit", name: "SetExplicit", pkg: "", typ: $funcType([$Uint16], [], false)}];
	Field_Which.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Field_ordinal_Which.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Field_List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [Field], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, Field], [$error], false)}];
	Enumerant.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String, $error], false)}, {prop: "HasName", name: "HasName", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "NameBytes", name: "NameBytes", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "SetName", name: "SetName", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "CodeOrder", name: "CodeOrder", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "SetCodeOrder", name: "SetCodeOrder", pkg: "", typ: $funcType([$Uint16], [], false)}, {prop: "Annotations", name: "Annotations", pkg: "", typ: $funcType([], [Annotation_List, $error], false)}, {prop: "HasAnnotations", name: "HasAnnotations", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetAnnotations", name: "SetAnnotations", pkg: "", typ: $funcType([Annotation_List], [$error], false)}, {prop: "NewAnnotations", name: "NewAnnotations", pkg: "", typ: $funcType([$Int32], [Annotation_List, $error], false)}];
	Enumerant_List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [Enumerant], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, Enumerant], [$error], false)}];
	Superclass.methods = [{prop: "Id", name: "Id", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "SetId", name: "SetId", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Brand", name: "Brand", pkg: "", typ: $funcType([], [Brand, $error], false)}, {prop: "HasBrand", name: "HasBrand", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetBrand", name: "SetBrand", pkg: "", typ: $funcType([Brand], [$error], false)}, {prop: "NewBrand", name: "NewBrand", pkg: "", typ: $funcType([], [Brand, $error], false)}];
	Superclass_List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [Superclass], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, Superclass], [$error], false)}];
	Method.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String, $error], false)}, {prop: "HasName", name: "HasName", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "NameBytes", name: "NameBytes", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "SetName", name: "SetName", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "CodeOrder", name: "CodeOrder", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "SetCodeOrder", name: "SetCodeOrder", pkg: "", typ: $funcType([$Uint16], [], false)}, {prop: "ImplicitParameters", name: "ImplicitParameters", pkg: "", typ: $funcType([], [Node_Parameter_List, $error], false)}, {prop: "HasImplicitParameters", name: "HasImplicitParameters", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetImplicitParameters", name: "SetImplicitParameters", pkg: "", typ: $funcType([Node_Parameter_List], [$error], false)}, {prop: "NewImplicitParameters", name: "NewImplicitParameters", pkg: "", typ: $funcType([$Int32], [Node_Parameter_List, $error], false)}, {prop: "ParamStructType", name: "ParamStructType", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "SetParamStructType", name: "SetParamStructType", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "ParamBrand", name: "ParamBrand", pkg: "", typ: $funcType([], [Brand, $error], false)}, {prop: "HasParamBrand", name: "HasParamBrand", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetParamBrand", name: "SetParamBrand", pkg: "", typ: $funcType([Brand], [$error], false)}, {prop: "NewParamBrand", name: "NewParamBrand", pkg: "", typ: $funcType([], [Brand, $error], false)}, {prop: "ResultStructType", name: "ResultStructType", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "SetResultStructType", name: "SetResultStructType", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "ResultBrand", name: "ResultBrand", pkg: "", typ: $funcType([], [Brand, $error], false)}, {prop: "HasResultBrand", name: "HasResultBrand", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetResultBrand", name: "SetResultBrand", pkg: "", typ: $funcType([Brand], [$error], false)}, {prop: "NewResultBrand", name: "NewResultBrand", pkg: "", typ: $funcType([], [Brand, $error], false)}, {prop: "Annotations", name: "Annotations", pkg: "", typ: $funcType([], [Annotation_List, $error], false)}, {prop: "HasAnnotations", name: "HasAnnotations", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetAnnotations", name: "SetAnnotations", pkg: "", typ: $funcType([Annotation_List], [$error], false)}, {prop: "NewAnnotations", name: "NewAnnotations", pkg: "", typ: $funcType([$Int32], [Annotation_List, $error], false)}];
	Method_List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, Method], [$error], false)}];
	Type.methods = [{prop: "Which", name: "Which", pkg: "", typ: $funcType([], [Type_Which], false)}, {prop: "SetVoid", name: "SetVoid", pkg: "", typ: $funcType([], [], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([], [], false)}, {prop: "SetInt8", name: "SetInt8", pkg: "", typ: $funcType([], [], false)}, {prop: "SetInt16", name: "SetInt16", pkg: "", typ: $funcType([], [], false)}, {prop: "SetInt32", name: "SetInt32", pkg: "", typ: $funcType([], [], false)}, {prop: "SetInt64", name: "SetInt64", pkg: "", typ: $funcType([], [], false)}, {prop: "SetUint8", name: "SetUint8", pkg: "", typ: $funcType([], [], false)}, {prop: "SetUint16", name: "SetUint16", pkg: "", typ: $funcType([], [], false)}, {prop: "SetUint32", name: "SetUint32", pkg: "", typ: $funcType([], [], false)}, {prop: "SetUint64", name: "SetUint64", pkg: "", typ: $funcType([], [], false)}, {prop: "SetFloat32", name: "SetFloat32", pkg: "", typ: $funcType([], [], false)}, {prop: "SetFloat64", name: "SetFloat64", pkg: "", typ: $funcType([], [], false)}, {prop: "SetText", name: "SetText", pkg: "", typ: $funcType([], [], false)}, {prop: "SetData", name: "SetData", pkg: "", typ: $funcType([], [], false)}, {prop: "List", name: "List", pkg: "", typ: $funcType([], [Type_list], false)}, {prop: "SetList", name: "SetList", pkg: "", typ: $funcType([], [], false)}, {prop: "Enum", name: "Enum", pkg: "", typ: $funcType([], [Type_enum], false)}, {prop: "SetEnum", name: "SetEnum", pkg: "", typ: $funcType([], [], false)}, {prop: "StructType", name: "StructType", pkg: "", typ: $funcType([], [Type_structType], false)}, {prop: "SetStructType", name: "SetStructType", pkg: "", typ: $funcType([], [], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [Type_interface], false)}, {prop: "SetInterface", name: "SetInterface", pkg: "", typ: $funcType([], [], false)}, {prop: "AnyPointer", name: "AnyPointer", pkg: "", typ: $funcType([], [Type_anyPointer], false)}, {prop: "SetAnyPointer", name: "SetAnyPointer", pkg: "", typ: $funcType([], [], false)}];
	Type_list.methods = [{prop: "ElementType", name: "ElementType", pkg: "", typ: $funcType([], [Type, $error], false)}, {prop: "HasElementType", name: "HasElementType", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetElementType", name: "SetElementType", pkg: "", typ: $funcType([Type], [$error], false)}, {prop: "NewElementType", name: "NewElementType", pkg: "", typ: $funcType([], [Type, $error], false)}];
	Type_enum.methods = [{prop: "TypeId", name: "TypeId", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "SetTypeId", name: "SetTypeId", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Brand", name: "Brand", pkg: "", typ: $funcType([], [Brand, $error], false)}, {prop: "HasBrand", name: "HasBrand", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetBrand", name: "SetBrand", pkg: "", typ: $funcType([Brand], [$error], false)}, {prop: "NewBrand", name: "NewBrand", pkg: "", typ: $funcType([], [Brand, $error], false)}];
	Type_structType.methods = [{prop: "TypeId", name: "TypeId", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "SetTypeId", name: "SetTypeId", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Brand", name: "Brand", pkg: "", typ: $funcType([], [Brand, $error], false)}, {prop: "HasBrand", name: "HasBrand", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetBrand", name: "SetBrand", pkg: "", typ: $funcType([Brand], [$error], false)}, {prop: "NewBrand", name: "NewBrand", pkg: "", typ: $funcType([], [Brand, $error], false)}];
	Type_interface.methods = [{prop: "TypeId", name: "TypeId", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "SetTypeId", name: "SetTypeId", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Brand", name: "Brand", pkg: "", typ: $funcType([], [Brand, $error], false)}, {prop: "HasBrand", name: "HasBrand", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetBrand", name: "SetBrand", pkg: "", typ: $funcType([Brand], [$error], false)}, {prop: "NewBrand", name: "NewBrand", pkg: "", typ: $funcType([], [Brand, $error], false)}];
	Type_anyPointer.methods = [{prop: "Which", name: "Which", pkg: "", typ: $funcType([], [Type_anyPointer_Which], false)}, {prop: "Unconstrained", name: "Unconstrained", pkg: "", typ: $funcType([], [Type_anyPointer_unconstrained], false)}, {prop: "SetUnconstrained", name: "SetUnconstrained", pkg: "", typ: $funcType([], [], false)}, {prop: "Parameter", name: "Parameter", pkg: "", typ: $funcType([], [Type_anyPointer_parameter], false)}, {prop: "SetParameter", name: "SetParameter", pkg: "", typ: $funcType([], [], false)}, {prop: "ImplicitMethodParameter", name: "ImplicitMethodParameter", pkg: "", typ: $funcType([], [Type_anyPointer_implicitMethodParameter], false)}, {prop: "SetImplicitMethodParameter", name: "SetImplicitMethodParameter", pkg: "", typ: $funcType([], [], false)}];
	Type_anyPointer_unconstrained.methods = [{prop: "Which", name: "Which", pkg: "", typ: $funcType([], [Type_anyPointer_unconstrained_Which], false)}, {prop: "SetAnyKind", name: "SetAnyKind", pkg: "", typ: $funcType([], [], false)}, {prop: "SetStruct", name: "SetStruct", pkg: "", typ: $funcType([], [], false)}, {prop: "SetList", name: "SetList", pkg: "", typ: $funcType([], [], false)}, {prop: "SetCapability", name: "SetCapability", pkg: "", typ: $funcType([], [], false)}];
	Type_anyPointer_parameter.methods = [{prop: "ScopeId", name: "ScopeId", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "SetScopeId", name: "SetScopeId", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "ParameterIndex", name: "ParameterIndex", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "SetParameterIndex", name: "SetParameterIndex", pkg: "", typ: $funcType([$Uint16], [], false)}];
	Type_anyPointer_implicitMethodParameter.methods = [{prop: "ParameterIndex", name: "ParameterIndex", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "SetParameterIndex", name: "SetParameterIndex", pkg: "", typ: $funcType([$Uint16], [], false)}];
	Type_Which.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Type_anyPointer_Which.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Type_anyPointer_unconstrained_Which.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Brand.methods = [{prop: "Scopes", name: "Scopes", pkg: "", typ: $funcType([], [Brand_Scope_List, $error], false)}, {prop: "HasScopes", name: "HasScopes", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetScopes", name: "SetScopes", pkg: "", typ: $funcType([Brand_Scope_List], [$error], false)}, {prop: "NewScopes", name: "NewScopes", pkg: "", typ: $funcType([$Int32], [Brand_Scope_List, $error], false)}];
	Brand_Scope.methods = [{prop: "Which", name: "Which", pkg: "", typ: $funcType([], [Brand_Scope_Which], false)}, {prop: "ScopeId", name: "ScopeId", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "SetScopeId", name: "SetScopeId", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Bind", name: "Bind", pkg: "", typ: $funcType([], [Brand_Binding_List, $error], false)}, {prop: "HasBind", name: "HasBind", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetBind", name: "SetBind", pkg: "", typ: $funcType([Brand_Binding_List], [$error], false)}, {prop: "NewBind", name: "NewBind", pkg: "", typ: $funcType([$Int32], [Brand_Binding_List, $error], false)}, {prop: "SetInherit", name: "SetInherit", pkg: "", typ: $funcType([], [], false)}];
	Brand_Scope_Which.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Brand_Scope_List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [Brand_Scope], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, Brand_Scope], [$error], false)}];
	Brand_Binding.methods = [{prop: "Which", name: "Which", pkg: "", typ: $funcType([], [Brand_Binding_Which], false)}, {prop: "SetUnbound", name: "SetUnbound", pkg: "", typ: $funcType([], [], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type, $error], false)}, {prop: "HasType", name: "HasType", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetType", name: "SetType", pkg: "", typ: $funcType([Type], [$error], false)}, {prop: "NewType", name: "NewType", pkg: "", typ: $funcType([], [Type, $error], false)}];
	Brand_Binding_Which.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Brand_Binding_List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [Brand_Binding], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, Brand_Binding], [$error], false)}];
	Value.methods = [{prop: "Which", name: "Which", pkg: "", typ: $funcType([], [Value_Which], false)}, {prop: "SetVoid", name: "SetVoid", pkg: "", typ: $funcType([], [], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "Int8", name: "Int8", pkg: "", typ: $funcType([], [$Int8], false)}, {prop: "SetInt8", name: "SetInt8", pkg: "", typ: $funcType([$Int8], [], false)}, {prop: "Int16", name: "Int16", pkg: "", typ: $funcType([], [$Int16], false)}, {prop: "SetInt16", name: "SetInt16", pkg: "", typ: $funcType([$Int16], [], false)}, {prop: "Int32", name: "Int32", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "SetInt32", name: "SetInt32", pkg: "", typ: $funcType([$Int32], [], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "SetInt64", name: "SetInt64", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Uint8", name: "Uint8", pkg: "", typ: $funcType([], [$Uint8], false)}, {prop: "SetUint8", name: "SetUint8", pkg: "", typ: $funcType([$Uint8], [], false)}, {prop: "Uint16", name: "Uint16", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "SetUint16", name: "SetUint16", pkg: "", typ: $funcType([$Uint16], [], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetUint32", name: "SetUint32", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "SetUint64", name: "SetUint64", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Float32", name: "Float32", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "SetFloat32", name: "SetFloat32", pkg: "", typ: $funcType([$Float32], [], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "SetFloat64", name: "SetFloat64", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "Text", name: "Text", pkg: "", typ: $funcType([], [$String, $error], false)}, {prop: "HasText", name: "HasText", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "TextBytes", name: "TextBytes", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "SetText", name: "SetText", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Data", name: "Data", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "HasData", name: "HasData", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetData", name: "SetData", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "List", name: "List", pkg: "", typ: $funcType([], [capnp.Pointer, $error], false)}, {prop: "HasList", name: "HasList", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ListPtr", name: "ListPtr", pkg: "", typ: $funcType([], [capnp.Ptr, $error], false)}, {prop: "SetList", name: "SetList", pkg: "", typ: $funcType([capnp.Pointer], [$error], false)}, {prop: "SetListPtr", name: "SetListPtr", pkg: "", typ: $funcType([capnp.Ptr], [$error], false)}, {prop: "Enum", name: "Enum", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "SetEnum", name: "SetEnum", pkg: "", typ: $funcType([$Uint16], [], false)}, {prop: "StructValue", name: "StructValue", pkg: "", typ: $funcType([], [capnp.Pointer, $error], false)}, {prop: "HasStructValue", name: "HasStructValue", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "StructValuePtr", name: "StructValuePtr", pkg: "", typ: $funcType([], [capnp.Ptr, $error], false)}, {prop: "SetStructValue", name: "SetStructValue", pkg: "", typ: $funcType([capnp.Pointer], [$error], false)}, {prop: "SetStructValuePtr", name: "SetStructValuePtr", pkg: "", typ: $funcType([capnp.Ptr], [$error], false)}, {prop: "SetInterface", name: "SetInterface", pkg: "", typ: $funcType([], [], false)}, {prop: "AnyPointer", name: "AnyPointer", pkg: "", typ: $funcType([], [capnp.Pointer, $error], false)}, {prop: "HasAnyPointer", name: "HasAnyPointer", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "AnyPointerPtr", name: "AnyPointerPtr", pkg: "", typ: $funcType([], [capnp.Ptr, $error], false)}, {prop: "SetAnyPointer", name: "SetAnyPointer", pkg: "", typ: $funcType([capnp.Pointer], [$error], false)}, {prop: "SetAnyPointerPtr", name: "SetAnyPointerPtr", pkg: "", typ: $funcType([capnp.Ptr], [$error], false)}];
	Value_Which.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Annotation.methods = [{prop: "Id", name: "Id", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "SetId", name: "SetId", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Brand", name: "Brand", pkg: "", typ: $funcType([], [Brand, $error], false)}, {prop: "HasBrand", name: "HasBrand", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetBrand", name: "SetBrand", pkg: "", typ: $funcType([Brand], [$error], false)}, {prop: "NewBrand", name: "NewBrand", pkg: "", typ: $funcType([], [Brand, $error], false)}, {prop: "Value", name: "Value", pkg: "", typ: $funcType([], [Value, $error], false)}, {prop: "HasValue", name: "HasValue", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetValue", name: "SetValue", pkg: "", typ: $funcType([Value], [$error], false)}, {prop: "NewValue", name: "NewValue", pkg: "", typ: $funcType([], [Value, $error], false)}];
	Annotation_List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [Annotation], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, Annotation], [$error], false)}];
	ElementSize.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	CodeGeneratorRequest.methods = [{prop: "Nodes", name: "Nodes", pkg: "", typ: $funcType([], [Node_List, $error], false)}, {prop: "HasNodes", name: "HasNodes", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetNodes", name: "SetNodes", pkg: "", typ: $funcType([Node_List], [$error], false)}, {prop: "NewNodes", name: "NewNodes", pkg: "", typ: $funcType([$Int32], [Node_List, $error], false)}, {prop: "RequestedFiles", name: "RequestedFiles", pkg: "", typ: $funcType([], [CodeGeneratorRequest_RequestedFile_List, $error], false)}, {prop: "HasRequestedFiles", name: "HasRequestedFiles", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetRequestedFiles", name: "SetRequestedFiles", pkg: "", typ: $funcType([CodeGeneratorRequest_RequestedFile_List], [$error], false)}, {prop: "NewRequestedFiles", name: "NewRequestedFiles", pkg: "", typ: $funcType([$Int32], [CodeGeneratorRequest_RequestedFile_List, $error], false)}];
	CodeGeneratorRequest_RequestedFile.methods = [{prop: "Id", name: "Id", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "SetId", name: "SetId", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Filename", name: "Filename", pkg: "", typ: $funcType([], [$String, $error], false)}, {prop: "HasFilename", name: "HasFilename", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "FilenameBytes", name: "FilenameBytes", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "SetFilename", name: "SetFilename", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Imports", name: "Imports", pkg: "", typ: $funcType([], [CodeGeneratorRequest_RequestedFile_Import_List, $error], false)}, {prop: "HasImports", name: "HasImports", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetImports", name: "SetImports", pkg: "", typ: $funcType([CodeGeneratorRequest_RequestedFile_Import_List], [$error], false)}, {prop: "NewImports", name: "NewImports", pkg: "", typ: $funcType([$Int32], [CodeGeneratorRequest_RequestedFile_Import_List, $error], false)}];
	CodeGeneratorRequest_RequestedFile_List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [CodeGeneratorRequest_RequestedFile], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, CodeGeneratorRequest_RequestedFile], [$error], false)}];
	CodeGeneratorRequest_RequestedFile_Import.methods = [{prop: "Id", name: "Id", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "SetId", name: "SetId", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String, $error], false)}, {prop: "HasName", name: "HasName", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "NameBytes", name: "NameBytes", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "SetName", name: "SetName", pkg: "", typ: $funcType([$String], [$error], false)}];
	CodeGeneratorRequest_RequestedFile_Import_List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [CodeGeneratorRequest_RequestedFile_Import], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, CodeGeneratorRequest_RequestedFile_Import], [$error], false)}];
	Node.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Node_structNode.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Node_enum.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Node_interface.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Node_const.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Node_annotation.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Node_List.init("", [{prop: "List", name: "", exported: true, typ: capnp.List, tag: ""}]);
	Node_Parameter.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Node_Parameter_List.init("", [{prop: "List", name: "", exported: true, typ: capnp.List, tag: ""}]);
	Node_NestedNode.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Node_NestedNode_List.init("", [{prop: "List", name: "", exported: true, typ: capnp.List, tag: ""}]);
	Field.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Field_slot.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Field_group.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Field_ordinal.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Field_List.init("", [{prop: "List", name: "", exported: true, typ: capnp.List, tag: ""}]);
	Enumerant.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Enumerant_List.init("", [{prop: "List", name: "", exported: true, typ: capnp.List, tag: ""}]);
	Superclass.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Superclass_List.init("", [{prop: "List", name: "", exported: true, typ: capnp.List, tag: ""}]);
	Method.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Method_List.init("", [{prop: "List", name: "", exported: true, typ: capnp.List, tag: ""}]);
	Type.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Type_list.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Type_enum.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Type_structType.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Type_interface.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Type_anyPointer.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Type_anyPointer_unconstrained.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Type_anyPointer_parameter.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Type_anyPointer_implicitMethodParameter.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Brand.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Brand_Scope.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Brand_Scope_List.init("", [{prop: "List", name: "", exported: true, typ: capnp.List, tag: ""}]);
	Brand_Binding.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Brand_Binding_List.init("", [{prop: "List", name: "", exported: true, typ: capnp.List, tag: ""}]);
	Value.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Annotation.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Annotation_List.init("", [{prop: "List", name: "", exported: true, typ: capnp.List, tag: ""}]);
	CodeGeneratorRequest.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	CodeGeneratorRequest_RequestedFile.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	CodeGeneratorRequest_RequestedFile_List.init("", [{prop: "List", name: "", exported: true, typ: capnp.List, tag: ""}]);
	CodeGeneratorRequest_RequestedFile_Import.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	CodeGeneratorRequest_RequestedFile_Import_List.init("", [{prop: "List", name: "", exported: true, typ: capnp.List, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = math.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = capnp.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = schemas.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["zombiezen.com/go/capnproto2/internal/nodemap"] = (function() {
	var $pkg = {}, $init, capnp, schemas, schema, Map, ptrType, ptrType$1, ptrType$2, mapType;
	capnp = $packages["zombiezen.com/go/capnproto2"];
	schemas = $packages["zombiezen.com/go/capnproto2/schemas"];
	schema = $packages["zombiezen.com/go/capnproto2/std/capnp/schema"];
	Map = $pkg.Map = $newType(0, $kindStruct, "nodemap.Map", true, "zombiezen.com/go/capnproto2/internal/nodemap", true, function(reg_, nodes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.reg = ptrType.nil;
			this.nodes = false;
			return;
		}
		this.reg = reg_;
		this.nodes = nodes_;
	});
	ptrType = $ptrType(schemas.Registry);
	ptrType$1 = $ptrType(capnp.Segment);
	ptrType$2 = $ptrType(Map);
	mapType = $mapType($Uint64, schema.Node);
	Map.ptr.prototype.registry = function() {
		var $ptr, m;
		m = this;
		if (!(m.reg === ptrType.nil)) {
			return m.reg;
		}
		return schemas.DefaultRegistry;
	};
	Map.prototype.registry = function() { return this.$val.registry(); };
	Map.ptr.prototype.UseRegistry = function(reg) {
		var $ptr, m, reg;
		m = this;
		m.reg = reg;
		m.nodes = {};
	};
	Map.prototype.UseRegistry = function(reg) { return this.$val.UseRegistry(reg); };
	Map.ptr.prototype.Find = function(id) {
		var $ptr, _entry, _entry$1, _key, _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, _tuple$3, data, err, i, id, m, msg, n, n$1, nodes, req, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; data = $f.data; err = $f.err; i = $f.i; id = $f.id; m = $f.m; msg = $f.msg; n = $f.n; n$1 = $f.n$1; nodes = $f.nodes; req = $f.req; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		n = $clone((_entry = m.nodes[$Uint64.keyFor(id)], _entry !== undefined ? _entry.v : new schema.Node.ptr(new capnp.Struct.ptr(ptrType$1.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0))), schema.Node);
		if ($clone(n.Struct, capnp.Struct).IsValid()) {
			$s = -1; return [n, $ifaceNil];
		}
		_r = m.registry().Find(id); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		data = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new schema.Node.ptr(new capnp.Struct.ptr(ptrType$1.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_tuple$1 = capnp.Unmarshal(data);
		msg = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new schema.Node.ptr(new capnp.Struct.ptr(ptrType$1.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = schema.ReadRootCodeGeneratorRequest(msg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$2 = _r$1;
		req = $clone(_tuple$2[0], schema.CodeGeneratorRequest);
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new schema.Node.ptr(new capnp.Struct.ptr(ptrType$1.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$2 = $clone(req, schema.CodeGeneratorRequest).Nodes(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$3 = _r$2;
		nodes = $clone(_tuple$3[0], schema.Node_List);
		err = _tuple$3[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new schema.Node.ptr(new capnp.Struct.ptr(ptrType$1.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		if (m.nodes === false) {
			m.nodes = {};
		}
		i = 0;
		while (true) {
			if (!(i < $clone(nodes.List, capnp.List).Len())) { break; }
			n$1 = $clone($clone(nodes, schema.Node_List).At(i), schema.Node);
			_key = $clone(n$1, schema.Node).Id(); (m.nodes || $throwRuntimeError("assignment to entry in nil map"))[$Uint64.keyFor(_key)] = { k: _key, v: $clone(n$1, schema.Node) };
			i = i + (1) >> 0;
		}
		$s = -1; return [(_entry$1 = m.nodes[$Uint64.keyFor(id)], _entry$1 !== undefined ? _entry$1.v : new schema.Node.ptr(new capnp.Struct.ptr(ptrType$1.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0))), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Find }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.data = data; $f.err = err; $f.i = i; $f.id = id; $f.m = m; $f.msg = msg; $f.n = n; $f.n$1 = n$1; $f.nodes = nodes; $f.req = req; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Find = function(id) { return this.$val.Find(id); };
	ptrType$2.methods = [{prop: "registry", name: "registry", pkg: "zombiezen.com/go/capnproto2/internal/nodemap", typ: $funcType([], [ptrType], false)}, {prop: "UseRegistry", name: "UseRegistry", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "Find", name: "Find", pkg: "", typ: $funcType([$Uint64], [schema.Node, $error], false)}];
	Map.init("zombiezen.com/go/capnproto2/internal/nodemap", [{prop: "reg", name: "reg", exported: false, typ: ptrType, tag: ""}, {prop: "nodes", name: "nodes", exported: false, typ: mapType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = capnp.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = schemas.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = schema.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["zombiezen.com/go/capnproto2/encoding/text"] = (function() {
	var $pkg = {}, $init, bytes, fmt, io, math, strconv, capnp, nodemap, schemas, schema, Encoder, errWriter, sliceType, arrayType, ptrType, sliceType$1, sliceType$2, ptrType$1, ptrType$2, ptrType$3, Marshal, NewEncoder, needsEscape, hexDigit, codeOrderFields;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	math = $packages["math"];
	strconv = $packages["strconv"];
	capnp = $packages["zombiezen.com/go/capnproto2"];
	nodemap = $packages["zombiezen.com/go/capnproto2/internal/nodemap"];
	schemas = $packages["zombiezen.com/go/capnproto2/schemas"];
	schema = $packages["zombiezen.com/go/capnproto2/std/capnp/schema"];
	Encoder = $pkg.Encoder = $newType(0, $kindStruct, "text.Encoder", true, "zombiezen.com/go/capnproto2/encoding/text", true, function(w_, tmp_, nodes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new errWriter.ptr($ifaceNil, $ifaceNil);
			this.tmp = sliceType.nil;
			this.nodes = new nodemap.Map.ptr(ptrType.nil, false);
			return;
		}
		this.w = w_;
		this.tmp = tmp_;
		this.nodes = nodes_;
	});
	errWriter = $pkg.errWriter = $newType(0, $kindStruct, "text.errWriter", true, "zombiezen.com/go/capnproto2/encoding/text", false, function(w_, err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = $ifaceNil;
			this.err = $ifaceNil;
			return;
		}
		this.w = w_;
		this.err = err_;
	});
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 64);
	ptrType = $ptrType(schemas.Registry);
	sliceType$1 = $sliceType($emptyInterface);
	sliceType$2 = $sliceType(schema.Field);
	ptrType$1 = $ptrType(capnp.Segment);
	ptrType$2 = $ptrType(Encoder);
	ptrType$3 = $ptrType(errWriter);
	Marshal = function(typeID, s) {
		var $ptr, _r, buf, err, s, typeID, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; buf = $f.buf; err = $f.err; s = $f.s; typeID = $f.typeID; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), 0);
		_r = NewEncoder(buf).Encode(typeID, $clone(s, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		$s = -1; return [buf.String(), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Marshal }; } $f.$ptr = $ptr; $f._r = _r; $f.buf = buf; $f.err = err; $f.s = s; $f.typeID = typeID; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Marshal = Marshal;
	NewEncoder = function(w) {
		var $ptr, w;
		return new Encoder.ptr(new errWriter.ptr(w, $ifaceNil), sliceType.nil, new nodemap.Map.ptr(ptrType.nil, false));
	};
	$pkg.NewEncoder = NewEncoder;
	Encoder.ptr.prototype.UseRegistry = function(reg) {
		var $ptr, enc, reg;
		enc = this;
		enc.nodes.UseRegistry(reg);
	};
	Encoder.prototype.UseRegistry = function(reg) { return this.$val.UseRegistry(reg); };
	Encoder.ptr.prototype.Encode = function(typeID, s) {
		var $ptr, _r, enc, err, s, typeID, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; enc = $f.enc; err = $f.err; s = $f.s; typeID = $f.typeID; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		if (!($interfaceIsEqual(enc.w.err, $ifaceNil))) {
			$s = -1; return enc.w.err;
		}
		_r = enc.marshalStruct(typeID, $clone(s, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$s = -1; return enc.w.err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.Encode }; } $f.$ptr = $ptr; $f._r = _r; $f.enc = enc; $f.err = err; $f.s = s; $f.typeID = typeID; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.Encode = function(typeID, s) { return this.$val.Encode(typeID, s); };
	Encoder.ptr.prototype.marshalBool = function(v) {
		var $ptr, _r, _r$1, enc, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; enc = $f.enc; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		/* */ if (v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v) { */ case 1:
			_r = enc.w.WriteString("true"); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = enc.w.WriteString("false"); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.marshalBool }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.enc = enc; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.marshalBool = function(v) { return this.$val.marshalBool(v); };
	Encoder.ptr.prototype.marshalInt = function(i) {
		var $ptr, _r, enc, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; enc = $f.enc; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		enc.tmp = strconv.AppendInt($subslice(enc.tmp, 0, 0), i, 10);
		_r = enc.w.Write(enc.tmp); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.marshalInt }; } $f.$ptr = $ptr; $f._r = _r; $f.enc = enc; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.marshalInt = function(i) { return this.$val.marshalInt(i); };
	Encoder.ptr.prototype.marshalUint = function(i) {
		var $ptr, _r, enc, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; enc = $f.enc; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		enc.tmp = strconv.AppendUint($subslice(enc.tmp, 0, 0), i, 10);
		_r = enc.w.Write(enc.tmp); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.marshalUint }; } $f.$ptr = $ptr; $f._r = _r; $f.enc = enc; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.marshalUint = function(i) { return this.$val.marshalUint(i); };
	Encoder.ptr.prototype.marshalFloat32 = function(f) {
		var $ptr, _r, enc, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; enc = $f.enc; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		enc.tmp = strconv.AppendFloat($subslice(enc.tmp, 0, 0), f, 103, -1, 32);
		_r = enc.w.Write(enc.tmp); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.marshalFloat32 }; } $f.$ptr = $ptr; $f._r = _r; $f.enc = enc; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.marshalFloat32 = function(f) { return this.$val.marshalFloat32(f); };
	Encoder.ptr.prototype.marshalFloat64 = function(f) {
		var $ptr, _r, enc, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; enc = $f.enc; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		enc.tmp = strconv.AppendFloat($subslice(enc.tmp, 0, 0), f, 103, -1, 64);
		_r = enc.w.Write(enc.tmp); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.marshalFloat64 }; } $f.$ptr = $ptr; $f._r = _r; $f.enc = enc; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.marshalFloat64 = function(f) { return this.$val.marshalFloat64(f); };
	Encoder.ptr.prototype.marshalText = function(t) {
		var $ptr, _1, _i, _q, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, b, enc, i, last, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; b = $f.b; enc = $f.enc; i = $f.i; last = $f.last; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		_r = enc.w.WriteByte(34); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		last = 0;
		_ref = t;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (!needsEscape(b)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!needsEscape(b)) { */ case 4:
				_i++;
				/* continue; */ $s = 2; continue;
			/* } */ case 5:
			_r$1 = enc.w.Write($subslice(t, last, i)); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
				_1 = b;
				/* */ if (_1 === (7)) { $s = 8; continue; }
				/* */ if (_1 === (8)) { $s = 9; continue; }
				/* */ if (_1 === (12)) { $s = 10; continue; }
				/* */ if (_1 === (10)) { $s = 11; continue; }
				/* */ if (_1 === (13)) { $s = 12; continue; }
				/* */ if (_1 === (9)) { $s = 13; continue; }
				/* */ if (_1 === (11)) { $s = 14; continue; }
				/* */ if (_1 === (39)) { $s = 15; continue; }
				/* */ if (_1 === (34)) { $s = 16; continue; }
				/* */ if (_1 === (92)) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (_1 === (7)) { */ case 8:
					_r$2 = enc.w.WriteString("\\a"); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
					$s = 19; continue;
				/* } else if (_1 === (8)) { */ case 9:
					_r$3 = enc.w.WriteString("\\b"); /* */ $s = 21; case 21: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$3;
					$s = 19; continue;
				/* } else if (_1 === (12)) { */ case 10:
					_r$4 = enc.w.WriteString("\\f"); /* */ $s = 22; case 22: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
					$s = 19; continue;
				/* } else if (_1 === (10)) { */ case 11:
					_r$5 = enc.w.WriteString("\\n"); /* */ $s = 23; case 23: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$5;
					$s = 19; continue;
				/* } else if (_1 === (13)) { */ case 12:
					_r$6 = enc.w.WriteString("\\r"); /* */ $s = 24; case 24: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$6;
					$s = 19; continue;
				/* } else if (_1 === (9)) { */ case 13:
					_r$7 = enc.w.WriteString("\\t"); /* */ $s = 25; case 25: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_r$7;
					$s = 19; continue;
				/* } else if (_1 === (11)) { */ case 14:
					_r$8 = enc.w.WriteString("\\v"); /* */ $s = 26; case 26: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$8;
					$s = 19; continue;
				/* } else if (_1 === (39)) { */ case 15:
					_r$9 = enc.w.WriteString("\\'"); /* */ $s = 27; case 27: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_r$9;
					$s = 19; continue;
				/* } else if (_1 === (34)) { */ case 16:
					_r$10 = enc.w.WriteString("\\\""); /* */ $s = 28; case 28: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_r$10;
					$s = 19; continue;
				/* } else if (_1 === (92)) { */ case 17:
					_r$11 = enc.w.WriteString("\\\\"); /* */ $s = 29; case 29: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_r$11;
					$s = 19; continue;
				/* } else { */ case 18:
					_r$12 = enc.w.WriteString("\\x"); /* */ $s = 30; case 30: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_r$12;
					_r$13 = enc.w.WriteByte(hexDigit((_q = b / 16, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")))); /* */ $s = 31; case 31: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_r$13;
					_r$15 = enc.w.WriteByte(hexDigit((_r$14 = b % 16, _r$14 === _r$14 ? _r$14 : $throwRuntimeError("integer divide by zero")))); /* */ $s = 32; case 32: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					_r$15;
				/* } */ case 19:
			case 7:
			last = i + 1 >> 0;
			_i++;
		/* } */ $s = 2; continue; case 3:
		_r$16 = enc.w.Write($subslice(t, last)); /* */ $s = 33; case 33: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$16;
		_r$17 = enc.w.WriteByte(34); /* */ $s = 34; case 34: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_r$17;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.marshalText }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.b = b; $f.enc = enc; $f.i = i; $f.last = last; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.marshalText = function(t) { return this.$val.marshalText(t); };
	needsEscape = function(b) {
		var $ptr, b;
		return b < 32 || b >= 127;
	};
	hexDigit = function(b) {
		var $ptr, b;
		return "0123456789abcdef".charCodeAt(b);
	};
	Encoder.ptr.prototype.marshalStruct = function(typeID, s) {
		var $ptr, _1, _i, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, discriminant, dv, enc, err, err$1, err$2, err$3, f, fields, first, n, name, s, typeID, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; discriminant = $f.discriminant; dv = $f.dv; enc = $f.enc; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; f = $f.f; fields = $f.fields; first = $f.first; n = $f.n; name = $f.name; s = $f.s; typeID = $f.typeID; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		_r = enc.nodes.Find(typeID); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = $clone(_tuple[0], schema.Node);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		/* */ if (!$clone(n.Struct, capnp.Struct).IsValid() || !(($clone(n, schema.Node).Which() === 1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!$clone(n.Struct, capnp.Struct).IsValid() || !(($clone(n, schema.Node).Which() === 1))) { */ case 2:
			_r$1 = fmt.Errorf("cannot find struct type %#x", new sliceType$1([typeID])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		discriminant = 0;
		if ($clone($clone(n, schema.Node).StructNode(), schema.Node_structNode).DiscriminantCount() > 0) {
			discriminant = $clone(s, capnp.Struct).Uint16((($imul($clone($clone(n, schema.Node).StructNode(), schema.Node_structNode).DiscriminantOffset(), 2) >>> 0) >>> 0));
		}
		_r$2 = enc.w.WriteByte(40); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = codeOrderFields($clone($clone(n, schema.Node).StructNode(), schema.Node_structNode)); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		fields = _r$3;
		first = true;
		_ref = fields;
		_i = 0;
		/* while (true) { */ case 7:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
			f = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), schema.Field);
			/* */ if (!(($clone(f, schema.Field).Which() === 0) || ($clone(f, schema.Field).Which() === 1))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!(($clone(f, schema.Field).Which() === 0) || ($clone(f, schema.Field).Which() === 1))) { */ case 9:
				_i++;
				/* continue; */ $s = 7; continue;
			/* } */ case 10:
			dv = $clone(f, schema.Field).DiscriminantValue();
			if (!((dv === 65535) || (dv === discriminant))) {
				_i++;
				/* continue; */ $s = 7; continue;
			}
			/* */ if (!first) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (!first) { */ case 11:
				_r$4 = enc.w.WriteString(", "); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
			/* } */ case 12:
			first = false;
			_r$5 = $clone(f, schema.Field).NameBytes(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$1 = _r$5;
			name = _tuple$1[0];
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return err$1;
			}
			_r$6 = enc.w.Write(name); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			_r$7 = enc.w.WriteString(" = "); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7;
				_1 = $clone(f, schema.Field).Which();
				/* */ if (_1 === (0)) { $s = 18; continue; }
				/* */ if (_1 === (1)) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (_1 === (0)) { */ case 18:
					_r$8 = enc.marshalFieldValue($clone(s, capnp.Struct), $clone(f, schema.Field)); /* */ $s = 21; case 21: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					err$2 = _r$8;
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						$s = -1; return err$2;
					}
					$s = 20; continue;
				/* } else if (_1 === (1)) { */ case 19:
					_r$9 = enc.marshalStruct($clone($clone(f, schema.Field).Group(), schema.Field_group).TypeId(), $clone(s, capnp.Struct)); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					err$3 = _r$9;
					if (!($interfaceIsEqual(err$3, $ifaceNil))) {
						$s = -1; return err$3;
					}
				/* } */ case 20:
			case 17:
			_i++;
		/* } */ $s = 7; continue; case 8:
		_r$10 = enc.w.WriteByte(41); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_r$10;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.marshalStruct }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.discriminant = discriminant; $f.dv = dv; $f.enc = enc; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.f = f; $f.fields = fields; $f.first = first; $f.n = n; $f.name = name; $f.s = s; $f.typeID = typeID; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.marshalStruct = function(typeID, s) { return this.$val.marshalStruct(typeID, s); };
	Encoder.ptr.prototype.marshalFieldValue = function(s, f) {
		var $ptr, _1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, b, b$1, d, d$1, d$10, d$11, d$2, d$3, d$4, d$5, d$6, d$7, d$8, d$9, dv, elem, enc, err, err$1, err$2, err$3, err$4, f, name, p, p$1, p$2, p$3, s, typ, v, v$1, v$10, v$11, v$2, v$3, v$4, v$5, v$6, v$7, v$8, v$9, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; b = $f.b; b$1 = $f.b$1; d = $f.d; d$1 = $f.d$1; d$10 = $f.d$10; d$11 = $f.d$11; d$2 = $f.d$2; d$3 = $f.d$3; d$4 = $f.d$4; d$5 = $f.d$5; d$6 = $f.d$6; d$7 = $f.d$7; d$8 = $f.d$8; d$9 = $f.d$9; dv = $f.dv; elem = $f.elem; enc = $f.enc; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; f = $f.f; name = $f.name; p = $f.p; p$1 = $f.p$1; p$2 = $f.p$2; p$3 = $f.p$3; s = $f.s; typ = $f.typ; v = $f.v; v$1 = $f.v$1; v$10 = $f.v$10; v$11 = $f.v$11; v$2 = $f.v$2; v$3 = $f.v$3; v$4 = $f.v$4; v$5 = $f.v$5; v$6 = $f.v$6; v$7 = $f.v$7; v$8 = $f.v$8; v$9 = $f.v$9; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		_r = $clone($clone(f, schema.Field).Slot(), schema.Field_slot).Type(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		typ = $clone(_tuple[0], schema.Type);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = $clone($clone(f, schema.Field).Slot(), schema.Field_slot).DefaultValue(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		dv = $clone(_tuple$1[0], schema.Value);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		/* */ if ($clone(dv.Struct, capnp.Struct).IsValid() && !((($clone(typ, schema.Type).Which() >> 0) === ($clone(dv, schema.Value).Which() >> 0)))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($clone(dv.Struct, capnp.Struct).IsValid() && !((($clone(typ, schema.Type).Which() >> 0) === ($clone(dv, schema.Value).Which() >> 0)))) { */ case 3:
			_r$2 = $clone(f, schema.Field).Name(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2;
			name = _tuple$2[0];
			_r$3 = fmt.Errorf("marshal field %s: default value is a %v, want %v", new sliceType$1([new $String(name), new schema.Value_Which($clone(dv, schema.Value).Which()), new schema.Type_Which($clone(typ, schema.Type).Which())])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 4:
			_1 = $clone(typ, schema.Type).Which();
			/* */ if (_1 === (0)) { $s = 8; continue; }
			/* */ if (_1 === (1)) { $s = 9; continue; }
			/* */ if (_1 === (2)) { $s = 10; continue; }
			/* */ if (_1 === (3)) { $s = 11; continue; }
			/* */ if (_1 === (4)) { $s = 12; continue; }
			/* */ if (_1 === (5)) { $s = 13; continue; }
			/* */ if (_1 === (6)) { $s = 14; continue; }
			/* */ if (_1 === (7)) { $s = 15; continue; }
			/* */ if (_1 === (8)) { $s = 16; continue; }
			/* */ if (_1 === (9)) { $s = 17; continue; }
			/* */ if (_1 === (10)) { $s = 18; continue; }
			/* */ if (_1 === (11)) { $s = 19; continue; }
			/* */ if (_1 === (16)) { $s = 20; continue; }
			/* */ if (_1 === (13)) { $s = 21; continue; }
			/* */ if (_1 === (12)) { $s = 22; continue; }
			/* */ if (_1 === (14)) { $s = 23; continue; }
			/* */ if (_1 === (15)) { $s = 24; continue; }
			/* */ if (_1 === (17)) { $s = 25; continue; }
			/* */ if (_1 === (18)) { $s = 26; continue; }
			/* */ $s = 27; continue;
			/* if (_1 === (0)) { */ case 8:
				_r$4 = enc.w.WriteString("void"); /* */ $s = 29; case 29: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				$s = 28; continue;
			/* } else if (_1 === (1)) { */ case 9:
				v = $clone(s, capnp.Struct).Bit(($clone($clone(f, schema.Field).Slot(), schema.Field_slot).Offset() >>> 0));
				d = $clone(dv, schema.Value).Bool();
				$r = enc.marshalBool(!d && v || d && !v); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 28; continue;
			/* } else if (_1 === (2)) { */ case 10:
				v$1 = $clone(s, capnp.Struct).Uint8(($clone($clone(f, schema.Field).Slot(), schema.Field_slot).Offset() >>> 0));
				d$1 = ($clone(dv, schema.Value).Int8() << 24 >>> 24);
				$r = enc.marshalInt(new $Int64(0, (((v$1 ^ d$1) << 24 >>> 24) << 24 >> 24))); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 28; continue;
			/* } else if (_1 === (3)) { */ case 11:
				v$2 = $clone(s, capnp.Struct).Uint16((($imul($clone($clone(f, schema.Field).Slot(), schema.Field_slot).Offset(), 2) >>> 0) >>> 0));
				d$2 = ($clone(dv, schema.Value).Int16() << 16 >>> 16);
				$r = enc.marshalInt(new $Int64(0, (((v$2 ^ d$2) << 16 >>> 16) << 16 >> 16))); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 28; continue;
			/* } else if (_1 === (4)) { */ case 12:
				v$3 = $clone(s, capnp.Struct).Uint32((($imul($clone($clone(f, schema.Field).Slot(), schema.Field_slot).Offset(), 4) >>> 0) >>> 0));
				d$3 = ($clone(dv, schema.Value).Int32() >>> 0);
				$r = enc.marshalInt(new $Int64(0, (((v$3 ^ d$3) >>> 0) >> 0))); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 28; continue;
			/* } else if (_1 === (5)) { */ case 13:
				v$4 = $clone(s, capnp.Struct).Uint64((($imul($clone($clone(f, schema.Field).Slot(), schema.Field_slot).Offset(), 8) >>> 0) >>> 0));
				d$4 = (x = $clone(dv, schema.Value).Int64(), new $Uint64(x.$high, x.$low));
				$r = enc.marshalInt((x$1 = new $Uint64(v$4.$high ^ d$4.$high, (v$4.$low ^ d$4.$low) >>> 0), new $Int64(x$1.$high, x$1.$low))); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 28; continue;
			/* } else if (_1 === (6)) { */ case 14:
				v$5 = $clone(s, capnp.Struct).Uint8(($clone($clone(f, schema.Field).Slot(), schema.Field_slot).Offset() >>> 0));
				d$5 = $clone(dv, schema.Value).Uint8();
				$r = enc.marshalUint(new $Uint64(0, ((v$5 ^ d$5) << 24 >>> 24))); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 28; continue;
			/* } else if (_1 === (7)) { */ case 15:
				v$6 = $clone(s, capnp.Struct).Uint16((($imul($clone($clone(f, schema.Field).Slot(), schema.Field_slot).Offset(), 2) >>> 0) >>> 0));
				d$6 = $clone(dv, schema.Value).Uint16();
				$r = enc.marshalUint(new $Uint64(0, ((v$6 ^ d$6) << 16 >>> 16))); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 28; continue;
			/* } else if (_1 === (8)) { */ case 16:
				v$7 = $clone(s, capnp.Struct).Uint32((($imul($clone($clone(f, schema.Field).Slot(), schema.Field_slot).Offset(), 4) >>> 0) >>> 0));
				d$7 = $clone(dv, schema.Value).Uint32();
				$r = enc.marshalUint(new $Uint64(0, ((v$7 ^ d$7) >>> 0))); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 28; continue;
			/* } else if (_1 === (9)) { */ case 17:
				v$8 = $clone(s, capnp.Struct).Uint64((($imul($clone($clone(f, schema.Field).Slot(), schema.Field_slot).Offset(), 8) >>> 0) >>> 0));
				d$8 = $clone(dv, schema.Value).Uint64();
				$r = enc.marshalUint(new $Uint64(v$8.$high ^ d$8.$high, (v$8.$low ^ d$8.$low) >>> 0)); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 28; continue;
			/* } else if (_1 === (10)) { */ case 18:
				v$9 = $clone(s, capnp.Struct).Uint32((($imul($clone($clone(f, schema.Field).Slot(), schema.Field_slot).Offset(), 4) >>> 0) >>> 0));
				d$9 = math.Float32bits($clone(dv, schema.Value).Float32());
				$r = enc.marshalFloat32(math.Float32frombits((v$9 ^ d$9) >>> 0)); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 28; continue;
			/* } else if (_1 === (11)) { */ case 19:
				v$10 = $clone(s, capnp.Struct).Uint64((($imul($clone($clone(f, schema.Field).Slot(), schema.Field_slot).Offset(), 8) >>> 0) >>> 0));
				d$10 = math.Float64bits($clone(dv, schema.Value).Float64());
				$r = enc.marshalFloat64(math.Float64frombits(new $Uint64(v$10.$high ^ d$10.$high, (v$10.$low ^ d$10.$low) >>> 0))); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 28; continue;
			/* } else if (_1 === (16)) { */ case 20:
				_r$5 = $clone(s, capnp.Struct).Ptr(($clone($clone(f, schema.Field).Slot(), schema.Field_slot).Offset() << 16 >>> 16)); /* */ $s = 41; case 41: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple$3 = _r$5;
				p = $clone(_tuple$3[0], capnp.Ptr);
				err$1 = _tuple$3[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
				}
				/* */ if (!$clone(p, capnp.Ptr).IsValid()) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if (!$clone(p, capnp.Ptr).IsValid()) { */ case 42:
					_r$6 = $clone(dv, schema.Value).StructValuePtr(); /* */ $s = 44; case 44: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_tuple$4 = _r$6;
					capnp.Ptr.copy(p, _tuple$4[0]);
				/* } */ case 43:
				_r$7 = enc.marshalStruct($clone($clone(typ, schema.Type).StructType(), schema.Type_structType).TypeId(), $clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)); /* */ $s = 45; case 45: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$s = -1; return _r$7;
			/* } else if (_1 === (13)) { */ case 21:
				_r$8 = $clone(s, capnp.Struct).Ptr(($clone($clone(f, schema.Field).Slot(), schema.Field_slot).Offset() << 16 >>> 16)); /* */ $s = 46; case 46: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_tuple$5 = _r$8;
				p$1 = $clone(_tuple$5[0], capnp.Ptr);
				err$2 = _tuple$5[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					$s = -1; return err$2;
				}
				/* */ if (!$clone(p$1, capnp.Ptr).IsValid()) { $s = 47; continue; }
				/* */ $s = 48; continue;
				/* if (!$clone(p$1, capnp.Ptr).IsValid()) { */ case 47:
					_r$9 = $clone(dv, schema.Value).Data(); /* */ $s = 49; case 49: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_tuple$6 = _r$9;
					b = _tuple$6[0];
					$r = enc.marshalText(b); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return $ifaceNil;
				/* } */ case 48:
				$r = enc.marshalText($clone(p$1, capnp.Ptr).Data()); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 28; continue;
			/* } else if (_1 === (12)) { */ case 22:
				_r$10 = $clone(s, capnp.Struct).Ptr(($clone($clone(f, schema.Field).Slot(), schema.Field_slot).Offset() << 16 >>> 16)); /* */ $s = 52; case 52: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_tuple$7 = _r$10;
				p$2 = $clone(_tuple$7[0], capnp.Ptr);
				err$3 = _tuple$7[1];
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					$s = -1; return err$3;
				}
				/* */ if (!$clone(p$2, capnp.Ptr).IsValid()) { $s = 53; continue; }
				/* */ $s = 54; continue;
				/* if (!$clone(p$2, capnp.Ptr).IsValid()) { */ case 53:
					_r$11 = $clone(dv, schema.Value).TextBytes(); /* */ $s = 55; case 55: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_tuple$8 = _r$11;
					b$1 = _tuple$8[0];
					$r = enc.marshalText(b$1); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return $ifaceNil;
				/* } */ case 54:
				$r = enc.marshalText($clone(p$2, capnp.Ptr).TextBytes()); /* */ $s = 57; case 57: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 28; continue;
			/* } else if (_1 === (14)) { */ case 23:
				_r$12 = $clone($clone(typ, schema.Type).List(), schema.Type_list).ElementType(); /* */ $s = 58; case 58: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_tuple$9 = _r$12;
				elem = $clone(_tuple$9[0], schema.Type);
				err$4 = _tuple$9[1];
				if (!($interfaceIsEqual(err$4, $ifaceNil))) {
					$s = -1; return err$4;
				}
				_r$13 = $clone(s, capnp.Struct).Ptr(($clone($clone(f, schema.Field).Slot(), schema.Field_slot).Offset() << 16 >>> 16)); /* */ $s = 59; case 59: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_tuple$10 = _r$13;
				p$3 = $clone(_tuple$10[0], capnp.Ptr);
				err$4 = _tuple$10[1];
				if (!($interfaceIsEqual(err$4, $ifaceNil))) {
					$s = -1; return err$4;
				}
				/* */ if (!$clone(p$3, capnp.Ptr).IsValid()) { $s = 60; continue; }
				/* */ $s = 61; continue;
				/* if (!$clone(p$3, capnp.Ptr).IsValid()) { */ case 60:
					_r$14 = $clone(dv, schema.Value).ListPtr(); /* */ $s = 62; case 62: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_tuple$11 = _r$14;
					capnp.Ptr.copy(p$3, _tuple$11[0]);
				/* } */ case 61:
				_r$15 = enc.marshalList($clone(elem, schema.Type), $clone($clone(p$3, capnp.Ptr).List(), capnp.List)); /* */ $s = 63; case 63: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				$s = -1; return _r$15;
			/* } else if (_1 === (15)) { */ case 24:
				v$11 = $clone(s, capnp.Struct).Uint16((($imul($clone($clone(f, schema.Field).Slot(), schema.Field_slot).Offset(), 2) >>> 0) >>> 0));
				d$11 = $clone(dv, schema.Value).Uint16();
				_r$16 = enc.marshalEnum($clone($clone(typ, schema.Type).Enum(), schema.Type_enum).TypeId(), (v$11 ^ d$11) << 16 >>> 16); /* */ $s = 64; case 64: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				$s = -1; return _r$16;
			/* } else if (_1 === (17)) { */ case 25:
				_r$17 = enc.w.WriteString("<external capability>"); /* */ $s = 65; case 65: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_r$17;
				$s = 28; continue;
			/* } else if (_1 === (18)) { */ case 26:
				_r$18 = enc.w.WriteString("<opaque pointer>"); /* */ $s = 66; case 66: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				_r$18;
				$s = 28; continue;
			/* } else { */ case 27:
				_r$19 = fmt.Errorf("unknown field type %v", new sliceType$1([new schema.Type_Which($clone(typ, schema.Type).Which())])); /* */ $s = 67; case 67: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				$s = -1; return _r$19;
			/* } */ case 28:
		case 7:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.marshalFieldValue }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.b = b; $f.b$1 = b$1; $f.d = d; $f.d$1 = d$1; $f.d$10 = d$10; $f.d$11 = d$11; $f.d$2 = d$2; $f.d$3 = d$3; $f.d$4 = d$4; $f.d$5 = d$5; $f.d$6 = d$6; $f.d$7 = d$7; $f.d$8 = d$8; $f.d$9 = d$9; $f.dv = dv; $f.elem = elem; $f.enc = enc; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.f = f; $f.name = name; $f.p = p; $f.p$1 = p$1; $f.p$2 = p$2; $f.p$3 = p$3; $f.s = s; $f.typ = typ; $f.v = v; $f.v$1 = v$1; $f.v$10 = v$10; $f.v$11 = v$11; $f.v$2 = v$2; $f.v$3 = v$3; $f.v$4 = v$4; $f.v$5 = v$5; $f.v$6 = v$6; $f.v$7 = v$7; $f.v$8 = v$8; $f.v$9 = v$9; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.marshalFieldValue = function(s, f) { return this.$val.marshalFieldValue(s, f); };
	codeOrderFields = function(s) {
		var $ptr, _r, _tuple, f, fields, i, list, n, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; fields = $f.fields; i = $f.i; list = $f.list; n = $f.n; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $clone(s, schema.Node_structNode).Fields(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		list = $clone(_tuple[0], schema.Field_List);
		n = $clone(list.List, capnp.List).Len();
		fields = $makeSlice(sliceType$2, n);
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			f = $clone($clone(list, schema.Field_List).At(i), schema.Field);
			schema.Field.copy((x = $clone(f, schema.Field).CodeOrder(), ((x < 0 || x >= fields.$length) ? ($throwRuntimeError("index out of range"), undefined) : fields.$array[fields.$offset + x])), f);
			i = i + (1) >> 0;
		}
		$s = -1; return fields;
		/* */ } return; } if ($f === undefined) { $f = { $blk: codeOrderFields }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.fields = fields; $f.i = i; $f.list = list; $f.n = n; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.ptr.prototype.marshalList = function(elem, l) {
		var $ptr, _1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, bl, d, dl, ee, elem, enc, err, err$1, err$2, err$3, err$4, fl, fl$1, i, i$1, i$10, i$11, i$12, i$13, i$14, i$15, i$16, i$17, i$18, i$2, i$3, i$4, i$5, i$6, i$7, i$8, i$9, il, il$1, il$2, il$3, il$4, il$5, il$6, il$7, il$8, l, p, t, tl, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; bl = $f.bl; d = $f.d; dl = $f.dl; ee = $f.ee; elem = $f.elem; enc = $f.enc; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; fl = $f.fl; fl$1 = $f.fl$1; i = $f.i; i$1 = $f.i$1; i$10 = $f.i$10; i$11 = $f.i$11; i$12 = $f.i$12; i$13 = $f.i$13; i$14 = $f.i$14; i$15 = $f.i$15; i$16 = $f.i$16; i$17 = $f.i$17; i$18 = $f.i$18; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; i$5 = $f.i$5; i$6 = $f.i$6; i$7 = $f.i$7; i$8 = $f.i$8; i$9 = $f.i$9; il = $f.il; il$1 = $f.il$1; il$2 = $f.il$2; il$3 = $f.il$3; il$4 = $f.il$4; il$5 = $f.il$5; il$6 = $f.il$6; il$7 = $f.il$7; il$8 = $f.il$8; l = $f.l; p = $f.p; t = $f.t; tl = $f.tl; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		_r = enc.w.WriteByte(91); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
			_1 = $clone(elem, schema.Type).Which();
			/* */ if (_1 === (0)) { $s = 3; continue; }
			/* */ if (_1 === (1)) { $s = 4; continue; }
			/* */ if (_1 === (2)) { $s = 5; continue; }
			/* */ if (_1 === (3)) { $s = 6; continue; }
			/* */ if (_1 === (4)) { $s = 7; continue; }
			/* */ if (_1 === (5)) { $s = 8; continue; }
			/* */ if (_1 === (6)) { $s = 9; continue; }
			/* */ if (_1 === (7)) { $s = 10; continue; }
			/* */ if (_1 === (8)) { $s = 11; continue; }
			/* */ if (_1 === (9)) { $s = 12; continue; }
			/* */ if (_1 === (10)) { $s = 13; continue; }
			/* */ if (_1 === (11)) { $s = 14; continue; }
			/* */ if (_1 === (13)) { $s = 15; continue; }
			/* */ if (_1 === (12)) { $s = 16; continue; }
			/* */ if (_1 === (16)) { $s = 17; continue; }
			/* */ if (_1 === (14)) { $s = 18; continue; }
			/* */ if (_1 === (15)) { $s = 19; continue; }
			/* */ if (_1 === (17)) { $s = 20; continue; }
			/* */ if (_1 === (18)) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (_1 === (0)) { */ case 3:
				i = 0;
				/* while (true) { */ case 24:
					/* if (!(i < $clone(l, capnp.List).Len())) { break; } */ if(!(i < $clone(l, capnp.List).Len())) { $s = 25; continue; }
					/* */ if (i > 0) { $s = 26; continue; }
					/* */ $s = 27; continue;
					/* if (i > 0) { */ case 26:
						_r$1 = enc.w.WriteString(", "); /* */ $s = 28; case 28: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_r$1;
					/* } */ case 27:
					_r$2 = enc.w.WriteString("void"); /* */ $s = 29; case 29: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
					i = i + (1) >> 0;
				/* } */ $s = 24; continue; case 25:
				$s = 23; continue;
			/* } else if (_1 === (1)) { */ case 4:
				bl = new capnp.BitList.ptr($clone(l, capnp.List));
				i$1 = 0;
				/* while (true) { */ case 30:
					/* if (!(i$1 < $clone(bl.List, capnp.List).Len())) { break; } */ if(!(i$1 < $clone(bl.List, capnp.List).Len())) { $s = 31; continue; }
					/* */ if (i$1 > 0) { $s = 32; continue; }
					/* */ $s = 33; continue;
					/* if (i$1 > 0) { */ case 32:
						_r$3 = enc.w.WriteString(", "); /* */ $s = 34; case 34: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$3;
					/* } */ case 33:
					$r = enc.marshalBool($clone(bl, capnp.BitList).At(i$1)); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 30; continue; case 31:
				$s = 23; continue;
			/* } else if (_1 === (2)) { */ case 5:
				il = new capnp.Int8List.ptr($clone(l, capnp.List));
				i$2 = 0;
				/* while (true) { */ case 36:
					/* if (!(i$2 < $clone(il.List, capnp.List).Len())) { break; } */ if(!(i$2 < $clone(il.List, capnp.List).Len())) { $s = 37; continue; }
					/* */ if (i$2 > 0) { $s = 38; continue; }
					/* */ $s = 39; continue;
					/* if (i$2 > 0) { */ case 38:
						_r$4 = enc.w.WriteString(", "); /* */ $s = 40; case 40: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						_r$4;
					/* } */ case 39:
					$r = enc.marshalInt(new $Int64(0, $clone(il, capnp.Int8List).At(i$2))); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$2 = i$2 + (1) >> 0;
				/* } */ $s = 36; continue; case 37:
				$s = 23; continue;
			/* } else if (_1 === (3)) { */ case 6:
				il$1 = new capnp.Int16List.ptr($clone(l, capnp.List));
				i$3 = 0;
				/* while (true) { */ case 42:
					/* if (!(i$3 < $clone(il$1.List, capnp.List).Len())) { break; } */ if(!(i$3 < $clone(il$1.List, capnp.List).Len())) { $s = 43; continue; }
					/* */ if (i$3 > 0) { $s = 44; continue; }
					/* */ $s = 45; continue;
					/* if (i$3 > 0) { */ case 44:
						_r$5 = enc.w.WriteString(", "); /* */ $s = 46; case 46: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_r$5;
					/* } */ case 45:
					$r = enc.marshalInt(new $Int64(0, $clone(il$1, capnp.Int16List).At(i$3))); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$3 = i$3 + (1) >> 0;
				/* } */ $s = 42; continue; case 43:
				$s = 23; continue;
			/* } else if (_1 === (4)) { */ case 7:
				il$2 = new capnp.Int32List.ptr($clone(l, capnp.List));
				i$4 = 0;
				/* while (true) { */ case 48:
					/* if (!(i$4 < $clone(il$2.List, capnp.List).Len())) { break; } */ if(!(i$4 < $clone(il$2.List, capnp.List).Len())) { $s = 49; continue; }
					/* */ if (i$4 > 0) { $s = 50; continue; }
					/* */ $s = 51; continue;
					/* if (i$4 > 0) { */ case 50:
						_r$6 = enc.w.WriteString(", "); /* */ $s = 52; case 52: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_r$6;
					/* } */ case 51:
					$r = enc.marshalInt(new $Int64(0, $clone(il$2, capnp.Int32List).At(i$4))); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$4 = i$4 + (1) >> 0;
				/* } */ $s = 48; continue; case 49:
				$s = 23; continue;
			/* } else if (_1 === (5)) { */ case 8:
				il$3 = new capnp.Int64List.ptr($clone(l, capnp.List));
				i$5 = 0;
				/* while (true) { */ case 54:
					/* if (!(i$5 < $clone(il$3.List, capnp.List).Len())) { break; } */ if(!(i$5 < $clone(il$3.List, capnp.List).Len())) { $s = 55; continue; }
					/* */ if (i$5 > 0) { $s = 56; continue; }
					/* */ $s = 57; continue;
					/* if (i$5 > 0) { */ case 56:
						_r$7 = enc.w.WriteString(", "); /* */ $s = 58; case 58: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						_r$7;
					/* } */ case 57:
					$r = enc.marshalInt($clone(il$3, capnp.Int64List).At(i$5)); /* */ $s = 59; case 59: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$5 = i$5 + (1) >> 0;
				/* } */ $s = 54; continue; case 55:
				$s = 23; continue;
			/* } else if (_1 === (6)) { */ case 9:
				il$4 = new capnp.UInt8List.ptr($clone(l, capnp.List));
				i$6 = 0;
				/* while (true) { */ case 60:
					/* if (!(i$6 < $clone(il$4.List, capnp.List).Len())) { break; } */ if(!(i$6 < $clone(il$4.List, capnp.List).Len())) { $s = 61; continue; }
					/* */ if (i$6 > 0) { $s = 62; continue; }
					/* */ $s = 63; continue;
					/* if (i$6 > 0) { */ case 62:
						_r$8 = enc.w.WriteString(", "); /* */ $s = 64; case 64: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						_r$8;
					/* } */ case 63:
					$r = enc.marshalUint(new $Uint64(0, $clone(il$4, capnp.UInt8List).At(i$6))); /* */ $s = 65; case 65: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$6 = i$6 + (1) >> 0;
				/* } */ $s = 60; continue; case 61:
				$s = 23; continue;
			/* } else if (_1 === (7)) { */ case 10:
				il$5 = new capnp.UInt16List.ptr($clone(l, capnp.List));
				i$7 = 0;
				/* while (true) { */ case 66:
					/* if (!(i$7 < $clone(il$5.List, capnp.List).Len())) { break; } */ if(!(i$7 < $clone(il$5.List, capnp.List).Len())) { $s = 67; continue; }
					/* */ if (i$7 > 0) { $s = 68; continue; }
					/* */ $s = 69; continue;
					/* if (i$7 > 0) { */ case 68:
						_r$9 = enc.w.WriteString(", "); /* */ $s = 70; case 70: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_r$9;
					/* } */ case 69:
					$r = enc.marshalUint(new $Uint64(0, $clone(il$5, capnp.UInt16List).At(i$7))); /* */ $s = 71; case 71: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$7 = i$7 + (1) >> 0;
				/* } */ $s = 66; continue; case 67:
				$s = 23; continue;
			/* } else if (_1 === (8)) { */ case 11:
				il$6 = new capnp.UInt32List.ptr($clone(l, capnp.List));
				i$8 = 0;
				/* while (true) { */ case 72:
					/* if (!(i$8 < $clone(il$6.List, capnp.List).Len())) { break; } */ if(!(i$8 < $clone(il$6.List, capnp.List).Len())) { $s = 73; continue; }
					/* */ if (i$8 > 0) { $s = 74; continue; }
					/* */ $s = 75; continue;
					/* if (i$8 > 0) { */ case 74:
						_r$10 = enc.w.WriteString(", "); /* */ $s = 76; case 76: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						_r$10;
					/* } */ case 75:
					$r = enc.marshalUint(new $Uint64(0, $clone(il$6, capnp.UInt32List).At(i$8))); /* */ $s = 77; case 77: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$8 = i$8 + (1) >> 0;
				/* } */ $s = 72; continue; case 73:
				$s = 23; continue;
			/* } else if (_1 === (9)) { */ case 12:
				il$7 = new capnp.UInt64List.ptr($clone(l, capnp.List));
				i$9 = 0;
				/* while (true) { */ case 78:
					/* if (!(i$9 < $clone(il$7.List, capnp.List).Len())) { break; } */ if(!(i$9 < $clone(il$7.List, capnp.List).Len())) { $s = 79; continue; }
					/* */ if (i$9 > 0) { $s = 80; continue; }
					/* */ $s = 81; continue;
					/* if (i$9 > 0) { */ case 80:
						_r$11 = enc.w.WriteString(", "); /* */ $s = 82; case 82: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						_r$11;
					/* } */ case 81:
					$r = enc.marshalUint($clone(il$7, capnp.UInt64List).At(i$9)); /* */ $s = 83; case 83: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$9 = i$9 + (1) >> 0;
				/* } */ $s = 78; continue; case 79:
				$s = 23; continue;
			/* } else if (_1 === (10)) { */ case 13:
				fl = new capnp.Float32List.ptr($clone(l, capnp.List));
				i$10 = 0;
				/* while (true) { */ case 84:
					/* if (!(i$10 < $clone(fl.List, capnp.List).Len())) { break; } */ if(!(i$10 < $clone(fl.List, capnp.List).Len())) { $s = 85; continue; }
					/* */ if (i$10 > 0) { $s = 86; continue; }
					/* */ $s = 87; continue;
					/* if (i$10 > 0) { */ case 86:
						_r$12 = enc.w.WriteString(", "); /* */ $s = 88; case 88: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						_r$12;
					/* } */ case 87:
					$r = enc.marshalFloat32($clone(fl, capnp.Float32List).At(i$10)); /* */ $s = 89; case 89: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$10 = i$10 + (1) >> 0;
				/* } */ $s = 84; continue; case 85:
				$s = 23; continue;
			/* } else if (_1 === (11)) { */ case 14:
				fl$1 = new capnp.Float64List.ptr($clone(l, capnp.List));
				i$11 = 0;
				/* while (true) { */ case 90:
					/* if (!(i$11 < $clone(fl$1.List, capnp.List).Len())) { break; } */ if(!(i$11 < $clone(fl$1.List, capnp.List).Len())) { $s = 91; continue; }
					/* */ if (i$11 > 0) { $s = 92; continue; }
					/* */ $s = 93; continue;
					/* if (i$11 > 0) { */ case 92:
						_r$13 = enc.w.WriteString(", "); /* */ $s = 94; case 94: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						_r$13;
					/* } */ case 93:
					$r = enc.marshalFloat64($clone(fl$1, capnp.Float64List).At(i$11)); /* */ $s = 95; case 95: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$11 = i$11 + (1) >> 0;
				/* } */ $s = 90; continue; case 91:
				$s = 23; continue;
			/* } else if (_1 === (13)) { */ case 15:
				dl = new capnp.DataList.ptr($clone(l, capnp.List));
				i$12 = 0;
				/* while (true) { */ case 96:
					/* if (!(i$12 < $clone(dl.List, capnp.List).Len())) { break; } */ if(!(i$12 < $clone(dl.List, capnp.List).Len())) { $s = 97; continue; }
					/* */ if (i$12 > 0) { $s = 98; continue; }
					/* */ $s = 99; continue;
					/* if (i$12 > 0) { */ case 98:
						_r$14 = enc.w.WriteString(", "); /* */ $s = 100; case 100: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						_r$14;
					/* } */ case 99:
					_r$15 = $clone(dl, capnp.DataList).At(i$12); /* */ $s = 101; case 101: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					_tuple = _r$15;
					d = _tuple[0];
					err = _tuple[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						$s = -1; return err;
					}
					$r = enc.marshalText(d); /* */ $s = 102; case 102: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$12 = i$12 + (1) >> 0;
				/* } */ $s = 96; continue; case 97:
				$s = 23; continue;
			/* } else if (_1 === (12)) { */ case 16:
				tl = new capnp.TextList.ptr($clone(l, capnp.List));
				i$13 = 0;
				/* while (true) { */ case 103:
					/* if (!(i$13 < $clone(tl.List, capnp.List).Len())) { break; } */ if(!(i$13 < $clone(tl.List, capnp.List).Len())) { $s = 104; continue; }
					/* */ if (i$13 > 0) { $s = 105; continue; }
					/* */ $s = 106; continue;
					/* if (i$13 > 0) { */ case 105:
						_r$16 = enc.w.WriteString(", "); /* */ $s = 107; case 107: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						_r$16;
					/* } */ case 106:
					_r$17 = $clone(tl, capnp.TextList).BytesAt(i$13); /* */ $s = 108; case 108: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					_tuple$1 = _r$17;
					t = _tuple$1[0];
					err$1 = _tuple$1[1];
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						$s = -1; return err$1;
					}
					$r = enc.marshalText(t); /* */ $s = 109; case 109: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$13 = i$13 + (1) >> 0;
				/* } */ $s = 103; continue; case 104:
				$s = 23; continue;
			/* } else if (_1 === (16)) { */ case 17:
				i$14 = 0;
				/* while (true) { */ case 110:
					/* if (!(i$14 < $clone(l, capnp.List).Len())) { break; } */ if(!(i$14 < $clone(l, capnp.List).Len())) { $s = 111; continue; }
					/* */ if (i$14 > 0) { $s = 112; continue; }
					/* */ $s = 113; continue;
					/* if (i$14 > 0) { */ case 112:
						_r$18 = enc.w.WriteString(", "); /* */ $s = 114; case 114: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
						_r$18;
					/* } */ case 113:
					_r$19 = enc.marshalStruct($clone($clone(elem, schema.Type).StructType(), schema.Type_structType).TypeId(), $clone($clone(l, capnp.List).Struct(i$14), capnp.Struct)); /* */ $s = 115; case 115: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					err$2 = _r$19;
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						$s = -1; return err$2;
					}
					i$14 = i$14 + (1) >> 0;
				/* } */ $s = 110; continue; case 111:
				$s = 23; continue;
			/* } else if (_1 === (14)) { */ case 18:
				_r$20 = $clone($clone(elem, schema.Type).List(), schema.Type_list).ElementType(); /* */ $s = 116; case 116: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				_tuple$2 = _r$20;
				ee = $clone(_tuple$2[0], schema.Type);
				err$3 = _tuple$2[1];
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					$s = -1; return err$3;
				}
				i$15 = 0;
				/* while (true) { */ case 117:
					/* if (!(i$15 < $clone(l, capnp.List).Len())) { break; } */ if(!(i$15 < $clone(l, capnp.List).Len())) { $s = 118; continue; }
					/* */ if (i$15 > 0) { $s = 119; continue; }
					/* */ $s = 120; continue;
					/* if (i$15 > 0) { */ case 119:
						_r$21 = enc.w.WriteString(", "); /* */ $s = 121; case 121: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
						_r$21;
					/* } */ case 120:
					_r$22 = new capnp.PointerList.ptr($clone(l, capnp.List)).PtrAt(i$15); /* */ $s = 122; case 122: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					_tuple$3 = _r$22;
					p = $clone(_tuple$3[0], capnp.Ptr);
					err$4 = _tuple$3[1];
					if (!($interfaceIsEqual(err$4, $ifaceNil))) {
						$s = -1; return err$4;
					}
					_r$23 = enc.marshalList($clone(ee, schema.Type), $clone($clone(p, capnp.Ptr).List(), capnp.List)); /* */ $s = 123; case 123: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
					err$4 = _r$23;
					if (!($interfaceIsEqual(err$4, $ifaceNil))) {
						$s = -1; return err$4;
					}
					i$15 = i$15 + (1) >> 0;
				/* } */ $s = 117; continue; case 118:
				$s = 23; continue;
			/* } else if (_1 === (15)) { */ case 19:
				il$8 = new capnp.UInt16List.ptr($clone(l, capnp.List));
				typ = $clone($clone(elem, schema.Type).Enum(), schema.Type_enum).TypeId();
				i$16 = 0;
				/* while (true) { */ case 124:
					/* if (!(i$16 < $clone(il$8.List, capnp.List).Len())) { break; } */ if(!(i$16 < $clone(il$8.List, capnp.List).Len())) { $s = 125; continue; }
					/* */ if (i$16 > 0) { $s = 126; continue; }
					/* */ $s = 127; continue;
					/* if (i$16 > 0) { */ case 126:
						_r$24 = enc.w.WriteString(", "); /* */ $s = 128; case 128: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
						_r$24;
					/* } */ case 127:
					_r$25 = enc.marshalEnum(typ, $clone(il$8, capnp.UInt16List).At(i$16)); /* */ $s = 129; case 129: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					_r$25;
					i$16 = i$16 + (1) >> 0;
				/* } */ $s = 124; continue; case 125:
				$s = 23; continue;
			/* } else if (_1 === (17)) { */ case 20:
				i$17 = 0;
				/* while (true) { */ case 130:
					/* if (!(i$17 < $clone(l, capnp.List).Len())) { break; } */ if(!(i$17 < $clone(l, capnp.List).Len())) { $s = 131; continue; }
					/* */ if (i$17 > 0) { $s = 132; continue; }
					/* */ $s = 133; continue;
					/* if (i$17 > 0) { */ case 132:
						_r$26 = enc.w.WriteString(", "); /* */ $s = 134; case 134: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
						_r$26;
					/* } */ case 133:
					_r$27 = enc.w.WriteString("<external capability>"); /* */ $s = 135; case 135: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					_r$27;
					i$17 = i$17 + (1) >> 0;
				/* } */ $s = 130; continue; case 131:
				$s = 23; continue;
			/* } else if (_1 === (18)) { */ case 21:
				i$18 = 0;
				/* while (true) { */ case 136:
					/* if (!(i$18 < $clone(l, capnp.List).Len())) { break; } */ if(!(i$18 < $clone(l, capnp.List).Len())) { $s = 137; continue; }
					/* */ if (i$18 > 0) { $s = 138; continue; }
					/* */ $s = 139; continue;
					/* if (i$18 > 0) { */ case 138:
						_r$28 = enc.w.WriteString(", "); /* */ $s = 140; case 140: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
						_r$28;
					/* } */ case 139:
					_r$29 = enc.w.WriteString("<opaque pointer>"); /* */ $s = 141; case 141: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
					_r$29;
					i$18 = i$18 + (1) >> 0;
				/* } */ $s = 136; continue; case 137:
				$s = 23; continue;
			/* } else { */ case 22:
				_r$30 = fmt.Errorf("unknown list type %v", new sliceType$1([new schema.Type_Which($clone(elem, schema.Type).Which())])); /* */ $s = 142; case 142: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				$s = -1; return _r$30;
			/* } */ case 23:
		case 2:
		_r$31 = enc.w.WriteByte(93); /* */ $s = 143; case 143: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_r$31;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.marshalList }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.bl = bl; $f.d = d; $f.dl = dl; $f.ee = ee; $f.elem = elem; $f.enc = enc; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.fl = fl; $f.fl$1 = fl$1; $f.i = i; $f.i$1 = i$1; $f.i$10 = i$10; $f.i$11 = i$11; $f.i$12 = i$12; $f.i$13 = i$13; $f.i$14 = i$14; $f.i$15 = i$15; $f.i$16 = i$16; $f.i$17 = i$17; $f.i$18 = i$18; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.i$5 = i$5; $f.i$6 = i$6; $f.i$7 = i$7; $f.i$8 = i$8; $f.i$9 = i$9; $f.il = il; $f.il$1 = il$1; $f.il$2 = il$2; $f.il$3 = il$3; $f.il$4 = il$4; $f.il$5 = il$5; $f.il$6 = il$6; $f.il$7 = il$7; $f.il$8 = il$8; $f.l = l; $f.p = p; $f.t = t; $f.tl = tl; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.marshalList = function(elem, l) { return this.$val.marshalList(elem, l); };
	Encoder.ptr.prototype.marshalEnum = function(typ, val) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, enc, enums, err, n, name, typ, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; enc = $f.enc; enums = $f.enums; err = $f.err; n = $f.n; name = $f.name; typ = $f.typ; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		_r = enc.nodes.Find(typ); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = $clone(_tuple[0], schema.Node);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		/* */ if (!(($clone(n, schema.Node).Which() === 2))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(($clone(n, schema.Node).Which() === 2))) { */ case 2:
			_r$1 = fmt.Errorf("marshaling enum of type @%#x: type is not an enum", new sliceType$1([typ])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		_r$2 = $clone($clone(n, schema.Node).Enum(), schema.Node_enum).Enumerants(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		enums = $clone(_tuple$1[0], schema.Enumerant_List);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		/* */ if ((val >> 0) >= $clone(enums.List, capnp.List).Len()) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if ((val >> 0) >= $clone(enums.List, capnp.List).Len()) { */ case 6:
			$r = enc.marshalUint(new $Uint64(0, val)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return $ifaceNil;
		/* } */ case 7:
		_r$3 = $clone($clone(enums, schema.Enumerant_List).At((val >> 0)), schema.Enumerant).NameBytes(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$2 = _r$3;
		name = _tuple$2[0];
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$4 = enc.w.Write(name); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.marshalEnum }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.enc = enc; $f.enums = enums; $f.err = err; $f.n = n; $f.name = name; $f.typ = typ; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.marshalEnum = function(typ, val) { return this.$val.marshalEnum(typ, val); };
	errWriter.ptr.prototype.Write = function(p) {
		var $ptr, _r, _tuple, ew, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ew = $f.ew; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ew = this;
		if (!($interfaceIsEqual(ew.err, $ifaceNil))) {
			$s = -1; return [0, ew.err];
		}
		n = 0;
		_r = ew.w.Write(p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		ew.err = _tuple[1];
		$s = -1; return [n, ew.err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: errWriter.ptr.prototype.Write }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ew = ew; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	errWriter.prototype.Write = function(p) { return this.$val.Write(p); };
	errWriter.ptr.prototype.WriteString = function(s) {
		var $ptr, _r, _tuple, ew, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ew = $f.ew; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ew = this;
		if (!($interfaceIsEqual(ew.err, $ifaceNil))) {
			$s = -1; return [0, ew.err];
		}
		n = 0;
		_r = io.WriteString(ew.w, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		ew.err = _tuple[1];
		$s = -1; return [n, ew.err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: errWriter.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ew = ew; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	errWriter.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	errWriter.ptr.prototype.WriteByte = function(b) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, b, bw, ew, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; bw = $f.bw; ew = $f.ew; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ew = this;
		if (!($interfaceIsEqual(ew.err, $ifaceNil))) {
			$s = -1; return ew.err;
		}
		_tuple = $assertType(ew.w, io.ByteWriter, true);
		bw = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = bw.WriteByte(b); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ew.err = _r;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = ew.w.Write(new sliceType([b])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			ew.err = _tuple$1[1];
		/* } */ case 3:
		$s = -1; return ew.err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: errWriter.ptr.prototype.WriteByte }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.bw = bw; $f.ew = ew; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	errWriter.prototype.WriteByte = function(b) { return this.$val.WriteByte(b); };
	ptrType$2.methods = [{prop: "UseRegistry", name: "UseRegistry", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "Encode", name: "Encode", pkg: "", typ: $funcType([$Uint64, capnp.Struct], [$error], false)}, {prop: "marshalBool", name: "marshalBool", pkg: "zombiezen.com/go/capnproto2/encoding/text", typ: $funcType([$Bool], [], false)}, {prop: "marshalInt", name: "marshalInt", pkg: "zombiezen.com/go/capnproto2/encoding/text", typ: $funcType([$Int64], [], false)}, {prop: "marshalUint", name: "marshalUint", pkg: "zombiezen.com/go/capnproto2/encoding/text", typ: $funcType([$Uint64], [], false)}, {prop: "marshalFloat32", name: "marshalFloat32", pkg: "zombiezen.com/go/capnproto2/encoding/text", typ: $funcType([$Float32], [], false)}, {prop: "marshalFloat64", name: "marshalFloat64", pkg: "zombiezen.com/go/capnproto2/encoding/text", typ: $funcType([$Float64], [], false)}, {prop: "marshalText", name: "marshalText", pkg: "zombiezen.com/go/capnproto2/encoding/text", typ: $funcType([sliceType], [], false)}, {prop: "marshalStruct", name: "marshalStruct", pkg: "zombiezen.com/go/capnproto2/encoding/text", typ: $funcType([$Uint64, capnp.Struct], [$error], false)}, {prop: "marshalFieldValue", name: "marshalFieldValue", pkg: "zombiezen.com/go/capnproto2/encoding/text", typ: $funcType([capnp.Struct, schema.Field], [$error], false)}, {prop: "marshalList", name: "marshalList", pkg: "zombiezen.com/go/capnproto2/encoding/text", typ: $funcType([schema.Type, capnp.List], [$error], false)}, {prop: "marshalEnum", name: "marshalEnum", pkg: "zombiezen.com/go/capnproto2/encoding/text", typ: $funcType([$Uint64, $Uint16], [$error], false)}];
	ptrType$3.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}];
	Encoder.init("zombiezen.com/go/capnproto2/encoding/text", [{prop: "w", name: "w", exported: false, typ: errWriter, tag: ""}, {prop: "tmp", name: "tmp", exported: false, typ: sliceType, tag: ""}, {prop: "nodes", name: "nodes", exported: false, typ: nodemap.Map, tag: ""}]);
	errWriter.init("zombiezen.com/go/capnproto2/encoding/text", [{prop: "w", name: "w", exported: false, typ: io.Writer, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = capnp.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nodemap.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = schemas.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = schema.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["zombiezen.com/go/capnproto2/internal/queue"] = (function() {
	var $pkg = {}, $init, Queue, Interface, ptrType;
	Queue = $pkg.Queue = $newType(0, $kindStruct, "queue.Queue", true, "zombiezen.com/go/capnproto2/internal/queue", true, function(q_, start_, n_, cap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.q = $ifaceNil;
			this.start = 0;
			this.n = 0;
			this.cap = 0;
			return;
		}
		this.q = q_;
		this.start = start_;
		this.n = n_;
		this.cap = cap_;
	});
	Interface = $pkg.Interface = $newType(8, $kindInterface, "queue.Interface", true, "zombiezen.com/go/capnproto2/internal/queue", true, null);
	ptrType = $ptrType(Queue);
	Queue.ptr.prototype.Init = function(r, n) {
		var $ptr, _r, n, q, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; q = $f.q; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		q = this;
		q.q = r;
		q.start = 0;
		q.n = n;
		_r = r.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		q.cap = _r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Queue.ptr.prototype.Init }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.q = q; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Queue.prototype.Init = function(r, n) { return this.$val.Init(r, n); };
	Queue.ptr.prototype.Len = function() {
		var $ptr, q;
		q = this;
		return q.n;
	};
	Queue.prototype.Len = function() { return this.$val.Len(); };
	Queue.ptr.prototype.Push = function() {
		var $ptr, _r, i, q;
		q = this;
		if (q.n >= q.cap) {
			return -1;
		}
		i = (_r = ((q.start + q.n >> 0)) % q.cap, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		q.n = q.n + (1) >> 0;
		return i;
	};
	Queue.prototype.Push = function() { return this.$val.Push(); };
	Queue.ptr.prototype.Front = function() {
		var $ptr, q;
		q = this;
		if (q.n === 0) {
			return -1;
		}
		return q.start;
	};
	Queue.prototype.Front = function() { return this.$val.Front(); };
	Queue.ptr.prototype.Pop = function() {
		var $ptr, _r, q, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; q = $f.q; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		q = this;
		if (q.n === 0) {
			$s = -1; return false;
		}
		$r = q.q.Clear(q.start); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		q.start = (_r = ((q.start + 1 >> 0)) % q.cap, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		q.n = q.n - (1) >> 0;
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Queue.ptr.prototype.Pop }; } $f.$ptr = $ptr; $f._r = _r; $f.q = q; $f.$s = $s; $f.$r = $r; return $f;
	};
	Queue.prototype.Pop = function() { return this.$val.Pop(); };
	ptrType.methods = [{prop: "Init", name: "Init", pkg: "", typ: $funcType([Interface, $Int], [], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Push", name: "Push", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Front", name: "Front", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pop", name: "Pop", pkg: "", typ: $funcType([], [$Bool], false)}];
	Queue.init("zombiezen.com/go/capnproto2/internal/queue", [{prop: "q", name: "q", exported: false, typ: Interface, tag: ""}, {prop: "start", name: "start", exported: false, typ: $Int, tag: ""}, {prop: "n", name: "n", exported: false, typ: $Int, tag: ""}, {prop: "cap", name: "cap", exported: false, typ: $Int, tag: ""}]);
	Interface.init([{prop: "Clear", name: "Clear", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["zombiezen.com/go/capnproto2/internal/fulfiller"] = (function() {
	var $pkg = {}, $init, errors, sync, capnp, queue, Fulfiller, pcall, EmbargoClient, ecall, ecallList, structType, sliceType, sliceType$1, sliceType$2, ptrType, ptrType$1, ptrType$2, mapType, chanType, chanType$1, ptrType$3, errCallQueueFull, errQueueCallCancel, newEmbargoClient;
	errors = $packages["errors"];
	sync = $packages["sync"];
	capnp = $packages["zombiezen.com/go/capnproto2"];
	queue = $packages["zombiezen.com/go/capnproto2/internal/queue"];
	Fulfiller = $pkg.Fulfiller = $newType(0, $kindStruct, "fulfiller.Fulfiller", true, "zombiezen.com/go/capnproto2/internal/fulfiller", true, function(once_, resolved_, mu_, answer_, queue_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.once = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
			this.resolved = $chanNil;
			this.mu = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
			this.answer = $ifaceNil;
			this.queue = sliceType.nil;
			return;
		}
		this.once = once_;
		this.resolved = resolved_;
		this.mu = mu_;
		this.answer = answer_;
		this.queue = queue_;
	});
	pcall = $pkg.pcall = $newType(0, $kindStruct, "fulfiller.pcall", true, "zombiezen.com/go/capnproto2/internal/fulfiller", false, function(transform_, ecall_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.transform = sliceType$2.nil;
			this.ecall = new ecall.ptr(ptrType.nil, ptrType$1.nil);
			return;
		}
		this.transform = transform_;
		this.ecall = ecall_;
	});
	EmbargoClient = $pkg.EmbargoClient = $newType(0, $kindStruct, "fulfiller.EmbargoClient", true, "zombiezen.com/go/capnproto2/internal/fulfiller", true, function(client_, mu_, q_, calls_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.client = $ifaceNil;
			this.mu = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
			this.q = new queue.Queue.ptr($ifaceNil, 0, 0, 0);
			this.calls = ecallList.nil;
			return;
		}
		this.client = client_;
		this.mu = mu_;
		this.q = q_;
		this.calls = calls_;
	});
	ecall = $pkg.ecall = $newType(0, $kindStruct, "fulfiller.ecall", true, "zombiezen.com/go/capnproto2/internal/fulfiller", false, function(call_, f_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.call = ptrType.nil;
			this.f = ptrType$1.nil;
			return;
		}
		this.call = call_;
		this.f = f_;
	});
	ecallList = $pkg.ecallList = $newType(12, $kindSlice, "fulfiller.ecallList", true, "zombiezen.com/go/capnproto2/internal/fulfiller", false, null);
	structType = $structType("", []);
	sliceType = $sliceType(pcall);
	sliceType$1 = $sliceType(ecall);
	sliceType$2 = $sliceType(capnp.PipelineOp);
	ptrType = $ptrType(capnp.Call);
	ptrType$1 = $ptrType(Fulfiller);
	ptrType$2 = $ptrType(capnp.Segment);
	mapType = $mapType(capnp.CapabilityID, sliceType$1);
	chanType = $chanType(structType, false, true);
	chanType$1 = $chanType(structType, false, false);
	ptrType$3 = $ptrType(EmbargoClient);
	Fulfiller.ptr.prototype.init = function() {
		var $ptr, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = [f];
		f[0] = this;
		$r = f[0].once.Do((function(f) { return function() {
			var $ptr;
			f[0].resolved = new $Chan(structType, 0);
			f[0].queue = $makeSlice(sliceType, 0, 64);
		}; })(f)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fulfiller.ptr.prototype.init }; } $f.$ptr = $ptr; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Fulfiller.prototype.init = function() { return this.$val.init(); };
	Fulfiller.ptr.prototype.Fulfill = function(s) {
		var $ptr, _entry, _i, _keys, _r, _r$1, _ref, capIdx, ctab, f, q, queues, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; capIdx = $f.capIdx; ctab = $f.ctab; f = $f.f; q = $f.q; queues = $f.queues; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = f.mu.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!($interfaceIsEqual(f.answer, $ifaceNil))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!($interfaceIsEqual(f.answer, $ifaceNil))) { */ case 3:
			$r = f.mu.Unlock(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$panic(new $String("Fulfiller.Fulfill called more than once"));
		/* } */ case 4:
		f.answer = capnp.ImmediateAnswer($clone(s, capnp.Struct));
		_r = f.emptyQueue($clone(s, capnp.Struct)); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		queues = _r;
		ctab = $clone(s, capnp.Struct).Segment().Message().CapTable;
		_ref = queues;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 7:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 8; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 7; continue;
			}
			capIdx = _entry.k;
			q = _entry.v;
			_r$1 = newEmbargoClient(((capIdx < 0 || capIdx >= ctab.$length) ? ($throwRuntimeError("index out of range"), undefined) : ctab.$array[ctab.$offset + capIdx]), q); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			((capIdx < 0 || capIdx >= ctab.$length) ? ($throwRuntimeError("index out of range"), undefined) : ctab.$array[ctab.$offset + capIdx] = _r$1);
			_i++;
		/* } */ $s = 7; continue; case 8:
		$close(f.resolved);
		$r = f.mu.Unlock(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fulfiller.ptr.prototype.Fulfill }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.capIdx = capIdx; $f.ctab = ctab; $f.f = f; $f.q = q; $f.queues = queues; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Fulfiller.prototype.Fulfill = function(s) { return this.$val.Fulfill(s); };
	Fulfiller.ptr.prototype.emptyQueue = function(s) {
		var $ptr, _entry, _entry$1, _i, _key, _key$1, _r, _ref, _tuple, c, cn, err, f, i, in$1, pc, qs, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; c = $f.c; cn = $f.cn; err = $f.err; f = $f.f; i = $f.i; in$1 = $f.in$1; pc = $f.pc; qs = $f.qs; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		qs = (x = f.queue.$length, ((x < 0 || x > 2147483647) ? $throwRuntimeError("makemap: size out of range") : {}));
		_ref = f.queue;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			pc = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), pcall);
			_r = capnp.TransformPtr($clone($clone(s, capnp.Struct).ToPtr(), capnp.Ptr), pc.transform); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			c = $clone(_tuple[0], capnp.Ptr);
			err = _tuple[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:
				$r = pc.ecall.f.Reject(err); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			in$1 = $clone($clone(c, capnp.Ptr).Interface(), capnp.Interface);
			/* */ if (!$clone(in$1, capnp.Interface).IsValid()) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!$clone(in$1, capnp.Interface).IsValid()) { */ case 7:
				$r = pc.ecall.f.Reject(capnp.ErrNullClient); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 8:
			cn = $clone(in$1, capnp.Interface).Capability();
			if ((_entry = qs[capnp.CapabilityID.keyFor(cn)], _entry !== undefined ? _entry.v : sliceType$1.nil) === sliceType$1.nil) {
				_key = cn; (qs || $throwRuntimeError("assignment to entry in nil map"))[capnp.CapabilityID.keyFor(_key)] = { k: _key, v: $makeSlice(sliceType$1, 0, (f.queue.$length - i >> 0)) };
			}
			_key$1 = cn; (qs || $throwRuntimeError("assignment to entry in nil map"))[capnp.CapabilityID.keyFor(_key$1)] = { k: _key$1, v: $append((_entry$1 = qs[capnp.CapabilityID.keyFor(cn)], _entry$1 !== undefined ? _entry$1.v : sliceType$1.nil), pc.ecall) };
			_i++;
		/* } */ $s = 1; continue; case 2:
		f.queue = sliceType.nil;
		$s = -1; return qs;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fulfiller.ptr.prototype.emptyQueue }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.c = c; $f.cn = cn; $f.err = err; $f.f = f; $f.i = i; $f.in$1 = in$1; $f.pc = pc; $f.qs = qs; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Fulfiller.prototype.emptyQueue = function(s) { return this.$val.emptyQueue(s); };
	Fulfiller.ptr.prototype.Reject = function(err) {
		var $ptr, _i, _ref, err, f, i, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; err = $f.err; f = $f.f; i = $f.i; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			$panic(new $String("Fulfiller.Reject called with nil"));
		}
		$r = f.init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = f.mu.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!($interfaceIsEqual(f.answer, $ifaceNil))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!($interfaceIsEqual(f.answer, $ifaceNil))) { */ case 3:
			$r = f.mu.Unlock(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$panic(new $String("Fulfiller.Reject called more than once"));
		/* } */ case 4:
		f.answer = capnp.ErrorAnswer(err);
		_ref = f.queue;
		_i = 0;
		/* while (true) { */ case 6:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
			i = _i;
			$r = (x = f.queue, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).ecall.f.Reject(err); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			pcall.copy((x$1 = f.queue, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])), new pcall.ptr(sliceType$2.nil, new ecall.ptr(ptrType.nil, ptrType$1.nil)));
			_i++;
		/* } */ $s = 6; continue; case 7:
		$close(f.resolved);
		$r = f.mu.Unlock(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fulfiller.ptr.prototype.Reject }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.err = err; $f.f = f; $f.i = i; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Fulfiller.prototype.Reject = function(err) { return this.$val.Reject(err); };
	Fulfiller.ptr.prototype.Done = function() {
		var $ptr, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return f.resolved;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fulfiller.ptr.prototype.Done }; } $f.$ptr = $ptr; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Fulfiller.prototype.Done = function() { return this.$val.Done(); };
	Fulfiller.ptr.prototype.Peek = function() {
		var $ptr, a, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; a = $f.a; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = f.mu.RLock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		a = f.answer;
		$r = f.mu.RUnlock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return a;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fulfiller.ptr.prototype.Peek }; } $f.$ptr = $ptr; $f.a = a; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Fulfiller.prototype.Peek = function() { return this.$val.Peek(); };
	Fulfiller.ptr.prototype.Struct = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = f.Done(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $recv(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = f.Peek(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = _r$2.Struct(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fulfiller.ptr.prototype.Struct }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Fulfiller.prototype.Struct = function() { return this.$val.Struct(); };
	Fulfiller.ptr.prototype.PipelineCall = function(transform, call) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tuple, a, a$1, call, cc, err, f, g, transform, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; a = $f.a; a$1 = $f.a$1; call = $f.call; cc = $f.cc; err = $f.err; f = $f.f; g = $f.g; transform = $f.transform; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = f.Peek(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		/* */ if (!($interfaceIsEqual(a, $ifaceNil))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!($interfaceIsEqual(a, $ifaceNil))) { */ case 3:
			_r$1 = a.PipelineCall(transform, call); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 4:
		$r = f.mu.Lock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		a$1 = f.answer;
		/* */ if (!($interfaceIsEqual(a$1, $ifaceNil))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!($interfaceIsEqual(a$1, $ifaceNil))) { */ case 7:
			$r = f.mu.Unlock(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = a$1.PipelineCall(transform, call); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } */ case 8:
		/* */ if (f.queue.$length === f.queue.$capacity) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (f.queue.$length === f.queue.$capacity) { */ case 11:
			$r = f.mu.Unlock(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return capnp.ErrorAnswer(errCallQueueFull);
		/* } */ case 12:
		_r$3 = call.Copy(ptrType$2.nil); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		cc = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 15:
			$r = f.mu.Unlock(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return capnp.ErrorAnswer(err);
		/* } */ case 16:
		g = new Fulfiller.ptr(new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0), $chanNil, new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), $ifaceNil, sliceType.nil);
		f.queue = $append(f.queue, new pcall.ptr(transform, new ecall.ptr(cc, g)));
		$r = f.mu.Unlock(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return g;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fulfiller.ptr.prototype.PipelineCall }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.a = a; $f.a$1 = a$1; $f.call = call; $f.cc = cc; $f.err = err; $f.f = f; $f.g = g; $f.transform = transform; $f.$s = $s; $f.$r = $r; return $f;
	};
	Fulfiller.prototype.PipelineCall = function(transform, call) { return this.$val.PipelineCall(transform, call); };
	Fulfiller.ptr.prototype.PipelineClose = function(transform) {
		var $ptr, _r, _r$1, _r$2, _r$3, f, transform, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; f = $f.f; transform = $f.transform; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = f.Done(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $recv(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = f.Peek(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = _r$2.PipelineClose(transform); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fulfiller.ptr.prototype.PipelineClose }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.f = f; $f.transform = transform; $f.$s = $s; $f.$r = $r; return $f;
	};
	Fulfiller.prototype.PipelineClose = function(transform) { return this.$val.PipelineClose(transform); };
	newEmbargoClient = function(client, queue$1) {
		var $ptr, client, ec, queue$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; client = $f.client; ec = $f.ec; queue$1 = $f.queue$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ec = new EmbargoClient.ptr(client, new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), new queue.Queue.ptr($ifaceNil, 0, 0, 0), $makeSlice(ecallList, 64));
		$r = ec.q.Init(ec.calls, $copySlice(ec.calls, queue$1)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$go($methodVal(ec, "flushQueue"), []);
		$s = -1; return ec;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newEmbargoClient }; } $f.$ptr = $ptr; $f.client = client; $f.ec = ec; $f.queue$1 = queue$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	EmbargoClient.ptr.prototype.push = function(cl) {
		var $ptr, _r, _tuple, cl, ec, err, f, i, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; cl = $f.cl; ec = $f.ec; err = $f.err; f = $f.f; i = $f.i; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ec = this;
		f = new Fulfiller.ptr(new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0), $chanNil, new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), $ifaceNil, sliceType.nil);
		_r = cl.Copy(ptrType$2.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		cl = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return capnp.ErrorAnswer(err);
		}
		i = ec.q.Push();
		if (i === -1) {
			$s = -1; return capnp.ErrorAnswer(errCallQueueFull);
		}
		ecall.copy((x = ec.calls, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])), new ecall.ptr(cl, f));
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: EmbargoClient.ptr.prototype.push }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.cl = cl; $f.ec = ec; $f.err = err; $f.f = f; $f.i = i; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	EmbargoClient.prototype.push = function(cl) { return this.$val.push(cl); };
	EmbargoClient.ptr.prototype.flushQueue = function() {
		var $ptr, _r, _r$1, ans, c, ec, i, i$1, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; ans = $f.ans; c = $f.c; ec = $f.ec; i = $f.i; i$1 = $f.i$1; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ec = this;
		c = new ecall.ptr(ptrType.nil, ptrType$1.nil);
		$r = ec.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		i = ec.q.Front();
		if (!((i === -1))) {
			ecall.copy(c, (x = ec.calls, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
		}
		$r = ec.mu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* while (true) { */ case 3:
			/* if (!(!(c.call === ptrType.nil))) { break; } */ if(!(!(c.call === ptrType.nil))) { $s = 4; continue; }
			_r = ec.client.Call(c.call); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ans = _r;
			$go((function $b(f, ans$1) {
				var $ptr, _r$1, _tuple, ans$1, err, f, s, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple = $f._tuple; ans$1 = $f.ans$1; err = $f.err; f = $f.f; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r$1 = ans$1.Struct(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				s = $clone(_tuple[0], capnp.Struct);
				err = _tuple[1];
				/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 2; continue; }
				/* */ $s = 3; continue;
				/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 2:
					$r = f.Fulfill($clone(s, capnp.Struct)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 4; continue;
				/* } else { */ case 3:
					$r = f.Reject(err); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 4:
				$s = -1; return;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple = _tuple; $f.ans$1 = ans$1; $f.err = err; $f.f = f; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
			}), [c.f, ans]);
			$r = ec.mu.Lock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$1 = ec.q.Pop(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i$1 = ec.q.Front();
			if (!((i$1 === -1))) {
				ecall.copy(c, (x$1 = ec.calls, ((i$1 < 0 || i$1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$1])));
			} else {
				ecall.copy(c, new ecall.ptr(ptrType.nil, ptrType$1.nil));
			}
			$r = ec.mu.Unlock(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 3; continue; case 4:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: EmbargoClient.ptr.prototype.flushQueue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.ans = ans; $f.c = c; $f.ec = ec; $f.i = i; $f.i$1 = i$1; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	EmbargoClient.prototype.flushQueue = function() { return this.$val.flushQueue(); };
	EmbargoClient.ptr.prototype.Client = function() {
		var $ptr, ec, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; ec = $f.ec; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ec = this;
		$r = ec.mu.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ok = ec.isPassthrough();
		$r = ec.mu.RUnlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!ok) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return ec.client;
		/* */ } return; } if ($f === undefined) { $f = { $blk: EmbargoClient.ptr.prototype.Client }; } $f.$ptr = $ptr; $f.ec = ec; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	EmbargoClient.prototype.Client = function() { return this.$val.Client(); };
	EmbargoClient.ptr.prototype.isPassthrough = function() {
		var $ptr, ec;
		ec = this;
		return ec.q.Len() === 0;
	};
	EmbargoClient.prototype.isPassthrough = function() { return this.$val.isPassthrough(); };
	EmbargoClient.ptr.prototype.Call = function(cl) {
		var $ptr, _r, _r$1, _r$2, ans, cl, ec, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ans = $f.ans; cl = $f.cl; ec = $f.ec; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ec = this;
		$r = ec.mu.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ok = ec.isPassthrough();
		$r = ec.mu.RUnlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (ok) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (ok) { */ case 3:
			_r = ec.client.Call(cl); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 4:
		$r = ec.mu.Lock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (ec.isPassthrough()) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (ec.isPassthrough()) { */ case 7:
			$r = ec.mu.Unlock(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$1 = ec.client.Call(cl); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 8:
		_r$2 = ec.push(cl); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		ans = _r$2;
		$r = ec.mu.Unlock(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return ans;
		/* */ } return; } if ($f === undefined) { $f = { $blk: EmbargoClient.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ans = ans; $f.cl = cl; $f.ec = ec; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	EmbargoClient.prototype.Call = function(cl) { return this.$val.Call(cl); };
	EmbargoClient.ptr.prototype.TryQueue = function(cl) {
		var $ptr, _r, ans, cl, ec, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ans = $f.ans; cl = $f.cl; ec = $f.ec; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ec = this;
		$r = ec.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (ec.isPassthrough()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ec.isPassthrough()) { */ case 2:
			$r = ec.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return $ifaceNil;
		/* } */ case 3:
		_r = ec.push(cl); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ans = _r;
		$r = ec.mu.Unlock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return ans;
		/* */ } return; } if ($f === undefined) { $f = { $blk: EmbargoClient.ptr.prototype.TryQueue }; } $f.$ptr = $ptr; $f._r = _r; $f.ans = ans; $f.cl = cl; $f.ec = ec; $f.$s = $s; $f.$r = $r; return $f;
	};
	EmbargoClient.prototype.TryQueue = function(cl) { return this.$val.TryQueue(cl); };
	EmbargoClient.ptr.prototype.Close = function() {
		var $ptr, _r, _r$1, ec, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; ec = $f.ec; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ec = this;
		$r = ec.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* while (true) { */ case 2:
			/* if (!(ec.q.Len() > 0)) { break; } */ if(!(ec.q.Len() > 0)) { $s = 3; continue; }
			$r = (x = ec.calls, x$1 = ec.q.Front(), ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).f.Reject(errQueueCallCancel); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r = ec.q.Pop(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ $s = 2; continue; case 3:
		$r = ec.mu.Unlock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = ec.client.Close(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: EmbargoClient.ptr.prototype.Close }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.ec = ec; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	EmbargoClient.prototype.Close = function() { return this.$val.Close(); };
	ecallList.prototype.Len = function() {
		var $ptr, el;
		el = this;
		return el.$length;
	};
	$ptrType(ecallList).prototype.Len = function() { return this.$get().Len(); };
	ecallList.prototype.Clear = function(i) {
		var $ptr, el, i;
		el = this;
		ecall.copy(((i < 0 || i >= el.$length) ? ($throwRuntimeError("index out of range"), undefined) : el.$array[el.$offset + i]), new ecall.ptr(ptrType.nil, ptrType$1.nil));
	};
	$ptrType(ecallList).prototype.Clear = function(i) { return this.$get().Clear(i); };
	ptrType$1.methods = [{prop: "init", name: "init", pkg: "zombiezen.com/go/capnproto2/internal/fulfiller", typ: $funcType([], [], false)}, {prop: "Fulfill", name: "Fulfill", pkg: "", typ: $funcType([capnp.Struct], [], false)}, {prop: "emptyQueue", name: "emptyQueue", pkg: "zombiezen.com/go/capnproto2/internal/fulfiller", typ: $funcType([capnp.Struct], [mapType], false)}, {prop: "Reject", name: "Reject", pkg: "", typ: $funcType([$error], [], false)}, {prop: "Done", name: "Done", pkg: "", typ: $funcType([], [chanType], false)}, {prop: "Peek", name: "Peek", pkg: "", typ: $funcType([], [capnp.Answer], false)}, {prop: "Struct", name: "Struct", pkg: "", typ: $funcType([], [capnp.Struct, $error], false)}, {prop: "PipelineCall", name: "PipelineCall", pkg: "", typ: $funcType([sliceType$2, ptrType], [capnp.Answer], false)}, {prop: "PipelineClose", name: "PipelineClose", pkg: "", typ: $funcType([sliceType$2], [$error], false)}];
	ptrType$3.methods = [{prop: "push", name: "push", pkg: "zombiezen.com/go/capnproto2/internal/fulfiller", typ: $funcType([ptrType], [capnp.Answer], false)}, {prop: "flushQueue", name: "flushQueue", pkg: "zombiezen.com/go/capnproto2/internal/fulfiller", typ: $funcType([], [], false)}, {prop: "Client", name: "Client", pkg: "", typ: $funcType([], [capnp.Client], false)}, {prop: "isPassthrough", name: "isPassthrough", pkg: "zombiezen.com/go/capnproto2/internal/fulfiller", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([ptrType], [capnp.Answer], false)}, {prop: "TryQueue", name: "TryQueue", pkg: "", typ: $funcType([ptrType], [capnp.Answer], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	ecallList.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([$Int], [], false)}];
	Fulfiller.init("zombiezen.com/go/capnproto2/internal/fulfiller", [{prop: "once", name: "once", exported: false, typ: sync.Once, tag: ""}, {prop: "resolved", name: "resolved", exported: false, typ: chanType$1, tag: ""}, {prop: "mu", name: "mu", exported: false, typ: sync.RWMutex, tag: ""}, {prop: "answer", name: "answer", exported: false, typ: capnp.Answer, tag: ""}, {prop: "queue", name: "queue", exported: false, typ: sliceType, tag: ""}]);
	pcall.init("zombiezen.com/go/capnproto2/internal/fulfiller", [{prop: "transform", name: "transform", exported: false, typ: sliceType$2, tag: ""}, {prop: "ecall", name: "", exported: false, typ: ecall, tag: ""}]);
	EmbargoClient.init("zombiezen.com/go/capnproto2/internal/fulfiller", [{prop: "client", name: "client", exported: false, typ: capnp.Client, tag: ""}, {prop: "mu", name: "mu", exported: false, typ: sync.RWMutex, tag: ""}, {prop: "q", name: "q", exported: false, typ: queue.Queue, tag: ""}, {prop: "calls", name: "calls", exported: false, typ: ecallList, tag: ""}]);
	ecall.init("zombiezen.com/go/capnproto2/internal/fulfiller", [{prop: "call", name: "call", exported: false, typ: ptrType, tag: ""}, {prop: "f", name: "f", exported: false, typ: ptrType$1, tag: ""}]);
	ecallList.init(ecall);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = capnp.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = queue.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		errCallQueueFull = errors.New("capnp: promised answer call queue full");
		errQueueCallCancel = errors.New("capnp: queued call canceled");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["zombiezen.com/go/capnproto2/server"] = (function() {
	var $pkg = {}, $init, errors, context, sort, sync, capnp, fulfiller, Method, Func, Closer, server, call, sortedMethods, ackSignal, callOptionKey, ptrType, structType, sliceType, sliceType$1, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, sliceType$2, ptrType$6, chanType, chanType$1, errClosed, New, newCall, newAckSignal;
	errors = $packages["errors"];
	context = $packages["golang.org/x/net/context"];
	sort = $packages["sort"];
	sync = $packages["sync"];
	capnp = $packages["zombiezen.com/go/capnproto2"];
	fulfiller = $packages["zombiezen.com/go/capnproto2/internal/fulfiller"];
	Method = $pkg.Method = $newType(0, $kindStruct, "server.Method", true, "zombiezen.com/go/capnproto2/server", true, function(Method_, Impl_, ResultsSize_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = new capnp.Method.ptr(new $Uint64(0, 0), 0, "", "");
			this.Impl = $throwNilPointerError;
			this.ResultsSize = new capnp.ObjectSize.ptr(0, 0);
			return;
		}
		this.Method = Method_;
		this.Impl = Impl_;
		this.ResultsSize = ResultsSize_;
	});
	Func = $pkg.Func = $newType(4, $kindFunc, "server.Func", true, "zombiezen.com/go/capnproto2/server", true, null);
	Closer = $pkg.Closer = $newType(8, $kindInterface, "server.Closer", true, "zombiezen.com/go/capnproto2/server", true, null);
	server = $pkg.server = $newType(0, $kindStruct, "server.server", true, "zombiezen.com/go/capnproto2/server", false, function(methods_, closer_, queue_, stop_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.methods = sortedMethods.nil;
			this.closer = $ifaceNil;
			this.queue = $chanNil;
			this.stop = $chanNil;
			this.done = $chanNil;
			return;
		}
		this.methods = methods_;
		this.closer = closer_;
		this.queue = queue_;
		this.stop = stop_;
		this.done = done_;
	});
	call = $pkg.call = $newType(0, $kindStruct, "server.call", true, "zombiezen.com/go/capnproto2/server", false, function(Call_, ans_, method_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Call = ptrType$5.nil;
			this.ans = new fulfiller.Fulfiller.ptr(new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0), $chanNil, new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), $ifaceNil, sliceType$2.nil);
			this.method = ptrType$1.nil;
			return;
		}
		this.Call = Call_;
		this.ans = ans_;
		this.method = method_;
	});
	sortedMethods = $pkg.sortedMethods = $newType(12, $kindSlice, "server.sortedMethods", true, "zombiezen.com/go/capnproto2/server", false, null);
	ackSignal = $pkg.ackSignal = $newType(0, $kindStruct, "server.ackSignal", true, "zombiezen.com/go/capnproto2/server", false, function(c_, once_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.c = $chanNil;
			this.once = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
			return;
		}
		this.c = c_;
		this.once = once_;
	});
	callOptionKey = $pkg.callOptionKey = $newType(4, $kindInt, "server.callOptionKey", true, "zombiezen.com/go/capnproto2/server", false, null);
	ptrType = $ptrType(call);
	structType = $structType("", []);
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType(capnp.CallOption);
	ptrType$1 = $ptrType(Method);
	ptrType$2 = $ptrType(capnp.Method);
	ptrType$3 = $ptrType(capnp.Segment);
	ptrType$4 = $ptrType(ackSignal);
	ptrType$5 = $ptrType(capnp.Call);
	sliceType$2 = $sliceType(fulfiller.pcall);
	ptrType$6 = $ptrType(server);
	chanType = $chanType(ptrType, false, false);
	chanType$1 = $chanType(structType, false, false);
	New = function(methods, closer) {
		var $ptr, closer, methods, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; closer = $f.closer; methods = $f.methods; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = new server.ptr($makeSlice(sortedMethods, methods.$length), closer, new $Chan(ptrType, 0), new $Chan(structType, 0), new $Chan(structType, 0));
		$copySlice(s.methods, methods);
		$r = sort.Sort(s.methods); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$go($methodVal(s, "dispatch"), []);
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: New }; } $f.$ptr = $ptr; $f.closer = closer; $f.methods = methods; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	server.ptr.prototype.dispatch = function() {
		var $ptr, _arg, _r, _r$1, _selection, cl, err, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; _selection = $f._selection; cl = $f.cl; err = $f.err; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		s = this;
		$deferred.push([function(_arg) { $close(_arg); }, [s.done]]);
		/* while (true) { */ case 1:
			_r = $select([[s.queue], [s.stop]]); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_selection = _r;
			/* */ if (_selection[0] === 0) { $s = 4; continue; }
			/* */ if (_selection[0] === 1) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_selection[0] === 0) { */ case 4:
				cl = _selection[1][0];
				_r$1 = s.startCall(cl); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err = _r$1;
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 8:
					$r = cl.ans.Reject(err); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 9:
				$s = 6; continue;
			/* } else if (_selection[0] === 1) { */ case 5:
				$s = -1; return;
			/* } */ case 6:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: server.ptr.prototype.dispatch }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f._selection = _selection; $f.cl = cl; $f.err = err; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	server.prototype.dispatch = function() { return this.$val.dispatch(); };
	server.ptr.prototype.startCall = function(cl) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _selection, _tuple, _tuple$1, acksig, cl, err, opts, out, results, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _selection = $f._selection; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; acksig = $f.acksig; cl = $f.cl; err = $f.err; opts = $f.opts; out = $f.out; results = $f.results; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cl = [cl];
		opts = [opts];
		results = [results];
		s = this;
		_r = capnp.NewMessage(capnp.SingleSegment(sliceType.nil)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		out = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = capnp.NewRootStruct(out, $clone(cl[0].method.ResultsSize, capnp.ObjectSize)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		results[0] = $clone(_tuple$1[0], capnp.Struct);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		acksig = newAckSignal();
		_r$2 = $clone(cl[0].Call.Options, capnp.CallOptions).With(new sliceType$1([$clone(capnp.SetOptionValue(new callOptionKey(1), acksig), capnp.CallOption)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		opts[0] = $clone(_r$2, capnp.CallOptions);
		$go((function(cl, opts, results) { return function $b() {
			var $ptr, _r$3, err$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; err$1 = $f.err$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$3 = cl[0].method.Impl(cl[0].Call.Ctx, $clone(opts[0], capnp.CallOptions), $clone(cl[0].Call.Params, capnp.Struct), $clone(results[0], capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			err$1 = _r$3;
			/* */ if ($interfaceIsEqual(err$1, $ifaceNil)) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ($interfaceIsEqual(err$1, $ifaceNil)) { */ case 2:
				$r = cl[0].ans.Fulfill($clone(results[0], capnp.Struct)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 4; continue;
			/* } else { */ case 3:
				$r = cl[0].ans.Reject(err$1); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.err$1 = err$1; $f.$s = $s; $f.$r = $r; return $f;
		}; })(cl, opts, results), []);
		_r$3 = cl[0].ans.Done(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = cl[0].Call.Ctx.Done(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = $select([[acksig.c], [_r$3], [_r$4]]); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_selection = _r$5;
		/* */ if (_selection[0] === 0) { $s = 7; continue; }
		/* */ if (_selection[0] === 1) { $s = 8; continue; }
		/* */ if (_selection[0] === 2) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (_selection[0] === 0) { */ case 7:
			$s = 10; continue;
		/* } else if (_selection[0] === 1) { */ case 8:
			$s = 10; continue;
		/* } else if (_selection[0] === 2) { */ case 9:
		/* } */ case 10:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: server.ptr.prototype.startCall }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._selection = _selection; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.acksig = acksig; $f.cl = cl; $f.err = err; $f.opts = opts; $f.out = out; $f.results = results; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	server.prototype.startCall = function(cl) { return this.$val.startCall(cl); };
	server.ptr.prototype.Call = function(cl) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _selection, _tuple, cl, err, s, scall, sm, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _selection = $f._selection; _tuple = $f._tuple; cl = $f.cl; err = $f.err; s = $f.s; scall = $f.scall; sm = $f.sm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.methods.find(cl.Method); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		sm = _r;
		if (sm === ptrType$1.nil) {
			$s = -1; return capnp.ErrorAnswer(new capnp.MethodError.ptr(cl.Method, capnp.ErrUnimplemented));
		}
		_r$1 = cl.Copy(ptrType$3.nil); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		cl = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return capnp.ErrorAnswer(err);
		}
		scall = newCall(cl, sm);
		_r$2 = cl.Ctx.Done(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = $select([[s.queue, scall], [s.stop], [_r$2]]); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_selection = _r$3;
		/* */ if (_selection[0] === 0) { $s = 5; continue; }
		/* */ if (_selection[0] === 1) { $s = 6; continue; }
		/* */ if (_selection[0] === 2) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (_selection[0] === 0) { */ case 5:
			$s = -1; return scall.ans;
		/* } else if (_selection[0] === 1) { */ case 6:
			$s = -1; return capnp.ErrorAnswer(errClosed);
		/* } else if (_selection[0] === 2) { */ case 7:
			_r$4 = cl.Ctx.Err(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = capnp.ErrorAnswer(_r$4); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return _r$5;
		/* } */ case 8:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: server.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._selection = _selection; $f._tuple = _tuple; $f.cl = cl; $f.err = err; $f.s = s; $f.scall = scall; $f.sm = sm; $f.$s = $s; $f.$r = $r; return $f;
	};
	server.prototype.Call = function(cl) { return this.$val.Call(cl); };
	server.ptr.prototype.Close = function() {
		var $ptr, _r, _r$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$close(s.stop);
		_r = $recv(s.done); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r[0];
		if ($interfaceIsEqual(s.closer, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		_r$1 = s.closer.Close(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: server.ptr.prototype.Close }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	server.prototype.Close = function() { return this.$val.Close(); };
	newCall = function(cl, sm) {
		var $ptr, cl, sm;
		return new call.ptr(cl, new fulfiller.Fulfiller.ptr(new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0), $chanNil, new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), $ifaceNil, sliceType$2.nil), sm);
	};
	sortedMethods.prototype.find = function(id) {
		var $ptr, _r, i, id, m, sm, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; id = $f.id; m = $f.m; sm = $f.sm; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		id = [id];
		sm = [sm];
		sm[0] = this;
		_r = sort.Search(sm[0].$length, (function(id, sm) { return function(i) {
			var $ptr, i, m, x, x$1, x$2, x$3;
			m = ((i < 0 || i >= sm[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : sm[0].$array[sm[0].$offset + i]);
			if (!((x = m.Method.InterfaceID, x$1 = id[0].InterfaceID, (x.$high === x$1.$high && x.$low === x$1.$low)))) {
				return (x$2 = m.Method.InterfaceID, x$3 = id[0].InterfaceID, (x$2.$high > x$3.$high || (x$2.$high === x$3.$high && x$2.$low >= x$3.$low)));
			}
			return m.Method.MethodID >= id[0].MethodID;
		}; })(id, sm)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i === sm[0].$length) {
			$s = -1; return ptrType$1.nil;
		}
		m = ((i < 0 || i >= sm[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : sm[0].$array[sm[0].$offset + i]);
		if (!((x = m.Method.InterfaceID, x$1 = id[0].InterfaceID, (x.$high === x$1.$high && x.$low === x$1.$low))) || !((m.Method.MethodID === id[0].MethodID))) {
			$s = -1; return ptrType$1.nil;
		}
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: sortedMethods.prototype.find }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.id = id; $f.m = m; $f.sm = sm; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(sortedMethods).prototype.find = function(id) { return this.$get().find(id); };
	sortedMethods.prototype.Len = function() {
		var $ptr, sm;
		sm = this;
		return sm.$length;
	};
	$ptrType(sortedMethods).prototype.Len = function() { return this.$get().Len(); };
	sortedMethods.prototype.Less = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, id1, id2, j, sm;
		sm = this;
		_tmp = ((i < 0 || i >= sm.$length) ? ($throwRuntimeError("index out of range"), undefined) : sm.$array[sm.$offset + i]).Method.InterfaceID;
		_tmp$1 = ((j < 0 || j >= sm.$length) ? ($throwRuntimeError("index out of range"), undefined) : sm.$array[sm.$offset + j]).Method.InterfaceID;
		id1 = _tmp;
		id2 = _tmp$1;
		if (!((id1.$high === id2.$high && id1.$low === id2.$low))) {
			return (id1.$high < id2.$high || (id1.$high === id2.$high && id1.$low < id2.$low));
		}
		return ((i < 0 || i >= sm.$length) ? ($throwRuntimeError("index out of range"), undefined) : sm.$array[sm.$offset + i]).Method.MethodID < ((j < 0 || j >= sm.$length) ? ($throwRuntimeError("index out of range"), undefined) : sm.$array[sm.$offset + j]).Method.MethodID;
	};
	$ptrType(sortedMethods).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	sortedMethods.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, sm;
		sm = this;
		_tmp = $clone(((j < 0 || j >= sm.$length) ? ($throwRuntimeError("index out of range"), undefined) : sm.$array[sm.$offset + j]), Method);
		_tmp$1 = $clone(((i < 0 || i >= sm.$length) ? ($throwRuntimeError("index out of range"), undefined) : sm.$array[sm.$offset + i]), Method);
		Method.copy(((i < 0 || i >= sm.$length) ? ($throwRuntimeError("index out of range"), undefined) : sm.$array[sm.$offset + i]), _tmp);
		Method.copy(((j < 0 || j >= sm.$length) ? ($throwRuntimeError("index out of range"), undefined) : sm.$array[sm.$offset + j]), _tmp$1);
	};
	$ptrType(sortedMethods).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	newAckSignal = function() {
		var $ptr;
		return new ackSignal.ptr(new $Chan(structType, 0), new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0));
	};
	ptrType$6.methods = [{prop: "dispatch", name: "dispatch", pkg: "zombiezen.com/go/capnproto2/server", typ: $funcType([], [], false)}, {prop: "startCall", name: "startCall", pkg: "zombiezen.com/go/capnproto2/server", typ: $funcType([ptrType], [$error], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([ptrType$5], [capnp.Answer], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	sortedMethods.methods = [{prop: "find", name: "find", pkg: "zombiezen.com/go/capnproto2/server", typ: $funcType([ptrType$2], [ptrType$1], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	ptrType$4.methods = [{prop: "signal", name: "signal", pkg: "zombiezen.com/go/capnproto2/server", typ: $funcType([], [], false)}];
	Method.init("", [{prop: "Method", name: "", exported: true, typ: capnp.Method, tag: ""}, {prop: "Impl", name: "Impl", exported: true, typ: Func, tag: ""}, {prop: "ResultsSize", name: "ResultsSize", exported: true, typ: capnp.ObjectSize, tag: ""}]);
	Func.init([context.Context, capnp.CallOptions, capnp.Struct, capnp.Struct], [$error], false);
	Closer.init([{prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}]);
	server.init("zombiezen.com/go/capnproto2/server", [{prop: "methods", name: "methods", exported: false, typ: sortedMethods, tag: ""}, {prop: "closer", name: "closer", exported: false, typ: Closer, tag: ""}, {prop: "queue", name: "queue", exported: false, typ: chanType, tag: ""}, {prop: "stop", name: "stop", exported: false, typ: chanType$1, tag: ""}, {prop: "done", name: "done", exported: false, typ: chanType$1, tag: ""}]);
	call.init("zombiezen.com/go/capnproto2/server", [{prop: "Call", name: "", exported: true, typ: ptrType$5, tag: ""}, {prop: "ans", name: "ans", exported: false, typ: fulfiller.Fulfiller, tag: ""}, {prop: "method", name: "method", exported: false, typ: ptrType$1, tag: ""}]);
	sortedMethods.init(Method);
	ackSignal.init("zombiezen.com/go/capnproto2/server", [{prop: "c", name: "c", exported: false, typ: chanType$1, tag: ""}, {prop: "once", name: "once", exported: false, typ: sync.Once, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = context.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = capnp.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fulfiller.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		errClosed = errors.New("capnp: server closed");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/kothar/capngopher/example/service"] = (function() {
	var $pkg = {}, $init, context, log, capnp, text, schemas, server, Pinger, Pinger_ping, Pinger_ping_Params, Pinger_ping_Results, Pinger_ping_Results_Promise, PingerServer, ptrType, ptrType$1, sliceType, sliceType$1, sliceType$2, funcType, sliceType$3, sliceType$4, ptrType$2, Pinger_ServerToClient, Pinger_Methods, init;
	context = $packages["golang.org/x/net/context"];
	log = $packages["log"];
	capnp = $packages["zombiezen.com/go/capnproto2"];
	text = $packages["zombiezen.com/go/capnproto2/encoding/text"];
	schemas = $packages["zombiezen.com/go/capnproto2/schemas"];
	server = $packages["zombiezen.com/go/capnproto2/server"];
	Pinger = $pkg.Pinger = $newType(0, $kindStruct, "service.Pinger", true, "github.com/kothar/capngopher/example/service", true, function(Client_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Client = $ifaceNil;
			return;
		}
		this.Client = Client_;
	});
	Pinger_ping = $pkg.Pinger_ping = $newType(0, $kindStruct, "service.Pinger_ping", true, "github.com/kothar/capngopher/example/service", true, function(Ctx_, Options_, Params_, Results_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Ctx = $ifaceNil;
			this.Options = new capnp.CallOptions.ptr(false);
			this.Params = new Pinger_ping_Params.ptr(new capnp.Struct.ptr(ptrType$1.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0));
			this.Results = new Pinger_ping_Results.ptr(new capnp.Struct.ptr(ptrType$1.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0));
			return;
		}
		this.Ctx = Ctx_;
		this.Options = Options_;
		this.Params = Params_;
		this.Results = Results_;
	});
	Pinger_ping_Params = $pkg.Pinger_ping_Params = $newType(0, $kindStruct, "service.Pinger_ping_Params", true, "github.com/kothar/capngopher/example/service", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType$1.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Pinger_ping_Results = $pkg.Pinger_ping_Results = $newType(0, $kindStruct, "service.Pinger_ping_Results", true, "github.com/kothar/capngopher/example/service", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType$1.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Pinger_ping_Results_Promise = $pkg.Pinger_ping_Results_Promise = $newType(0, $kindStruct, "service.Pinger_ping_Results_Promise", true, "github.com/kothar/capngopher/example/service", true, function(Pipeline_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pipeline = ptrType.nil;
			return;
		}
		this.Pipeline = Pipeline_;
	});
	PingerServer = $pkg.PingerServer = $newType(0, $kindStruct, "service.PingerServer", true, "github.com/kothar/capngopher/example/service", true, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	ptrType = $ptrType(capnp.Pipeline);
	ptrType$1 = $ptrType(capnp.Segment);
	sliceType = $sliceType(server.Method);
	sliceType$1 = $sliceType($Uint64);
	sliceType$2 = $sliceType($emptyInterface);
	funcType = $funcType([Pinger_ping_Params], [$error], false);
	sliceType$3 = $sliceType(capnp.CallOption);
	sliceType$4 = $sliceType($Uint8);
	ptrType$2 = $ptrType(PingerServer);
	Pinger.ptr.prototype.Ping = function(ctx, params, opts) {
		var $ptr, _r, _r$1, _r$2, c, call, ctx, opts, params, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; c = $f.c; call = $f.call; ctx = $f.ctx; opts = $f.opts; params = $f.params; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		params = [params];
		c = this;
		if ($interfaceIsEqual(c.Client, $ifaceNil)) {
			$s = -1; return new Pinger_ping_Results_Promise.ptr(capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient)));
		}
		_r = capnp.NewCallOptions(opts); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		call = new capnp.Call.ptr(ctx, new capnp.Method.ptr(new $Uint64(2951931748, 4188023562), 0, "ping.capnp:Pinger", "ping"), new capnp.Struct.ptr(ptrType$1.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0), $throwNilPointerError, new capnp.ObjectSize.ptr(0, 0), $clone(_r, capnp.CallOptions));
		/* */ if (!(params[0] === $throwNilPointerError)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(params[0] === $throwNilPointerError)) { */ case 2:
			capnp.ObjectSize.copy(call.ParamsSize, new capnp.ObjectSize.ptr(0, 1));
			call.ParamsFunc = (function(params) { return function $b(s) {
				var $ptr, _r$1, s, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r$1 = params[0](new Pinger_ping_Params.ptr($clone(s, capnp.Struct))); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
			}; })(params);
		/* } */ case 3:
		_r$1 = c.Client.Call(call); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = capnp.NewPipeline(_r$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return new Pinger_ping_Results_Promise.ptr(_r$2);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pinger.ptr.prototype.Ping }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.c = c; $f.call = call; $f.ctx = ctx; $f.opts = opts; $f.params = params; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pinger.prototype.Ping = function(ctx, params, opts) { return this.$val.Ping(ctx, params, opts); };
	Pinger_ServerToClient = function(s) {
		var $ptr, _r, _tuple, c, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(s, server.Closer, true);
		c = _tuple[0];
		_r = server.New(Pinger_Methods(sliceType.nil, s), c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return new Pinger.ptr(_r);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pinger_ServerToClient }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Pinger_ServerToClient = Pinger_ServerToClient;
	Pinger_Methods = function(methods, s) {
		var $ptr, methods, s;
		if (methods.$capacity === 0) {
			methods = $makeSlice(sliceType, 0, 1);
		}
		methods = $append(methods, new server.Method.ptr(new capnp.Method.ptr(new $Uint64(2951931748, 4188023562), 0, "ping.capnp:Pinger", "ping"), (function $b(c, opts, p, r) {
			var $ptr, _r, c, call, opts, p, r, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; call = $f.call; opts = $f.opts; p = $f.p; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			call = new Pinger_ping.ptr(c, $clone(opts, capnp.CallOptions), new Pinger_ping_Params.ptr($clone(p, capnp.Struct)), new Pinger_ping_Results.ptr($clone(r, capnp.Struct)));
			_r = s.Ping($clone(call, Pinger_ping)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.call = call; $f.opts = opts; $f.p = p; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
		}), new capnp.ObjectSize.ptr(0, 1)));
		return methods;
	};
	$pkg.Pinger_Methods = Pinger_Methods;
	Pinger_ping_Params.ptr.prototype.String = function() {
		var $ptr, _r, _tuple, s, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; s = $f.s; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = text.Marshal(new $Uint64(3609290406, 3933793539), $clone(s.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		str = _tuple[0];
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pinger_ping_Params.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.s = s; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pinger_ping_Params.prototype.String = function() { return this.$val.String(); };
	Pinger_ping_Params.ptr.prototype.Msg = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).Text(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pinger_ping_Params.ptr.prototype.Msg }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pinger_ping_Params.prototype.Msg = function() { return this.$val.Msg(); };
	Pinger_ping_Params.ptr.prototype.HasMsg = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pinger_ping_Params.ptr.prototype.HasMsg }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pinger_ping_Params.prototype.HasMsg = function() { return this.$val.HasMsg(); };
	Pinger_ping_Params.ptr.prototype.MsgBytes = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).TextBytes(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pinger_ping_Params.ptr.prototype.MsgBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pinger_ping_Params.prototype.MsgBytes = function() { return this.$val.MsgBytes(); };
	Pinger_ping_Params.ptr.prototype.SetMsg = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetText(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pinger_ping_Params.ptr.prototype.SetMsg }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pinger_ping_Params.prototype.SetMsg = function(v) { return this.$val.SetMsg(v); };
	Pinger_ping_Results.ptr.prototype.String = function() {
		var $ptr, _r, _tuple, s, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; s = $f.s; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = text.Marshal(new $Uint64(2733248413, 1754564315), $clone(s.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		str = _tuple[0];
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pinger_ping_Results.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.s = s; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pinger_ping_Results.prototype.String = function() { return this.$val.String(); };
	Pinger_ping_Results.ptr.prototype.Msg = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).Text(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pinger_ping_Results.ptr.prototype.Msg }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pinger_ping_Results.prototype.Msg = function() { return this.$val.Msg(); };
	Pinger_ping_Results.ptr.prototype.HasMsg = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pinger_ping_Results.ptr.prototype.HasMsg }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pinger_ping_Results.prototype.HasMsg = function() { return this.$val.HasMsg(); };
	Pinger_ping_Results.ptr.prototype.MsgBytes = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).TextBytes(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pinger_ping_Results.ptr.prototype.MsgBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pinger_ping_Results.prototype.MsgBytes = function() { return this.$val.MsgBytes(); };
	Pinger_ping_Results.ptr.prototype.SetMsg = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetText(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pinger_ping_Results.ptr.prototype.SetMsg }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pinger_ping_Results.prototype.SetMsg = function(v) { return this.$val.SetMsg(v); };
	Pinger_ping_Results_Promise.ptr.prototype.Struct = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.Pipeline.Struct(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		s = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new Pinger_ping_Results.ptr($clone(s, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pinger_ping_Results_Promise.ptr.prototype.Struct }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pinger_ping_Results_Promise.prototype.Struct = function() { return this.$val.Struct(); };
	init = function() {
		var $ptr;
		schemas.Register("x\xDA\x12\xE8t`2d\xCDgb`\b\x94ae\xFB\x7F\xBBmJ\xC6\\\xFEW\x8B\x18\x04\x85\x18\x19\x18X\x19\xD9\x19\x18\x84e\x19\x7F10\n+2\xDA30\xFE\xE7\xD2^\xF03\xE5\xF9\xA7\xF5\f\x82\xDC\xCC\xFF[\xCB\x14\x92+\xF9\xE6-c``\x14vd\x9C$\xEC\tV\xEE\xCA\xE8.\x9C\vb\xFDg~[\xF1jY\x9A\xE2ud\xC3B\x19?10\nG2\xDA3\xE8\xFE/\xC8\xCCK\xD7KN,`\xCA+\xB0\n\xC8\xCCKO-\xD2\x03\t\xA9\x04\xD9\xA7\x16\x97\xE6\x94\x14\x07\xB20\xB300\xB0020\b\xF2*10\x04r03\x06\x8A01\xB2\xE7\x16\xA73\xF2001\xF200\xC2\xCD`\x84\x99\xC1X\x14\xC0\xC8\x18\xC8\xC2\xCC\x8A\xE4\x00F\x98\xB7\x04\x05\xB5\x18\x98\x04Y\xD9\xF9A\xDA\x1C\x18\x03\x18\x19q:\"@>\xB1(1\x97\x187\x00\x02\x00\x00\xFF\xFF\xA9\x0EQ\x05", new sliceType$1([new $Uint64(2733248413, 1754564315), new $Uint64(2951931748, 4188023562), new $Uint64(3609290406, 3933793539)]));
	};
	PingerServer.ptr.prototype.Ping = function(p) {
		var $ptr, _r, _r$1, _tuple, err, err$1, msg, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; msg = $f.msg; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(p.Params, Pinger_ping_Params).Msg(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		msg = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$r = log.Printf("Ping: %s\n", new sliceType$2([new $String(msg)])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = $clone(p.Results, Pinger_ping_Results).SetMsg("Ping: " + msg); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err$1 = _r$1;
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PingerServer.ptr.prototype.Ping }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.msg = msg; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	PingerServer.prototype.Ping = function(p) { return this.$val.Ping(p); };
	Pinger.methods = [{prop: "Ping", name: "Ping", pkg: "", typ: $funcType([context.Context, funcType, sliceType$3], [Pinger_ping_Results_Promise], true)}];
	Pinger_ping_Params.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Msg", name: "Msg", pkg: "", typ: $funcType([], [$String, $error], false)}, {prop: "HasMsg", name: "HasMsg", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "MsgBytes", name: "MsgBytes", pkg: "", typ: $funcType([], [sliceType$4, $error], false)}, {prop: "SetMsg", name: "SetMsg", pkg: "", typ: $funcType([$String], [$error], false)}];
	Pinger_ping_Results.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Msg", name: "Msg", pkg: "", typ: $funcType([], [$String, $error], false)}, {prop: "HasMsg", name: "HasMsg", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "MsgBytes", name: "MsgBytes", pkg: "", typ: $funcType([], [sliceType$4, $error], false)}, {prop: "SetMsg", name: "SetMsg", pkg: "", typ: $funcType([$String], [$error], false)}];
	Pinger_ping_Results_Promise.methods = [{prop: "Struct", name: "Struct", pkg: "", typ: $funcType([], [Pinger_ping_Results, $error], false)}];
	ptrType$2.methods = [{prop: "Ping", name: "Ping", pkg: "", typ: $funcType([Pinger_ping], [$error], false)}];
	Pinger.init("", [{prop: "Client", name: "Client", exported: true, typ: capnp.Client, tag: ""}]);
	Pinger_ping.init("", [{prop: "Ctx", name: "Ctx", exported: true, typ: context.Context, tag: ""}, {prop: "Options", name: "Options", exported: true, typ: capnp.CallOptions, tag: ""}, {prop: "Params", name: "Params", exported: true, typ: Pinger_ping_Params, tag: ""}, {prop: "Results", name: "Results", exported: true, typ: Pinger_ping_Results, tag: ""}]);
	Pinger_ping_Params.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Pinger_ping_Results.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Pinger_ping_Results_Promise.init("", [{prop: "Pipeline", name: "", exported: true, typ: ptrType, tag: ""}]);
	PingerServer.init("", []);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = context.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = log.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = capnp.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = text.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = schemas.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = server.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["zombiezen.com/go/capnproto2/rpc/internal/refcount"] = (function() {
	var $pkg = {}, $init, errors, runtime, sync, capnp, RefCount, Ref, ptrType, ptrType$1, funcType, ptrType$2, errZeroRef, errClosed, New;
	errors = $packages["errors"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	capnp = $packages["zombiezen.com/go/capnproto2"];
	RefCount = $pkg.RefCount = $newType(0, $kindStruct, "refcount.RefCount", true, "zombiezen.com/go/capnproto2/rpc/internal/refcount", true, function(Client_, mu_, refs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Client = $ifaceNil;
			this.mu = new sync.Mutex.ptr(0, 0);
			this.refs = 0;
			return;
		}
		this.Client = Client_;
		this.mu = mu_;
		this.refs = refs_;
	});
	Ref = $pkg.Ref = $newType(0, $kindStruct, "refcount.Ref", true, "zombiezen.com/go/capnproto2/rpc/internal/refcount", true, function(rc_, once_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rc = ptrType.nil;
			this.once = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
			return;
		}
		this.rc = rc_;
		this.once = once_;
	});
	ptrType = $ptrType(RefCount);
	ptrType$1 = $ptrType(Ref);
	funcType = $funcType([ptrType$1], [$error], false);
	ptrType$2 = $ptrType(capnp.Call);
	New = function(c) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, c, ok, rc, ref1, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; c = $f.c; ok = $f.ok; rc = $f.rc; ref1 = $f.ref1; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rc = ptrType.nil;
		ref1 = $ifaceNil;
		_tuple = $assertType(c, ptrType$1, true);
		rr = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_tmp = rr.rc;
			_r = rr.rc.Ref(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tmp$1 = _r;
			rc = _tmp;
			ref1 = _tmp$1;
			$s = -1; return [rc, ref1];
		/* } */ case 2:
		rc = new RefCount.ptr(c, new sync.Mutex.ptr(0, 0), 1);
		ref1 = rc.newRef();
		$s = -1; return [rc, ref1];
		/* */ } return; } if ($f === undefined) { $f = { $blk: New }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.c = c; $f.ok = ok; $f.rc = rc; $f.ref1 = ref1; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	RefCount.ptr.prototype.Ref = function() {
		var $ptr, rc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; rc = $f.rc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rc = this;
		$r = rc.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (rc.refs <= 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (rc.refs <= 0) { */ case 2:
			$r = rc.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return capnp.ErrorClient(errZeroRef);
		/* } */ case 3:
		rc.refs = rc.refs + (1) >> 0;
		$r = rc.mu.Unlock(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return rc.newRef();
		/* */ } return; } if ($f === undefined) { $f = { $blk: RefCount.ptr.prototype.Ref }; } $f.$ptr = $ptr; $f.rc = rc; $f.$s = $s; $f.$r = $r; return $f;
	};
	RefCount.prototype.Ref = function() { return this.$val.Ref(); };
	RefCount.ptr.prototype.newRef = function() {
		var $ptr, r, rc;
		rc = this;
		r = new Ref.ptr(rc, new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0));
		runtime.SetFinalizer(r, new funcType($methodExpr(ptrType$1, "Close")));
		return r;
	};
	RefCount.prototype.newRef = function() { return this.$val.newRef(); };
	RefCount.ptr.prototype.call = function(cl) {
		var $ptr, _r, ans, cl, rc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ans = $f.ans; cl = $f.cl; rc = $f.rc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rc = this;
		$r = rc.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (rc.refs <= 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (rc.refs <= 0) { */ case 2:
			$r = rc.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return capnp.ErrorAnswer(errClosed);
		/* } */ case 3:
		_r = rc.Client.Call(cl); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ans = _r;
		$r = rc.mu.Unlock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return ans;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RefCount.ptr.prototype.call }; } $f.$ptr = $ptr; $f._r = _r; $f.ans = ans; $f.cl = cl; $f.rc = rc; $f.$s = $s; $f.$r = $r; return $f;
	};
	RefCount.prototype.call = function(cl) { return this.$val.call(cl); };
	RefCount.ptr.prototype.decref = function() {
		var $ptr, _r, rc, shouldClose, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; rc = $f.rc; shouldClose = $f.shouldClose; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rc = this;
		shouldClose = false;
		$r = rc.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (rc.refs <= 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (rc.refs <= 0) { */ case 2:
			$r = rc.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return errClosed;
		/* } */ case 3:
		rc.refs = rc.refs - (1) >> 0;
		if (rc.refs === 0) {
			shouldClose = true;
		}
		$r = rc.mu.Unlock(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (shouldClose) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (shouldClose) { */ case 6:
			_r = rc.Client.Close(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 7:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RefCount.ptr.prototype.decref }; } $f.$ptr = $ptr; $f._r = _r; $f.rc = rc; $f.shouldClose = shouldClose; $f.$s = $s; $f.$r = $r; return $f;
	};
	RefCount.prototype.decref = function() { return this.$val.decref(); };
	Ref.ptr.prototype.Call = function(cl) {
		var $ptr, _r, cl, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; cl = $f.cl; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.rc.call(cl); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Ref.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r = _r; $f.cl = cl; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Ref.prototype.Call = function(cl) { return this.$val.Call(cl); };
	Ref.ptr.prototype.Client = function() {
		var $ptr, r;
		r = this;
		return r.rc.Client;
	};
	Ref.prototype.Client = function() { return this.$val.Client(); };
	Ref.ptr.prototype.Close = function() {
		var $ptr, closed, err, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; closed = $f.closed; err = $f.err; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		closed = [closed];
		err = [err];
		r = [r];
		r[0] = this;
		err[0] = $ifaceNil;
		closed[0] = false;
		$r = r[0].once.Do((function(closed, err, r) { return function $b() {
			var $ptr, _r, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = r[0].rc.decref(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err[0] = _r;
			closed[0] = true;
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
		}; })(closed, err, r)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!closed[0]) {
			$s = -1; return errClosed;
		}
		$s = -1; return err[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Ref.ptr.prototype.Close }; } $f.$ptr = $ptr; $f.closed = closed; $f.err = err; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Ref.prototype.Close = function() { return this.$val.Close(); };
	ptrType.methods = [{prop: "Ref", name: "Ref", pkg: "", typ: $funcType([], [capnp.Client], false)}, {prop: "newRef", name: "newRef", pkg: "zombiezen.com/go/capnproto2/rpc/internal/refcount", typ: $funcType([], [ptrType$1], false)}, {prop: "call", name: "call", pkg: "zombiezen.com/go/capnproto2/rpc/internal/refcount", typ: $funcType([ptrType$2], [capnp.Answer], false)}, {prop: "decref", name: "decref", pkg: "zombiezen.com/go/capnproto2/rpc/internal/refcount", typ: $funcType([], [$error], false)}];
	ptrType$1.methods = [{prop: "Call", name: "Call", pkg: "", typ: $funcType([ptrType$2], [capnp.Answer], false)}, {prop: "Client", name: "Client", pkg: "", typ: $funcType([], [capnp.Client], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	RefCount.init("zombiezen.com/go/capnproto2/rpc/internal/refcount", [{prop: "Client", name: "Client", exported: true, typ: capnp.Client, tag: ""}, {prop: "mu", name: "mu", exported: false, typ: sync.Mutex, tag: ""}, {prop: "refs", name: "refs", exported: false, typ: $Int, tag: ""}]);
	Ref.init("zombiezen.com/go/capnproto2/rpc/internal/refcount", [{prop: "rc", name: "rc", exported: false, typ: ptrType, tag: ""}, {prop: "once", name: "once", exported: false, typ: sync.Once, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = capnp.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		errZeroRef = errors.New("rpc: Ref() called on zeroed refcount");
		errClosed = errors.New("rpc: Close() called on closed client");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["zombiezen.com/go/capnproto2/std/capnp/rpc"] = (function() {
	var $pkg = {}, $init, strconv, capnp, text, schemas, Message, Message_Which, Bootstrap, Call, Call_sendResultsTo, Call_sendResultsTo_Which, Return, Return_Which, Finish, Resolve, Resolve_Which, Release, Disembargo, Disembargo_context, Disembargo_context_Which, Provide, Accept, Join, MessageTarget, MessageTarget_Which, Payload, CapDescriptor, CapDescriptor_Which, CapDescriptor_List, PromisedAnswer, PromisedAnswer_Op, PromisedAnswer_Op_Which, PromisedAnswer_Op_List, ThirdPartyCapDescriptor, Exception, Exception_Type, ptrType, sliceType, sliceType$1, NewMessage, NewRootMessage, ReadRootMessage, NewBootstrap, NewCall, NewReturn, NewFinish, NewResolve, NewRelease, NewDisembargo, NewProvide, NewAccept, NewJoin, NewMessageTarget, NewPayload, NewCapDescriptor, NewCapDescriptor_List, NewPromisedAnswer, NewPromisedAnswer_Op_List, NewThirdPartyCapDescriptor, NewException, init;
	strconv = $packages["strconv"];
	capnp = $packages["zombiezen.com/go/capnproto2"];
	text = $packages["zombiezen.com/go/capnproto2/encoding/text"];
	schemas = $packages["zombiezen.com/go/capnproto2/schemas"];
	Message = $pkg.Message = $newType(0, $kindStruct, "rpc.Message", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Message_Which = $pkg.Message_Which = $newType(2, $kindUint16, "rpc.Message_Which", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, null);
	Bootstrap = $pkg.Bootstrap = $newType(0, $kindStruct, "rpc.Bootstrap", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Call = $pkg.Call = $newType(0, $kindStruct, "rpc.Call", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Call_sendResultsTo = $pkg.Call_sendResultsTo = $newType(0, $kindStruct, "rpc.Call_sendResultsTo", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Call_sendResultsTo_Which = $pkg.Call_sendResultsTo_Which = $newType(2, $kindUint16, "rpc.Call_sendResultsTo_Which", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, null);
	Return = $pkg.Return = $newType(0, $kindStruct, "rpc.Return", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Return_Which = $pkg.Return_Which = $newType(2, $kindUint16, "rpc.Return_Which", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, null);
	Finish = $pkg.Finish = $newType(0, $kindStruct, "rpc.Finish", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Resolve = $pkg.Resolve = $newType(0, $kindStruct, "rpc.Resolve", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Resolve_Which = $pkg.Resolve_Which = $newType(2, $kindUint16, "rpc.Resolve_Which", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, null);
	Release = $pkg.Release = $newType(0, $kindStruct, "rpc.Release", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Disembargo = $pkg.Disembargo = $newType(0, $kindStruct, "rpc.Disembargo", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Disembargo_context = $pkg.Disembargo_context = $newType(0, $kindStruct, "rpc.Disembargo_context", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Disembargo_context_Which = $pkg.Disembargo_context_Which = $newType(2, $kindUint16, "rpc.Disembargo_context_Which", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, null);
	Provide = $pkg.Provide = $newType(0, $kindStruct, "rpc.Provide", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Accept = $pkg.Accept = $newType(0, $kindStruct, "rpc.Accept", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Join = $pkg.Join = $newType(0, $kindStruct, "rpc.Join", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	MessageTarget = $pkg.MessageTarget = $newType(0, $kindStruct, "rpc.MessageTarget", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	MessageTarget_Which = $pkg.MessageTarget_Which = $newType(2, $kindUint16, "rpc.MessageTarget_Which", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, null);
	Payload = $pkg.Payload = $newType(0, $kindStruct, "rpc.Payload", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	CapDescriptor = $pkg.CapDescriptor = $newType(0, $kindStruct, "rpc.CapDescriptor", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	CapDescriptor_Which = $pkg.CapDescriptor_Which = $newType(2, $kindUint16, "rpc.CapDescriptor_Which", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, null);
	CapDescriptor_List = $pkg.CapDescriptor_List = $newType(0, $kindStruct, "rpc.CapDescriptor_List", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	PromisedAnswer = $pkg.PromisedAnswer = $newType(0, $kindStruct, "rpc.PromisedAnswer", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	PromisedAnswer_Op = $pkg.PromisedAnswer_Op = $newType(0, $kindStruct, "rpc.PromisedAnswer_Op", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	PromisedAnswer_Op_Which = $pkg.PromisedAnswer_Op_Which = $newType(2, $kindUint16, "rpc.PromisedAnswer_Op_Which", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, null);
	PromisedAnswer_Op_List = $pkg.PromisedAnswer_Op_List = $newType(0, $kindStruct, "rpc.PromisedAnswer_Op_List", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.List = List_;
	});
	ThirdPartyCapDescriptor = $pkg.ThirdPartyCapDescriptor = $newType(0, $kindStruct, "rpc.ThirdPartyCapDescriptor", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Exception = $pkg.Exception = $newType(0, $kindStruct, "rpc.Exception", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, function(Struct_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			return;
		}
		this.Struct = Struct_;
	});
	Exception_Type = $pkg.Exception_Type = $newType(2, $kindUint16, "rpc.Exception_Type", true, "zombiezen.com/go/capnproto2/std/capnp/rpc", true, null);
	ptrType = $ptrType(capnp.Segment);
	sliceType = $sliceType($Uint64);
	sliceType$1 = $sliceType($Uint8);
	Message_Which.prototype.String = function() {
		var $ptr, _1, w;
		w = this.$val;
		_1 = w;
		if (_1 === (0)) {
			return $substring("unimplementedabortbootstrapcallreturnfinishresolvereleasedisembargoobsoleteSaveobsoleteDeleteprovideacceptjoin", 0, 13);
		} else if (_1 === (1)) {
			return $substring("unimplementedabortbootstrapcallreturnfinishresolvereleasedisembargoobsoleteSaveobsoleteDeleteprovideacceptjoin", 13, 18);
		} else if (_1 === (8)) {
			return $substring("unimplementedabortbootstrapcallreturnfinishresolvereleasedisembargoobsoleteSaveobsoleteDeleteprovideacceptjoin", 18, 27);
		} else if (_1 === (2)) {
			return $substring("unimplementedabortbootstrapcallreturnfinishresolvereleasedisembargoobsoleteSaveobsoleteDeleteprovideacceptjoin", 27, 31);
		} else if (_1 === (3)) {
			return $substring("unimplementedabortbootstrapcallreturnfinishresolvereleasedisembargoobsoleteSaveobsoleteDeleteprovideacceptjoin", 31, 37);
		} else if (_1 === (4)) {
			return $substring("unimplementedabortbootstrapcallreturnfinishresolvereleasedisembargoobsoleteSaveobsoleteDeleteprovideacceptjoin", 37, 43);
		} else if (_1 === (5)) {
			return $substring("unimplementedabortbootstrapcallreturnfinishresolvereleasedisembargoobsoleteSaveobsoleteDeleteprovideacceptjoin", 43, 50);
		} else if (_1 === (6)) {
			return $substring("unimplementedabortbootstrapcallreturnfinishresolvereleasedisembargoobsoleteSaveobsoleteDeleteprovideacceptjoin", 50, 57);
		} else if (_1 === (13)) {
			return $substring("unimplementedabortbootstrapcallreturnfinishresolvereleasedisembargoobsoleteSaveobsoleteDeleteprovideacceptjoin", 57, 67);
		} else if (_1 === (7)) {
			return $substring("unimplementedabortbootstrapcallreturnfinishresolvereleasedisembargoobsoleteSaveobsoleteDeleteprovideacceptjoin", 67, 79);
		} else if (_1 === (9)) {
			return $substring("unimplementedabortbootstrapcallreturnfinishresolvereleasedisembargoobsoleteSaveobsoleteDeleteprovideacceptjoin", 79, 93);
		} else if (_1 === (10)) {
			return $substring("unimplementedabortbootstrapcallreturnfinishresolvereleasedisembargoobsoleteSaveobsoleteDeleteprovideacceptjoin", 93, 100);
		} else if (_1 === (11)) {
			return $substring("unimplementedabortbootstrapcallreturnfinishresolvereleasedisembargoobsoleteSaveobsoleteDeleteprovideacceptjoin", 100, 106);
		} else if (_1 === (12)) {
			return $substring("unimplementedabortbootstrapcallreturnfinishresolvereleasedisembargoobsoleteSaveobsoleteDeleteprovideacceptjoin", 106, 110);
		}
		return "Message_Which(" + strconv.FormatUint(new $Uint64(0, w), 10) + ")";
	};
	$ptrType(Message_Which).prototype.String = function() { return new Message_Which(this.$get()).String(); };
	NewMessage = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewStruct(s, new capnp.ObjectSize.ptr(8, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new Message.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewMessage }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewMessage = NewMessage;
	NewRootMessage = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewRootStruct(s, new capnp.ObjectSize.ptr(8, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new Message.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewRootMessage }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewRootMessage = NewRootMessage;
	ReadRootMessage = function(msg) {
		var $ptr, _r, _tuple, err, msg, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; msg = $f.msg; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = msg.RootPtr(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		root = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Message.ptr($clone($clone(root, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadRootMessage }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.msg = msg; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadRootMessage = ReadRootMessage;
	Message.ptr.prototype.String = function() {
		var $ptr, _r, _tuple, s, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; s = $f.s; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = text.Marshal(new $Uint64(2444730143, 2156769330), $clone(s.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		str = _tuple[0];
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.s = s; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.String = function() { return this.$val.String(); };
	Message.ptr.prototype.Which = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(0) << 16 >>> 16);
	};
	Message.prototype.Which = function() { return this.$val.Which(); };
	Message.ptr.prototype.Unimplemented = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Message.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.Unimplemented }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.Unimplemented = function() { return this.$val.Unimplemented(); };
	Message.ptr.prototype.HasUnimplemented = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 0))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.HasUnimplemented }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.HasUnimplemented = function() { return this.$val.HasUnimplemented(); };
	Message.ptr.prototype.SetUnimplemented = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 0);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.SetUnimplemented }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.SetUnimplemented = function(v) { return this.$val.SetUnimplemented(v); };
	Message.ptr.prototype.NewUnimplemented = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 0);
		_r = NewMessage($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Message);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Message.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.NewUnimplemented }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.NewUnimplemented = function() { return this.$val.NewUnimplemented(); };
	Message.ptr.prototype.Abort = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Exception.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.Abort }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.Abort = function() { return this.$val.Abort(); };
	Message.ptr.prototype.HasAbort = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 1))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.HasAbort }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.HasAbort = function() { return this.$val.HasAbort(); };
	Message.ptr.prototype.SetAbort = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 1);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.SetAbort }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.SetAbort = function(v) { return this.$val.SetAbort(v); };
	Message.ptr.prototype.NewAbort = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 1);
		_r = NewException($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Exception);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Exception.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.NewAbort }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.NewAbort = function() { return this.$val.NewAbort(); };
	Message.ptr.prototype.Bootstrap = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Bootstrap.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.Bootstrap }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.Bootstrap = function() { return this.$val.Bootstrap(); };
	Message.ptr.prototype.HasBootstrap = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 8))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.HasBootstrap }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.HasBootstrap = function() { return this.$val.HasBootstrap(); };
	Message.ptr.prototype.SetBootstrap = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 8);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.SetBootstrap }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.SetBootstrap = function(v) { return this.$val.SetBootstrap(v); };
	Message.ptr.prototype.NewBootstrap = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 8);
		_r = NewBootstrap($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Bootstrap);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Bootstrap.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.NewBootstrap }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.NewBootstrap = function() { return this.$val.NewBootstrap(); };
	Message.ptr.prototype.Call = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Call.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.Call = function() { return this.$val.Call(); };
	Message.ptr.prototype.HasCall = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 2))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.HasCall }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.HasCall = function() { return this.$val.HasCall(); };
	Message.ptr.prototype.SetCall = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 2);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.SetCall }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.SetCall = function(v) { return this.$val.SetCall(v); };
	Message.ptr.prototype.NewCall = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 2);
		_r = NewCall($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Call);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Call.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.NewCall }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.NewCall = function() { return this.$val.NewCall(); };
	Message.ptr.prototype.Return = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Return.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.Return }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.Return = function() { return this.$val.Return(); };
	Message.ptr.prototype.HasReturn = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 3))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.HasReturn }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.HasReturn = function() { return this.$val.HasReturn(); };
	Message.ptr.prototype.SetReturn = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 3);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.SetReturn }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.SetReturn = function(v) { return this.$val.SetReturn(v); };
	Message.ptr.prototype.NewReturn = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 3);
		_r = NewReturn($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Return);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Return.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.NewReturn }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.NewReturn = function() { return this.$val.NewReturn(); };
	Message.ptr.prototype.Finish = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Finish.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.Finish }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.Finish = function() { return this.$val.Finish(); };
	Message.ptr.prototype.HasFinish = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 4))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.HasFinish }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.HasFinish = function() { return this.$val.HasFinish(); };
	Message.ptr.prototype.SetFinish = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 4);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.SetFinish }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.SetFinish = function(v) { return this.$val.SetFinish(v); };
	Message.ptr.prototype.NewFinish = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 4);
		_r = NewFinish($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Finish);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Finish.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.NewFinish }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.NewFinish = function() { return this.$val.NewFinish(); };
	Message.ptr.prototype.Resolve = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Resolve.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.Resolve }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.Resolve = function() { return this.$val.Resolve(); };
	Message.ptr.prototype.HasResolve = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 5))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.HasResolve }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.HasResolve = function() { return this.$val.HasResolve(); };
	Message.ptr.prototype.SetResolve = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 5);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.SetResolve }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.SetResolve = function(v) { return this.$val.SetResolve(v); };
	Message.ptr.prototype.NewResolve = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 5);
		_r = NewResolve($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Resolve);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Resolve.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.NewResolve }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.NewResolve = function() { return this.$val.NewResolve(); };
	Message.ptr.prototype.Release = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Release.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.Release }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.Release = function() { return this.$val.Release(); };
	Message.ptr.prototype.HasRelease = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 6))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.HasRelease }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.HasRelease = function() { return this.$val.HasRelease(); };
	Message.ptr.prototype.SetRelease = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 6);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.SetRelease }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.SetRelease = function(v) { return this.$val.SetRelease(v); };
	Message.ptr.prototype.NewRelease = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 6);
		_r = NewRelease($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Release);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Release.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.NewRelease }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.NewRelease = function() { return this.$val.NewRelease(); };
	Message.ptr.prototype.Disembargo = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Disembargo.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.Disembargo }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.Disembargo = function() { return this.$val.Disembargo(); };
	Message.ptr.prototype.HasDisembargo = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 13))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.HasDisembargo }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.HasDisembargo = function() { return this.$val.HasDisembargo(); };
	Message.ptr.prototype.SetDisembargo = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 13);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.SetDisembargo }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.SetDisembargo = function(v) { return this.$val.SetDisembargo(v); };
	Message.ptr.prototype.NewDisembargo = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 13);
		_r = NewDisembargo($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Disembargo);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Disembargo.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.NewDisembargo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.NewDisembargo = function() { return this.$val.NewDisembargo(); };
	Message.ptr.prototype.ObsoleteSave = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Pointer(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.ObsoleteSave }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.ObsoleteSave = function() { return this.$val.ObsoleteSave(); };
	Message.ptr.prototype.HasObsoleteSave = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 7))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.HasObsoleteSave }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.HasObsoleteSave = function() { return this.$val.HasObsoleteSave(); };
	Message.ptr.prototype.ObsoleteSavePtr = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.ObsoleteSavePtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.ObsoleteSavePtr = function() { return this.$val.ObsoleteSavePtr(); };
	Message.ptr.prototype.SetObsoleteSave = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 7);
		_r = $clone(s.Struct, capnp.Struct).SetPointer(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.SetObsoleteSave }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.SetObsoleteSave = function(v) { return this.$val.SetObsoleteSave(v); };
	Message.ptr.prototype.SetObsoleteSavePtr = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 7);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone(v, capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.SetObsoleteSavePtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.SetObsoleteSavePtr = function(v) { return this.$val.SetObsoleteSavePtr(v); };
	Message.ptr.prototype.ObsoleteDelete = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Pointer(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.ObsoleteDelete }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.ObsoleteDelete = function() { return this.$val.ObsoleteDelete(); };
	Message.ptr.prototype.HasObsoleteDelete = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 9))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.HasObsoleteDelete }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.HasObsoleteDelete = function() { return this.$val.HasObsoleteDelete(); };
	Message.ptr.prototype.ObsoleteDeletePtr = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.ObsoleteDeletePtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.ObsoleteDeletePtr = function() { return this.$val.ObsoleteDeletePtr(); };
	Message.ptr.prototype.SetObsoleteDelete = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 9);
		_r = $clone(s.Struct, capnp.Struct).SetPointer(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.SetObsoleteDelete }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.SetObsoleteDelete = function(v) { return this.$val.SetObsoleteDelete(v); };
	Message.ptr.prototype.SetObsoleteDeletePtr = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 9);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone(v, capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.SetObsoleteDeletePtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.SetObsoleteDeletePtr = function(v) { return this.$val.SetObsoleteDeletePtr(v); };
	Message.ptr.prototype.Provide = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Provide.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.Provide }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.Provide = function() { return this.$val.Provide(); };
	Message.ptr.prototype.HasProvide = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 10))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.HasProvide }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.HasProvide = function() { return this.$val.HasProvide(); };
	Message.ptr.prototype.SetProvide = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 10);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.SetProvide }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.SetProvide = function(v) { return this.$val.SetProvide(v); };
	Message.ptr.prototype.NewProvide = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 10);
		_r = NewProvide($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Provide);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Provide.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.NewProvide }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.NewProvide = function() { return this.$val.NewProvide(); };
	Message.ptr.prototype.Accept = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Accept.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.Accept }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.Accept = function() { return this.$val.Accept(); };
	Message.ptr.prototype.HasAccept = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 11))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.HasAccept }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.HasAccept = function() { return this.$val.HasAccept(); };
	Message.ptr.prototype.SetAccept = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 11);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.SetAccept }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.SetAccept = function(v) { return this.$val.SetAccept(v); };
	Message.ptr.prototype.NewAccept = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 11);
		_r = NewAccept($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Accept);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Accept.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.NewAccept }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.NewAccept = function() { return this.$val.NewAccept(); };
	Message.ptr.prototype.Join = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Join.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.Join }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.Join = function() { return this.$val.Join(); };
	Message.ptr.prototype.HasJoin = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 12))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.HasJoin }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.HasJoin = function() { return this.$val.HasJoin(); };
	Message.ptr.prototype.SetJoin = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 12);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.SetJoin }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.SetJoin = function(v) { return this.$val.SetJoin(v); };
	Message.ptr.prototype.NewJoin = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 12);
		_r = NewJoin($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Join);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Join.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Message.ptr.prototype.NewJoin }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Message.prototype.NewJoin = function() { return this.$val.NewJoin(); };
	NewBootstrap = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewStruct(s, new capnp.ObjectSize.ptr(8, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new Bootstrap.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewBootstrap }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewBootstrap = NewBootstrap;
	Bootstrap.ptr.prototype.String = function() {
		var $ptr, _r, _tuple, s, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; s = $f.s; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = text.Marshal(new $Uint64(3914125184, 823619268), $clone(s.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		str = _tuple[0];
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Bootstrap.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.s = s; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	Bootstrap.prototype.String = function() { return this.$val.String(); };
	Bootstrap.ptr.prototype.QuestionId = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(0);
	};
	Bootstrap.prototype.QuestionId = function() { return this.$val.QuestionId(); };
	Bootstrap.ptr.prototype.SetQuestionId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint32(0, v);
	};
	Bootstrap.prototype.SetQuestionId = function(v) { return this.$val.SetQuestionId(v); };
	Bootstrap.ptr.prototype.DeprecatedObjectId = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Pointer(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Bootstrap.ptr.prototype.DeprecatedObjectId }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Bootstrap.prototype.DeprecatedObjectId = function() { return this.$val.DeprecatedObjectId(); };
	Bootstrap.ptr.prototype.HasDeprecatedObjectId = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Bootstrap.ptr.prototype.HasDeprecatedObjectId }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Bootstrap.prototype.HasDeprecatedObjectId = function() { return this.$val.HasDeprecatedObjectId(); };
	Bootstrap.ptr.prototype.DeprecatedObjectIdPtr = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Bootstrap.ptr.prototype.DeprecatedObjectIdPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Bootstrap.prototype.DeprecatedObjectIdPtr = function() { return this.$val.DeprecatedObjectIdPtr(); };
	Bootstrap.ptr.prototype.SetDeprecatedObjectId = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPointer(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Bootstrap.ptr.prototype.SetDeprecatedObjectId }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Bootstrap.prototype.SetDeprecatedObjectId = function(v) { return this.$val.SetDeprecatedObjectId(v); };
	Bootstrap.ptr.prototype.SetDeprecatedObjectIdPtr = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone(v, capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Bootstrap.ptr.prototype.SetDeprecatedObjectIdPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Bootstrap.prototype.SetDeprecatedObjectIdPtr = function(v) { return this.$val.SetDeprecatedObjectIdPtr(v); };
	Call_sendResultsTo_Which.prototype.String = function() {
		var $ptr, _1, w;
		w = this.$val;
		_1 = w;
		if (_1 === (0)) {
			return $substring("calleryourselfthirdParty", 0, 6);
		} else if (_1 === (1)) {
			return $substring("calleryourselfthirdParty", 6, 14);
		} else if (_1 === (2)) {
			return $substring("calleryourselfthirdParty", 14, 24);
		}
		return "Call_sendResultsTo_Which(" + strconv.FormatUint(new $Uint64(0, w), 10) + ")";
	};
	$ptrType(Call_sendResultsTo_Which).prototype.String = function() { return new Call_sendResultsTo_Which(this.$get()).String(); };
	NewCall = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewStruct(s, new capnp.ObjectSize.ptr(24, 3)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new Call.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewCall }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewCall = NewCall;
	Call.ptr.prototype.String = function() {
		var $ptr, _r, _tuple, s, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; s = $f.s; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = text.Marshal(new $Uint64(2204783566, 2023574740), $clone(s.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		str = _tuple[0];
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Call.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.s = s; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	Call.prototype.String = function() { return this.$val.String(); };
	Call.ptr.prototype.QuestionId = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(0);
	};
	Call.prototype.QuestionId = function() { return this.$val.QuestionId(); };
	Call.ptr.prototype.SetQuestionId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint32(0, v);
	};
	Call.prototype.SetQuestionId = function(v) { return this.$val.SetQuestionId(v); };
	Call.ptr.prototype.Target = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new MessageTarget.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Call.ptr.prototype.Target }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Call.prototype.Target = function() { return this.$val.Target(); };
	Call.ptr.prototype.HasTarget = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Call.ptr.prototype.HasTarget }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Call.prototype.HasTarget = function() { return this.$val.HasTarget(); };
	Call.ptr.prototype.SetTarget = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Call.ptr.prototype.SetTarget }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Call.prototype.SetTarget = function(v) { return this.$val.SetTarget(v); };
	Call.ptr.prototype.NewTarget = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewMessageTarget($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], MessageTarget);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new MessageTarget.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Call.ptr.prototype.NewTarget }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Call.prototype.NewTarget = function() { return this.$val.NewTarget(); };
	Call.ptr.prototype.InterfaceId = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint64(8);
	};
	Call.prototype.InterfaceId = function() { return this.$val.InterfaceId(); };
	Call.ptr.prototype.SetInterfaceId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint64(8, v);
	};
	Call.prototype.SetInterfaceId = function(v) { return this.$val.SetInterfaceId(v); };
	Call.ptr.prototype.MethodId = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint16(4);
	};
	Call.prototype.MethodId = function() { return this.$val.MethodId(); };
	Call.ptr.prototype.SetMethodId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(4, v);
	};
	Call.prototype.SetMethodId = function(v) { return this.$val.SetMethodId(v); };
	Call.ptr.prototype.AllowThirdPartyTailCall = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Bit(128);
	};
	Call.prototype.AllowThirdPartyTailCall = function() { return this.$val.AllowThirdPartyTailCall(); };
	Call.ptr.prototype.SetAllowThirdPartyTailCall = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetBit(128, v);
	};
	Call.prototype.SetAllowThirdPartyTailCall = function(v) { return this.$val.SetAllowThirdPartyTailCall(v); };
	Call.ptr.prototype.Params = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Payload.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Call.ptr.prototype.Params }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Call.prototype.Params = function() { return this.$val.Params(); };
	Call.ptr.prototype.HasParams = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Call.ptr.prototype.HasParams }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Call.prototype.HasParams = function() { return this.$val.HasParams(); };
	Call.ptr.prototype.SetParams = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(1, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Call.ptr.prototype.SetParams }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Call.prototype.SetParams = function(v) { return this.$val.SetParams(v); };
	Call.ptr.prototype.NewParams = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewPayload($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Payload);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Payload.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(1, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Call.ptr.prototype.NewParams }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Call.prototype.NewParams = function() { return this.$val.NewParams(); };
	Call.ptr.prototype.SendResultsTo = function() {
		var $ptr, s;
		s = this;
		return $clone(s, Call_sendResultsTo);
	};
	Call.prototype.SendResultsTo = function() { return this.$val.SendResultsTo(); };
	Call_sendResultsTo.ptr.prototype.Which = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(6) << 16 >>> 16);
	};
	Call_sendResultsTo.prototype.Which = function() { return this.$val.Which(); };
	Call_sendResultsTo.ptr.prototype.SetCaller = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(6, 0);
	};
	Call_sendResultsTo.prototype.SetCaller = function() { return this.$val.SetCaller(); };
	Call_sendResultsTo.ptr.prototype.SetYourself = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(6, 1);
	};
	Call_sendResultsTo.prototype.SetYourself = function() { return this.$val.SetYourself(); };
	Call_sendResultsTo.ptr.prototype.ThirdParty = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Pointer(2); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Call_sendResultsTo.ptr.prototype.ThirdParty }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Call_sendResultsTo.prototype.ThirdParty = function() { return this.$val.ThirdParty(); };
	Call_sendResultsTo.ptr.prototype.HasThirdParty = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(6) === 2))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(2); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Call_sendResultsTo.ptr.prototype.HasThirdParty }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Call_sendResultsTo.prototype.HasThirdParty = function() { return this.$val.HasThirdParty(); };
	Call_sendResultsTo.ptr.prototype.ThirdPartyPtr = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(2); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Call_sendResultsTo.ptr.prototype.ThirdPartyPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Call_sendResultsTo.prototype.ThirdPartyPtr = function() { return this.$val.ThirdPartyPtr(); };
	Call_sendResultsTo.ptr.prototype.SetThirdParty = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(6, 2);
		_r = $clone(s.Struct, capnp.Struct).SetPointer(2, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Call_sendResultsTo.ptr.prototype.SetThirdParty }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Call_sendResultsTo.prototype.SetThirdParty = function(v) { return this.$val.SetThirdParty(v); };
	Call_sendResultsTo.ptr.prototype.SetThirdPartyPtr = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(6, 2);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(2, $clone(v, capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Call_sendResultsTo.ptr.prototype.SetThirdPartyPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Call_sendResultsTo.prototype.SetThirdPartyPtr = function(v) { return this.$val.SetThirdPartyPtr(v); };
	Return_Which.prototype.String = function() {
		var $ptr, _1, w;
		w = this.$val;
		_1 = w;
		if (_1 === (0)) {
			return $substring("resultsexceptioncanceledresultsSentElsewheretakeFromOtherQuestionacceptFromThirdParty", 0, 7);
		} else if (_1 === (1)) {
			return $substring("resultsexceptioncanceledresultsSentElsewheretakeFromOtherQuestionacceptFromThirdParty", 7, 16);
		} else if (_1 === (2)) {
			return $substring("resultsexceptioncanceledresultsSentElsewheretakeFromOtherQuestionacceptFromThirdParty", 16, 24);
		} else if (_1 === (3)) {
			return $substring("resultsexceptioncanceledresultsSentElsewheretakeFromOtherQuestionacceptFromThirdParty", 24, 44);
		} else if (_1 === (4)) {
			return $substring("resultsexceptioncanceledresultsSentElsewheretakeFromOtherQuestionacceptFromThirdParty", 44, 65);
		} else if (_1 === (5)) {
			return $substring("resultsexceptioncanceledresultsSentElsewheretakeFromOtherQuestionacceptFromThirdParty", 65, 85);
		}
		return "Return_Which(" + strconv.FormatUint(new $Uint64(0, w), 10) + ")";
	};
	$ptrType(Return_Which).prototype.String = function() { return new Return_Which(this.$get()).String(); };
	NewReturn = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewStruct(s, new capnp.ObjectSize.ptr(16, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new Return.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReturn }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReturn = NewReturn;
	Return.ptr.prototype.String = function() {
		var $ptr, _r, _tuple, s, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; s = $f.s; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = text.Marshal(new $Uint64(2652484237, 1035163450), $clone(s.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		str = _tuple[0];
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Return.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.s = s; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	Return.prototype.String = function() { return this.$val.String(); };
	Return.ptr.prototype.Which = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(6) << 16 >>> 16);
	};
	Return.prototype.Which = function() { return this.$val.Which(); };
	Return.ptr.prototype.AnswerId = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(0);
	};
	Return.prototype.AnswerId = function() { return this.$val.AnswerId(); };
	Return.ptr.prototype.SetAnswerId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint32(0, v);
	};
	Return.prototype.SetAnswerId = function(v) { return this.$val.SetAnswerId(v); };
	Return.ptr.prototype.ReleaseParamCaps = function() {
		var $ptr, s;
		s = this;
		return !$clone(s.Struct, capnp.Struct).Bit(32);
	};
	Return.prototype.ReleaseParamCaps = function() { return this.$val.ReleaseParamCaps(); };
	Return.ptr.prototype.SetReleaseParamCaps = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetBit(32, !v);
	};
	Return.prototype.SetReleaseParamCaps = function(v) { return this.$val.SetReleaseParamCaps(v); };
	Return.ptr.prototype.Results = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Payload.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Return.ptr.prototype.Results }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Return.prototype.Results = function() { return this.$val.Results(); };
	Return.ptr.prototype.HasResults = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(6) === 0))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Return.ptr.prototype.HasResults }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Return.prototype.HasResults = function() { return this.$val.HasResults(); };
	Return.ptr.prototype.SetResults = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(6, 0);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Return.ptr.prototype.SetResults }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Return.prototype.SetResults = function(v) { return this.$val.SetResults(v); };
	Return.ptr.prototype.NewResults = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(6, 0);
		_r = NewPayload($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Payload);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Payload.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Return.ptr.prototype.NewResults }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Return.prototype.NewResults = function() { return this.$val.NewResults(); };
	Return.ptr.prototype.Exception = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Exception.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Return.ptr.prototype.Exception }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Return.prototype.Exception = function() { return this.$val.Exception(); };
	Return.ptr.prototype.HasException = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(6) === 1))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Return.ptr.prototype.HasException }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Return.prototype.HasException = function() { return this.$val.HasException(); };
	Return.ptr.prototype.SetException = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(6, 1);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Return.ptr.prototype.SetException }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Return.prototype.SetException = function(v) { return this.$val.SetException(v); };
	Return.ptr.prototype.NewException = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(6, 1);
		_r = NewException($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Exception);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Exception.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Return.ptr.prototype.NewException }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Return.prototype.NewException = function() { return this.$val.NewException(); };
	Return.ptr.prototype.SetCanceled = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(6, 2);
	};
	Return.prototype.SetCanceled = function() { return this.$val.SetCanceled(); };
	Return.ptr.prototype.SetResultsSentElsewhere = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(6, 3);
	};
	Return.prototype.SetResultsSentElsewhere = function() { return this.$val.SetResultsSentElsewhere(); };
	Return.ptr.prototype.TakeFromOtherQuestion = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(8);
	};
	Return.prototype.TakeFromOtherQuestion = function() { return this.$val.TakeFromOtherQuestion(); };
	Return.ptr.prototype.SetTakeFromOtherQuestion = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(6, 4);
		$clone(s.Struct, capnp.Struct).SetUint32(8, v);
	};
	Return.prototype.SetTakeFromOtherQuestion = function(v) { return this.$val.SetTakeFromOtherQuestion(v); };
	Return.ptr.prototype.AcceptFromThirdParty = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Pointer(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Return.ptr.prototype.AcceptFromThirdParty }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Return.prototype.AcceptFromThirdParty = function() { return this.$val.AcceptFromThirdParty(); };
	Return.ptr.prototype.HasAcceptFromThirdParty = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(6) === 5))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Return.ptr.prototype.HasAcceptFromThirdParty }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Return.prototype.HasAcceptFromThirdParty = function() { return this.$val.HasAcceptFromThirdParty(); };
	Return.ptr.prototype.AcceptFromThirdPartyPtr = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Return.ptr.prototype.AcceptFromThirdPartyPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Return.prototype.AcceptFromThirdPartyPtr = function() { return this.$val.AcceptFromThirdPartyPtr(); };
	Return.ptr.prototype.SetAcceptFromThirdParty = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(6, 5);
		_r = $clone(s.Struct, capnp.Struct).SetPointer(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Return.ptr.prototype.SetAcceptFromThirdParty }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Return.prototype.SetAcceptFromThirdParty = function(v) { return this.$val.SetAcceptFromThirdParty(v); };
	Return.ptr.prototype.SetAcceptFromThirdPartyPtr = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(6, 5);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone(v, capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Return.ptr.prototype.SetAcceptFromThirdPartyPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Return.prototype.SetAcceptFromThirdPartyPtr = function(v) { return this.$val.SetAcceptFromThirdPartyPtr(v); };
	NewFinish = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewStruct(s, new capnp.ObjectSize.ptr(8, 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new Finish.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewFinish }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewFinish = NewFinish;
	Finish.ptr.prototype.String = function() {
		var $ptr, _r, _tuple, s, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; s = $f.s; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = text.Marshal(new $Uint64(3548196530, 3271036515), $clone(s.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		str = _tuple[0];
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Finish.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.s = s; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	Finish.prototype.String = function() { return this.$val.String(); };
	Finish.ptr.prototype.QuestionId = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(0);
	};
	Finish.prototype.QuestionId = function() { return this.$val.QuestionId(); };
	Finish.ptr.prototype.SetQuestionId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint32(0, v);
	};
	Finish.prototype.SetQuestionId = function(v) { return this.$val.SetQuestionId(v); };
	Finish.ptr.prototype.ReleaseResultCaps = function() {
		var $ptr, s;
		s = this;
		return !$clone(s.Struct, capnp.Struct).Bit(32);
	};
	Finish.prototype.ReleaseResultCaps = function() { return this.$val.ReleaseResultCaps(); };
	Finish.ptr.prototype.SetReleaseResultCaps = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetBit(32, !v);
	};
	Finish.prototype.SetReleaseResultCaps = function(v) { return this.$val.SetReleaseResultCaps(v); };
	Resolve_Which.prototype.String = function() {
		var $ptr, _1, w;
		w = this.$val;
		_1 = w;
		if (_1 === (0)) {
			return $substring("capexception", 0, 3);
		} else if (_1 === (1)) {
			return $substring("capexception", 3, 12);
		}
		return "Resolve_Which(" + strconv.FormatUint(new $Uint64(0, w), 10) + ")";
	};
	$ptrType(Resolve_Which).prototype.String = function() { return new Resolve_Which(this.$get()).String(); };
	NewResolve = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewStruct(s, new capnp.ObjectSize.ptr(8, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new Resolve.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewResolve }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewResolve = NewResolve;
	Resolve.ptr.prototype.String = function() {
		var $ptr, _r, _tuple, s, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; s = $f.s; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = text.Marshal(new $Uint64(3150091861, 4203284590), $clone(s.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		str = _tuple[0];
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Resolve.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.s = s; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	Resolve.prototype.String = function() { return this.$val.String(); };
	Resolve.ptr.prototype.Which = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(4) << 16 >>> 16);
	};
	Resolve.prototype.Which = function() { return this.$val.Which(); };
	Resolve.ptr.prototype.PromiseId = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(0);
	};
	Resolve.prototype.PromiseId = function() { return this.$val.PromiseId(); };
	Resolve.ptr.prototype.SetPromiseId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint32(0, v);
	};
	Resolve.prototype.SetPromiseId = function(v) { return this.$val.SetPromiseId(v); };
	Resolve.ptr.prototype.Cap = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new CapDescriptor.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Resolve.ptr.prototype.Cap }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Resolve.prototype.Cap = function() { return this.$val.Cap(); };
	Resolve.ptr.prototype.HasCap = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(4) === 0))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Resolve.ptr.prototype.HasCap }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Resolve.prototype.HasCap = function() { return this.$val.HasCap(); };
	Resolve.ptr.prototype.SetCap = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(4, 0);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Resolve.ptr.prototype.SetCap }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Resolve.prototype.SetCap = function(v) { return this.$val.SetCap(v); };
	Resolve.ptr.prototype.NewCap = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(4, 0);
		_r = NewCapDescriptor($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], CapDescriptor);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new CapDescriptor.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Resolve.ptr.prototype.NewCap }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Resolve.prototype.NewCap = function() { return this.$val.NewCap(); };
	Resolve.ptr.prototype.Exception = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new Exception.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Resolve.ptr.prototype.Exception }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Resolve.prototype.Exception = function() { return this.$val.Exception(); };
	Resolve.ptr.prototype.HasException = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(4) === 1))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Resolve.ptr.prototype.HasException }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Resolve.prototype.HasException = function() { return this.$val.HasException(); };
	Resolve.ptr.prototype.SetException = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(4, 1);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Resolve.ptr.prototype.SetException }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Resolve.prototype.SetException = function(v) { return this.$val.SetException(v); };
	Resolve.ptr.prototype.NewException = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(4, 1);
		_r = NewException($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], Exception);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Exception.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Resolve.ptr.prototype.NewException }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Resolve.prototype.NewException = function() { return this.$val.NewException(); };
	NewRelease = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewStruct(s, new capnp.ObjectSize.ptr(8, 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new Release.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewRelease }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewRelease = NewRelease;
	Release.ptr.prototype.String = function() {
		var $ptr, _r, _tuple, s, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; s = $f.s; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = text.Marshal(new $Uint64(2904189965, 2110813335), $clone(s.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		str = _tuple[0];
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Release.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.s = s; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	Release.prototype.String = function() { return this.$val.String(); };
	Release.ptr.prototype.Id = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(0);
	};
	Release.prototype.Id = function() { return this.$val.Id(); };
	Release.ptr.prototype.SetId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint32(0, v);
	};
	Release.prototype.SetId = function(v) { return this.$val.SetId(v); };
	Release.ptr.prototype.ReferenceCount = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(4);
	};
	Release.prototype.ReferenceCount = function() { return this.$val.ReferenceCount(); };
	Release.ptr.prototype.SetReferenceCount = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint32(4, v);
	};
	Release.prototype.SetReferenceCount = function(v) { return this.$val.SetReferenceCount(v); };
	Disembargo_context_Which.prototype.String = function() {
		var $ptr, _1, w;
		w = this.$val;
		_1 = w;
		if (_1 === (0)) {
			return $substring("senderLoopbackreceiverLoopbackacceptprovide", 0, 14);
		} else if (_1 === (1)) {
			return $substring("senderLoopbackreceiverLoopbackacceptprovide", 14, 30);
		} else if (_1 === (2)) {
			return $substring("senderLoopbackreceiverLoopbackacceptprovide", 30, 36);
		} else if (_1 === (3)) {
			return $substring("senderLoopbackreceiverLoopbackacceptprovide", 36, 43);
		}
		return "Disembargo_context_Which(" + strconv.FormatUint(new $Uint64(0, w), 10) + ")";
	};
	$ptrType(Disembargo_context_Which).prototype.String = function() { return new Disembargo_context_Which(this.$get()).String(); };
	NewDisembargo = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewStruct(s, new capnp.ObjectSize.ptr(8, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new Disembargo.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewDisembargo }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewDisembargo = NewDisembargo;
	Disembargo.ptr.prototype.String = function() {
		var $ptr, _r, _tuple, s, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; s = $f.s; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = text.Marshal(new $Uint64(4184094347, 264058641), $clone(s.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		str = _tuple[0];
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Disembargo.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.s = s; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	Disembargo.prototype.String = function() { return this.$val.String(); };
	Disembargo.ptr.prototype.Target = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new MessageTarget.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Disembargo.ptr.prototype.Target }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Disembargo.prototype.Target = function() { return this.$val.Target(); };
	Disembargo.ptr.prototype.HasTarget = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Disembargo.ptr.prototype.HasTarget }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Disembargo.prototype.HasTarget = function() { return this.$val.HasTarget(); };
	Disembargo.ptr.prototype.SetTarget = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Disembargo.ptr.prototype.SetTarget }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Disembargo.prototype.SetTarget = function(v) { return this.$val.SetTarget(v); };
	Disembargo.ptr.prototype.NewTarget = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewMessageTarget($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], MessageTarget);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new MessageTarget.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Disembargo.ptr.prototype.NewTarget }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Disembargo.prototype.NewTarget = function() { return this.$val.NewTarget(); };
	Disembargo.ptr.prototype.Context = function() {
		var $ptr, s;
		s = this;
		return $clone(s, Disembargo_context);
	};
	Disembargo.prototype.Context = function() { return this.$val.Context(); };
	Disembargo_context.ptr.prototype.Which = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(4) << 16 >>> 16);
	};
	Disembargo_context.prototype.Which = function() { return this.$val.Which(); };
	Disembargo_context.ptr.prototype.SenderLoopback = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(0);
	};
	Disembargo_context.prototype.SenderLoopback = function() { return this.$val.SenderLoopback(); };
	Disembargo_context.ptr.prototype.SetSenderLoopback = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(4, 0);
		$clone(s.Struct, capnp.Struct).SetUint32(0, v);
	};
	Disembargo_context.prototype.SetSenderLoopback = function(v) { return this.$val.SetSenderLoopback(v); };
	Disembargo_context.ptr.prototype.ReceiverLoopback = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(0);
	};
	Disembargo_context.prototype.ReceiverLoopback = function() { return this.$val.ReceiverLoopback(); };
	Disembargo_context.ptr.prototype.SetReceiverLoopback = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(4, 1);
		$clone(s.Struct, capnp.Struct).SetUint32(0, v);
	};
	Disembargo_context.prototype.SetReceiverLoopback = function(v) { return this.$val.SetReceiverLoopback(v); };
	Disembargo_context.ptr.prototype.SetAccept = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(4, 2);
	};
	Disembargo_context.prototype.SetAccept = function() { return this.$val.SetAccept(); };
	Disembargo_context.ptr.prototype.Provide = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(0);
	};
	Disembargo_context.prototype.Provide = function() { return this.$val.Provide(); };
	Disembargo_context.ptr.prototype.SetProvide = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(4, 3);
		$clone(s.Struct, capnp.Struct).SetUint32(0, v);
	};
	Disembargo_context.prototype.SetProvide = function(v) { return this.$val.SetProvide(v); };
	NewProvide = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewStruct(s, new capnp.ObjectSize.ptr(8, 2)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new Provide.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewProvide }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewProvide = NewProvide;
	Provide.ptr.prototype.String = function() {
		var $ptr, _r, _tuple, s, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; s = $f.s; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = text.Marshal(new $Uint64(2624193643, 4223773786), $clone(s.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		str = _tuple[0];
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Provide.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.s = s; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	Provide.prototype.String = function() { return this.$val.String(); };
	Provide.ptr.prototype.QuestionId = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(0);
	};
	Provide.prototype.QuestionId = function() { return this.$val.QuestionId(); };
	Provide.ptr.prototype.SetQuestionId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint32(0, v);
	};
	Provide.prototype.SetQuestionId = function(v) { return this.$val.SetQuestionId(v); };
	Provide.ptr.prototype.Target = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new MessageTarget.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Provide.ptr.prototype.Target }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Provide.prototype.Target = function() { return this.$val.Target(); };
	Provide.ptr.prototype.HasTarget = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Provide.ptr.prototype.HasTarget }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Provide.prototype.HasTarget = function() { return this.$val.HasTarget(); };
	Provide.ptr.prototype.SetTarget = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Provide.ptr.prototype.SetTarget }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Provide.prototype.SetTarget = function(v) { return this.$val.SetTarget(v); };
	Provide.ptr.prototype.NewTarget = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewMessageTarget($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], MessageTarget);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new MessageTarget.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Provide.ptr.prototype.NewTarget }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Provide.prototype.NewTarget = function() { return this.$val.NewTarget(); };
	Provide.ptr.prototype.Recipient = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Pointer(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Provide.ptr.prototype.Recipient }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Provide.prototype.Recipient = function() { return this.$val.Recipient(); };
	Provide.ptr.prototype.HasRecipient = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Provide.ptr.prototype.HasRecipient }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Provide.prototype.HasRecipient = function() { return this.$val.HasRecipient(); };
	Provide.ptr.prototype.RecipientPtr = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Provide.ptr.prototype.RecipientPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Provide.prototype.RecipientPtr = function() { return this.$val.RecipientPtr(); };
	Provide.ptr.prototype.SetRecipient = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPointer(1, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Provide.ptr.prototype.SetRecipient }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Provide.prototype.SetRecipient = function(v) { return this.$val.SetRecipient(v); };
	Provide.ptr.prototype.SetRecipientPtr = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(1, $clone(v, capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Provide.ptr.prototype.SetRecipientPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Provide.prototype.SetRecipientPtr = function(v) { return this.$val.SetRecipientPtr(v); };
	NewAccept = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewStruct(s, new capnp.ObjectSize.ptr(8, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new Accept.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewAccept }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewAccept = NewAccept;
	Accept.ptr.prototype.String = function() {
		var $ptr, _r, _tuple, s, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; s = $f.s; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = text.Marshal(new $Uint64(3569988962, 2421506070), $clone(s.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		str = _tuple[0];
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Accept.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.s = s; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	Accept.prototype.String = function() { return this.$val.String(); };
	Accept.ptr.prototype.QuestionId = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(0);
	};
	Accept.prototype.QuestionId = function() { return this.$val.QuestionId(); };
	Accept.ptr.prototype.SetQuestionId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint32(0, v);
	};
	Accept.prototype.SetQuestionId = function(v) { return this.$val.SetQuestionId(v); };
	Accept.ptr.prototype.Provision = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Pointer(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Accept.ptr.prototype.Provision }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Accept.prototype.Provision = function() { return this.$val.Provision(); };
	Accept.ptr.prototype.HasProvision = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Accept.ptr.prototype.HasProvision }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Accept.prototype.HasProvision = function() { return this.$val.HasProvision(); };
	Accept.ptr.prototype.ProvisionPtr = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Accept.ptr.prototype.ProvisionPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Accept.prototype.ProvisionPtr = function() { return this.$val.ProvisionPtr(); };
	Accept.ptr.prototype.SetProvision = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPointer(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Accept.ptr.prototype.SetProvision }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Accept.prototype.SetProvision = function(v) { return this.$val.SetProvision(v); };
	Accept.ptr.prototype.SetProvisionPtr = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone(v, capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Accept.ptr.prototype.SetProvisionPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Accept.prototype.SetProvisionPtr = function(v) { return this.$val.SetProvisionPtr(v); };
	Accept.ptr.prototype.Embargo = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Bit(32);
	};
	Accept.prototype.Embargo = function() { return this.$val.Embargo(); };
	Accept.ptr.prototype.SetEmbargo = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetBit(32, v);
	};
	Accept.prototype.SetEmbargo = function(v) { return this.$val.SetEmbargo(v); };
	NewJoin = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewStruct(s, new capnp.ObjectSize.ptr(8, 2)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new Join.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewJoin }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewJoin = NewJoin;
	Join.ptr.prototype.String = function() {
		var $ptr, _r, _tuple, s, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; s = $f.s; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = text.Marshal(new $Uint64(4225865732, 2430599599), $clone(s.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		str = _tuple[0];
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Join.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.s = s; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	Join.prototype.String = function() { return this.$val.String(); };
	Join.ptr.prototype.QuestionId = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(0);
	};
	Join.prototype.QuestionId = function() { return this.$val.QuestionId(); };
	Join.ptr.prototype.SetQuestionId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint32(0, v);
	};
	Join.prototype.SetQuestionId = function(v) { return this.$val.SetQuestionId(v); };
	Join.ptr.prototype.Target = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new MessageTarget.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Join.ptr.prototype.Target }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Join.prototype.Target = function() { return this.$val.Target(); };
	Join.ptr.prototype.HasTarget = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Join.ptr.prototype.HasTarget }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Join.prototype.HasTarget = function() { return this.$val.HasTarget(); };
	Join.ptr.prototype.SetTarget = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Join.ptr.prototype.SetTarget }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Join.prototype.SetTarget = function(v) { return this.$val.SetTarget(v); };
	Join.ptr.prototype.NewTarget = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewMessageTarget($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], MessageTarget);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new MessageTarget.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Join.ptr.prototype.NewTarget }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	Join.prototype.NewTarget = function() { return this.$val.NewTarget(); };
	Join.ptr.prototype.KeyPart = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Pointer(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Join.ptr.prototype.KeyPart }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Join.prototype.KeyPart = function() { return this.$val.KeyPart(); };
	Join.ptr.prototype.HasKeyPart = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Join.ptr.prototype.HasKeyPart }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Join.prototype.HasKeyPart = function() { return this.$val.HasKeyPart(); };
	Join.ptr.prototype.KeyPartPtr = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Join.ptr.prototype.KeyPartPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Join.prototype.KeyPartPtr = function() { return this.$val.KeyPartPtr(); };
	Join.ptr.prototype.SetKeyPart = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPointer(1, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Join.ptr.prototype.SetKeyPart }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Join.prototype.SetKeyPart = function(v) { return this.$val.SetKeyPart(v); };
	Join.ptr.prototype.SetKeyPartPtr = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(1, $clone(v, capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Join.ptr.prototype.SetKeyPartPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Join.prototype.SetKeyPartPtr = function(v) { return this.$val.SetKeyPartPtr(v); };
	MessageTarget_Which.prototype.String = function() {
		var $ptr, _1, w;
		w = this.$val;
		_1 = w;
		if (_1 === (0)) {
			return $substring("importedCappromisedAnswer", 0, 11);
		} else if (_1 === (1)) {
			return $substring("importedCappromisedAnswer", 11, 25);
		}
		return "MessageTarget_Which(" + strconv.FormatUint(new $Uint64(0, w), 10) + ")";
	};
	$ptrType(MessageTarget_Which).prototype.String = function() { return new MessageTarget_Which(this.$get()).String(); };
	NewMessageTarget = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewStruct(s, new capnp.ObjectSize.ptr(8, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new MessageTarget.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewMessageTarget }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewMessageTarget = NewMessageTarget;
	MessageTarget.ptr.prototype.String = function() {
		var $ptr, _r, _tuple, s, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; s = $f.s; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = text.Marshal(new $Uint64(2512131156, 1477704641), $clone(s.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		str = _tuple[0];
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MessageTarget.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.s = s; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	MessageTarget.prototype.String = function() { return this.$val.String(); };
	MessageTarget.ptr.prototype.Which = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(4) << 16 >>> 16);
	};
	MessageTarget.prototype.Which = function() { return this.$val.Which(); };
	MessageTarget.ptr.prototype.ImportedCap = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(0);
	};
	MessageTarget.prototype.ImportedCap = function() { return this.$val.ImportedCap(); };
	MessageTarget.ptr.prototype.SetImportedCap = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(4, 0);
		$clone(s.Struct, capnp.Struct).SetUint32(0, v);
	};
	MessageTarget.prototype.SetImportedCap = function(v) { return this.$val.SetImportedCap(v); };
	MessageTarget.ptr.prototype.PromisedAnswer = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new PromisedAnswer.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: MessageTarget.ptr.prototype.PromisedAnswer }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	MessageTarget.prototype.PromisedAnswer = function() { return this.$val.PromisedAnswer(); };
	MessageTarget.ptr.prototype.HasPromisedAnswer = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(4) === 1))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: MessageTarget.ptr.prototype.HasPromisedAnswer }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	MessageTarget.prototype.HasPromisedAnswer = function() { return this.$val.HasPromisedAnswer(); };
	MessageTarget.ptr.prototype.SetPromisedAnswer = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(4, 1);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MessageTarget.ptr.prototype.SetPromisedAnswer }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	MessageTarget.prototype.SetPromisedAnswer = function(v) { return this.$val.SetPromisedAnswer(v); };
	MessageTarget.ptr.prototype.NewPromisedAnswer = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(4, 1);
		_r = NewPromisedAnswer($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], PromisedAnswer);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new PromisedAnswer.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: MessageTarget.ptr.prototype.NewPromisedAnswer }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	MessageTarget.prototype.NewPromisedAnswer = function() { return this.$val.NewPromisedAnswer(); };
	NewPayload = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewStruct(s, new capnp.ObjectSize.ptr(0, 2)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new Payload.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewPayload }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewPayload = NewPayload;
	Payload.ptr.prototype.String = function() {
		var $ptr, _r, _tuple, s, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; s = $f.s; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = text.Marshal(new $Uint64(2584633634, 1033270331), $clone(s.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		str = _tuple[0];
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Payload.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.s = s; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	Payload.prototype.String = function() { return this.$val.String(); };
	Payload.ptr.prototype.Content = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Pointer(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Payload.ptr.prototype.Content }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Payload.prototype.Content = function() { return this.$val.Content(); };
	Payload.ptr.prototype.HasContent = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Payload.ptr.prototype.HasContent }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Payload.prototype.HasContent = function() { return this.$val.HasContent(); };
	Payload.ptr.prototype.ContentPtr = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Payload.ptr.prototype.ContentPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Payload.prototype.ContentPtr = function() { return this.$val.ContentPtr(); };
	Payload.ptr.prototype.SetContent = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPointer(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Payload.ptr.prototype.SetContent }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Payload.prototype.SetContent = function(v) { return this.$val.SetContent(v); };
	Payload.ptr.prototype.SetContentPtr = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone(v, capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Payload.ptr.prototype.SetContentPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Payload.prototype.SetContentPtr = function(v) { return this.$val.SetContentPtr(v); };
	Payload.ptr.prototype.CapTable = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new CapDescriptor_List.ptr($clone($clone(p, capnp.Ptr).List(), capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Payload.ptr.prototype.CapTable }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Payload.prototype.CapTable = function() { return this.$val.CapTable(); };
	Payload.ptr.prototype.HasCapTable = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Payload.ptr.prototype.HasCapTable }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Payload.prototype.HasCapTable = function() { return this.$val.HasCapTable(); };
	Payload.ptr.prototype.SetCapTable = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(1, $clone($clone(v.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Payload.ptr.prototype.SetCapTable }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Payload.prototype.SetCapTable = function(v) { return this.$val.SetCapTable(v); };
	Payload.ptr.prototype.NewCapTable = function(n) {
		var $ptr, _r, _r$1, _tuple, err, l, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewCapDescriptor_List($clone(s.Struct, capnp.Struct).Segment(), n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], CapDescriptor_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new CapDescriptor_List.ptr(new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(1, $clone($clone(l.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [l, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Payload.ptr.prototype.NewCapTable }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Payload.prototype.NewCapTable = function(n) { return this.$val.NewCapTable(n); };
	CapDescriptor_Which.prototype.String = function() {
		var $ptr, _1, w;
		w = this.$val;
		_1 = w;
		if (_1 === (0)) {
			return $substring("nonesenderHostedsenderPromisereceiverHostedreceiverAnswerthirdPartyHosted", 0, 4);
		} else if (_1 === (1)) {
			return $substring("nonesenderHostedsenderPromisereceiverHostedreceiverAnswerthirdPartyHosted", 4, 16);
		} else if (_1 === (2)) {
			return $substring("nonesenderHostedsenderPromisereceiverHostedreceiverAnswerthirdPartyHosted", 16, 29);
		} else if (_1 === (3)) {
			return $substring("nonesenderHostedsenderPromisereceiverHostedreceiverAnswerthirdPartyHosted", 29, 43);
		} else if (_1 === (4)) {
			return $substring("nonesenderHostedsenderPromisereceiverHostedreceiverAnswerthirdPartyHosted", 43, 57);
		} else if (_1 === (5)) {
			return $substring("nonesenderHostedsenderPromisereceiverHostedreceiverAnswerthirdPartyHosted", 57, 73);
		}
		return "CapDescriptor_Which(" + strconv.FormatUint(new $Uint64(0, w), 10) + ")";
	};
	$ptrType(CapDescriptor_Which).prototype.String = function() { return new CapDescriptor_Which(this.$get()).String(); };
	NewCapDescriptor = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewStruct(s, new capnp.ObjectSize.ptr(8, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new CapDescriptor.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewCapDescriptor }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewCapDescriptor = NewCapDescriptor;
	CapDescriptor.ptr.prototype.String = function() {
		var $ptr, _r, _tuple, s, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; s = $f.s; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = text.Marshal(new $Uint64(2233720260, 193378480), $clone(s.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		str = _tuple[0];
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CapDescriptor.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.s = s; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	CapDescriptor.prototype.String = function() { return this.$val.String(); };
	CapDescriptor.ptr.prototype.Which = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(0) << 16 >>> 16);
	};
	CapDescriptor.prototype.Which = function() { return this.$val.Which(); };
	CapDescriptor.ptr.prototype.SetNone = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 0);
	};
	CapDescriptor.prototype.SetNone = function() { return this.$val.SetNone(); };
	CapDescriptor.ptr.prototype.SenderHosted = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(4);
	};
	CapDescriptor.prototype.SenderHosted = function() { return this.$val.SenderHosted(); };
	CapDescriptor.ptr.prototype.SetSenderHosted = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 1);
		$clone(s.Struct, capnp.Struct).SetUint32(4, v);
	};
	CapDescriptor.prototype.SetSenderHosted = function(v) { return this.$val.SetSenderHosted(v); };
	CapDescriptor.ptr.prototype.SenderPromise = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(4);
	};
	CapDescriptor.prototype.SenderPromise = function() { return this.$val.SenderPromise(); };
	CapDescriptor.ptr.prototype.SetSenderPromise = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 2);
		$clone(s.Struct, capnp.Struct).SetUint32(4, v);
	};
	CapDescriptor.prototype.SetSenderPromise = function(v) { return this.$val.SetSenderPromise(v); };
	CapDescriptor.ptr.prototype.ReceiverHosted = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(4);
	};
	CapDescriptor.prototype.ReceiverHosted = function() { return this.$val.ReceiverHosted(); };
	CapDescriptor.ptr.prototype.SetReceiverHosted = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 3);
		$clone(s.Struct, capnp.Struct).SetUint32(4, v);
	};
	CapDescriptor.prototype.SetReceiverHosted = function(v) { return this.$val.SetReceiverHosted(v); };
	CapDescriptor.ptr.prototype.ReceiverAnswer = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new PromisedAnswer.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CapDescriptor.ptr.prototype.ReceiverAnswer }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CapDescriptor.prototype.ReceiverAnswer = function() { return this.$val.ReceiverAnswer(); };
	CapDescriptor.ptr.prototype.HasReceiverAnswer = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 4))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: CapDescriptor.ptr.prototype.HasReceiverAnswer }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CapDescriptor.prototype.HasReceiverAnswer = function() { return this.$val.HasReceiverAnswer(); };
	CapDescriptor.ptr.prototype.SetReceiverAnswer = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 4);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CapDescriptor.ptr.prototype.SetReceiverAnswer }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	CapDescriptor.prototype.SetReceiverAnswer = function(v) { return this.$val.SetReceiverAnswer(v); };
	CapDescriptor.ptr.prototype.NewReceiverAnswer = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 4);
		_r = NewPromisedAnswer($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], PromisedAnswer);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new PromisedAnswer.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CapDescriptor.ptr.prototype.NewReceiverAnswer }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	CapDescriptor.prototype.NewReceiverAnswer = function() { return this.$val.NewReceiverAnswer(); };
	CapDescriptor.ptr.prototype.ThirdPartyHosted = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new ThirdPartyCapDescriptor.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CapDescriptor.ptr.prototype.ThirdPartyHosted }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CapDescriptor.prototype.ThirdPartyHosted = function() { return this.$val.ThirdPartyHosted(); };
	CapDescriptor.ptr.prototype.HasThirdPartyHosted = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!(($clone(s.Struct, capnp.Struct).Uint16(0) === 5))) {
			$s = -1; return false;
		}
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: CapDescriptor.ptr.prototype.HasThirdPartyHosted }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CapDescriptor.prototype.HasThirdPartyHosted = function() { return this.$val.HasThirdPartyHosted(); };
	CapDescriptor.ptr.prototype.SetThirdPartyHosted = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 5);
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CapDescriptor.ptr.prototype.SetThirdPartyHosted }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	CapDescriptor.prototype.SetThirdPartyHosted = function(v) { return this.$val.SetThirdPartyHosted(v); };
	CapDescriptor.ptr.prototype.NewThirdPartyHosted = function() {
		var $ptr, _r, _r$1, _tuple, err, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 5);
		_r = NewThirdPartyCapDescriptor($clone(s.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ss = $clone(_tuple[0], ThirdPartyCapDescriptor);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new ThirdPartyCapDescriptor.ptr(new capnp.Struct.ptr(ptrType.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(ss.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [ss, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CapDescriptor.ptr.prototype.NewThirdPartyHosted }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	CapDescriptor.prototype.NewThirdPartyHosted = function() { return this.$val.NewThirdPartyHosted(); };
	NewCapDescriptor_List = function(s, sz) {
		var $ptr, _r, _tuple, err, l, s, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; l = $f.l; s = $f.s; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewCompositeList(s, new capnp.ObjectSize.ptr(8, 1), sz); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], capnp.List);
		err = _tuple[1];
		$s = -1; return [new CapDescriptor_List.ptr($clone(l, capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewCapDescriptor_List }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.s = s; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewCapDescriptor_List = NewCapDescriptor_List;
	CapDescriptor_List.ptr.prototype.At = function(i) {
		var $ptr, i, s;
		s = this;
		return new CapDescriptor.ptr($clone($clone(s.List, capnp.List).Struct(i), capnp.Struct));
	};
	CapDescriptor_List.prototype.At = function(i) { return this.$val.At(i); };
	CapDescriptor_List.ptr.prototype.Set = function(i, v) {
		var $ptr, _r, i, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.List, capnp.List).SetStruct(i, $clone(v.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CapDescriptor_List.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	CapDescriptor_List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	NewPromisedAnswer = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewStruct(s, new capnp.ObjectSize.ptr(8, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new PromisedAnswer.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewPromisedAnswer }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewPromisedAnswer = NewPromisedAnswer;
	PromisedAnswer.ptr.prototype.String = function() {
		var $ptr, _r, _tuple, s, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; s = $f.s; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = text.Marshal(new $Uint64(3623924182, 3446611104), $clone(s.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		str = _tuple[0];
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PromisedAnswer.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.s = s; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	PromisedAnswer.prototype.String = function() { return this.$val.String(); };
	PromisedAnswer.ptr.prototype.QuestionId = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(0);
	};
	PromisedAnswer.prototype.QuestionId = function() { return this.$val.QuestionId(); };
	PromisedAnswer.ptr.prototype.SetQuestionId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint32(0, v);
	};
	PromisedAnswer.prototype.SetQuestionId = function(v) { return this.$val.SetQuestionId(v); };
	PromisedAnswer.ptr.prototype.Transform = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [new PromisedAnswer_Op_List.ptr($clone($clone(p, capnp.Ptr).List(), capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: PromisedAnswer.ptr.prototype.Transform }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	PromisedAnswer.prototype.Transform = function() { return this.$val.Transform(); };
	PromisedAnswer.ptr.prototype.HasTransform = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: PromisedAnswer.ptr.prototype.HasTransform }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	PromisedAnswer.prototype.HasTransform = function() { return this.$val.HasTransform(); };
	PromisedAnswer.ptr.prototype.SetTransform = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(v.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PromisedAnswer.ptr.prototype.SetTransform }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	PromisedAnswer.prototype.SetTransform = function(v) { return this.$val.SetTransform(v); };
	PromisedAnswer.ptr.prototype.NewTransform = function(n) {
		var $ptr, _r, _r$1, _tuple, err, l, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; l = $f.l; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = NewPromisedAnswer_Op_List($clone(s.Struct, capnp.Struct).Segment(), n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], PromisedAnswer_Op_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new PromisedAnswer_Op_List.ptr(new capnp.List.ptr(ptrType.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err];
		}
		_r$1 = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone($clone(l.List, capnp.List).ToPtr(), capnp.Ptr)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return [l, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: PromisedAnswer.ptr.prototype.NewTransform }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	PromisedAnswer.prototype.NewTransform = function(n) { return this.$val.NewTransform(n); };
	PromisedAnswer_Op_Which.prototype.String = function() {
		var $ptr, _1, w;
		w = this.$val;
		_1 = w;
		if (_1 === (0)) {
			return $substring("noopgetPointerField", 0, 4);
		} else if (_1 === (1)) {
			return $substring("noopgetPointerField", 4, 19);
		}
		return "PromisedAnswer_Op_Which(" + strconv.FormatUint(new $Uint64(0, w), 10) + ")";
	};
	$ptrType(PromisedAnswer_Op_Which).prototype.String = function() { return new PromisedAnswer_Op_Which(this.$get()).String(); };
	PromisedAnswer_Op.ptr.prototype.String = function() {
		var $ptr, _r, _tuple, s, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; s = $f.s; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = text.Marshal(new $Uint64(4078343236, 357994625), $clone(s.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		str = _tuple[0];
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PromisedAnswer_Op.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.s = s; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	PromisedAnswer_Op.prototype.String = function() { return this.$val.String(); };
	PromisedAnswer_Op.ptr.prototype.Which = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(0) << 16 >>> 16);
	};
	PromisedAnswer_Op.prototype.Which = function() { return this.$val.Which(); };
	PromisedAnswer_Op.ptr.prototype.SetNoop = function() {
		var $ptr, s;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 0);
	};
	PromisedAnswer_Op.prototype.SetNoop = function() { return this.$val.SetNoop(); };
	PromisedAnswer_Op.ptr.prototype.GetPointerField = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint16(2);
	};
	PromisedAnswer_Op.prototype.GetPointerField = function() { return this.$val.GetPointerField(); };
	PromisedAnswer_Op.ptr.prototype.SetGetPointerField = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(0, 1);
		$clone(s.Struct, capnp.Struct).SetUint16(2, v);
	};
	PromisedAnswer_Op.prototype.SetGetPointerField = function(v) { return this.$val.SetGetPointerField(v); };
	NewPromisedAnswer_Op_List = function(s, sz) {
		var $ptr, _r, _tuple, err, l, s, sz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; l = $f.l; s = $f.s; sz = $f.sz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewCompositeList(s, new capnp.ObjectSize.ptr(8, 0), sz); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		l = $clone(_tuple[0], capnp.List);
		err = _tuple[1];
		$s = -1; return [new PromisedAnswer_Op_List.ptr($clone(l, capnp.List)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewPromisedAnswer_Op_List }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.s = s; $f.sz = sz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewPromisedAnswer_Op_List = NewPromisedAnswer_Op_List;
	PromisedAnswer_Op_List.ptr.prototype.At = function(i) {
		var $ptr, i, s;
		s = this;
		return new PromisedAnswer_Op.ptr($clone($clone(s.List, capnp.List).Struct(i), capnp.Struct));
	};
	PromisedAnswer_Op_List.prototype.At = function(i) { return this.$val.At(i); };
	PromisedAnswer_Op_List.ptr.prototype.Set = function(i, v) {
		var $ptr, _r, i, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.List, capnp.List).SetStruct(i, $clone(v.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PromisedAnswer_Op_List.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	PromisedAnswer_Op_List.prototype.Set = function(i, v) { return this.$val.Set(i, v); };
	NewThirdPartyCapDescriptor = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewStruct(s, new capnp.ObjectSize.ptr(8, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new ThirdPartyCapDescriptor.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewThirdPartyCapDescriptor }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewThirdPartyCapDescriptor = NewThirdPartyCapDescriptor;
	ThirdPartyCapDescriptor.ptr.prototype.String = function() {
		var $ptr, _r, _tuple, s, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; s = $f.s; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = text.Marshal(new $Uint64(3547334653, 3790602877), $clone(s.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		str = _tuple[0];
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ThirdPartyCapDescriptor.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.s = s; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	ThirdPartyCapDescriptor.prototype.String = function() { return this.$val.String(); };
	ThirdPartyCapDescriptor.ptr.prototype.Id = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Pointer(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ThirdPartyCapDescriptor.ptr.prototype.Id }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ThirdPartyCapDescriptor.prototype.Id = function() { return this.$val.Id(); };
	ThirdPartyCapDescriptor.ptr.prototype.HasId = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ThirdPartyCapDescriptor.ptr.prototype.HasId }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ThirdPartyCapDescriptor.prototype.HasId = function() { return this.$val.HasId(); };
	ThirdPartyCapDescriptor.ptr.prototype.IdPtr = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ThirdPartyCapDescriptor.ptr.prototype.IdPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ThirdPartyCapDescriptor.prototype.IdPtr = function() { return this.$val.IdPtr(); };
	ThirdPartyCapDescriptor.ptr.prototype.SetId = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPointer(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ThirdPartyCapDescriptor.ptr.prototype.SetId }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ThirdPartyCapDescriptor.prototype.SetId = function(v) { return this.$val.SetId(v); };
	ThirdPartyCapDescriptor.ptr.prototype.SetIdPtr = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetPtr(0, $clone(v, capnp.Ptr)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ThirdPartyCapDescriptor.ptr.prototype.SetIdPtr }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ThirdPartyCapDescriptor.prototype.SetIdPtr = function(v) { return this.$val.SetIdPtr(v); };
	ThirdPartyCapDescriptor.ptr.prototype.VineId = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint32(0);
	};
	ThirdPartyCapDescriptor.prototype.VineId = function() { return this.$val.VineId(); };
	ThirdPartyCapDescriptor.ptr.prototype.SetVineId = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint32(0, v);
	};
	ThirdPartyCapDescriptor.prototype.SetVineId = function(v) { return this.$val.SetVineId(v); };
	NewException = function(s) {
		var $ptr, _r, _tuple, err, s, st, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; s = $f.s; st = $f.st; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewStruct(s, new capnp.ObjectSize.ptr(8, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		st = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$s = -1; return [new Exception.ptr($clone(st, capnp.Struct)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewException }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.st = st; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewException = NewException;
	Exception.ptr.prototype.String = function() {
		var $ptr, _r, _tuple, s, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; s = $f.s; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = text.Marshal(new $Uint64(3592795910, 986671386), $clone(s.Struct, capnp.Struct)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		str = _tuple[0];
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Exception.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.s = s; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	Exception.prototype.String = function() { return this.$val.String(); };
	Exception.ptr.prototype.Reason = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).Text(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Exception.ptr.prototype.Reason }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Exception.prototype.Reason = function() { return this.$val.Reason(); };
	Exception.ptr.prototype.HasReason = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return $clone(p, capnp.Ptr).IsValid() || !($interfaceIsEqual(err, $ifaceNil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Exception.ptr.prototype.HasReason }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Exception.prototype.HasReason = function() { return this.$val.HasReason(); };
	Exception.ptr.prototype.ReasonBytes = function() {
		var $ptr, _r, _tuple, err, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).Ptr(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		$s = -1; return [$clone(p, capnp.Ptr).TextBytes(), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Exception.ptr.prototype.ReasonBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Exception.prototype.ReasonBytes = function() { return this.$val.ReasonBytes(); };
	Exception.ptr.prototype.SetReason = function(v) {
		var $ptr, _r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $clone(s.Struct, capnp.Struct).SetText(0, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Exception.ptr.prototype.SetReason }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Exception.prototype.SetReason = function(v) { return this.$val.SetReason(v); };
	Exception.ptr.prototype.Type = function() {
		var $ptr, s;
		s = this;
		return ($clone(s.Struct, capnp.Struct).Uint16(4) << 16 >>> 16);
	};
	Exception.prototype.Type = function() { return this.$val.Type(); };
	Exception.ptr.prototype.SetType = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(4, (v << 16 >>> 16));
	};
	Exception.prototype.SetType = function(v) { return this.$val.SetType(v); };
	Exception.ptr.prototype.ObsoleteIsCallersFault = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Bit(0);
	};
	Exception.prototype.ObsoleteIsCallersFault = function() { return this.$val.ObsoleteIsCallersFault(); };
	Exception.ptr.prototype.SetObsoleteIsCallersFault = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetBit(0, v);
	};
	Exception.prototype.SetObsoleteIsCallersFault = function(v) { return this.$val.SetObsoleteIsCallersFault(v); };
	Exception.ptr.prototype.ObsoleteDurability = function() {
		var $ptr, s;
		s = this;
		return $clone(s.Struct, capnp.Struct).Uint16(2);
	};
	Exception.prototype.ObsoleteDurability = function() { return this.$val.ObsoleteDurability(); };
	Exception.ptr.prototype.SetObsoleteDurability = function(v) {
		var $ptr, s, v;
		s = this;
		$clone(s.Struct, capnp.Struct).SetUint16(2, v);
	};
	Exception.prototype.SetObsoleteDurability = function(v) { return this.$val.SetObsoleteDurability(v); };
	Exception_Type.prototype.String = function() {
		var $ptr, _1, c;
		c = this.$val;
		_1 = c;
		if (_1 === (0)) {
			return "failed";
		} else if (_1 === (1)) {
			return "overloaded";
		} else if (_1 === (2)) {
			return "disconnected";
		} else if (_1 === (3)) {
			return "unimplemented";
		} else {
			return "";
		}
	};
	$ptrType(Exception_Type).prototype.String = function() { return new Exception_Type(this.$get()).String(); };
	init = function() {
		var $ptr;
		schemas.Register("x\xDA\x9CX\x7F\x8C\x15\xD5\x15>\xE7\xDE\xB7\xEF-\xEC\x8F\xF7f\xEFC\v\x95@mM\n)D\xACm\xED\xB6\xE6!\xEC\x12\xD6,a\xEF\xBE\xA5*5ig\xDF\xBB\xEC\xCE2;3\xCE\xCC\xC2.\x91\x00\xAD6J%E\xA2\x16\x8C\xB4jlb-FD\x88\xB4\x95T\b\xA6j\xA4j\x14\xA3\x8D\xA6j\xD2\xA8MM\xB4\xFE\xA8\xCA\x8Fi\xCE\xCC\xBC\x99\xC7\xEE\xDB\x10\xFB\xD7\xBE\xCCwf\xEE9\xDF=\xE7\xFB\xEE\xDDK\xAF\xCB.eK\x9AV\xCF\x00\x90fS6x\xB9w\xEF\xF8\xDF\xCA#?\x079\x13y\xD0w\x7F\xFF%_\xDD\xDD\xF1\x184\xF1\x1C\x80\xD8\x91\xD9$n\xCF\xE4\x00\xBE\xBD#\xF3+\x04\f\xF6\x1F\xFEE\xCB\xF17\xBE~3Ec\x1A\xDD\x8D\xB9,\x80\xD0\xB2\xC7\xC4\xEC,\x85\xCF\xCA^C\xE1\x97\xED\xDF\xB1u\xDEo\x1F\xBF}jx;\x80\x98\xC8\xED\x12\xDBr\x14\xBE9w!\x07\f\x8E\x9E\x12\xD7\x0E\x14\x9F\xB8sj8C&\x8E\xCC<&\x9E\x9AIi\x1D\x9D\xB9\x110\xF8\x81\x7F\xD7\x95\x17\xEB\xEDw\x836\xB3.\xB8\x89Q\xC4%-\xBB\xC4\xA2\x16\xFA\xB5\xA0\x85b\xD7\xEE;zj}f\xE4\x9EI_\x8E\x82\xF7\xB4\xEC\x12\xF7\x85\xC1{[\x1E\x01\f:\xAFy\xEC\xCA\x1D\x07f\xFF\x86\x82\xD9\xB9E\"\x17W\xB6n\x17\xDD\xAD\x94\xF5U\xAD\x7F\xA5\"\x7F\xED\xBF\xB0\xB9\xCD\x9C\xF3\xF0\xA4o\x13mbI\xFB.\xF1\xFDv\xFA\xF5\x9Dv\xCA\xE3\xDA#\xBD\xA5\xB7\xEF\xBA\xED\x00hE\x16\xCC1\x9E\xEF\xCC>~\xC9+\x00(\xEEl\x7FV\xDC\x17\x06\xEEm\x1F\x02\f\xAC\xE6[\xBFXs\xD7\xB1?7\xA6\xE2D\xFB.q2\x8C~\xB1\x9D2\xDE\xCC>x\xEBL\xCEyiryHi\xDE\x90\xEF@\xB1-O\xD1\x9B\xF3\x94D\xA5\xFD\xB3c\x07\x16o~\xA9Q\xC2\xAF\xE5\xB7\x8B\xB7\xC2\xD87\xC2\xD8\v\x96\xAE\xD99x\xE8\x99\x97\x1B}Yt\x17\xB6\x8BU\x05\xFA\xD5S\xA04V\xBD\xF1c\xF5\x8F\x83\x83'A\xCEB\f\xB4\xEF\x1D\xC9\xFF\xF2\xBB\xD5\xCFa\r\xE60\x83L\xBCW\xF8\x17\xA0x\xBF\xF0\x0E`Z{\xA3\xEF\x9E\xD0\xEE\x17'\xB5\v)\t\xED\x1D\xC0\xBF\xDC{\x91}\xE2\x95G_m\x14z\xB4\xE3Yq\xA2\x83BOvP\xBE{~\xF2\x879\x9F\xEE\x7F\xF7\xEF \xF3\xC8\xD3\xE6^\xC3s\xC8\x91\x8B\x1EA)\xAC\x12\x94\xEDq\xEB\xC2%[\x9F\xEF}\xAFa\n\xEF\x8B\xFB\xC5'\x82~}(\xE8\xBB\xDBv\xFEhV\xD7\x1D\x17|\x04r6&\tu\xE5\x18\x80\xB8\xAE\xF8\xB6PE\n\xD5\x8B\x14\x9A\xD4\xDD0\xDF\xE2C\xE2\x990\xF8\xA90\xF8\x11|sgf\xF7[\xA7\x1A6f\xD3\xACMb\xC6\xAC\xE8\xD7#\xB0<p\x9D\xCA\xE2\x8A\xEEXPr:\x97\xEB\xA6\xD9\x87(/\xE2\x19\x80\f\x02h\x87\xD6\x02\xC8\x83\x1C\xE5\x93\f\x11\x8BH\xCF\x8Et\x02\xC8\xC3\x1C\xE5q\x86\x1A\xC3\"2\x00\xED\xE8 \x80|\x92\xA3|\x8E\xA1\xC6Y\x119\x80\xF6\xCC\xD5\x00\xF2i\x8E\xF2e\x86Z\x13\x161\x03\xA0\xBDH\xAF?\xC7Q\xBE\xCA\x10\xB3XG\xAFv\xD2\x05\xA6e\xB6\x16\xB1\x19Q;z\f@\x1E\xE7(_`\x18\xDC0\xA6<\xDF\xB0-\xE0=Ul\x06\x86\xCD\x80%_w\x87\x94\x8F\x85t\xC6\x01\xB1\x00\x18\x18\x96\xAF\xDCuz\x05r\xAA\xA7\x8A3\x80\xE1\f\xC0`T\xF9\xC3v\xB5\xA7\n\x00\x98\x03\x869\xC0\x92\xA3\xBB\xFA\xA8\x87\x85t\xF0\xE3Ox\xCA\xAA\xF6+o\f\xE6\x99\xBE7`\x07\xBAi\xDA\x1B\x07\x86\r\xE6V\xFBt\xD7\x9F\x18\xD0\r\x93\xE8\x02D`H#[#\x92\x11\x8FN\x97\xF2*\xAE\xE1\xF8\xB6\v\xC4\xE8Wx\xA65\bBJ\xF7,\x04\x90wp\x94\xF72\x9C\x8Bg\x83\x98\xD5\xBD#\x00\xF2\x1E\x8E\xF2A\x86s\xD9\x99 \xE6\xF5w.\x80|\x80\xA3\xDC\xCFp.?M\x8F\x89\xD9\x877\x01\xC8}\x1C\xE5a\x86m\x99SAD\xED\xA1M\xE9n\xB55}\x11\x14\xB1\x89\xF6k{\xBA5y\xCB\xB6\x14d\xC3\xF2\x94\xBB\xD2\x86\xBC\xE7\xAB\x84\xD1\xF8q\x9F\v\xF3\xECQ\xC3S\xC9sWU\x94\xB1A\xB9PZi\x9F\xF3B\n\\ey\x1B\x95\x8B\x85Z\x1F\xC7<\xFA\xC3F\xC8\x18\xFA\x13\xD1\xAB\x00XH\xB5%\x8E\xAAq\x87N\xE7*\xE5y\xFA\x10*b\xED\x8A\x8451\x81.@y\x1C9\x96oB\x86mx6\by\x13\xDB\xF02\x80\xF2\x8D\x04\xDCB\x00?\x13\x84\xCC\x89\x9Bq!@y+\x01\xB7\x11\x909\x1D\x84\xDC\x89[\xB1\x13\xA0|\x13\x01;\th\x8A\xE9\x13;B\xE0\x16\x02\xEE  \x1B3(n\xC7e\x00\xE5\xDB\b\xD8M@\xEE\xF3\xA0\x88dNw\x86\xC0N\x02\xEE!`\xC6gA1\x1C\xC9=8\x02P\xDEM\xC0\x03\x04\xB0\xFF\x06El\x06\x10\xF7a?@\xF9^\x02\xF6\x110\xF3\xD3\xA0\x883\x00\xC4\xEFq\x13@\xF9A\x02\x0E\x12\xD0\xF2IP\xC4\x99\x00\xE2\xD1p\x8D}\x04\x1C&\xA0\xF5\xE3\xA0\x88-\x00\xE2P\x98\xEE~\x02\x9E \xA0\xED\xA3\xA0\x88\xAD\x00\xE2\x8Fa\xE5\x07\tx\x92\x80\xE6\xFF\x04El\x03\x10Gp-@\xF9\t\x02\x9EF\x86\xC1\x98e\x8C:\xA6\x1A\x85y\xCA\xA2]-\xA4\xE6\x1Am\xCC<}\xD0vi\xC2\xEAl\x85\x9E\xE7+\xBAib!\xD5\xC2\xE8q\xC9U\xFE\x98ka!\xB5\xBB\x18XgX\x867\x8C\x85\xD4'\"`\x8B\xAB<\xDB\xDC\xA0\xB0\x90\xBAS\x82\x98J\xF7\bI\xCC0\xEE\x16{\xD0\xB3M\xE5+\xC8\x97\xF5\r\n;\x80a\x07`0h\xDB\xBE\xE7\xBB:\xA0\x83\x85T\x89'\xBFT\xEAR\xF4\xB7\xF6\xDA\x16\xC7\xB57\x18UZ'1\xF48i\xBDRQ\x0EU\x9F\x18V\\\xFD\x88mP\x91\x89\xCE\xC6KT\rO\x8D\x0E\xEA.\xF0!\x1B\v\xA9fOjrVkr5\x10\nX(\x10\xCD\xA9@, )\xFD&Gyy]\x9FkKh\xB6/\xE5(\x7F\xC800F\x1D\xDB\xA5a\xCA-\xD7\x9Dd\x18\x1D7\x9C\xDA\xEA\xB4\xC3X7f}\xFA\x84i\xEBX\x8D\xD7\x8E\xE5~\xC12\x00\xF9\r\x8E\xF2R\x86ZM\xEF\x17\x91\x8A\x7F\x8B\xA3\\\xC9pK\xC5\xB6|e\xF9\t\xE9\x15\xDD\x19\xD0\x07ME\xA2\xDA\x0E\xD8\xC7\x11\v\xE9\x89\x0E\x90\x1E\x9E\xB3n\xC8v4\xDE\xAD\xC9\xBA\xDDd3]\x1Ce_j3\xAB\xC8'Vr\x94\x03u6#\xFB\x01d\x1FGy\xFD\x976\x05WU\f\xC7P\x16`\x9A}]b\xFDa\xEBB\xB8\x19\xF3\x93\xC4^\xA4\xDA_\xE0(_'B\xE6\x17\x11\x11\xB5\xD7HP_\xE7(\xDF\xA5\xC9\x0E\"\xBD\xD1\xFEI\xDC\xBD\xC9Q\xFE\x9BT\xE8l$6\xDA{\x94\xF0\xBB\x1C\xE5\xC7$Agb\xA1\xFE\x90>\xFB\x01Gy\x9A\xF4\xE7t,\xD4\x9F?\x04 Os,7#\xC3\xB9\xD9S\x01\x8BT\xA6\t\x0F\x00\x94\x9Bil\x8B\xA1\xFC|\x11\xAB\x8C\x86\x0F\x01\x94\x8B\x04\xCC\xA7y\xD6\xC3m\x8F\x1C.U\xE8p\x8C\xFA\x90\x9Cn\xB9\xEEx\x10ZV\x13y\x16M\xDF\x98\xE97\xF2?5N\xBDo\xD8\x80\xD6\xD4\xF1\x0F*\xBAUQ&\x89y.\x88\xBFQFe\xF9\xDD\xA6\xA76\xE6\x87\x95K\x1E\xE3\xEB\xEB\xD5\n\xD7\x1E\xC5\xD5\xFE\xB0r\xE5\x98\x9A\x17\xEEV\x92Y4^+\\\xB4G\x07B\x97\xC8\x93\xB16\xDE\x1B\xAA!j\x9A\xBAf\x9D\xD3\xA8Y7\xC5\xCDz\x05Cn\xD4\x1B\xD5:\xE5*\xAB\x02%\xB5\xDC\x1E\xB3\xFC\x14H\xA7\xB2;\xAE\xD9Z<0\xE1\xA8\xA8\x15\n\xE1\xDE.\xE8\xA4\xCA\xB5\xAF\xAD\x05@\xA6\xCD\x1D\x01@\xAE\xCDv\x01J\xEBt\xC3T\xD5\xC0\xDE\xA0\\\xD3\xD6\xAB\xC0U\x95t\xA0b[\x96\x82|\xC5W\xD5\xC9*{na\xA4~S\xA6\xA1?\x9D\x866\fb\x01Xuq:\x0Fm\xECl\xD0` b\x01\xE8\x01L\n\xCFUtg\xD2D\x9E\x7F{k\x19r\xA7s \xF6o\x7F\xA2\xFEP\x83\xEE\xF4[\x91\xECDg*c\xB4\x13\xF1\xBE\x966\x18\x96\xEA\xA9N\xE1\x1F\x9D\xCE\x15\xA1I\x00L\xFA\xF6\xDA\xF4;\xC9\b.\xD9\x05 /\xE7(\x97N\xA3\x03\xB5\xBE\xEF\xC7\xB0=I&\xBD\xA4\xEF\xEB\x17\xBD*\xEC\xC2h\xD1\xF3\b\x12Q\xDD\xCBQ^K\x824?\xE2\x7F\xCD\xB2\xF3\bR\x10\xFA\x8B\x17Q]\xF3\x9C\xD0&\x86\xECFg\xC7\xAE\xD8D\x86\xEC\xC5\x15\xDB\xCA\xFBj\xDC\x97\x85\xD0\x1C\xA2,tj\xF0\x9Fr\x94f\xCD\x1D(\r\x83$\xC9\xE4(\xC7\xA99\xCE\xC4\xE23F[\xE0p\x947\x92$\x9D\x8E\xC5g\x82R\xF69\xCA\xAD\xACv\xE2\xEB\xB5\xA1d;\x83ze\xFD\x94\x93\x1D\xF6\xDA\x11\x92jJl\x8C\x90M\xBC\xB3\xC1fF\xC3\x943lKf\xB0\xFE\x92\x8A\v\xF34^TTL\xB6Ni^\xCFQ\x0E3D\x16\x95\xA9\xFE\x04 \x879J\x9F\xEE\x13\xB1\xFA\xDFpw\x9A\xB9\x86\xF1%c3\x9D\xA7\xC79\xCA\x9B\x18\x1D@t\xCF\xB6\xB0\x15\x18\xB6\xD6\x99>\xF6xtXWn\xC9[\xA1\x8F\x99~B|\x12\xD05\xE6\xEA\x83\x86ip\x7F\xA2v9\xC8\xFB\x13\x8E\xC2|\x9A: \xE6\xCF\xDD\xAC\xBE\xD8q#\xBF\x05\bKM\xAEu\x1A\xCE\xE1\xAB\x9DiZ\xB9\xD6UK\xFAc_\xEF\x9D\xAE\x81|W\xB7\xBCu\xB6\v8\x9AZl\xB2\xC8$\x8Be\xD1-nq\xED\xFEb\xE6\xE9\xFAB\x9D\x1Dv\x10\xD9L7\xD1\xBD4Z1\xEA\xA0,\x80\xD6su*/t\xFF`\xA1\xC5hrm\xDA\xDF\xA5J\xC8!d\x83\t{\xCC\xF5\x94\xB9\x8E\xF4\xBFv\xC2\x07\xDEX\xBC\x97\x85\xC7\xB2\x9C\xAB;\xD3\xCFuB\xC6\xDD\xE7\x1B\xEB\xAAr\\U\xD1}T\xD5\xD5\x83#\xAA\xE2\x138y\xD5);\x93[\xBC\xDA\x99|\xCAZ\x98JV\xDD5l\xD1\xCFR\xFF\xC8[\xB6\xED@6\x18R~\x9FmX>*w\x85\xA1\xCCjr}\xAC/3\x9A\xDB<\r\xEE\xA4:;\xEB\xB5\x11\xEB\xFE\xA3\xA1-Z\x06l\xDA\x03Kt\xD4\x1A\xF7\xCF\xB9\xA1_m\x1B\xD6\xFF{tZ\x96\xCA\xD7\x97;:mY\xAF&\xC8\x02j<\xFF/\x00\x00\xFF\xFF<\xFF\x0E\x96", new sliceType([new $Uint64(2204783566, 2023574740), new $Uint64(2233720260, 193378480), new $Uint64(2444730143, 2156769330), new $Uint64(2512131156, 1477704641), new $Uint64(2584633634, 1033270331), new $Uint64(2624193643, 4223773786), new $Uint64(2652484237, 1035163450), new $Uint64(2904189965, 2110813335), new $Uint64(2995558114, 1061993816), new $Uint64(3150091861, 4203284590), new $Uint64(3547334653, 3790602877), new $Uint64(3548196530, 3271036515), new $Uint64(3569988962, 2421506070), new $Uint64(3580015839, 1700519245), new $Uint64(3592795910, 986671386), new $Uint64(3623924182, 3446611104), new $Uint64(3672682742, 447438745), new $Uint64(3914125184, 823619268), new $Uint64(4078343236, 357994625), new $Uint64(4184094347, 264058641), new $Uint64(4225865732, 2430599599)]));
	};
	Message.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Which", name: "Which", pkg: "", typ: $funcType([], [Message_Which], false)}, {prop: "Unimplemented", name: "Unimplemented", pkg: "", typ: $funcType([], [Message, $error], false)}, {prop: "HasUnimplemented", name: "HasUnimplemented", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetUnimplemented", name: "SetUnimplemented", pkg: "", typ: $funcType([Message], [$error], false)}, {prop: "NewUnimplemented", name: "NewUnimplemented", pkg: "", typ: $funcType([], [Message, $error], false)}, {prop: "Abort", name: "Abort", pkg: "", typ: $funcType([], [Exception, $error], false)}, {prop: "HasAbort", name: "HasAbort", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetAbort", name: "SetAbort", pkg: "", typ: $funcType([Exception], [$error], false)}, {prop: "NewAbort", name: "NewAbort", pkg: "", typ: $funcType([], [Exception, $error], false)}, {prop: "Bootstrap", name: "Bootstrap", pkg: "", typ: $funcType([], [Bootstrap, $error], false)}, {prop: "HasBootstrap", name: "HasBootstrap", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetBootstrap", name: "SetBootstrap", pkg: "", typ: $funcType([Bootstrap], [$error], false)}, {prop: "NewBootstrap", name: "NewBootstrap", pkg: "", typ: $funcType([], [Bootstrap, $error], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([], [Call, $error], false)}, {prop: "HasCall", name: "HasCall", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetCall", name: "SetCall", pkg: "", typ: $funcType([Call], [$error], false)}, {prop: "NewCall", name: "NewCall", pkg: "", typ: $funcType([], [Call, $error], false)}, {prop: "Return", name: "Return", pkg: "", typ: $funcType([], [Return, $error], false)}, {prop: "HasReturn", name: "HasReturn", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetReturn", name: "SetReturn", pkg: "", typ: $funcType([Return], [$error], false)}, {prop: "NewReturn", name: "NewReturn", pkg: "", typ: $funcType([], [Return, $error], false)}, {prop: "Finish", name: "Finish", pkg: "", typ: $funcType([], [Finish, $error], false)}, {prop: "HasFinish", name: "HasFinish", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetFinish", name: "SetFinish", pkg: "", typ: $funcType([Finish], [$error], false)}, {prop: "NewFinish", name: "NewFinish", pkg: "", typ: $funcType([], [Finish, $error], false)}, {prop: "Resolve", name: "Resolve", pkg: "", typ: $funcType([], [Resolve, $error], false)}, {prop: "HasResolve", name: "HasResolve", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetResolve", name: "SetResolve", pkg: "", typ: $funcType([Resolve], [$error], false)}, {prop: "NewResolve", name: "NewResolve", pkg: "", typ: $funcType([], [Resolve, $error], false)}, {prop: "Release", name: "Release", pkg: "", typ: $funcType([], [Release, $error], false)}, {prop: "HasRelease", name: "HasRelease", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetRelease", name: "SetRelease", pkg: "", typ: $funcType([Release], [$error], false)}, {prop: "NewRelease", name: "NewRelease", pkg: "", typ: $funcType([], [Release, $error], false)}, {prop: "Disembargo", name: "Disembargo", pkg: "", typ: $funcType([], [Disembargo, $error], false)}, {prop: "HasDisembargo", name: "HasDisembargo", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetDisembargo", name: "SetDisembargo", pkg: "", typ: $funcType([Disembargo], [$error], false)}, {prop: "NewDisembargo", name: "NewDisembargo", pkg: "", typ: $funcType([], [Disembargo, $error], false)}, {prop: "ObsoleteSave", name: "ObsoleteSave", pkg: "", typ: $funcType([], [capnp.Pointer, $error], false)}, {prop: "HasObsoleteSave", name: "HasObsoleteSave", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ObsoleteSavePtr", name: "ObsoleteSavePtr", pkg: "", typ: $funcType([], [capnp.Ptr, $error], false)}, {prop: "SetObsoleteSave", name: "SetObsoleteSave", pkg: "", typ: $funcType([capnp.Pointer], [$error], false)}, {prop: "SetObsoleteSavePtr", name: "SetObsoleteSavePtr", pkg: "", typ: $funcType([capnp.Ptr], [$error], false)}, {prop: "ObsoleteDelete", name: "ObsoleteDelete", pkg: "", typ: $funcType([], [capnp.Pointer, $error], false)}, {prop: "HasObsoleteDelete", name: "HasObsoleteDelete", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ObsoleteDeletePtr", name: "ObsoleteDeletePtr", pkg: "", typ: $funcType([], [capnp.Ptr, $error], false)}, {prop: "SetObsoleteDelete", name: "SetObsoleteDelete", pkg: "", typ: $funcType([capnp.Pointer], [$error], false)}, {prop: "SetObsoleteDeletePtr", name: "SetObsoleteDeletePtr", pkg: "", typ: $funcType([capnp.Ptr], [$error], false)}, {prop: "Provide", name: "Provide", pkg: "", typ: $funcType([], [Provide, $error], false)}, {prop: "HasProvide", name: "HasProvide", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetProvide", name: "SetProvide", pkg: "", typ: $funcType([Provide], [$error], false)}, {prop: "NewProvide", name: "NewProvide", pkg: "", typ: $funcType([], [Provide, $error], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([], [Accept, $error], false)}, {prop: "HasAccept", name: "HasAccept", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetAccept", name: "SetAccept", pkg: "", typ: $funcType([Accept], [$error], false)}, {prop: "NewAccept", name: "NewAccept", pkg: "", typ: $funcType([], [Accept, $error], false)}, {prop: "Join", name: "Join", pkg: "", typ: $funcType([], [Join, $error], false)}, {prop: "HasJoin", name: "HasJoin", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetJoin", name: "SetJoin", pkg: "", typ: $funcType([Join], [$error], false)}, {prop: "NewJoin", name: "NewJoin", pkg: "", typ: $funcType([], [Join, $error], false)}];
	Message_Which.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Bootstrap.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "QuestionId", name: "QuestionId", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetQuestionId", name: "SetQuestionId", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "DeprecatedObjectId", name: "DeprecatedObjectId", pkg: "", typ: $funcType([], [capnp.Pointer, $error], false)}, {prop: "HasDeprecatedObjectId", name: "HasDeprecatedObjectId", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "DeprecatedObjectIdPtr", name: "DeprecatedObjectIdPtr", pkg: "", typ: $funcType([], [capnp.Ptr, $error], false)}, {prop: "SetDeprecatedObjectId", name: "SetDeprecatedObjectId", pkg: "", typ: $funcType([capnp.Pointer], [$error], false)}, {prop: "SetDeprecatedObjectIdPtr", name: "SetDeprecatedObjectIdPtr", pkg: "", typ: $funcType([capnp.Ptr], [$error], false)}];
	Call.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "QuestionId", name: "QuestionId", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetQuestionId", name: "SetQuestionId", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "Target", name: "Target", pkg: "", typ: $funcType([], [MessageTarget, $error], false)}, {prop: "HasTarget", name: "HasTarget", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetTarget", name: "SetTarget", pkg: "", typ: $funcType([MessageTarget], [$error], false)}, {prop: "NewTarget", name: "NewTarget", pkg: "", typ: $funcType([], [MessageTarget, $error], false)}, {prop: "InterfaceId", name: "InterfaceId", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "SetInterfaceId", name: "SetInterfaceId", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "MethodId", name: "MethodId", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "SetMethodId", name: "SetMethodId", pkg: "", typ: $funcType([$Uint16], [], false)}, {prop: "AllowThirdPartyTailCall", name: "AllowThirdPartyTailCall", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetAllowThirdPartyTailCall", name: "SetAllowThirdPartyTailCall", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "Params", name: "Params", pkg: "", typ: $funcType([], [Payload, $error], false)}, {prop: "HasParams", name: "HasParams", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetParams", name: "SetParams", pkg: "", typ: $funcType([Payload], [$error], false)}, {prop: "NewParams", name: "NewParams", pkg: "", typ: $funcType([], [Payload, $error], false)}, {prop: "SendResultsTo", name: "SendResultsTo", pkg: "", typ: $funcType([], [Call_sendResultsTo], false)}];
	Call_sendResultsTo.methods = [{prop: "Which", name: "Which", pkg: "", typ: $funcType([], [Call_sendResultsTo_Which], false)}, {prop: "SetCaller", name: "SetCaller", pkg: "", typ: $funcType([], [], false)}, {prop: "SetYourself", name: "SetYourself", pkg: "", typ: $funcType([], [], false)}, {prop: "ThirdParty", name: "ThirdParty", pkg: "", typ: $funcType([], [capnp.Pointer, $error], false)}, {prop: "HasThirdParty", name: "HasThirdParty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ThirdPartyPtr", name: "ThirdPartyPtr", pkg: "", typ: $funcType([], [capnp.Ptr, $error], false)}, {prop: "SetThirdParty", name: "SetThirdParty", pkg: "", typ: $funcType([capnp.Pointer], [$error], false)}, {prop: "SetThirdPartyPtr", name: "SetThirdPartyPtr", pkg: "", typ: $funcType([capnp.Ptr], [$error], false)}];
	Call_sendResultsTo_Which.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Return.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Which", name: "Which", pkg: "", typ: $funcType([], [Return_Which], false)}, {prop: "AnswerId", name: "AnswerId", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetAnswerId", name: "SetAnswerId", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "ReleaseParamCaps", name: "ReleaseParamCaps", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetReleaseParamCaps", name: "SetReleaseParamCaps", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "Results", name: "Results", pkg: "", typ: $funcType([], [Payload, $error], false)}, {prop: "HasResults", name: "HasResults", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetResults", name: "SetResults", pkg: "", typ: $funcType([Payload], [$error], false)}, {prop: "NewResults", name: "NewResults", pkg: "", typ: $funcType([], [Payload, $error], false)}, {prop: "Exception", name: "Exception", pkg: "", typ: $funcType([], [Exception, $error], false)}, {prop: "HasException", name: "HasException", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetException", name: "SetException", pkg: "", typ: $funcType([Exception], [$error], false)}, {prop: "NewException", name: "NewException", pkg: "", typ: $funcType([], [Exception, $error], false)}, {prop: "SetCanceled", name: "SetCanceled", pkg: "", typ: $funcType([], [], false)}, {prop: "SetResultsSentElsewhere", name: "SetResultsSentElsewhere", pkg: "", typ: $funcType([], [], false)}, {prop: "TakeFromOtherQuestion", name: "TakeFromOtherQuestion", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetTakeFromOtherQuestion", name: "SetTakeFromOtherQuestion", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "AcceptFromThirdParty", name: "AcceptFromThirdParty", pkg: "", typ: $funcType([], [capnp.Pointer, $error], false)}, {prop: "HasAcceptFromThirdParty", name: "HasAcceptFromThirdParty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "AcceptFromThirdPartyPtr", name: "AcceptFromThirdPartyPtr", pkg: "", typ: $funcType([], [capnp.Ptr, $error], false)}, {prop: "SetAcceptFromThirdParty", name: "SetAcceptFromThirdParty", pkg: "", typ: $funcType([capnp.Pointer], [$error], false)}, {prop: "SetAcceptFromThirdPartyPtr", name: "SetAcceptFromThirdPartyPtr", pkg: "", typ: $funcType([capnp.Ptr], [$error], false)}];
	Return_Which.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Finish.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "QuestionId", name: "QuestionId", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetQuestionId", name: "SetQuestionId", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "ReleaseResultCaps", name: "ReleaseResultCaps", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetReleaseResultCaps", name: "SetReleaseResultCaps", pkg: "", typ: $funcType([$Bool], [], false)}];
	Resolve.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Which", name: "Which", pkg: "", typ: $funcType([], [Resolve_Which], false)}, {prop: "PromiseId", name: "PromiseId", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetPromiseId", name: "SetPromiseId", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [CapDescriptor, $error], false)}, {prop: "HasCap", name: "HasCap", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([CapDescriptor], [$error], false)}, {prop: "NewCap", name: "NewCap", pkg: "", typ: $funcType([], [CapDescriptor, $error], false)}, {prop: "Exception", name: "Exception", pkg: "", typ: $funcType([], [Exception, $error], false)}, {prop: "HasException", name: "HasException", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetException", name: "SetException", pkg: "", typ: $funcType([Exception], [$error], false)}, {prop: "NewException", name: "NewException", pkg: "", typ: $funcType([], [Exception, $error], false)}];
	Resolve_Which.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Release.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Id", name: "Id", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetId", name: "SetId", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "ReferenceCount", name: "ReferenceCount", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetReferenceCount", name: "SetReferenceCount", pkg: "", typ: $funcType([$Uint32], [], false)}];
	Disembargo.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Target", name: "Target", pkg: "", typ: $funcType([], [MessageTarget, $error], false)}, {prop: "HasTarget", name: "HasTarget", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetTarget", name: "SetTarget", pkg: "", typ: $funcType([MessageTarget], [$error], false)}, {prop: "NewTarget", name: "NewTarget", pkg: "", typ: $funcType([], [MessageTarget, $error], false)}, {prop: "Context", name: "Context", pkg: "", typ: $funcType([], [Disembargo_context], false)}];
	Disembargo_context.methods = [{prop: "Which", name: "Which", pkg: "", typ: $funcType([], [Disembargo_context_Which], false)}, {prop: "SenderLoopback", name: "SenderLoopback", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetSenderLoopback", name: "SetSenderLoopback", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "ReceiverLoopback", name: "ReceiverLoopback", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetReceiverLoopback", name: "SetReceiverLoopback", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "SetAccept", name: "SetAccept", pkg: "", typ: $funcType([], [], false)}, {prop: "Provide", name: "Provide", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetProvide", name: "SetProvide", pkg: "", typ: $funcType([$Uint32], [], false)}];
	Disembargo_context_Which.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Provide.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "QuestionId", name: "QuestionId", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetQuestionId", name: "SetQuestionId", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "Target", name: "Target", pkg: "", typ: $funcType([], [MessageTarget, $error], false)}, {prop: "HasTarget", name: "HasTarget", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetTarget", name: "SetTarget", pkg: "", typ: $funcType([MessageTarget], [$error], false)}, {prop: "NewTarget", name: "NewTarget", pkg: "", typ: $funcType([], [MessageTarget, $error], false)}, {prop: "Recipient", name: "Recipient", pkg: "", typ: $funcType([], [capnp.Pointer, $error], false)}, {prop: "HasRecipient", name: "HasRecipient", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "RecipientPtr", name: "RecipientPtr", pkg: "", typ: $funcType([], [capnp.Ptr, $error], false)}, {prop: "SetRecipient", name: "SetRecipient", pkg: "", typ: $funcType([capnp.Pointer], [$error], false)}, {prop: "SetRecipientPtr", name: "SetRecipientPtr", pkg: "", typ: $funcType([capnp.Ptr], [$error], false)}];
	Accept.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "QuestionId", name: "QuestionId", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetQuestionId", name: "SetQuestionId", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "Provision", name: "Provision", pkg: "", typ: $funcType([], [capnp.Pointer, $error], false)}, {prop: "HasProvision", name: "HasProvision", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ProvisionPtr", name: "ProvisionPtr", pkg: "", typ: $funcType([], [capnp.Ptr, $error], false)}, {prop: "SetProvision", name: "SetProvision", pkg: "", typ: $funcType([capnp.Pointer], [$error], false)}, {prop: "SetProvisionPtr", name: "SetProvisionPtr", pkg: "", typ: $funcType([capnp.Ptr], [$error], false)}, {prop: "Embargo", name: "Embargo", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetEmbargo", name: "SetEmbargo", pkg: "", typ: $funcType([$Bool], [], false)}];
	Join.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "QuestionId", name: "QuestionId", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetQuestionId", name: "SetQuestionId", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "Target", name: "Target", pkg: "", typ: $funcType([], [MessageTarget, $error], false)}, {prop: "HasTarget", name: "HasTarget", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetTarget", name: "SetTarget", pkg: "", typ: $funcType([MessageTarget], [$error], false)}, {prop: "NewTarget", name: "NewTarget", pkg: "", typ: $funcType([], [MessageTarget, $error], false)}, {prop: "KeyPart", name: "KeyPart", pkg: "", typ: $funcType([], [capnp.Pointer, $error], false)}, {prop: "HasKeyPart", name: "HasKeyPart", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "KeyPartPtr", name: "KeyPartPtr", pkg: "", typ: $funcType([], [capnp.Ptr, $error], false)}, {prop: "SetKeyPart", name: "SetKeyPart", pkg: "", typ: $funcType([capnp.Pointer], [$error], false)}, {prop: "SetKeyPartPtr", name: "SetKeyPartPtr", pkg: "", typ: $funcType([capnp.Ptr], [$error], false)}];
	MessageTarget.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Which", name: "Which", pkg: "", typ: $funcType([], [MessageTarget_Which], false)}, {prop: "ImportedCap", name: "ImportedCap", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetImportedCap", name: "SetImportedCap", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "PromisedAnswer", name: "PromisedAnswer", pkg: "", typ: $funcType([], [PromisedAnswer, $error], false)}, {prop: "HasPromisedAnswer", name: "HasPromisedAnswer", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetPromisedAnswer", name: "SetPromisedAnswer", pkg: "", typ: $funcType([PromisedAnswer], [$error], false)}, {prop: "NewPromisedAnswer", name: "NewPromisedAnswer", pkg: "", typ: $funcType([], [PromisedAnswer, $error], false)}];
	MessageTarget_Which.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Payload.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Content", name: "Content", pkg: "", typ: $funcType([], [capnp.Pointer, $error], false)}, {prop: "HasContent", name: "HasContent", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ContentPtr", name: "ContentPtr", pkg: "", typ: $funcType([], [capnp.Ptr, $error], false)}, {prop: "SetContent", name: "SetContent", pkg: "", typ: $funcType([capnp.Pointer], [$error], false)}, {prop: "SetContentPtr", name: "SetContentPtr", pkg: "", typ: $funcType([capnp.Ptr], [$error], false)}, {prop: "CapTable", name: "CapTable", pkg: "", typ: $funcType([], [CapDescriptor_List, $error], false)}, {prop: "HasCapTable", name: "HasCapTable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetCapTable", name: "SetCapTable", pkg: "", typ: $funcType([CapDescriptor_List], [$error], false)}, {prop: "NewCapTable", name: "NewCapTable", pkg: "", typ: $funcType([$Int32], [CapDescriptor_List, $error], false)}];
	CapDescriptor.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Which", name: "Which", pkg: "", typ: $funcType([], [CapDescriptor_Which], false)}, {prop: "SetNone", name: "SetNone", pkg: "", typ: $funcType([], [], false)}, {prop: "SenderHosted", name: "SenderHosted", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetSenderHosted", name: "SetSenderHosted", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "SenderPromise", name: "SenderPromise", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetSenderPromise", name: "SetSenderPromise", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "ReceiverHosted", name: "ReceiverHosted", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetReceiverHosted", name: "SetReceiverHosted", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "ReceiverAnswer", name: "ReceiverAnswer", pkg: "", typ: $funcType([], [PromisedAnswer, $error], false)}, {prop: "HasReceiverAnswer", name: "HasReceiverAnswer", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetReceiverAnswer", name: "SetReceiverAnswer", pkg: "", typ: $funcType([PromisedAnswer], [$error], false)}, {prop: "NewReceiverAnswer", name: "NewReceiverAnswer", pkg: "", typ: $funcType([], [PromisedAnswer, $error], false)}, {prop: "ThirdPartyHosted", name: "ThirdPartyHosted", pkg: "", typ: $funcType([], [ThirdPartyCapDescriptor, $error], false)}, {prop: "HasThirdPartyHosted", name: "HasThirdPartyHosted", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetThirdPartyHosted", name: "SetThirdPartyHosted", pkg: "", typ: $funcType([ThirdPartyCapDescriptor], [$error], false)}, {prop: "NewThirdPartyHosted", name: "NewThirdPartyHosted", pkg: "", typ: $funcType([], [ThirdPartyCapDescriptor, $error], false)}];
	CapDescriptor_Which.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	CapDescriptor_List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [CapDescriptor], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, CapDescriptor], [$error], false)}];
	PromisedAnswer.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "QuestionId", name: "QuestionId", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetQuestionId", name: "SetQuestionId", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "Transform", name: "Transform", pkg: "", typ: $funcType([], [PromisedAnswer_Op_List, $error], false)}, {prop: "HasTransform", name: "HasTransform", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetTransform", name: "SetTransform", pkg: "", typ: $funcType([PromisedAnswer_Op_List], [$error], false)}, {prop: "NewTransform", name: "NewTransform", pkg: "", typ: $funcType([$Int32], [PromisedAnswer_Op_List, $error], false)}];
	PromisedAnswer_Op.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Which", name: "Which", pkg: "", typ: $funcType([], [PromisedAnswer_Op_Which], false)}, {prop: "SetNoop", name: "SetNoop", pkg: "", typ: $funcType([], [], false)}, {prop: "GetPointerField", name: "GetPointerField", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "SetGetPointerField", name: "SetGetPointerField", pkg: "", typ: $funcType([$Uint16], [], false)}];
	PromisedAnswer_Op_Which.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	PromisedAnswer_Op_List.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [PromisedAnswer_Op], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, PromisedAnswer_Op], [$error], false)}];
	ThirdPartyCapDescriptor.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Id", name: "Id", pkg: "", typ: $funcType([], [capnp.Pointer, $error], false)}, {prop: "HasId", name: "HasId", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IdPtr", name: "IdPtr", pkg: "", typ: $funcType([], [capnp.Ptr, $error], false)}, {prop: "SetId", name: "SetId", pkg: "", typ: $funcType([capnp.Pointer], [$error], false)}, {prop: "SetIdPtr", name: "SetIdPtr", pkg: "", typ: $funcType([capnp.Ptr], [$error], false)}, {prop: "VineId", name: "VineId", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "SetVineId", name: "SetVineId", pkg: "", typ: $funcType([$Uint32], [], false)}];
	Exception.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Reason", name: "Reason", pkg: "", typ: $funcType([], [$String, $error], false)}, {prop: "HasReason", name: "HasReason", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ReasonBytes", name: "ReasonBytes", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "SetReason", name: "SetReason", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Exception_Type], false)}, {prop: "SetType", name: "SetType", pkg: "", typ: $funcType([Exception_Type], [], false)}, {prop: "ObsoleteIsCallersFault", name: "ObsoleteIsCallersFault", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetObsoleteIsCallersFault", name: "SetObsoleteIsCallersFault", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "ObsoleteDurability", name: "ObsoleteDurability", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "SetObsoleteDurability", name: "SetObsoleteDurability", pkg: "", typ: $funcType([$Uint16], [], false)}];
	Exception_Type.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Message.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Bootstrap.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Call.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Call_sendResultsTo.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Return.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Finish.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Resolve.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Release.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Disembargo.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Disembargo_context.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Provide.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Accept.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Join.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	MessageTarget.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Payload.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	CapDescriptor.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	CapDescriptor_List.init("", [{prop: "List", name: "", exported: true, typ: capnp.List, tag: ""}]);
	PromisedAnswer.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	PromisedAnswer_Op.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	PromisedAnswer_Op_List.init("", [{prop: "List", name: "", exported: true, typ: capnp.List, tag: ""}]);
	ThirdPartyCapDescriptor.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	Exception.init("", [{prop: "Struct", name: "", exported: true, typ: capnp.Struct, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = strconv.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = capnp.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = text.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = schemas.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["zombiezen.com/go/capnproto2/rpc"] = (function() {
	var $pkg = {}, $init, bytes, errors, fmt, context, io, log, sync, time, capnp, fulfiller, queue, refcount, rpc, answer, queueClient, pcall, qcall, qcallList, localAnswerClient, Exception, Abort, bootstrapError, questionError, Logger, defaultLogger, question, questionState, embargoClient, ecall, ecallList, Conn, connParams, ConnOption, chanMutex, connState, questionID, answerID, exportID, importID, embargoID, impent, importClient, export$1, embargo, idgen, Transport, streamTransport, writeDeadlineSetter, temp, ptrType, sliceType, ptrType$1, ptrType$2, sliceType$1, structType, sliceType$2, sliceType$3, ptrType$3, ptrType$4, sliceType$4, sliceType$5, ptrType$5, ptrType$6, ptrType$7, sliceType$6, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, sliceType$7, sliceType$8, sliceType$9, arrayType, sliceType$10, sliceType$11, ptrType$15, sliceType$12, chanType, sliceType$13, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, arrayType$1, ptrType$21, sliceType$14, mapType, chanType$1, ptrType$22, ptrType$23, chanType$2, funcType, chanType$3, mapType$1, mapType$2, ptrType$24, funcType$1, ptrType$25, ptrType$26, errQueueFull, errQueueCallCancel, errDisembargoOngoingAnswer, errDisembargoNonImport, errDisembargoMissingAnswer, errQuestionReused, errNoMainInterface, errBadTarget, errShutdown, errUnimplemented, errImportClosed, joinAnswer, joinFulfiller, newQueueClient, copyAbort, toException, isSameClient, isImport, transformsEqual, newEmbargoClient, MainInterface, NewConn, newUnimplementedMessage, transformToPromisedAnswer, newFinishMessage, newDisembargoMessage, promisedAnswerOpsToTransform, newAbortMessage, newReturnMessage, setReturnException, clientFromResolution, newMessage, newChanMutex, StreamTransport, copyMessage, copyRPCMessage, isTemporaryError;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	context = $packages["golang.org/x/net/context"];
	io = $packages["io"];
	log = $packages["log"];
	sync = $packages["sync"];
	time = $packages["time"];
	capnp = $packages["zombiezen.com/go/capnproto2"];
	fulfiller = $packages["zombiezen.com/go/capnproto2/internal/fulfiller"];
	queue = $packages["zombiezen.com/go/capnproto2/internal/queue"];
	refcount = $packages["zombiezen.com/go/capnproto2/rpc/internal/refcount"];
	rpc = $packages["zombiezen.com/go/capnproto2/std/capnp/rpc"];
	answer = $pkg.answer = $newType(0, $kindStruct, "rpc.answer", true, "zombiezen.com/go/capnproto2/rpc", false, function(id_, cancel_, resultCaps_, conn_, resolved_, mu_, obj_, err_, done_, queue_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.id = 0;
			this.cancel = $throwNilPointerError;
			this.resultCaps = sliceType.nil;
			this.conn = ptrType$1.nil;
			this.resolved = $chanNil;
			this.mu = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
			this.obj = new capnp.Ptr.ptr(ptrType$2.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			this.err = $ifaceNil;
			this.done = false;
			this.queue = sliceType$1.nil;
			return;
		}
		this.id = id_;
		this.cancel = cancel_;
		this.resultCaps = resultCaps_;
		this.conn = conn_;
		this.resolved = resolved_;
		this.mu = mu_;
		this.obj = obj_;
		this.err = err_;
		this.done = done_;
		this.queue = queue_;
	});
	queueClient = $pkg.queueClient = $newType(0, $kindStruct, "rpc.queueClient", true, "zombiezen.com/go/capnproto2/rpc", false, function(client_, conn_, mu_, q_, calls_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.client = $ifaceNil;
			this.conn = ptrType$1.nil;
			this.mu = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
			this.q = new queue.Queue.ptr($ifaceNil, 0, 0, 0);
			this.calls = qcallList.nil;
			return;
		}
		this.client = client_;
		this.conn = conn_;
		this.mu = mu_;
		this.q = q_;
		this.calls = calls_;
	});
	pcall = $pkg.pcall = $newType(0, $kindStruct, "rpc.pcall", true, "zombiezen.com/go/capnproto2/rpc", false, function(transform_, qcall_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.transform = sliceType$4.nil;
			this.qcall = new qcall.ptr(ptrType.nil, ptrType$5.nil, ptrType$6.nil, 0, new rpc.MessageTarget.ptr(new capnp.Struct.ptr(ptrType$2.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)));
			return;
		}
		this.transform = transform_;
		this.qcall = qcall_;
	});
	qcall = $pkg.qcall = $newType(0, $kindStruct, "rpc.qcall", true, "zombiezen.com/go/capnproto2/rpc", false, function(a_, f_, call_, embargoID_, embargoTarget_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.a = ptrType.nil;
			this.f = ptrType$5.nil;
			this.call = ptrType$6.nil;
			this.embargoID = 0;
			this.embargoTarget = new rpc.MessageTarget.ptr(new capnp.Struct.ptr(ptrType$2.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0));
			return;
		}
		this.a = a_;
		this.f = f_;
		this.call = call_;
		this.embargoID = embargoID_;
		this.embargoTarget = embargoTarget_;
	});
	qcallList = $pkg.qcallList = $newType(12, $kindSlice, "rpc.qcallList", true, "zombiezen.com/go/capnproto2/rpc", false, null);
	localAnswerClient = $pkg.localAnswerClient = $newType(0, $kindStruct, "rpc.localAnswerClient", true, "zombiezen.com/go/capnproto2/rpc", false, function(a_, transform_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.a = ptrType.nil;
			this.transform = sliceType$4.nil;
			return;
		}
		this.a = a_;
		this.transform = transform_;
	});
	Exception = $pkg.Exception = $newType(0, $kindStruct, "rpc.Exception", true, "zombiezen.com/go/capnproto2/rpc", true, function(Exception_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Exception = new rpc.Exception.ptr(new capnp.Struct.ptr(ptrType$2.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0));
			return;
		}
		this.Exception = Exception_;
	});
	Abort = $pkg.Abort = $newType(0, $kindStruct, "rpc.Abort", true, "zombiezen.com/go/capnproto2/rpc", true, function(Exception_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Exception = new rpc.Exception.ptr(new capnp.Struct.ptr(ptrType$2.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0));
			return;
		}
		this.Exception = Exception_;
	});
	bootstrapError = $pkg.bootstrapError = $newType(0, $kindStruct, "rpc.bootstrapError", true, "zombiezen.com/go/capnproto2/rpc", false, function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	questionError = $pkg.questionError = $newType(0, $kindStruct, "rpc.questionError", true, "zombiezen.com/go/capnproto2/rpc", false, function(id_, method_, err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.id = 0;
			this.method = ptrType$7.nil;
			this.err = $ifaceNil;
			return;
		}
		this.id = id_;
		this.method = method_;
		this.err = err_;
	});
	Logger = $pkg.Logger = $newType(8, $kindInterface, "rpc.Logger", true, "zombiezen.com/go/capnproto2/rpc", true, null);
	defaultLogger = $pkg.defaultLogger = $newType(0, $kindStruct, "rpc.defaultLogger", true, "zombiezen.com/go/capnproto2/rpc", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	question = $pkg.question = $newType(0, $kindStruct, "rpc.question", true, "zombiezen.com/go/capnproto2/rpc", false, function(id_, ctx_, conn_, method_, paramCaps_, resolved_, derived_, mu_, obj_, err_, state_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.id = 0;
			this.ctx = $ifaceNil;
			this.conn = ptrType$1.nil;
			this.method = ptrType$7.nil;
			this.paramCaps = sliceType.nil;
			this.resolved = $chanNil;
			this.derived = sliceType$7.nil;
			this.mu = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
			this.obj = new capnp.Ptr.ptr(ptrType$2.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0);
			this.err = $ifaceNil;
			this.state = 0;
			return;
		}
		this.id = id_;
		this.ctx = ctx_;
		this.conn = conn_;
		this.method = method_;
		this.paramCaps = paramCaps_;
		this.resolved = resolved_;
		this.derived = derived_;
		this.mu = mu_;
		this.obj = obj_;
		this.err = err_;
		this.state = state_;
	});
	questionState = $pkg.questionState = $newType(1, $kindUint8, "rpc.questionState", true, "zombiezen.com/go/capnproto2/rpc", false, null);
	embargoClient = $pkg.embargoClient = $newType(0, $kindStruct, "rpc.embargoClient", true, "zombiezen.com/go/capnproto2/rpc", false, function(cancel_, client_, embargo_, mu_, q_, calls_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.cancel = $chanNil;
			this.client = $ifaceNil;
			this.embargo = $chanNil;
			this.mu = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
			this.q = new queue.Queue.ptr($ifaceNil, 0, 0, 0);
			this.calls = ecallList.nil;
			return;
		}
		this.cancel = cancel_;
		this.client = client_;
		this.embargo = embargo_;
		this.mu = mu_;
		this.q = q_;
		this.calls = calls_;
	});
	ecall = $pkg.ecall = $newType(0, $kindStruct, "rpc.ecall", true, "zombiezen.com/go/capnproto2/rpc", false, function(call_, f_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.call = ptrType$6.nil;
			this.f = ptrType$5.nil;
			return;
		}
		this.call = call_;
		this.f = f_;
	});
	ecallList = $pkg.ecallList = $newType(12, $kindSlice, "rpc.ecallList", true, "zombiezen.com/go/capnproto2/rpc", false, null);
	Conn = $pkg.Conn = $newType(0, $kindStruct, "rpc.Conn", true, "zombiezen.com/go/capnproto2/rpc", true, function(transport_, log_, mainFunc_, mainCloser_, death_, out_, bg_, bgCancel_, workers_, stateMu_, state_, closeErr_, mu_, questions_, questionID_, exports_, exportID_, embargoes_, embargoID_, answers_, imports_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.transport = $ifaceNil;
			this.log = $ifaceNil;
			this.mainFunc = $throwNilPointerError;
			this.mainCloser = $ifaceNil;
			this.death = $chanNil;
			this.out = $chanNil;
			this.bg = $ifaceNil;
			this.bgCancel = $throwNilPointerError;
			this.workers = new sync.WaitGroup.ptr(0, $chanNil, arrayType.zero(), 0);
			this.stateMu = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
			this.state = 0;
			this.closeErr = $ifaceNil;
			this.mu = $chanNil;
			this.questions = sliceType$10.nil;
			this.questionID = new idgen.ptr(0, sliceType$11.nil);
			this.exports = sliceType$12.nil;
			this.exportID = new idgen.ptr(0, sliceType$11.nil);
			this.embargoes = sliceType$13.nil;
			this.embargoID = new idgen.ptr(0, sliceType$11.nil);
			this.answers = false;
			this.imports = false;
			return;
		}
		this.transport = transport_;
		this.log = log_;
		this.mainFunc = mainFunc_;
		this.mainCloser = mainCloser_;
		this.death = death_;
		this.out = out_;
		this.bg = bg_;
		this.bgCancel = bgCancel_;
		this.workers = workers_;
		this.stateMu = stateMu_;
		this.state = state_;
		this.closeErr = closeErr_;
		this.mu = mu_;
		this.questions = questions_;
		this.questionID = questionID_;
		this.exports = exports_;
		this.exportID = exportID_;
		this.embargoes = embargoes_;
		this.embargoID = embargoID_;
		this.answers = answers_;
		this.imports = imports_;
	});
	connParams = $pkg.connParams = $newType(0, $kindStruct, "rpc.connParams", true, "zombiezen.com/go/capnproto2/rpc", false, function(log_, mainFunc_, mainCloser_, sendBufferSize_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.log = $ifaceNil;
			this.mainFunc = $throwNilPointerError;
			this.mainCloser = $ifaceNil;
			this.sendBufferSize = 0;
			return;
		}
		this.log = log_;
		this.mainFunc = mainFunc_;
		this.mainCloser = mainCloser_;
		this.sendBufferSize = sendBufferSize_;
	});
	ConnOption = $pkg.ConnOption = $newType(0, $kindStruct, "rpc.ConnOption", true, "zombiezen.com/go/capnproto2/rpc", true, function(f_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.f = $throwNilPointerError;
			return;
		}
		this.f = f_;
	});
	chanMutex = $pkg.chanMutex = $newType(4, $kindChan, "rpc.chanMutex", true, "zombiezen.com/go/capnproto2/rpc", false, null);
	connState = $pkg.connState = $newType(4, $kindInt, "rpc.connState", true, "zombiezen.com/go/capnproto2/rpc", false, null);
	questionID = $pkg.questionID = $newType(4, $kindUint32, "rpc.questionID", true, "zombiezen.com/go/capnproto2/rpc", false, null);
	answerID = $pkg.answerID = $newType(4, $kindUint32, "rpc.answerID", true, "zombiezen.com/go/capnproto2/rpc", false, null);
	exportID = $pkg.exportID = $newType(4, $kindUint32, "rpc.exportID", true, "zombiezen.com/go/capnproto2/rpc", false, null);
	importID = $pkg.importID = $newType(4, $kindUint32, "rpc.importID", true, "zombiezen.com/go/capnproto2/rpc", false, null);
	embargoID = $pkg.embargoID = $newType(4, $kindUint32, "rpc.embargoID", true, "zombiezen.com/go/capnproto2/rpc", false, null);
	impent = $pkg.impent = $newType(0, $kindStruct, "rpc.impent", true, "zombiezen.com/go/capnproto2/rpc", false, function(rc_, refs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rc = ptrType$18.nil;
			this.refs = 0;
			return;
		}
		this.rc = rc_;
		this.refs = refs_;
	});
	importClient = $pkg.importClient = $newType(0, $kindStruct, "rpc.importClient", true, "zombiezen.com/go/capnproto2/rpc", false, function(id_, conn_, closed_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.id = 0;
			this.conn = ptrType$1.nil;
			this.closed = false;
			return;
		}
		this.id = id_;
		this.conn = conn_;
		this.closed = closed_;
	});
	export$1 = $pkg.export = $newType(0, $kindStruct, "rpc.export", true, "zombiezen.com/go/capnproto2/rpc", false, function(id_, rc_, client_, wireRefs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.id = 0;
			this.rc = ptrType$18.nil;
			this.client = $ifaceNil;
			this.wireRefs = 0;
			return;
		}
		this.id = id_;
		this.rc = rc_;
		this.client = client_;
		this.wireRefs = wireRefs_;
	});
	embargo = $pkg.embargo = $newType(4, $kindChan, "rpc.embargo", true, "zombiezen.com/go/capnproto2/rpc", false, null);
	idgen = $pkg.idgen = $newType(0, $kindStruct, "rpc.idgen", true, "zombiezen.com/go/capnproto2/rpc", false, function(i_, free_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.i = 0;
			this.free = sliceType$11.nil;
			return;
		}
		this.i = i_;
		this.free = free_;
	});
	Transport = $pkg.Transport = $newType(8, $kindInterface, "rpc.Transport", true, "zombiezen.com/go/capnproto2/rpc", true, null);
	streamTransport = $pkg.streamTransport = $newType(0, $kindStruct, "rpc.streamTransport", true, "zombiezen.com/go/capnproto2/rpc", false, function(rwc_, deadline_, enc_, dec_, wbuf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rwc = $ifaceNil;
			this.deadline = $ifaceNil;
			this.enc = ptrType$19.nil;
			this.dec = ptrType$20.nil;
			this.wbuf = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType$1.zero(), 0);
			return;
		}
		this.rwc = rwc_;
		this.deadline = deadline_;
		this.enc = enc_;
		this.dec = dec_;
		this.wbuf = wbuf_;
	});
	writeDeadlineSetter = $pkg.writeDeadlineSetter = $newType(8, $kindInterface, "rpc.writeDeadlineSetter", true, "zombiezen.com/go/capnproto2/rpc", false, null);
	temp = $newType(8, $kindInterface, "rpc.temp", true, "zombiezen.com/go/capnproto2/rpc", false, null);
	ptrType = $ptrType(answer);
	sliceType = $sliceType(exportID);
	ptrType$1 = $ptrType(Conn);
	ptrType$2 = $ptrType(capnp.Segment);
	sliceType$1 = $sliceType(pcall);
	structType = $structType("", []);
	sliceType$2 = $sliceType($Uint8);
	sliceType$3 = $sliceType(qcall);
	ptrType$3 = $ptrType(queueClient);
	ptrType$4 = $ptrType(importClient);
	sliceType$4 = $sliceType(capnp.PipelineOp);
	sliceType$5 = $sliceType(fulfiller.pcall);
	ptrType$5 = $ptrType(fulfiller.Fulfiller);
	ptrType$6 = $ptrType(capnp.Call);
	ptrType$7 = $ptrType(capnp.Method);
	sliceType$6 = $sliceType($emptyInterface);
	ptrType$8 = $ptrType(fulfiller.EmbargoClient);
	ptrType$9 = $ptrType(refcount.Ref);
	ptrType$10 = $ptrType(embargoClient);
	ptrType$11 = $ptrType(localAnswerClient);
	ptrType$12 = $ptrType(capnp.PipelineClient);
	ptrType$13 = $ptrType(capnp.Pipeline);
	ptrType$14 = $ptrType(question);
	sliceType$7 = $sliceType(sliceType$4);
	sliceType$8 = $sliceType(capnp.Client);
	sliceType$9 = $sliceType($Bool);
	arrayType = $arrayType($Uint8, 12);
	sliceType$10 = $sliceType(ptrType$14);
	sliceType$11 = $sliceType($Uint32);
	ptrType$15 = $ptrType(export$1);
	sliceType$12 = $sliceType(ptrType$15);
	chanType = $chanType(structType, true, false);
	sliceType$13 = $sliceType(chanType);
	ptrType$16 = $ptrType(capnp.Message);
	ptrType$17 = $ptrType(impent);
	ptrType$18 = $ptrType(refcount.RefCount);
	ptrType$19 = $ptrType(capnp.Encoder);
	ptrType$20 = $ptrType(capnp.Decoder);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$21 = $ptrType(time.Location);
	sliceType$14 = $sliceType(sliceType$2);
	mapType = $mapType(capnp.CapabilityID, sliceType$3);
	chanType$1 = $chanType(structType, false, false);
	ptrType$22 = $ptrType(qcall);
	ptrType$23 = $ptrType(questionError);
	chanType$2 = $chanType(structType, false, true);
	funcType = $funcType([context.Context], [capnp.Client, $error], false);
	chanType$3 = $chanType(rpc.Message, false, false);
	mapType$1 = $mapType(answerID, ptrType);
	mapType$2 = $mapType(importID, ptrType$17);
	ptrType$24 = $ptrType(connParams);
	funcType$1 = $funcType([ptrType$24], [], false);
	ptrType$25 = $ptrType(idgen);
	ptrType$26 = $ptrType(streamTransport);
	Conn.ptr.prototype.insertAnswer = function(id, cancel) {
		var $ptr, _entry, _key, _tuple, a, c, cancel, exists, id;
		c = this;
		if (c.answers === false) {
			c.answers = {};
		} else {
			_tuple = (_entry = c.answers[answerID.keyFor(id)], _entry !== undefined ? [_entry.v, true] : [ptrType.nil, false]);
			exists = _tuple[1];
			if (exists) {
				return ptrType.nil;
			}
		}
		a = new answer.ptr(id, cancel, sliceType.nil, c, new $Chan(structType, 0), new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), new capnp.Ptr.ptr(ptrType$2.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0), $ifaceNil, false, $makeSlice(sliceType$1, 0, 64));
		_key = id; (c.answers || $throwRuntimeError("assignment to entry in nil map"))[answerID.keyFor(_key)] = { k: _key, v: a };
		return a;
	};
	Conn.prototype.insertAnswer = function(id, cancel) { return this.$val.insertAnswer(id, cancel); };
	Conn.ptr.prototype.popAnswer = function(id) {
		var $ptr, _entry, a, c, id;
		c = this;
		if (c.answers === false) {
			return ptrType.nil;
		}
		a = (_entry = c.answers[answerID.keyFor(id)], _entry !== undefined ? _entry.v : ptrType.nil);
		delete c.answers[answerID.keyFor(id)];
		return a;
	};
	Conn.prototype.popAnswer = function(id) { return this.$val.popAnswer(id); };
	answer.ptr.prototype.fulfill = function(obj) {
		var $ptr, _entry, _i, _i$1, _keys, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, a, capIdx, ctab, err, err$1, err$2, err$3, firstErr, i, obj, payload, payloadTab, q, queues, ret, retmsg, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; a = $f.a; capIdx = $f.capIdx; ctab = $f.ctab; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; firstErr = $f.firstErr; i = $f.i; obj = $f.obj; payload = $f.payload; payloadTab = $f.payloadTab; q = $f.q; queues = $f.queues; ret = $f.ret; retmsg = $f.retmsg; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		$r = a.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (a.done) {
			$panic(new $String("answer.fulfill called more than once"));
		}
		_tmp = $clone(obj, capnp.Ptr);
		_tmp$1 = true;
		capnp.Ptr.copy(a.obj, _tmp);
		a.done = _tmp$1;
		firstErr = $ifaceNil;
		_r = a.conn.startWork(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 3:
			firstErr = err;
			_ref = a.queue;
			_i = 0;
			/* while (true) { */ case 6:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
				i = _i;
				_r$1 = (x = a.queue, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).qcall.a.reject(err); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				_i++;
			/* } */ $s = 6; continue; case 7:
			a.queue = sliceType$1.nil;
			$s = 5; continue;
		/* } else { */ case 4:
			_r$2 = newReturnMessage(sliceType$2.nil, a.id); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			retmsg = $clone(_r$2, rpc.Message);
			_r$3 = $clone(retmsg, rpc.Message).Return(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			ret = $clone(_tuple[0], rpc.Return);
			_r$4 = $clone(ret, rpc.Return).NewResults(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$1 = _r$4;
			payload = $clone(_tuple$1[0], rpc.Payload);
			_r$5 = $clone(payload, rpc.Payload).SetContentPtr($clone(obj, capnp.Ptr)); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			_r$6 = a.conn.makeCapTable($clone(ret.Struct, capnp.Struct).Segment()); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple$2 = _r$6;
			payloadTab = $clone(_tuple$2[0], rpc.CapDescriptor_List);
			err$1 = _tuple$2[1];
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 14:
				firstErr = err$1;
				$s = 16; continue;
			/* } else { */ case 15:
				_r$7 = $clone(payload, rpc.Payload).SetCapTable($clone(payloadTab, rpc.CapDescriptor_List)); /* */ $s = 17; case 17: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
				_r$8 = a.conn.sendMessage($clone(retmsg, rpc.Message)); /* */ $s = 18; case 18: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				err$2 = _r$8;
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					firstErr = err$2;
				}
			/* } */ case 16:
			_r$9 = a.emptyQueue($clone(obj, capnp.Ptr)); /* */ $s = 19; case 19: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_tuple$3 = _r$9;
			queues = _tuple$3[0];
			err$3 = _tuple$3[1];
			if (!($interfaceIsEqual(err$3, $ifaceNil)) && $interfaceIsEqual(firstErr, $ifaceNil)) {
				firstErr = err$3;
			}
			ctab = $clone(obj, capnp.Ptr).Segment().Message().CapTable;
			_ref$1 = queues;
			_i$1 = 0;
			_keys = $keys(_ref$1);
			/* while (true) { */ case 20:
				/* if (!(_i$1 < _keys.length)) { break; } */ if(!(_i$1 < _keys.length)) { $s = 21; continue; }
				_entry = _ref$1[_keys[_i$1]];
				if (_entry === undefined) {
					_i$1++;
					/* continue; */ $s = 20; continue;
				}
				capIdx = _entry.k;
				q = _entry.v;
				_r$10 = newQueueClient(a.conn, ((capIdx < 0 || capIdx >= ctab.$length) ? ($throwRuntimeError("index out of range"), undefined) : ctab.$array[ctab.$offset + capIdx]), q); /* */ $s = 22; case 22: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				((capIdx < 0 || capIdx >= ctab.$length) ? ($throwRuntimeError("index out of range"), undefined) : ctab.$array[ctab.$offset + capIdx] = _r$10);
				_i$1++;
			/* } */ $s = 20; continue; case 21:
			a.conn.workers.Done();
		/* } */ case 5:
		$close(a.resolved);
		$r = a.mu.Unlock(); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return firstErr;
		/* */ } return; } if ($f === undefined) { $f = { $blk: answer.ptr.prototype.fulfill }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.a = a; $f.capIdx = capIdx; $f.ctab = ctab; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.firstErr = firstErr; $f.i = i; $f.obj = obj; $f.payload = payload; $f.payloadTab = payloadTab; $f.q = q; $f.queues = queues; $f.ret = ret; $f.retmsg = retmsg; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	answer.prototype.fulfill = function(obj) { return this.$val.fulfill(obj); };
	answer.ptr.prototype.reject = function(err) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _tmp, _tmp$1, _tuple, a, err, err$1, err$2, firstErr, i, m, mret, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; a = $f.a; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; firstErr = $f.firstErr; i = $f.i; m = $f.m; mret = $f.mret; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			$panic(new $String("answer.reject called with nil"));
		}
		$r = a.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (a.done) {
			$panic(new $String("answer.reject called more than once"));
		}
		_tmp = err;
		_tmp$1 = true;
		a.err = _tmp;
		a.done = _tmp$1;
		_r = newReturnMessage(sliceType$2.nil, a.id); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		m = $clone(_r, rpc.Message);
		_r$1 = $clone(m, rpc.Message).Return(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		mret = $clone(_tuple[0], rpc.Return);
		_r$2 = setReturnException($clone(mret, rpc.Return), err); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		firstErr = $ifaceNil;
		_r$3 = a.conn.sendMessage($clone(m, rpc.Message)); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err$1 = _r$3;
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			firstErr = err$1;
		}
		_ref = a.queue;
		_i = 0;
		/* while (true) { */ case 6:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
			i = _i;
			_r$4 = (x = a.queue, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).qcall.a.reject(err); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err$2 = _r$4;
			if (!($interfaceIsEqual(err$2, $ifaceNil)) && $interfaceIsEqual(firstErr, $ifaceNil)) {
				firstErr = err$2;
			}
			_i++;
		/* } */ $s = 6; continue; case 7:
		a.queue = sliceType$1.nil;
		$close(a.resolved);
		$r = a.mu.Unlock(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return firstErr;
		/* */ } return; } if ($f === undefined) { $f = { $blk: answer.ptr.prototype.reject }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.firstErr = firstErr; $f.i = i; $f.m = m; $f.mret = mret; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	answer.prototype.reject = function(err) { return this.$val.reject(err); };
	answer.ptr.prototype.emptyQueue = function(obj) {
		var $ptr, _entry, _entry$1, _i, _key, _key$1, _r, _r$1, _r$2, _ref, _tuple, a, c, ci, cn, err, err$1, err$2, firstErr, i, obj, pc, qs, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; a = $f.a; c = $f.c; ci = $f.ci; cn = $f.cn; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; firstErr = $f.firstErr; i = $f.i; obj = $f.obj; pc = $f.pc; qs = $f.qs; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		firstErr = $ifaceNil;
		qs = (x = a.queue.$length, ((x < 0 || x > 2147483647) ? $throwRuntimeError("makemap: size out of range") : {}));
		_ref = a.queue;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			pc = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), pcall);
			_r = capnp.TransformPtr($clone(obj, capnp.Ptr), pc.transform); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			c = $clone(_tuple[0], capnp.Ptr);
			err = _tuple[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:
				_r$1 = pc.qcall.a.reject(err); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err$1 = _r$1;
				if (!($interfaceIsEqual(err$1, $ifaceNil)) && $interfaceIsEqual(firstErr, $ifaceNil)) {
					firstErr = err$1;
				}
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			ci = $clone($clone(c, capnp.Ptr).Interface(), capnp.Interface);
			/* */ if (!$clone(ci, capnp.Interface).IsValid()) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!$clone(ci, capnp.Interface).IsValid()) { */ case 7:
				_r$2 = pc.qcall.a.reject(capnp.ErrNullClient); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				err$2 = _r$2;
				if (!($interfaceIsEqual(err$2, $ifaceNil)) && $interfaceIsEqual(firstErr, $ifaceNil)) {
					firstErr = err$2;
				}
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 8:
			cn = $clone(ci, capnp.Interface).Capability();
			if ((_entry = qs[capnp.CapabilityID.keyFor(cn)], _entry !== undefined ? _entry.v : sliceType$3.nil) === sliceType$3.nil) {
				_key = cn; (qs || $throwRuntimeError("assignment to entry in nil map"))[capnp.CapabilityID.keyFor(_key)] = { k: _key, v: $makeSlice(sliceType$3, 0, (a.queue.$length - i >> 0)) };
			}
			_key$1 = cn; (qs || $throwRuntimeError("assignment to entry in nil map"))[capnp.CapabilityID.keyFor(_key$1)] = { k: _key$1, v: $append((_entry$1 = qs[capnp.CapabilityID.keyFor(cn)], _entry$1 !== undefined ? _entry$1.v : sliceType$3.nil), pc.qcall) };
			_i++;
		/* } */ $s = 1; continue; case 2:
		a.queue = sliceType$1.nil;
		$s = -1; return [qs, firstErr];
		/* */ } return; } if ($f === undefined) { $f = { $blk: answer.ptr.prototype.emptyQueue }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f.a = a; $f.c = c; $f.ci = ci; $f.cn = cn; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.firstErr = firstErr; $f.i = i; $f.obj = obj; $f.pc = pc; $f.qs = qs; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	answer.prototype.emptyQueue = function(obj) { return this.$val.emptyQueue(obj); };
	answer.ptr.prototype.queueCallLocked = function(call, pc) {
		var $ptr, _r, _tuple, a, call, err, pc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; call = $f.call; err = $f.err; pc = $f.pc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		if (a.queue.$length === a.queue.$capacity) {
			$s = -1; return errQueueFull;
		}
		err = $ifaceNil;
		_r = call.Copy(ptrType$2.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		pc.qcall.call = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		a.queue = $append(a.queue, pc);
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: answer.ptr.prototype.queueCallLocked }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.call = call; $f.err = err; $f.pc = pc; $f.$s = $s; $f.$r = $r; return $f;
	};
	answer.prototype.queueCallLocked = function(call, pc) { return this.$val.queueCallLocked(call, pc); };
	answer.ptr.prototype.queueDisembargo = function(transform, id, target) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, a, client, err, ic, id, ok, qc, queued, target, targetPtr, transform, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; client = $f.client; err = $f.err; ic = $f.ic; id = $f.id; ok = $f.ok; qc = $f.qc; queued = $f.queued; target = $f.target; targetPtr = $f.targetPtr; transform = $f.transform; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		queued = false;
		err = $ifaceNil;
		a = this;
		$r = a.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(a.mu, "Unlock"), []]);
		if (!a.done) {
			_tmp = false;
			_tmp$1 = errDisembargoOngoingAnswer;
			queued = _tmp;
			err = _tmp$1;
			$s = -1; return [queued, err];
		}
		if (!($interfaceIsEqual(a.err, $ifaceNil))) {
			_tmp$2 = false;
			_tmp$3 = errDisembargoNonImport;
			queued = _tmp$2;
			err = _tmp$3;
			$s = -1; return [queued, err];
		}
		_r = capnp.TransformPtr($clone(a.obj, capnp.Ptr), transform); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		targetPtr = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$4 = false;
			_tmp$5 = err;
			queued = _tmp$4;
			err = _tmp$5;
			$s = -1; return [queued, err];
		}
		client = $clone($clone(targetPtr, capnp.Ptr).Interface(), capnp.Interface).Client();
		_tuple$1 = $assertType(client, ptrType$3, true);
		qc = _tuple$1[0];
		ok = _tuple$1[1];
		if (!ok) {
			_tmp$6 = false;
			_tmp$7 = $ifaceNil;
			queued = _tmp$6;
			err = _tmp$7;
			$s = -1; return [queued, err];
		}
		_r$1 = isImport(qc.client); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ic = _r$1;
		if (ic === ptrType$4.nil || !(a.conn === ic.conn)) {
			_tmp$8 = false;
			_tmp$9 = errDisembargoNonImport;
			queued = _tmp$8;
			err = _tmp$9;
			$s = -1; return [queued, err];
		}
		$r = qc.mu.Lock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!qc.isPassthrough()) {
			err = qc.pushEmbargoLocked(id, $clone(target, rpc.MessageTarget));
			if ($interfaceIsEqual(err, $ifaceNil)) {
				queued = true;
			}
		}
		$r = qc.mu.Unlock(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$10 = queued;
		_tmp$11 = err;
		queued = _tmp$10;
		err = _tmp$11;
		$s = -1; return [queued, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [queued, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: answer.ptr.prototype.queueDisembargo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.client = client; $f.err = err; $f.ic = ic; $f.id = id; $f.ok = ok; $f.qc = qc; $f.queued = queued; $f.target = target; $f.targetPtr = targetPtr; $f.transform = transform; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	answer.prototype.queueDisembargo = function(transform, id, target) { return this.$val.queueDisembargo(transform, id, target); };
	answer.ptr.prototype.pipelineClient = function(transform) {
		var $ptr, a, transform;
		a = this;
		return new localAnswerClient.ptr(a, transform);
	};
	answer.prototype.pipelineClient = function(transform) { return this.$val.pipelineClient(transform); };
	joinAnswer = function(a, ca) {
		var $ptr, _r, _r$1, _r$2, _tuple, a, ca, err, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; a = $f.a; ca = $f.ca; err = $f.err; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = ca.Struct(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		s = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		$r = new chanMutex(a.conn.mu).Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 3:
			_r$1 = a.fulfill($clone($clone(s, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			$s = 5; continue;
		/* } else { */ case 4:
			_r$2 = a.reject(err); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ case 5:
		$r = new chanMutex(a.conn.mu).Unlock(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: joinAnswer }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.a = a; $f.ca = ca; $f.err = err; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	joinFulfiller = function(f, ca) {
		var $ptr, _r, _tuple, ca, err, f, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ca = $f.ca; err = $f.err; f = $f.f; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = ca.Struct(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		s = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$r = f.Reject(err); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 4; continue;
		/* } else { */ case 3:
			$r = f.Fulfill($clone(s, capnp.Struct)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: joinFulfiller }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ca = ca; $f.err = err; $f.f = f; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	newQueueClient = function(c, client, queue$1) {
		var $ptr, c, client, qc, queue$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; c = $f.c; client = $f.client; qc = $f.qc; queue$1 = $f.queue$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		qc = new queueClient.ptr(client, c, new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), new queue.Queue.ptr($ifaceNil, 0, 0, 0), $makeSlice(qcallList, 64));
		$r = qc.q.Init(qc.calls, $copySlice(qc.calls, queue$1)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$go($methodVal(qc, "flushQueue"), []);
		$s = -1; return qc;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newQueueClient }; } $f.$ptr = $ptr; $f.c = c; $f.client = client; $f.qc = qc; $f.queue$1 = queue$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	queueClient.ptr.prototype.pushCallLocked = function(cl) {
		var $ptr, _r, _tuple, cl, err, f, i, qc, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; cl = $f.cl; err = $f.err; f = $f.f; i = $f.i; qc = $f.qc; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		qc = this;
		f = new fulfiller.Fulfiller.ptr(new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0), $chanNil, new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), $ifaceNil, sliceType$5.nil);
		_r = cl.Copy(ptrType$2.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		cl = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return capnp.ErrorAnswer(err);
		}
		i = qc.q.Push();
		if (i === -1) {
			$s = -1; return capnp.ErrorAnswer(errQueueFull);
		}
		qcall.copy((x = qc.calls, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])), new qcall.ptr(ptrType.nil, f, cl, 0, new rpc.MessageTarget.ptr(new capnp.Struct.ptr(ptrType$2.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0))));
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: queueClient.ptr.prototype.pushCallLocked }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.cl = cl; $f.err = err; $f.f = f; $f.i = i; $f.qc = qc; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	queueClient.prototype.pushCallLocked = function(cl) { return this.$val.pushCallLocked(cl); };
	queueClient.ptr.prototype.pushEmbargoLocked = function(id, tgt) {
		var $ptr, i, id, qc, tgt, x;
		qc = this;
		i = qc.q.Push();
		if (i === -1) {
			return errQueueFull;
		}
		qcall.copy((x = qc.calls, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])), new qcall.ptr(ptrType.nil, ptrType$5.nil, ptrType$6.nil, id, $clone(tgt, rpc.MessageTarget)));
		return $ifaceNil;
	};
	queueClient.prototype.pushEmbargoLocked = function(id, tgt) { return this.$val.pushEmbargoLocked(id, tgt); };
	queueClient.ptr.prototype.flushQueue = function() {
		var $ptr, _r, c, i, i$1, qc, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; i = $f.i; i$1 = $f.i$1; qc = $f.qc; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = [c];
		qc = this;
		c[0] = new qcall.ptr(ptrType.nil, ptrType$5.nil, ptrType$6.nil, 0, new rpc.MessageTarget.ptr(new capnp.Struct.ptr(ptrType$2.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)));
		$r = qc.mu.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		i = qc.q.Front();
		if (!((i === -1))) {
			qcall.copy(c[0], (x = qc.calls, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
		}
		$r = qc.mu.RUnlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* while (true) { */ case 3:
			/* if (!(!((c[0].which() === 0)))) { break; } */ if(!(!((c[0].which() === 0)))) { $s = 4; continue; }
			$r = qc.handle(c[0]); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = qc.mu.Lock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r = qc.q.Pop(); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			i$1 = qc.q.Front();
			if (!((i$1 === -1))) {
				qcall.copy(c[0], (x$1 = qc.calls, ((i$1 < 0 || i$1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$1])));
			} else {
				qcall.copy(c[0], new qcall.ptr(ptrType.nil, ptrType$5.nil, ptrType$6.nil, 0, new rpc.MessageTarget.ptr(new capnp.Struct.ptr(ptrType$2.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0))));
			}
			$r = qc.mu.Unlock(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 3; continue; case 4:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: queueClient.ptr.prototype.flushQueue }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.i = i; $f.i$1 = i$1; $f.qc = qc; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	queueClient.prototype.flushQueue = function() { return this.$val.flushQueue(); };
	queueClient.ptr.prototype.handle = function(c) {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, answer$1, answer$2, c, d, msg, qc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; answer$1 = $f.answer$1; answer$2 = $f.answer$2; c = $f.c; d = $f.d; msg = $f.msg; qc = $f.qc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		qc = this;
			_1 = c.which();
			/* */ if (_1 === (1)) { $s = 2; continue; }
			/* */ if (_1 === (2)) { $s = 3; continue; }
			/* */ if (_1 === (3)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (1)) { */ case 2:
				_r = qc.client.Call(c.call); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				answer$1 = _r;
				$go(joinAnswer, [c.a, answer$1]);
				$s = 5; continue;
			/* } else if (_1 === (2)) { */ case 3:
				_r$1 = qc.client.Call(c.call); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				answer$2 = _r$1;
				$go(joinFulfiller, [c.f, answer$2]);
				$s = 5; continue;
			/* } else if (_1 === (3)) { */ case 4:
				_r$2 = newDisembargoMessage(sliceType$2.nil, 1, c.embargoID); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				msg = $clone(_r$2, rpc.Message);
				_r$3 = $clone(msg, rpc.Message).Disembargo(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple = _r$3;
				d = $clone(_tuple[0], rpc.Disembargo);
				_r$4 = $clone(d, rpc.Disembargo).SetTarget($clone(c.embargoTarget, rpc.MessageTarget)); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				_r$5 = qc.conn.sendMessage($clone(msg, rpc.Message)); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
			/* } */ case 5:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: queueClient.ptr.prototype.handle }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.answer$1 = answer$1; $f.answer$2 = answer$2; $f.c = c; $f.d = d; $f.msg = msg; $f.qc = qc; $f.$s = $s; $f.$r = $r; return $f;
	};
	queueClient.prototype.handle = function(c) { return this.$val.handle(c); };
	queueClient.ptr.prototype.isPassthrough = function() {
		var $ptr, qc;
		qc = this;
		return qc.q.Len() === 0;
	};
	queueClient.prototype.isPassthrough = function() { return this.$val.isPassthrough(); };
	queueClient.ptr.prototype.Call = function(cl) {
		var $ptr, _r, _r$1, _r$2, ans, cl, ok, qc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ans = $f.ans; cl = $f.cl; ok = $f.ok; qc = $f.qc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		qc = this;
		$r = qc.mu.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ok = qc.isPassthrough();
		$r = qc.mu.RUnlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (ok) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (ok) { */ case 3:
			_r = qc.client.Call(cl); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 4:
		$r = qc.mu.Lock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (qc.isPassthrough()) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (qc.isPassthrough()) { */ case 7:
			$r = qc.mu.Unlock(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$1 = qc.client.Call(cl); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 8:
		_r$2 = qc.pushCallLocked(cl); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		ans = _r$2;
		$r = qc.mu.Unlock(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return ans;
		/* */ } return; } if ($f === undefined) { $f = { $blk: queueClient.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ans = ans; $f.cl = cl; $f.ok = ok; $f.qc = qc; $f.$s = $s; $f.$r = $r; return $f;
	};
	queueClient.prototype.Call = function(cl) { return this.$val.Call(cl); };
	queueClient.ptr.prototype.tryQueue = function(cl) {
		var $ptr, _r, ans, cl, qc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ans = $f.ans; cl = $f.cl; qc = $f.qc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		qc = this;
		$r = qc.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (qc.isPassthrough()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (qc.isPassthrough()) { */ case 2:
			$r = qc.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return $ifaceNil;
		/* } */ case 3:
		_r = qc.pushCallLocked(cl); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ans = _r;
		$r = qc.mu.Unlock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return ans;
		/* */ } return; } if ($f === undefined) { $f = { $blk: queueClient.ptr.prototype.tryQueue }; } $f.$ptr = $ptr; $f._r = _r; $f.ans = ans; $f.cl = cl; $f.qc = qc; $f.$s = $s; $f.$r = $r; return $f;
	};
	queueClient.prototype.tryQueue = function(cl) { return this.$val.tryQueue(cl); };
	queueClient.ptr.prototype.Close = function() {
		var $ptr, _r, _r$1, _r$2, err, err$1, qc, rejErr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; err = $f.err; err$1 = $f.err$1; qc = $f.qc; rejErr = $f.rejErr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		qc = this;
		$r = new chanMutex(qc.conn.mu).Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = qc.conn.startWork(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 3:
			$r = new chanMutex(qc.conn.mu).Unlock(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return err;
		/* } */ case 4:
		_r$1 = qc.rejectQueue(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		rejErr = _r$1;
		qc.conn.workers.Done();
		$r = new chanMutex(qc.conn.mu).Unlock(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$2 = qc.client.Close(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		err$1 = _r$2;
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		$s = -1; return rejErr;
		/* */ } return; } if ($f === undefined) { $f = { $blk: queueClient.ptr.prototype.Close }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.err = err; $f.err$1 = err$1; $f.qc = qc; $f.rejErr = rejErr; $f.$s = $s; $f.$r = $r; return $f;
	};
	queueClient.prototype.Close = function() { return this.$val.Close(); };
	queueClient.ptr.prototype.rejectQueue = function() {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, c, d, err, err$1, firstErr, m, qc, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; c = $f.c; d = $f.d; err = $f.err; err$1 = $f.err$1; firstErr = $f.firstErr; m = $f.m; qc = $f.qc; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		qc = this;
		firstErr = $ifaceNil;
		$r = qc.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* while (true) { */ case 2:
			/* if (!(qc.q.Len() > 0)) { break; } */ if(!(qc.q.Len() > 0)) { $s = 3; continue; }
			c = $clone((x = qc.calls, x$1 = qc.q.Front(), ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])), qcall);
				_1 = c.which();
				/* */ if (_1 === (1)) { $s = 5; continue; }
				/* */ if (_1 === (2)) { $s = 6; continue; }
				/* */ if (_1 === (3)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (1)) { */ case 5:
					_r = c.a.reject(errQueueCallCancel); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					err = _r;
					if (!($interfaceIsEqual(err, $ifaceNil)) && $interfaceIsEqual(firstErr, $ifaceNil)) {
						firstErr = err;
					}
					$s = 8; continue;
				/* } else if (_1 === (2)) { */ case 6:
					$r = c.f.Reject(errQueueCallCancel); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 8; continue;
				/* } else if (_1 === (3)) { */ case 7:
					_r$1 = newDisembargoMessage(sliceType$2.nil, 1, c.embargoID); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					m = $clone(_r$1, rpc.Message);
					_r$2 = $clone(m, rpc.Message).Disembargo(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple = _r$2;
					d = $clone(_tuple[0], rpc.Disembargo);
					_r$3 = $clone(d, rpc.Disembargo).SetTarget($clone(c.embargoTarget, rpc.MessageTarget)); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$3;
					_r$4 = qc.conn.sendMessage($clone(m, rpc.Message)); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					err$1 = _r$4;
					if (!($interfaceIsEqual(err$1, $ifaceNil)) && $interfaceIsEqual(firstErr, $ifaceNil)) {
						firstErr = err$1;
					}
				/* } */ case 8:
			case 4:
			_r$5 = qc.q.Pop(); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ $s = 2; continue; case 3:
		$r = qc.mu.Unlock(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return firstErr;
		/* */ } return; } if ($f === undefined) { $f = { $blk: queueClient.ptr.prototype.rejectQueue }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.c = c; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.firstErr = firstErr; $f.m = m; $f.qc = qc; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	queueClient.prototype.rejectQueue = function() { return this.$val.rejectQueue(); };
	qcall.ptr.prototype.which = function() {
		var $ptr, c;
		c = this;
		if (!(c.a === ptrType.nil)) {
			return 1;
		} else if (!(c.f === ptrType$5.nil)) {
			return 2;
		} else if ($clone(c.embargoTarget.Struct, capnp.Struct).IsValid()) {
			return 3;
		} else {
			return 0;
		}
	};
	qcall.prototype.which = function() { return this.$val.which(); };
	qcallList.prototype.Len = function() {
		var $ptr, ql;
		ql = this;
		return ql.$length;
	};
	$ptrType(qcallList).prototype.Len = function() { return this.$get().Len(); };
	qcallList.prototype.Clear = function(i) {
		var $ptr, i, ql;
		ql = this;
		qcall.copy(((i < 0 || i >= ql.$length) ? ($throwRuntimeError("index out of range"), undefined) : ql.$array[ql.$offset + i]), new qcall.ptr(ptrType.nil, ptrType$5.nil, ptrType$6.nil, 0, new rpc.MessageTarget.ptr(new capnp.Struct.ptr(ptrType$2.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0))));
	};
	$ptrType(qcallList).prototype.Clear = function(i) { return this.$get().Clear(i); };
	localAnswerClient.ptr.prototype.Call = function(call) {
		var $ptr, _r, _r$1, _r$2, _tmp, _tmp$1, call, err, err$1, f, lac, obj, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; call = $f.call; err = $f.err; err$1 = $f.err$1; f = $f.f; lac = $f.lac; obj = $f.obj; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		lac = this;
		$r = lac.a.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (lac.a.done) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (lac.a.done) { */ case 2:
			_tmp = $clone(lac.a.obj, capnp.Ptr);
			_tmp$1 = lac.a.err;
			obj = $clone(_tmp, capnp.Ptr);
			err = _tmp$1;
			$r = lac.a.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r = clientFromResolution(lac.transform, $clone(obj, capnp.Ptr), err); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = _r.Call(call); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		f = new fulfiller.Fulfiller.ptr(new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0), $chanNil, new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), $ifaceNil, sliceType$5.nil);
		_r$2 = lac.a.queueCallLocked(call, new pcall.ptr(lac.transform, new qcall.ptr(ptrType.nil, f, ptrType$6.nil, 0, new rpc.MessageTarget.ptr(new capnp.Struct.ptr(ptrType$2.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0))))); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		err$1 = _r$2;
		$r = lac.a.mu.Unlock(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return capnp.ErrorAnswer(errQueueFull);
		}
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: localAnswerClient.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.call = call; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.lac = lac; $f.obj = obj; $f.$s = $s; $f.$r = $r; return $f;
	};
	localAnswerClient.prototype.Call = function(call) { return this.$val.Call(call); };
	localAnswerClient.ptr.prototype.Close = function() {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tmp$2, client, done, err, lac, obj, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; client = $f.client; done = $f.done; err = $f.err; lac = $f.lac; obj = $f.obj; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		lac = this;
		$r = lac.a.mu.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp = $clone(lac.a.obj, capnp.Ptr);
		_tmp$1 = lac.a.err;
		_tmp$2 = lac.a.done;
		obj = $clone(_tmp, capnp.Ptr);
		err = _tmp$1;
		done = _tmp$2;
		$r = lac.a.mu.RUnlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!done) {
			$s = -1; return $ifaceNil;
		}
		_r = clientFromResolution(lac.transform, $clone(obj, capnp.Ptr), err); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		client = _r;
		_r$1 = client.Close(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: localAnswerClient.ptr.prototype.Close }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f.client = client; $f.done = done; $f.err = err; $f.lac = lac; $f.obj = obj; $f.$s = $s; $f.$r = $r; return $f;
	};
	localAnswerClient.prototype.Close = function() { return this.$val.Close(); };
	Exception.ptr.prototype.Error = function() {
		var $ptr, _r, _tuple, e, err, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; e = $f.e; err = $f.err; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = $clone(e.Exception, rpc.Exception).Reason(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return "rpc exception";
		}
		$s = -1; return "rpc exception: " + r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Exception.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.e = e; $f.err = err; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Exception.prototype.Error = function() { return this.$val.Error(); };
	copyAbort = function(m) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, _tuple$2, err, err$1, m, ma, msg, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; err$1 = $f.err$1; m = $f.m; ma = $f.ma; msg = $f.msg; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $clone(m, rpc.Message).Abort(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ma = $clone(_tuple[0], rpc.Exception);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Abort.ptr(new rpc.Exception.ptr(new capnp.Struct.ptr(ptrType$2.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0))), err];
		}
		_r$1 = capnp.NewMessage(capnp.SingleSegment(sliceType$2.nil)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		msg = _tuple$1[0];
		_r$2 = msg.SetRootPtr($clone($clone(ma.Struct, capnp.Struct).ToPtr(), capnp.Ptr)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		err$1 = _r$2;
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [new Abort.ptr(new rpc.Exception.ptr(new capnp.Struct.ptr(ptrType$2.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0))), err$1];
		}
		_r$3 = msg.RootPtr(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$2 = _r$3;
		p = $clone(_tuple$2[0], capnp.Ptr);
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new Abort.ptr(new rpc.Exception.ptr(new capnp.Struct.ptr(ptrType$2.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0))), err];
		}
		$s = -1; return [new Abort.ptr(new rpc.Exception.ptr($clone($clone(p, capnp.Ptr).Struct(), capnp.Struct))), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: copyAbort }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.err$1 = err$1; $f.m = m; $f.ma = ma; $f.msg = msg; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	Abort.ptr.prototype.Error = function() {
		var $ptr, _r, _tuple, a, err, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; err = $f.err; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_r = $clone(a.Exception, rpc.Exception).Reason(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return "rpc: aborted by remote";
		}
		$s = -1; return "rpc: aborted by remote: " + r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Abort.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Abort.prototype.Error = function() { return this.$val.Error(); };
	toException = function(exc, err) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, ee, err, err$1, exc, ok, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; ee = $f.ee; err = $f.err; err$1 = $f.err$1; exc = $f.exc; ok = $f.ok; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(err, Exception, true);
		ee = $clone(_tuple[0], Exception);
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = $clone(ee.Exception, rpc.Exception).Reason(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			r = _tuple$1[0];
			err$1 = _tuple$1[1];
			/* */ if ($interfaceIsEqual(err$1, $ifaceNil)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ($interfaceIsEqual(err$1, $ifaceNil)) { */ case 4:
				_r$1 = $clone(exc, rpc.Exception).SetReason(r); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
			/* } */ case 5:
			$clone(exc, rpc.Exception).SetType($clone(ee.Exception, rpc.Exception).Type());
			$s = -1; return;
		/* } */ case 2:
		_r$2 = err.Error(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = $clone(exc, rpc.Exception).SetReason(_r$2); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		$clone(exc, rpc.Exception).SetType(0);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: toException }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.ee = ee; $f.err = err; $f.err$1 = err$1; $f.exc = exc; $f.ok = ok; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	bootstrapError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return "rpc bootstrap:" + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: bootstrapError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	bootstrapError.prototype.Error = function() { return this.$val.Error(); };
	questionError.ptr.prototype.Error = function() {
		var $ptr, _r, _r$1, qe, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; qe = $f.qe; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		qe = this;
		/* */ if (qe.method === ptrType$7.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (qe.method === ptrType$7.nil) { */ case 1:
			_r = fmt.Sprintf("bootstrap call id=%d: %v", new sliceType$6([new questionID(qe.id), qe.err])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = fmt.Sprintf("%v call id=%d: %v", new sliceType$6([qe.method, new questionID(qe.id), qe.err])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: questionError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.qe = qe; $f.$s = $s; $f.$r = $r; return $f;
	};
	questionError.prototype.Error = function() { return this.$val.Error(); };
	Conn.ptr.prototype.lockedCall = function(client, cl) {
		var $ptr, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tmp, _tmp$1, _tuple, _tuple$1, ans, ans$1, ans$2, ans$3, ans$4, ans$5, ans$6, ap, c, cl, client, client$1, curr, curr$1, curr$2, curr$3, curr$4, curr$5, curr$6, curr$7, err, err$1, err$2, err$3, f, obj, p, s, s$1, transform, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; ans = $f.ans; ans$1 = $f.ans$1; ans$2 = $f.ans$2; ans$3 = $f.ans$3; ans$4 = $f.ans$4; ans$5 = $f.ans$5; ans$6 = $f.ans$6; ap = $f.ap; c = $f.c; cl = $f.cl; client = $f.client; client$1 = $f.client$1; curr = $f.curr; curr$1 = $f.curr$1; curr$2 = $f.curr$2; curr$3 = $f.curr$3; curr$4 = $f.curr$4; curr$5 = $f.curr$5; curr$6 = $f.curr$6; curr$7 = $f.curr$7; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; f = $f.f; obj = $f.obj; p = $f.p; s = $f.s; s$1 = $f.s$1; transform = $f.transform; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		client$1 = client;
		/* while (true) { */ case 1:
			_ref = client$1;
			/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 3; continue; }
			/* */ if ($assertType(_ref, ptrType$8, true)[1]) { $s = 4; continue; }
			/* */ if ($assertType(_ref, ptrType$9, true)[1]) { $s = 5; continue; }
			/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 6; continue; }
			/* */ if ($assertType(_ref, ptrType$3, true)[1]) { $s = 7; continue; }
			/* */ if ($assertType(_ref, ptrType$11, true)[1]) { $s = 8; continue; }
			/* */ if ($assertType(_ref, ptrType$12, true)[1]) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if ($assertType(_ref, ptrType$4, true)[1]) { */ case 3:
				curr = _ref.$val;
				/* */ if (!(curr.conn === c)) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (!(curr.conn === c)) { */ case 12:
					_r = curr.Call(cl); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$s = -1; return _r;
				/* } */ case 13:
				_r$1 = curr.lockedCall(cl); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } else if ($assertType(_ref, ptrType$8, true)[1]) { */ case 4:
				curr$1 = _ref.$val;
				_r$2 = curr$1.TryQueue(cl); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				ans = _r$2;
				if (!($interfaceIsEqual(ans, $ifaceNil))) {
					$s = -1; return ans;
				}
				_r$3 = curr$1.Client(); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				client$1 = _r$3;
				$s = 11; continue;
			/* } else if ($assertType(_ref, ptrType$9, true)[1]) { */ case 5:
				curr$2 = _ref.$val;
				client$1 = curr$2.Client();
				$s = 11; continue;
			/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 6:
				curr$3 = _ref.$val;
				_r$4 = curr$3.tryQueue(cl); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				ans$1 = _r$4;
				if (!($interfaceIsEqual(ans$1, $ifaceNil))) {
					$s = -1; return ans$1;
				}
				client$1 = curr$3.client;
				$s = 11; continue;
			/* } else if ($assertType(_ref, ptrType$3, true)[1]) { */ case 7:
				curr$4 = _ref.$val;
				_r$5 = curr$4.tryQueue(cl); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				ans$2 = _r$5;
				if (!($interfaceIsEqual(ans$2, $ifaceNil))) {
					$s = -1; return ans$2;
				}
				client$1 = curr$4.client;
				$s = 11; continue;
			/* } else if ($assertType(_ref, ptrType$11, true)[1]) { */ case 8:
				curr$5 = _ref.$val;
				$r = curr$5.a.mu.Lock(); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (curr$5.a.done) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (curr$5.a.done) { */ case 21:
					_tmp = $clone(curr$5.a.obj, capnp.Ptr);
					_tmp$1 = curr$5.a.err;
					obj = $clone(_tmp, capnp.Ptr);
					err = _tmp$1;
					$r = curr$5.a.mu.Unlock(); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$6 = clientFromResolution(curr$5.transform, $clone(obj, capnp.Ptr), err); /* */ $s = 25; case 25: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					client$1 = _r$6;
					$s = 23; continue;
				/* } else { */ case 22:
					f = new fulfiller.Fulfiller.ptr(new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0), $chanNil, new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), $ifaceNil, sliceType$5.nil);
					_r$7 = curr$5.a.queueCallLocked(cl, new pcall.ptr(curr$5.transform, new qcall.ptr(ptrType.nil, f, ptrType$6.nil, 0, new rpc.MessageTarget.ptr(new capnp.Struct.ptr(ptrType$2.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0))))); /* */ $s = 26; case 26: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					err$1 = _r$7;
					$r = curr$5.a.mu.Unlock(); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						$s = -1; return capnp.ErrorAnswer(err$1);
					}
					$s = -1; return f;
				/* } */ case 23:
				$s = 11; continue;
			/* } else if ($assertType(_ref, ptrType$12, true)[1]) { */ case 9:
				curr$6 = _ref.$val;
				p = $pointerOfStructConversion(curr$6, ptrType$13);
				ans$3 = p.Answer();
				transform = p.Transform();
				/* */ if (capnp.IsFixedAnswer(ans$3)) { $s = 28; continue; }
				/* */ $s = 29; continue;
				/* if (capnp.IsFixedAnswer(ans$3)) { */ case 28:
					_r$8 = ans$3.Struct(); /* */ $s = 30; case 30: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_tuple = _r$8;
					s = $clone(_tuple[0], capnp.Struct);
					err$2 = _tuple[1];
					_r$9 = clientFromResolution(transform, $clone($clone(s, capnp.Struct).ToPtr(), capnp.Ptr), err$2); /* */ $s = 31; case 31: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					client$1 = _r$9;
					/* continue; */ $s = 1; continue;
				/* } */ case 29:
				_ref$1 = ans$3;
				/* */ if ($assertType(_ref$1, ptrType$5, true)[1]) { $s = 32; continue; }
				/* */ if ($assertType(_ref$1, ptrType$14, true)[1]) { $s = 33; continue; }
				/* */ $s = 34; continue;
				/* if ($assertType(_ref$1, ptrType$5, true)[1]) { */ case 32:
					ans$4 = _ref$1.$val;
					_r$10 = ans$4.Peek(); /* */ $s = 36; case 36: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					ap = _r$10;
					if ($interfaceIsEqual(ap, $ifaceNil)) {
						/* break dig; */ $s = 2; continue s;
					}
					_r$11 = ap.Struct(); /* */ $s = 37; case 37: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_tuple$1 = _r$11;
					s$1 = $clone(_tuple$1[0], capnp.Struct);
					err$3 = _tuple$1[1];
					_r$12 = clientFromResolution(transform, $clone($clone(s$1, capnp.Struct).ToPtr(), capnp.Ptr), err$3); /* */ $s = 38; case 38: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					client$1 = _r$12;
					$s = 35; continue;
				/* } else if ($assertType(_ref$1, ptrType$14, true)[1]) { */ case 33:
					ans$5 = _ref$1.$val;
					/* */ if (!(ans$5.conn === c)) { $s = 39; continue; }
					/* */ $s = 40; continue;
					/* if (!(ans$5.conn === c)) { */ case 39:
						_r$13 = ans$5.PipelineCall(transform, cl); /* */ $s = 41; case 41: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						$s = -1; return _r$13;
					/* } */ case 40:
					_r$14 = ans$5.lockedPipelineCall(transform, cl); /* */ $s = 42; case 42: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					$s = -1; return _r$14;
				/* } else { */ case 34:
					ans$6 = _ref$1;
					/* break dig; */ $s = 2; continue s;
				/* } */ case 35:
				$s = 11; continue;
			/* } else { */ case 10:
				curr$7 = _ref;
				/* break dig; */ $s = 2; continue s;
			/* } */ case 11:
		/* } */ $s = 1; continue; case 2:
		_r$15 = client.Call(cl); /* */ $s = 43; case 43: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		$s = -1; return _r$15;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.lockedCall }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.ans = ans; $f.ans$1 = ans$1; $f.ans$2 = ans$2; $f.ans$3 = ans$3; $f.ans$4 = ans$4; $f.ans$5 = ans$5; $f.ans$6 = ans$6; $f.ap = ap; $f.c = c; $f.cl = cl; $f.client = client; $f.client$1 = client$1; $f.curr = curr; $f.curr$1 = curr$1; $f.curr$2 = curr$2; $f.curr$3 = curr$3; $f.curr$4 = curr$4; $f.curr$5 = curr$5; $f.curr$6 = curr$6; $f.curr$7 = curr$7; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.f = f; $f.obj = obj; $f.p = p; $f.s = s; $f.s$1 = s$1; $f.transform = transform; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.lockedCall = function(client, cl) { return this.$val.lockedCall(client, cl); };
	Conn.ptr.prototype.descriptorForClient = function(desc, client) {
		var $ptr, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, a, ans, ans$1, ans$2, ans$3, ap, c, client, client$1, ct, ct$1, ct$2, ct$3, ct$4, ct$5, ct$6, ct$7, desc, done, err, err$1, err$2, err$3, id, obj, obj$1, ok, ok$1, p, s, s$1, state, transform, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; a = $f.a; ans = $f.ans; ans$1 = $f.ans$1; ans$2 = $f.ans$2; ans$3 = $f.ans$3; ap = $f.ap; c = $f.c; client = $f.client; client$1 = $f.client$1; ct = $f.ct; ct$1 = $f.ct$1; ct$2 = $f.ct$2; ct$3 = $f.ct$3; ct$4 = $f.ct$4; ct$5 = $f.ct$5; ct$6 = $f.ct$6; ct$7 = $f.ct$7; desc = $f.desc; done = $f.done; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; id = $f.id; obj = $f.obj; obj$1 = $f.obj$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; s = $f.s; s$1 = $f.s$1; state = $f.state; transform = $f.transform; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		client$1 = client;
		/* while (true) { */ case 1:
			_ref = client$1;
			/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 3; continue; }
			/* */ if ($assertType(_ref, ptrType$8, true)[1]) { $s = 4; continue; }
			/* */ if ($assertType(_ref, ptrType$9, true)[1]) { $s = 5; continue; }
			/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 6; continue; }
			/* */ if ($assertType(_ref, ptrType$3, true)[1]) { $s = 7; continue; }
			/* */ if ($assertType(_ref, ptrType$11, true)[1]) { $s = 8; continue; }
			/* */ if ($assertType(_ref, ptrType$12, true)[1]) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if ($assertType(_ref, ptrType$4, true)[1]) { */ case 3:
				ct = _ref.$val;
				if (!(ct.conn === c)) {
					/* break dig; */ $s = 2; continue s;
				}
				$clone(desc, rpc.CapDescriptor).SetReceiverHosted((ct.id >>> 0));
				$s = -1; return $ifaceNil;
			/* } else if ($assertType(_ref, ptrType$8, true)[1]) { */ case 4:
				ct$1 = _ref.$val;
				_r = ct$1.Client(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				client$1 = _r;
				if ($interfaceIsEqual(client$1, $ifaceNil)) {
					/* break dig; */ $s = 2; continue s;
				}
				$s = 11; continue;
			/* } else if ($assertType(_ref, ptrType$9, true)[1]) { */ case 5:
				ct$2 = _ref.$val;
				client$1 = ct$2.Client();
				$s = 11; continue;
			/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 6:
				ct$3 = _ref.$val;
				$r = ct$3.mu.RLock(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				ok = ct$3.isPassthrough();
				$r = ct$3.mu.RUnlock(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (!ok) {
					/* break dig; */ $s = 2; continue s;
				}
				client$1 = ct$3.client;
				$s = 11; continue;
			/* } else if ($assertType(_ref, ptrType$3, true)[1]) { */ case 7:
				ct$4 = _ref.$val;
				$r = ct$4.mu.RLock(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				ok$1 = ct$4.isPassthrough();
				$r = ct$4.mu.RUnlock(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (!ok$1) {
					/* break dig; */ $s = 2; continue s;
				}
				client$1 = ct$4.client;
				$s = 11; continue;
			/* } else if ($assertType(_ref, ptrType$11, true)[1]) { */ case 8:
				ct$5 = _ref.$val;
				$r = ct$5.a.mu.RLock(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_tmp = $clone(ct$5.a.obj, capnp.Ptr);
				_tmp$1 = ct$5.a.err;
				_tmp$2 = ct$5.a.done;
				obj = $clone(_tmp, capnp.Ptr);
				err = _tmp$1;
				done = _tmp$2;
				$r = ct$5.a.mu.RUnlock(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (!done) {
					/* break dig; */ $s = 2; continue s;
				}
				_r$1 = clientFromResolution(ct$5.transform, $clone(obj, capnp.Ptr), err); /* */ $s = 19; case 19: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				client$1 = _r$1;
				$s = 11; continue;
			/* } else if ($assertType(_ref, ptrType$12, true)[1]) { */ case 9:
				ct$6 = _ref.$val;
				p = $pointerOfStructConversion(ct$6, ptrType$13);
				ans = p.Answer();
				transform = p.Transform();
				/* */ if (capnp.IsFixedAnswer(ans)) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (capnp.IsFixedAnswer(ans)) { */ case 20:
					_r$2 = ans.Struct(); /* */ $s = 22; case 22: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple = _r$2;
					s = $clone(_tuple[0], capnp.Struct);
					err$1 = _tuple[1];
					_r$3 = clientFromResolution(transform, $clone($clone(s, capnp.Struct).ToPtr(), capnp.Ptr), err$1); /* */ $s = 23; case 23: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					client$1 = _r$3;
					/* continue; */ $s = 1; continue;
				/* } */ case 21:
				_ref$1 = ans;
				/* */ if ($assertType(_ref$1, ptrType$5, true)[1]) { $s = 24; continue; }
				/* */ if ($assertType(_ref$1, ptrType$14, true)[1]) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if ($assertType(_ref$1, ptrType$5, true)[1]) { */ case 24:
					ans$1 = _ref$1.$val;
					_r$4 = ans$1.Peek(); /* */ $s = 28; case 28: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					ap = _r$4;
					if ($interfaceIsEqual(ap, $ifaceNil)) {
						/* break dig; */ $s = 2; continue s;
					}
					_r$5 = ap.Struct(); /* */ $s = 29; case 29: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$1 = _r$5;
					s$1 = $clone(_tuple$1[0], capnp.Struct);
					err$2 = _tuple$1[1];
					_r$6 = clientFromResolution(transform, $clone($clone(s$1, capnp.Struct).ToPtr(), capnp.Ptr), err$2); /* */ $s = 30; case 30: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					client$1 = _r$6;
					$s = 27; continue;
				/* } else if ($assertType(_ref$1, ptrType$14, true)[1]) { */ case 25:
					ans$2 = _ref$1.$val;
					$r = ans$2.mu.RLock(); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_tmp$3 = $clone(ans$2.obj, capnp.Ptr);
					_tmp$4 = ans$2.err;
					_tmp$5 = ans$2.state;
					obj$1 = $clone(_tmp$3, capnp.Ptr);
					err$3 = _tmp$4;
					state = _tmp$5;
					$r = ans$2.mu.RUnlock(); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* */ if (!((state === 0))) { $s = 33; continue; }
					/* */ $s = 34; continue;
					/* if (!((state === 0))) { */ case 33:
						_r$7 = clientFromResolution(transform, $clone(obj$1, capnp.Ptr), err$3); /* */ $s = 35; case 35: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						client$1 = _r$7;
						/* continue; */ $s = 1; continue;
					/* } */ case 34:
					if (!(ans$2.conn === c)) {
						/* break dig; */ $s = 2; continue s;
					}
					_r$8 = $clone(desc, rpc.CapDescriptor).NewReceiverAnswer(); /* */ $s = 36; case 36: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_tuple$2 = _r$8;
					a = $clone(_tuple$2[0], rpc.PromisedAnswer);
					err$3 = _tuple$2[1];
					if (!($interfaceIsEqual(err$3, $ifaceNil))) {
						$s = -1; return err$3;
					}
					$clone(a, rpc.PromisedAnswer).SetQuestionId((ans$2.id >>> 0));
					_r$9 = transformToPromisedAnswer($clone(desc.Struct, capnp.Struct).Segment(), $clone(a, rpc.PromisedAnswer), p.Transform()); /* */ $s = 37; case 37: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					err$3 = _r$9;
					if (!($interfaceIsEqual(err$3, $ifaceNil))) {
						$s = -1; return err$3;
					}
					$s = -1; return $ifaceNil;
				/* } else { */ case 26:
					ans$3 = _ref$1;
					/* break dig; */ $s = 2; continue s;
				/* } */ case 27:
				$s = 11; continue;
			/* } else { */ case 10:
				ct$7 = _ref;
				/* break dig; */ $s = 2; continue s;
			/* } */ case 11:
		/* } */ $s = 1; continue; case 2:
		_r$10 = c.addExport(client); /* */ $s = 38; case 38: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		id = _r$10;
		$clone(desc, rpc.CapDescriptor).SetSenderHosted((id >>> 0));
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.descriptorForClient }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.a = a; $f.ans = ans; $f.ans$1 = ans$1; $f.ans$2 = ans$2; $f.ans$3 = ans$3; $f.ap = ap; $f.c = c; $f.client = client; $f.client$1 = client$1; $f.ct = ct; $f.ct$1 = ct$1; $f.ct$2 = ct$2; $f.ct$3 = ct$3; $f.ct$4 = ct$4; $f.ct$5 = ct$5; $f.ct$6 = ct$6; $f.ct$7 = ct$7; $f.desc = desc; $f.done = done; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.id = id; $f.obj = obj; $f.obj$1 = obj$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.s = s; $f.s$1 = s$1; $f.state = state; $f.transform = transform; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.descriptorForClient = function(desc, client) { return this.$val.descriptorForClient(desc, client); };
	isSameClient = function(c, d) {
		var $ptr, _r, _r$1, c, d, norm, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; c = $f.c; d = $f.d; norm = $f.norm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		norm = (function $b(client) {
			var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, ans, ans$1, ans$2, ans$3, ap, client, curr, curr$1, curr$2, curr$3, curr$4, curr$5, curr$6, done, err, err$1, err$2, err$3, obj, obj$1, ok, ok$1, p, s, s$1, state, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; ans = $f.ans; ans$1 = $f.ans$1; ans$2 = $f.ans$2; ans$3 = $f.ans$3; ap = $f.ap; client = $f.client; curr = $f.curr; curr$1 = $f.curr$1; curr$2 = $f.curr$2; curr$3 = $f.curr$3; curr$4 = $f.curr$4; curr$5 = $f.curr$5; curr$6 = $f.curr$6; done = $f.done; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; obj = $f.obj; obj$1 = $f.obj$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; s = $f.s; s$1 = $f.s$1; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			/* while (true) { */ case 1:
				_ref = client;
				/* */ if ($assertType(_ref, ptrType$8, true)[1]) { $s = 3; continue; }
				/* */ if ($assertType(_ref, ptrType$9, true)[1]) { $s = 4; continue; }
				/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 5; continue; }
				/* */ if ($assertType(_ref, ptrType$3, true)[1]) { $s = 6; continue; }
				/* */ if ($assertType(_ref, ptrType$11, true)[1]) { $s = 7; continue; }
				/* */ if ($assertType(_ref, ptrType$12, true)[1]) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if ($assertType(_ref, ptrType$8, true)[1]) { */ case 3:
					curr = _ref.$val;
					_r = curr.Client(); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					client = _r;
					if ($interfaceIsEqual(client, $ifaceNil)) {
						$s = -1; return curr;
					}
					$s = 10; continue;
				/* } else if ($assertType(_ref, ptrType$9, true)[1]) { */ case 4:
					curr$1 = _ref.$val;
					client = curr$1.Client();
					$s = 10; continue;
				/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 5:
					curr$2 = _ref.$val;
					$r = curr$2.mu.RLock(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					ok = curr$2.isPassthrough();
					$r = curr$2.mu.RUnlock(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (!ok) {
						$s = -1; return curr$2;
					}
					client = curr$2.client;
					$s = 10; continue;
				/* } else if ($assertType(_ref, ptrType$3, true)[1]) { */ case 6:
					curr$3 = _ref.$val;
					$r = curr$3.mu.RLock(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					ok$1 = curr$3.isPassthrough();
					$r = curr$3.mu.RUnlock(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (!ok$1) {
						$s = -1; return curr$3;
					}
					client = curr$3.client;
					$s = 10; continue;
				/* } else if ($assertType(_ref, ptrType$11, true)[1]) { */ case 7:
					curr$4 = _ref.$val;
					$r = curr$4.a.mu.RLock(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_tmp = $clone(curr$4.a.obj, capnp.Ptr);
					_tmp$1 = curr$4.a.err;
					_tmp$2 = curr$4.a.done;
					obj = $clone(_tmp, capnp.Ptr);
					err = _tmp$1;
					done = _tmp$2;
					$r = curr$4.a.mu.RUnlock(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (!done) {
						$s = -1; return curr$4;
					}
					_r$1 = clientFromResolution(curr$4.transform, $clone(obj, capnp.Ptr), err); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					client = _r$1;
					$s = 10; continue;
				/* } else if ($assertType(_ref, ptrType$12, true)[1]) { */ case 8:
					curr$5 = _ref.$val;
					p = $pointerOfStructConversion(curr$5, ptrType$13);
					ans = p.Answer();
					/* */ if (capnp.IsFixedAnswer(ans)) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (capnp.IsFixedAnswer(ans)) { */ case 19:
						_r$2 = ans.Struct(); /* */ $s = 21; case 21: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_tuple = _r$2;
						s = $clone(_tuple[0], capnp.Struct);
						err$1 = _tuple[1];
						_r$3 = clientFromResolution(p.Transform(), $clone($clone(s, capnp.Struct).ToPtr(), capnp.Ptr), err$1); /* */ $s = 22; case 22: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						client = _r$3;
						/* continue; */ $s = 1; continue;
					/* } */ case 20:
					_ref$1 = ans;
					/* */ if ($assertType(_ref$1, ptrType$5, true)[1]) { $s = 23; continue; }
					/* */ if ($assertType(_ref$1, ptrType$14, true)[1]) { $s = 24; continue; }
					/* */ $s = 25; continue;
					/* if ($assertType(_ref$1, ptrType$5, true)[1]) { */ case 23:
						ans$1 = _ref$1.$val;
						_r$4 = ans$1.Peek(); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						ap = _r$4;
						if ($interfaceIsEqual(ap, $ifaceNil)) {
							$s = -1; return curr$5;
						}
						_r$5 = ap.Struct(); /* */ $s = 28; case 28: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_tuple$1 = _r$5;
						s$1 = $clone(_tuple$1[0], capnp.Struct);
						err$2 = _tuple$1[1];
						_r$6 = clientFromResolution(p.Transform(), $clone($clone(s$1, capnp.Struct).ToPtr(), capnp.Ptr), err$2); /* */ $s = 29; case 29: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						client = _r$6;
						$s = 26; continue;
					/* } else if ($assertType(_ref$1, ptrType$14, true)[1]) { */ case 24:
						ans$2 = _ref$1.$val;
						$r = ans$2.mu.RLock(); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_tmp$3 = $clone(ans$2.obj, capnp.Ptr);
						_tmp$4 = ans$2.err;
						_tmp$5 = ans$2.state;
						obj$1 = $clone(_tmp$3, capnp.Ptr);
						err$3 = _tmp$4;
						state = _tmp$5;
						$r = ans$2.mu.RUnlock(); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						if (!((state === 1))) {
							$s = -1; return curr$5;
						}
						_r$7 = clientFromResolution(p.Transform(), $clone(obj$1, capnp.Ptr), err$3); /* */ $s = 32; case 32: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						client = _r$7;
						$s = 26; continue;
					/* } else { */ case 25:
						ans$3 = _ref$1;
						$s = -1; return curr$5;
					/* } */ case 26:
					$s = 10; continue;
				/* } else { */ case 9:
					curr$6 = _ref;
					$s = -1; return curr$6;
				/* } */ case 10:
			/* } */ $s = 1; continue; case 2:
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.ans = ans; $f.ans$1 = ans$1; $f.ans$2 = ans$2; $f.ans$3 = ans$3; $f.ap = ap; $f.client = client; $f.curr = curr; $f.curr$1 = curr$1; $f.curr$2 = curr$2; $f.curr$3 = curr$3; $f.curr$4 = curr$4; $f.curr$5 = curr$5; $f.curr$6 = curr$6; $f.done = done; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.obj = obj; $f.obj$1 = obj$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.s = s; $f.s$1 = s$1; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
		});
		_r = norm(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = norm(d); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return $interfaceIsEqual(_r, _r$1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: isSameClient }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.d = d; $f.norm = norm; $f.$s = $s; $f.$r = $r; return $f;
	};
	isImport = function(client) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, ans, ans$1, ans$2, ans$3, ap, client, curr, curr$1, curr$2, curr$3, curr$4, curr$5, curr$6, curr$7, done, err, err$1, err$2, err$3, obj, obj$1, ok, ok$1, p, s, s$1, state, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; ans = $f.ans; ans$1 = $f.ans$1; ans$2 = $f.ans$2; ans$3 = $f.ans$3; ap = $f.ap; client = $f.client; curr = $f.curr; curr$1 = $f.curr$1; curr$2 = $f.curr$2; curr$3 = $f.curr$3; curr$4 = $f.curr$4; curr$5 = $f.curr$5; curr$6 = $f.curr$6; curr$7 = $f.curr$7; done = $f.done; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; obj = $f.obj; obj$1 = $f.obj$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; s = $f.s; s$1 = $f.s$1; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			_ref = client;
			/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 3; continue; }
			/* */ if ($assertType(_ref, ptrType$8, true)[1]) { $s = 4; continue; }
			/* */ if ($assertType(_ref, ptrType$9, true)[1]) { $s = 5; continue; }
			/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 6; continue; }
			/* */ if ($assertType(_ref, ptrType$3, true)[1]) { $s = 7; continue; }
			/* */ if ($assertType(_ref, ptrType$11, true)[1]) { $s = 8; continue; }
			/* */ if ($assertType(_ref, ptrType$12, true)[1]) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if ($assertType(_ref, ptrType$4, true)[1]) { */ case 3:
				curr = _ref.$val;
				$s = -1; return curr;
			/* } else if ($assertType(_ref, ptrType$8, true)[1]) { */ case 4:
				curr$1 = _ref.$val;
				_r = curr$1.Client(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				client = _r;
				if ($interfaceIsEqual(client, $ifaceNil)) {
					$s = -1; return ptrType$4.nil;
				}
				$s = 11; continue;
			/* } else if ($assertType(_ref, ptrType$9, true)[1]) { */ case 5:
				curr$2 = _ref.$val;
				client = curr$2.Client();
				$s = 11; continue;
			/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 6:
				curr$3 = _ref.$val;
				$r = curr$3.mu.RLock(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				ok = curr$3.isPassthrough();
				$r = curr$3.mu.RUnlock(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (!ok) {
					$s = -1; return ptrType$4.nil;
				}
				client = curr$3.client;
				$s = 11; continue;
			/* } else if ($assertType(_ref, ptrType$3, true)[1]) { */ case 7:
				curr$4 = _ref.$val;
				$r = curr$4.mu.RLock(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				ok$1 = curr$4.isPassthrough();
				$r = curr$4.mu.RUnlock(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (!ok$1) {
					$s = -1; return ptrType$4.nil;
				}
				client = curr$4.client;
				$s = 11; continue;
			/* } else if ($assertType(_ref, ptrType$11, true)[1]) { */ case 8:
				curr$5 = _ref.$val;
				$r = curr$5.a.mu.RLock(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_tmp = $clone(curr$5.a.obj, capnp.Ptr);
				_tmp$1 = curr$5.a.err;
				_tmp$2 = curr$5.a.done;
				obj = $clone(_tmp, capnp.Ptr);
				err = _tmp$1;
				done = _tmp$2;
				$r = curr$5.a.mu.RUnlock(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (!done) {
					$s = -1; return ptrType$4.nil;
				}
				_r$1 = clientFromResolution(curr$5.transform, $clone(obj, capnp.Ptr), err); /* */ $s = 19; case 19: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				client = _r$1;
				$s = 11; continue;
			/* } else if ($assertType(_ref, ptrType$12, true)[1]) { */ case 9:
				curr$6 = _ref.$val;
				p = $pointerOfStructConversion(curr$6, ptrType$13);
				ans = p.Answer();
				/* */ if (capnp.IsFixedAnswer(ans)) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (capnp.IsFixedAnswer(ans)) { */ case 20:
					_r$2 = ans.Struct(); /* */ $s = 22; case 22: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple = _r$2;
					s = $clone(_tuple[0], capnp.Struct);
					err$1 = _tuple[1];
					_r$3 = clientFromResolution(p.Transform(), $clone($clone(s, capnp.Struct).ToPtr(), capnp.Ptr), err$1); /* */ $s = 23; case 23: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					client = _r$3;
					/* continue; */ $s = 1; continue;
				/* } */ case 21:
				_ref$1 = ans;
				/* */ if ($assertType(_ref$1, ptrType$5, true)[1]) { $s = 24; continue; }
				/* */ if ($assertType(_ref$1, ptrType$14, true)[1]) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if ($assertType(_ref$1, ptrType$5, true)[1]) { */ case 24:
					ans$1 = _ref$1.$val;
					_r$4 = ans$1.Peek(); /* */ $s = 28; case 28: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					ap = _r$4;
					if ($interfaceIsEqual(ap, $ifaceNil)) {
						$s = -1; return ptrType$4.nil;
					}
					_r$5 = ap.Struct(); /* */ $s = 29; case 29: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$1 = _r$5;
					s$1 = $clone(_tuple$1[0], capnp.Struct);
					err$2 = _tuple$1[1];
					_r$6 = clientFromResolution(p.Transform(), $clone($clone(s$1, capnp.Struct).ToPtr(), capnp.Ptr), err$2); /* */ $s = 30; case 30: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					client = _r$6;
					$s = 27; continue;
				/* } else if ($assertType(_ref$1, ptrType$14, true)[1]) { */ case 25:
					ans$2 = _ref$1.$val;
					$r = ans$2.mu.RLock(); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_tmp$3 = $clone(ans$2.obj, capnp.Ptr);
					_tmp$4 = ans$2.err;
					_tmp$5 = ans$2.state;
					obj$1 = $clone(_tmp$3, capnp.Ptr);
					err$3 = _tmp$4;
					state = _tmp$5;
					$r = ans$2.mu.RUnlock(); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (!((state === 1))) {
						$s = -1; return ptrType$4.nil;
					}
					_r$7 = clientFromResolution(p.Transform(), $clone(obj$1, capnp.Ptr), err$3); /* */ $s = 33; case 33: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					client = _r$7;
					$s = 27; continue;
				/* } else { */ case 26:
					ans$3 = _ref$1;
					$s = -1; return ptrType$4.nil;
				/* } */ case 27:
				$s = 11; continue;
			/* } else { */ case 10:
				curr$7 = _ref;
				$s = -1; return ptrType$4.nil;
			/* } */ case 11:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return ptrType$4.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: isImport }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.ans = ans; $f.ans$1 = ans$1; $f.ans$2 = ans$2; $f.ans$3 = ans$3; $f.ap = ap; $f.client = client; $f.curr = curr; $f.curr$1 = curr$1; $f.curr$2 = curr$2; $f.curr$3 = curr$3; $f.curr$4 = curr$4; $f.curr$5 = curr$5; $f.curr$6 = curr$6; $f.curr$7 = curr$7; $f.done = done; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.obj = obj; $f.obj$1 = obj$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.s = s; $f.s$1 = s$1; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
	};
	defaultLogger.ptr.prototype.Infof = function(ctx, format, args) {
		var $ptr, args, ctx, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; args = $f.args; ctx = $f.ctx; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = log.Printf("rpc: " + format, args); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: defaultLogger.ptr.prototype.Infof }; } $f.$ptr = $ptr; $f.args = args; $f.ctx = ctx; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	defaultLogger.prototype.Infof = function(ctx, format, args) { return this.$val.Infof(ctx, format, args); };
	defaultLogger.ptr.prototype.Errorf = function(ctx, format, args) {
		var $ptr, args, ctx, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; args = $f.args; ctx = $f.ctx; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = log.Printf("rpc: " + format, args); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: defaultLogger.ptr.prototype.Errorf }; } $f.$ptr = $ptr; $f.args = args; $f.ctx = ctx; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	defaultLogger.prototype.Errorf = function(ctx, format, args) { return this.$val.Errorf(ctx, format, args); };
	Conn.ptr.prototype.infof = function(format, args) {
		var $ptr, args, c, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; args = $f.args; c = $f.c; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if ($interfaceIsEqual(c.log, $ifaceNil)) {
			$s = -1; return;
		}
		$r = c.log.Infof(c.bg, format, args); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.infof }; } $f.$ptr = $ptr; $f.args = args; $f.c = c; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.infof = function(format, args) { return this.$val.infof(format, args); };
	Conn.ptr.prototype.errorf = function(format, args) {
		var $ptr, args, c, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; args = $f.args; c = $f.c; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if ($interfaceIsEqual(c.log, $ifaceNil)) {
			$s = -1; return;
		}
		$r = c.log.Errorf(c.bg, format, args); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.errorf }; } $f.$ptr = $ptr; $f.args = args; $f.c = c; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.errorf = function(format, args) { return this.$val.errorf(format, args); };
	Conn.ptr.prototype.newQuestion = function(ctx, method) {
		var $ptr, c, ctx, id, method, q, x;
		c = this;
		id = (c.questionID.next() >>> 0);
		q = new question.ptr(id, ctx, c, method, sliceType.nil, new $Chan(structType, 0), sliceType$7.nil, new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), new capnp.Ptr.ptr(ptrType$2.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0), $ifaceNil, 0);
		if ((id >> 0) === c.questions.$length) {
			c.questions = $append(c.questions, q);
		} else {
			(x = c.questions, ((id < 0 || id >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + id] = q));
		}
		return q;
	};
	Conn.prototype.newQuestion = function(ctx, method) { return this.$val.newQuestion(ctx, method); };
	Conn.ptr.prototype.findQuestion = function(id) {
		var $ptr, c, id, x;
		c = this;
		if ((id >> 0) >= c.questions.$length) {
			return ptrType$14.nil;
		}
		return (x = c.questions, ((id < 0 || id >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + id]));
	};
	Conn.prototype.findQuestion = function(id) { return this.$val.findQuestion(id); };
	Conn.ptr.prototype.popQuestion = function(id) {
		var $ptr, c, id, q, x;
		c = this;
		q = c.findQuestion(id);
		if (q === ptrType$14.nil) {
			return ptrType$14.nil;
		}
		(x = c.questions, ((id < 0 || id >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + id] = ptrType$14.nil));
		c.questionID.remove((id >>> 0));
		return q;
	};
	Conn.prototype.popQuestion = function(id) { return this.$val.popQuestion(id); };
	question.ptr.prototype.start = function() {
		var $ptr, q;
		q = this;
		$go((function $b() {
			var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _selection, _selection$1, err, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _selection = $f._selection; _selection$1 = $f._selection$1; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = q.conn.bg.Done(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = q.ctx.Done(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = $select([[q.resolved], [_r], [_r$1]]); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_selection = _r$2;
			/* */ if (_selection[0] === 0) { $s = 4; continue; }
			/* */ if (_selection[0] === 1) { $s = 5; continue; }
			/* */ if (_selection[0] === 2) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_selection[0] === 0) { */ case 4:
				$s = 7; continue;
			/* } else if (_selection[0] === 1) { */ case 5:
				$s = 7; continue;
			/* } else if (_selection[0] === 2) { */ case 6:
				_r$3 = q.conn.bg.Done(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$4 = $select([[q.resolved], [_r$3], [q.conn.mu]]); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_selection$1 = _r$4;
				/* */ if (_selection$1[0] === 0) { $s = 10; continue; }
				/* */ if (_selection$1[0] === 1) { $s = 11; continue; }
				/* */ if (_selection$1[0] === 2) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_selection$1[0] === 0) { */ case 10:
					$s = 13; continue;
				/* } else if (_selection$1[0] === 1) { */ case 11:
					$s = 13; continue;
				/* } else if (_selection$1[0] === 2) { */ case 12:
					_r$5 = q.conn.startWork(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					err = _r$5;
					/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 15:
						$r = new chanMutex(q.conn.mu).Unlock(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
					/* } */ case 16:
					_r$6 = q.ctx.Err(); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = q.cancel(_r$6); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					/* */ if (_r$7) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if (_r$7) { */ case 18:
						_r$8 = newFinishMessage(sliceType$2.nil, q.id, true); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						_r$9 = q.conn.sendMessage($clone(_r$8, rpc.Message)); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_r$9;
					/* } */ case 19:
					q.conn.workers.Done();
					$r = new chanMutex(q.conn.mu).Unlock(); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 13:
			/* } */ case 7:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._selection = _selection; $f._selection$1 = _selection$1; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
		}), []);
	};
	question.prototype.start = function() { return this.$val.start(); };
	question.ptr.prototype.fulfill = function(obj) {
		var $ptr, _arg, _arg$1, _arg$2, _i, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _selection, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, cn, ctab, d, dis, e, err, ic, id, in$1, m, mt, obj, pa, q, tgt, visited, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _selection = $f._selection; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; cn = $f.cn; ctab = $f.ctab; d = $f.d; dis = $f.dis; e = $f.e; err = $f.err; ic = $f.ic; id = $f.id; in$1 = $f.in$1; m = $f.m; mt = $f.mt; obj = $f.obj; pa = $f.pa; q = $f.q; tgt = $f.tgt; visited = $f.visited; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		q = this;
		ctab = sliceType$8.nil;
		if ($clone(obj, capnp.Ptr).IsValid()) {
			ctab = $clone(obj, capnp.Ptr).Segment().Message().CapTable;
		}
		visited = $makeSlice(sliceType$9, ctab.$length);
		_ref = q.derived;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			d = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = capnp.TransformPtr($clone(obj, capnp.Ptr), d); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			tgt = $clone(_tuple[0], capnp.Ptr);
			err = _tuple[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			in$1 = $clone($clone(tgt, capnp.Ptr).Interface(), capnp.Interface);
			/* */ if (!$clone(in$1, capnp.Interface).IsValid()) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!$clone(in$1, capnp.Interface).IsValid()) { */ case 6:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 7:
			_r$1 = isImport($clone(in$1, capnp.Interface).Client()); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			ic = _r$1;
			if (!(ic === ptrType$4.nil) && ic.conn === q.conn) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			cn = $clone(in$1, capnp.Interface).Capability();
			/* */ if (((cn < 0 || cn >= visited.$length) ? ($throwRuntimeError("index out of range"), undefined) : visited.$array[visited.$offset + cn])) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (((cn < 0 || cn >= visited.$length) ? ($throwRuntimeError("index out of range"), undefined) : visited.$array[visited.$offset + cn])) { */ case 9:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 10:
			((cn < 0 || cn >= visited.$length) ? ($throwRuntimeError("index out of range"), undefined) : visited.$array[visited.$offset + cn] = true);
			_tuple$1 = q.conn.newEmbargo();
			id = _tuple$1[0];
			e = _tuple$1[1];
			_arg = ((cn < 0 || cn >= ctab.$length) ? ($throwRuntimeError("index out of range"), undefined) : ctab.$array[ctab.$offset + cn]);
			_arg$1 = e;
			_r$2 = q.conn.bg.Done(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg$2 = _r$2;
			_r$3 = newEmbargoClient(_arg, _arg$1, _arg$2); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			((cn < 0 || cn >= ctab.$length) ? ($throwRuntimeError("index out of range"), undefined) : ctab.$array[ctab.$offset + cn] = _r$3);
			_r$4 = newDisembargoMessage(sliceType$2.nil, 0, id); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			m = $clone(_r$4, rpc.Message);
			_r$5 = $clone(m, rpc.Message).Disembargo(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$2 = _r$5;
			dis = $clone(_tuple$2[0], rpc.Disembargo);
			_r$6 = $clone(dis, rpc.Disembargo).NewTarget(); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple$3 = _r$6;
			mt = $clone(_tuple$3[0], rpc.MessageTarget);
			_r$7 = $clone(mt, rpc.MessageTarget).NewPromisedAnswer(); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_tuple$4 = _r$7;
			pa = $clone(_tuple$4[0], rpc.PromisedAnswer);
			$clone(pa, rpc.PromisedAnswer).SetQuestionId((q.id >>> 0));
			_r$8 = transformToPromisedAnswer($clone(m.Struct, capnp.Struct).Segment(), $clone(pa, rpc.PromisedAnswer), d); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$8;
			_r$9 = $clone(mt, rpc.MessageTarget).SetPromisedAnswer($clone(pa, rpc.PromisedAnswer)); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
			_r$10 = q.conn.bg.Done(); /* */ $s = 19; case 19: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = $select([[q.conn.out, $clone(m, rpc.Message)], [_r$10]]); /* */ $s = 20; case 20: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_selection = _r$11;
			/* */ if (_selection[0] === 0) { $s = 21; continue; }
			/* */ if (_selection[0] === 1) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (_selection[0] === 0) { */ case 21:
				$s = 23; continue;
			/* } else if (_selection[0] === 1) { */ case 22:
			/* } */ case 23:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$r = q.mu.Lock(); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!((q.state === 0))) {
			$panic(new $String("question.fulfill called more than once"));
		}
		_tmp = $clone(obj, capnp.Ptr);
		_tmp$1 = 1;
		capnp.Ptr.copy(q.obj, _tmp);
		q.state = _tmp$1;
		$close(q.resolved);
		$r = q.mu.Unlock(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: question.ptr.prototype.fulfill }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._selection = _selection; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.cn = cn; $f.ctab = ctab; $f.d = d; $f.dis = dis; $f.e = e; $f.err = err; $f.ic = ic; $f.id = id; $f.in$1 = in$1; $f.m = m; $f.mt = mt; $f.obj = obj; $f.pa = pa; $f.q = q; $f.tgt = tgt; $f.visited = visited; $f.$s = $s; $f.$r = $r; return $f;
	};
	question.prototype.fulfill = function(obj) { return this.$val.fulfill(obj); };
	question.ptr.prototype.reject = function(err) {
		var $ptr, err, q, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; err = $f.err; q = $f.q; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		q = this;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			$panic(new $String("question.reject called with nil"));
		}
		$r = q.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!((q.state === 0))) {
			$panic(new $String("question.reject called more than once"));
		}
		q.err = err;
		q.state = 1;
		$close(q.resolved);
		$r = q.mu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: question.ptr.prototype.reject }; } $f.$ptr = $ptr; $f.err = err; $f.q = q; $f.$s = $s; $f.$r = $r; return $f;
	};
	question.prototype.reject = function(err) { return this.$val.reject(err); };
	question.ptr.prototype.cancel = function(err) {
		var $ptr, canceled, err, q, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; canceled = $f.canceled; err = $f.err; q = $f.q; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		q = this;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			$panic(new $String("question.cancel called with nil"));
		}
		$r = q.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		canceled = q.state === 0;
		if (canceled) {
			q.err = err;
			q.state = 2;
			$close(q.resolved);
		}
		$r = q.mu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return canceled;
		/* */ } return; } if ($f === undefined) { $f = { $blk: question.ptr.prototype.cancel }; } $f.$ptr = $ptr; $f.canceled = canceled; $f.err = err; $f.q = q; $f.$s = $s; $f.$r = $r; return $f;
	};
	question.prototype.cancel = function(err) { return this.$val.cancel(err); };
	question.ptr.prototype.addPromise = function(transform) {
		var $ptr, _i, _ref, d, q, transform;
		q = this;
		_ref = q.derived;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			d = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (transformsEqual(transform, d)) {
				return;
			}
			_i++;
		}
		q.derived = $append(q.derived, transform);
	};
	question.prototype.addPromise = function(transform) { return this.$val.addPromise(transform); };
	transformsEqual = function(t, u) {
		var $ptr, _i, _ref, i, t, u;
		if (!((t.$length === u.$length))) {
			return false;
		}
		_ref = t;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			if (!((((i < 0 || i >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + i]).Field === ((i < 0 || i >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + i]).Field))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	question.ptr.prototype.Struct = function() {
		var $ptr, _r, _r$1, _selection, _tmp, _tmp$1, err, q, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _selection = $f._selection; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; err = $f.err; q = $f.q; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		q = this;
		_r = q.conn.bg.Done(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $select([[q.resolved], [_r]]); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_selection = _r$1;
		/* */ if (_selection[0] === 0) { $s = 3; continue; }
		/* */ if (_selection[0] === 1) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_selection[0] === 0) { */ case 3:
			$s = 5; continue;
		/* } else if (_selection[0] === 1) { */ case 4:
			$s = -1; return [new capnp.Struct.ptr(ptrType$2.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0), $pkg.ErrConnClosed];
		/* } */ case 5:
		$r = q.mu.RLock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp = $clone($clone(q.obj, capnp.Ptr).Struct(), capnp.Struct);
		_tmp$1 = q.err;
		s = $clone(_tmp, capnp.Struct);
		err = _tmp$1;
		$r = q.mu.RUnlock(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return [s, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: question.ptr.prototype.Struct }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._selection = _selection; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.err = err; $f.q = q; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	question.prototype.Struct = function() { return this.$val.Struct(); };
	question.ptr.prototype.PipelineCall = function(transform, ccall) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _selection, ans, ccall, err, q, transform, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _selection = $f._selection; ans = $f.ans; ccall = $f.ccall; err = $f.err; q = $f.q; transform = $f.transform; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		q = this;
		_r = ccall.Ctx.Done(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $select([[q.conn.mu], [_r]]); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_selection = _r$1;
		/* */ if (_selection[0] === 0) { $s = 3; continue; }
		/* */ if (_selection[0] === 1) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_selection[0] === 0) { */ case 3:
			_r$2 = q.conn.startWork(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			err = _r$2;
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 7:
				$r = new chanMutex(q.conn.mu).Unlock(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return capnp.ErrorAnswer(err);
			/* } */ case 8:
			$s = 5; continue;
		/* } else if (_selection[0] === 1) { */ case 4:
			_r$3 = ccall.Ctx.Err(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = capnp.ErrorAnswer(_r$3); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return _r$4;
		/* } */ case 5:
		_r$5 = q.lockedPipelineCall(transform, ccall); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		ans = _r$5;
		q.conn.workers.Done();
		$r = new chanMutex(q.conn.mu).Unlock(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return ans;
		/* */ } return; } if ($f === undefined) { $f = { $blk: question.ptr.prototype.PipelineCall }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._selection = _selection; $f.ans = ans; $f.ccall = ccall; $f.err = err; $f.q = q; $f.transform = transform; $f.$s = $s; $f.$r = $r; return $f;
	};
	question.prototype.PipelineCall = function(transform, ccall) { return this.$val.PipelineCall(transform, ccall); };
	question.ptr.prototype.lockedPipelineCall = function(transform, ccall) {
		var $ptr, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _selection, _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, _tuple$2, _tuple$3, a, ccall, client, err, err$1, err$2, msg, msgCall, obj, payload, pipeq, q, state, target, transform, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _selection = $f._selection; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; a = $f.a; ccall = $f.ccall; client = $f.client; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; msg = $f.msg; msgCall = $f.msgCall; obj = $f.obj; payload = $f.payload; pipeq = $f.pipeq; q = $f.q; state = $f.state; target = $f.target; transform = $f.transform; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		q = this;
		/* */ if (!(q.conn.findQuestion(q.id) === q)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(q.conn.findQuestion(q.id) === q)) { */ case 1:
			$r = q.mu.RLock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tmp = $clone(q.obj, capnp.Ptr);
			_tmp$1 = q.err;
			_tmp$2 = q.state;
			obj = $clone(_tmp, capnp.Ptr);
			err = _tmp$1;
			state = _tmp$2;
			$r = q.mu.RUnlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (state === 0) {
				$panic(new $String("question popped but not done"));
			}
			_r = clientFromResolution(transform, $clone(obj, capnp.Ptr), err); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			client = _r;
			_r$1 = q.conn.lockedCall(client, ccall); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 2:
		pipeq = q.conn.newQuestion(ccall.Ctx, ccall.Method);
		_r$2 = newMessage(sliceType$2.nil); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		msg = $clone(_r$2, rpc.Message);
		_r$3 = $clone(msg, rpc.Message).NewCall(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		msgCall = $clone(_tuple[0], rpc.Call);
		$clone(msgCall, rpc.Call).SetQuestionId((pipeq.id >>> 0));
		$clone(msgCall, rpc.Call).SetInterfaceId(ccall.Method.InterfaceID);
		$clone(msgCall, rpc.Call).SetMethodId(ccall.Method.MethodID);
		_r$4 = $clone(msgCall, rpc.Call).NewTarget(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$1 = _r$4;
		target = $clone(_tuple$1[0], rpc.MessageTarget);
		_r$5 = $clone(target, rpc.MessageTarget).NewPromisedAnswer(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$2 = _r$5;
		a = $clone(_tuple$2[0], rpc.PromisedAnswer);
		$clone(a, rpc.PromisedAnswer).SetQuestionId((q.id >>> 0));
		_r$6 = transformToPromisedAnswer($clone(a.Struct, capnp.Struct).Segment(), $clone(a, rpc.PromisedAnswer), transform); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		err$1 = _r$6;
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			q.conn.popQuestion(pipeq.id);
			$s = -1; return capnp.ErrorAnswer(err$1);
		}
		_r$7 = $clone(msgCall, rpc.Call).NewParams(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_tuple$3 = _r$7;
		payload = $clone(_tuple$3[0], rpc.Payload);
		_r$8 = q.conn.fillParams($clone(payload, rpc.Payload), ccall); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		err$2 = _r$8;
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			q.conn.popQuestion(q.id);
			$s = -1; return capnp.ErrorAnswer(err$2);
		}
		_r$9 = ccall.Ctx.Done(); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_r$10 = q.conn.bg.Done(); /* */ $s = 15; case 15: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_r$11 = $select([[q.conn.out, $clone(msg, rpc.Message)], [_r$9], [_r$10]]); /* */ $s = 16; case 16: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_selection = _r$11;
		/* */ if (_selection[0] === 0) { $s = 17; continue; }
		/* */ if (_selection[0] === 1) { $s = 18; continue; }
		/* */ if (_selection[0] === 2) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if (_selection[0] === 0) { */ case 17:
			$s = 20; continue;
		/* } else if (_selection[0] === 1) { */ case 18:
			q.conn.popQuestion(pipeq.id);
			_r$12 = ccall.Ctx.Err(); /* */ $s = 21; case 21: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_r$13 = capnp.ErrorAnswer(_r$12); /* */ $s = 22; case 22: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$s = -1; return _r$13;
		/* } else if (_selection[0] === 2) { */ case 19:
			q.conn.popQuestion(pipeq.id);
			$s = -1; return capnp.ErrorAnswer($pkg.ErrConnClosed);
		/* } */ case 20:
		q.addPromise(transform);
		pipeq.start();
		$s = -1; return pipeq;
		/* */ } return; } if ($f === undefined) { $f = { $blk: question.ptr.prototype.lockedPipelineCall }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._selection = _selection; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.a = a; $f.ccall = ccall; $f.client = client; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.msg = msg; $f.msgCall = msgCall; $f.obj = obj; $f.payload = payload; $f.pipeq = pipeq; $f.q = q; $f.state = state; $f.target = target; $f.transform = transform; $f.$s = $s; $f.$r = $r; return $f;
	};
	question.prototype.lockedPipelineCall = function(transform, ccall) { return this.$val.lockedPipelineCall(transform, ccall); };
	question.ptr.prototype.PipelineClose = function(transform) {
		var $ptr, _r, _r$1, _r$2, _tmp, _tmp$1, _tuple, c, err, obj, q, transform, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; c = $f.c; err = $f.err; obj = $f.obj; q = $f.q; transform = $f.transform; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		q = this;
		_r = $recv(q.resolved); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r[0];
		$r = q.mu.RLock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp = $clone(q.obj, capnp.Ptr);
		_tmp$1 = q.err;
		obj = $clone(_tmp, capnp.Ptr);
		err = _tmp$1;
		$r = q.mu.RUnlock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = capnp.TransformPtr($clone(obj, capnp.Ptr), transform); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		x = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		c = $clone($clone(x, capnp.Ptr).Interface(), capnp.Interface).Client();
		if ($interfaceIsEqual(c, $ifaceNil)) {
			$s = -1; return capnp.ErrNullClient;
		}
		_r$2 = c.Close(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: question.ptr.prototype.PipelineClose }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.obj = obj; $f.q = q; $f.transform = transform; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	question.prototype.PipelineClose = function(transform) { return this.$val.PipelineClose(transform); };
	newEmbargoClient = function(client, e, cancel) {
		var $ptr, cancel, client, e, ec, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; cancel = $f.cancel; client = $f.client; e = $f.e; ec = $f.ec; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ec = new embargoClient.ptr(cancel, client, e, new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), new queue.Queue.ptr($ifaceNil, 0, 0, 0), $makeSlice(ecallList, 64));
		$r = ec.q.Init(ec.calls, 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$go($methodVal(ec, "flushQueue"), []);
		$s = -1; return ec;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newEmbargoClient }; } $f.$ptr = $ptr; $f.cancel = cancel; $f.client = client; $f.e = e; $f.ec = ec; $f.$s = $s; $f.$r = $r; return $f;
	};
	embargoClient.ptr.prototype.push = function(cl) {
		var $ptr, _r, _tuple, cl, ec, err, f, i, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; cl = $f.cl; ec = $f.ec; err = $f.err; f = $f.f; i = $f.i; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ec = this;
		f = new fulfiller.Fulfiller.ptr(new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0), $chanNil, new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), $ifaceNil, sliceType$5.nil);
		_r = cl.Copy(ptrType$2.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		cl = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return capnp.ErrorAnswer(err);
		}
		i = ec.q.Push();
		if (i === -1) {
			$s = -1; return capnp.ErrorAnswer(errQueueFull);
		}
		ecall.copy((x = ec.calls, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])), new ecall.ptr(cl, f));
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: embargoClient.ptr.prototype.push }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.cl = cl; $f.ec = ec; $f.err = err; $f.f = f; $f.i = i; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	embargoClient.prototype.push = function(cl) { return this.$val.push(cl); };
	embargoClient.ptr.prototype.Call = function(cl) {
		var $ptr, _r, _r$1, _r$2, ans, cl, ec, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ans = $f.ans; cl = $f.cl; ec = $f.ec; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ec = this;
		$r = ec.mu.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ok = ec.isPassthrough();
		$r = ec.mu.RUnlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (ok) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (ok) { */ case 3:
			_r = ec.client.Call(cl); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 4:
		$r = ec.mu.Lock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (ec.isPassthrough()) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (ec.isPassthrough()) { */ case 7:
			$r = ec.mu.Unlock(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$1 = ec.client.Call(cl); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 8:
		_r$2 = ec.push(cl); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		ans = _r$2;
		$r = ec.mu.Unlock(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return ans;
		/* */ } return; } if ($f === undefined) { $f = { $blk: embargoClient.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ans = ans; $f.cl = cl; $f.ec = ec; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	embargoClient.prototype.Call = function(cl) { return this.$val.Call(cl); };
	embargoClient.ptr.prototype.tryQueue = function(cl) {
		var $ptr, _r, ans, cl, ec, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ans = $f.ans; cl = $f.cl; ec = $f.ec; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ec = this;
		$r = ec.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (ec.isPassthrough()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ec.isPassthrough()) { */ case 2:
			$r = ec.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return $ifaceNil;
		/* } */ case 3:
		_r = ec.push(cl); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ans = _r;
		$r = ec.mu.Unlock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return ans;
		/* */ } return; } if ($f === undefined) { $f = { $blk: embargoClient.ptr.prototype.tryQueue }; } $f.$ptr = $ptr; $f._r = _r; $f.ans = ans; $f.cl = cl; $f.ec = ec; $f.$s = $s; $f.$r = $r; return $f;
	};
	embargoClient.prototype.tryQueue = function(cl) { return this.$val.tryQueue(cl); };
	embargoClient.ptr.prototype.isPassthrough = function() {
		var $ptr, _selection, ec, $r;
		/* */ var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _selection = $f._selection; ec = $f.ec; $r = $f.$r; }
		ec = this;
		_selection = $select([[ec.embargo], []]);
		if (_selection[0] === 0) {
		} else if (_selection[0] === 1) {
			return false;
		}
		return ec.q.Len() === 0;
		/* */ if ($f === undefined) { $f = { $blk: embargoClient.ptr.prototype.isPassthrough }; } $f.$ptr = $ptr; $f._selection = _selection; $f.ec = ec; $f.$r = $r; return $f;
	};
	embargoClient.prototype.isPassthrough = function() { return this.$val.isPassthrough(); };
	embargoClient.ptr.prototype.Close = function() {
		var $ptr, _r, _r$1, c, ec, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; c = $f.c; ec = $f.ec; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ec = this;
		$r = ec.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* while (true) { */ case 2:
			/* if (!(ec.q.Len() > 0)) { break; } */ if(!(ec.q.Len() > 0)) { $s = 3; continue; }
			c = $clone((x = ec.calls, x$1 = ec.q.Front(), ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])), ecall);
			$r = c.f.Reject(errQueueCallCancel); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r = ec.q.Pop(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ $s = 2; continue; case 3:
		$r = ec.mu.Unlock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = ec.client.Close(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: embargoClient.ptr.prototype.Close }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.ec = ec; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	embargoClient.prototype.Close = function() { return this.$val.Close(); };
	embargoClient.ptr.prototype.flushQueue = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _selection, ans, c, ec, i, i$1, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _selection = $f._selection; ans = $f.ans; c = $f.c; ec = $f.ec; i = $f.i; i$1 = $f.i$1; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ec = this;
		_r = $select([[ec.embargo], [ec.cancel]]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_selection = _r;
		/* */ if (_selection[0] === 0) { $s = 2; continue; }
		/* */ if (_selection[0] === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_selection[0] === 0) { */ case 2:
			$s = 4; continue;
		/* } else if (_selection[0] === 1) { */ case 3:
			$r = ec.mu.Lock(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* while (true) { */ case 6:
				/* if (!(ec.q.Len() > 0)) { break; } */ if(!(ec.q.Len() > 0)) { $s = 7; continue; }
				_r$1 = ec.q.Pop(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
			/* } */ $s = 6; continue; case 7:
			$r = ec.mu.Unlock(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 4:
		c = new ecall.ptr(ptrType$6.nil, ptrType$5.nil);
		$r = ec.mu.RLock(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		i = ec.q.Front();
		if (!((i === -1))) {
			ecall.copy(c, (x = ec.calls, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
		}
		$r = ec.mu.RUnlock(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* while (true) { */ case 12:
			/* if (!(!(c.call === ptrType$6.nil))) { break; } */ if(!(!(c.call === ptrType$6.nil))) { $s = 13; continue; }
			_r$2 = ec.client.Call(c.call); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			ans = _r$2;
			$go(joinFulfiller, [c.f, ans]);
			$r = ec.mu.Lock(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = ec.q.Pop(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			i$1 = ec.q.Front();
			if (!((i$1 === -1))) {
				ecall.copy(c, (x$1 = ec.calls, ((i$1 < 0 || i$1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$1])));
			} else {
				ecall.copy(c, new ecall.ptr(ptrType$6.nil, ptrType$5.nil));
			}
			$r = ec.mu.Unlock(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 12; continue; case 13:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: embargoClient.ptr.prototype.flushQueue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._selection = _selection; $f.ans = ans; $f.c = c; $f.ec = ec; $f.i = i; $f.i$1 = i$1; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	embargoClient.prototype.flushQueue = function() { return this.$val.flushQueue(); };
	ecallList.prototype.Len = function() {
		var $ptr, el;
		el = this;
		return el.$length;
	};
	$ptrType(ecallList).prototype.Len = function() { return this.$get().Len(); };
	ecallList.prototype.Clear = function(i) {
		var $ptr, el, i;
		el = this;
		ecall.copy(((i < 0 || i >= el.$length) ? ($throwRuntimeError("index out of range"), undefined) : el.$array[el.$offset + i]), new ecall.ptr(ptrType$6.nil, ptrType$5.nil));
	};
	$ptrType(ecallList).prototype.Clear = function(i) { return this.$get().Clear(i); };
	MainInterface = function(client) {
		var $ptr, _r, _r$1, _tuple, client, rc, ref1, ref2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; client = $f.client; rc = $f.rc; ref1 = $f.ref1; ref2 = $f.ref2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ref1 = [ref1];
		ref2 = [ref2];
		_r = refcount.New(client); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		rc = _tuple[0];
		ref1[0] = _tuple[1];
		_r$1 = rc.Ref(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ref2[0] = _r$1;
		$s = -1; return new ConnOption.ptr((function(ref1, ref2) { return function(c) {
			var $ptr, c;
			c.mainFunc = (function(ref1, ref2) { return function(ctx) {
				var $ptr, ctx;
				return [ref1[0], $ifaceNil];
			}; })(ref1, ref2);
			c.mainCloser = ref2[0];
		}; })(ref1, ref2));
		/* */ } return; } if ($f === undefined) { $f = { $blk: MainInterface }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.client = client; $f.rc = rc; $f.ref1 = ref1; $f.ref2 = ref2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MainInterface = MainInterface;
	NewConn = function(t, options) {
		var $ptr, _i, _r, _r$1, _ref, _tuple, conn, o, options, p, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; conn = $f.conn; o = $f.o; options = $f.options; p = $f.p; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = new connParams.ptr((x = new defaultLogger.ptr(), new x.constructor.elem(x)), $throwNilPointerError, $ifaceNil, 4);
		_ref = options;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			o = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), ConnOption);
			$r = o.f(p); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r = newChanMutex(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		conn = new Conn.ptr(t, p.log, p.mainFunc, p.mainCloser, new $Chan(structType, 0), new $Chan(rpc.Message, p.sendBufferSize), $ifaceNil, $throwNilPointerError, new sync.WaitGroup.ptr(0, $chanNil, arrayType.zero(), 0), new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), 0, $ifaceNil, _r, sliceType$10.nil, new idgen.ptr(0, sliceType$11.nil), sliceType$12.nil, new idgen.ptr(0, sliceType$11.nil), sliceType$13.nil, new idgen.ptr(0, sliceType$11.nil), false, false);
		_r$1 = context.WithCancel(context.Background()); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		conn.bg = _tuple[0];
		conn.bgCancel = _tuple[1];
		conn.workers.Add(2);
		$go($methodVal(conn, "dispatchRecv"), []);
		$go($methodVal(conn, "dispatchSend"), []);
		$s = -1; return conn;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewConn }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f.conn = conn; $f.o = o; $f.options = options; $f.p = p; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewConn = NewConn;
	Conn.ptr.prototype.Wait = function() {
		var $ptr, _r, _r$1, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = $recv(c.Done()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r[0];
		_r$1 = c.Err(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.Wait }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.Wait = function() { return this.$val.Wait(); };
	Conn.ptr.prototype.Done = function() {
		var $ptr, c;
		c = this;
		return c.death;
	};
	Conn.prototype.Done = function() { return this.$val.Done(); };
	Conn.ptr.prototype.Err = function() {
		var $ptr, c, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; c = $f.c; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		$r = c.stateMu.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		err = $ifaceNil;
		if (!((c.state === 2))) {
			err = c.closeErr;
		}
		$r = c.stateMu.RUnlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.Err }; } $f.$ptr = $ptr; $f.c = c; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.Err = function() { return this.$val.Err(); };
	Conn.ptr.prototype.Close = function() {
		var $ptr, _r, alive, c, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; alive = $f.alive; c = $f.c; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		$r = c.stateMu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		alive = c.state === 0;
		/* */ if (alive) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (alive) { */ case 2:
			$r = c.bgCancel(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			c.closeErr = $pkg.ErrConnClosed;
			c.state = 1;
		/* } */ case 3:
		$r = c.stateMu.Unlock(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!alive) {
			$s = -1; return $pkg.ErrConnClosed;
		}
		_r = newAbortMessage(sliceType$2.nil, errShutdown); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = c.teardown($clone(_r, rpc.Message)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = c.stateMu.RLock(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		err = c.closeErr;
		$r = c.stateMu.RUnlock(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(err, $pkg.ErrConnClosed))) {
			$s = -1; return err;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.Close }; } $f.$ptr = $ptr; $f._r = _r; $f.alive = alive; $f.c = c; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.Close = function() { return this.$val.Close(); };
	Conn.ptr.prototype.shutdown = function(e) {
		var $ptr, c, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; c = $f.c; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		$r = c.stateMu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (c.state === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (c.state === 0) { */ case 2:
			$r = c.bgCancel(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			c.closeErr = e;
			c.state = 1;
			$go($methodVal(c, "teardown"), [new rpc.Message.ptr(new capnp.Struct.ptr(ptrType$2.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0))]);
		/* } */ case 3:
		$r = c.stateMu.Unlock(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.shutdown }; } $f.$ptr = $ptr; $f.c = c; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.shutdown = function(e) { return this.$val.shutdown(e); };
	Conn.ptr.prototype.abort = function(e) {
		var $ptr, _r, c, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		$r = c.stateMu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (c.state === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (c.state === 0) { */ case 2:
			$r = c.bgCancel(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			c.closeErr = e;
			c.state = 1;
			_r = newAbortMessage(sliceType$2.nil, e); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$go($methodVal(c, "teardown"), [$clone(_r, rpc.Message)]);
		/* } */ case 3:
		$r = c.stateMu.Unlock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.abort }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.abort = function(e) { return this.$val.abort(e); };
	Conn.ptr.prototype.startWork = function() {
		var $ptr, c, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; c = $f.c; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		err = $ifaceNil;
		$r = c.stateMu.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (c.state === 0) {
			c.workers.Add(1);
		} else {
			err = c.closeErr;
		}
		$r = c.stateMu.RUnlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.startWork }; } $f.$ptr = $ptr; $f.c = c; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.startWork = function() { return this.$val.startWork(); };
	Conn.ptr.prototype.teardown = function(abort) {
		var $ptr, _entry, _i, _i$1, _i$2, _keys, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _ref$2, a, abort, c, cerr, e, err, err$1, exps, id, q, werr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; a = $f.a; abort = $f.abort; c = $f.c; cerr = $f.cerr; e = $f.e; err = $f.err; err$1 = $f.err$1; exps = $f.exps; id = $f.id; q = $f.q; werr = $f.werr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		$r = c.workers.Wait(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = new chanMutex(c.mu).Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = c.questions;
		_i = 0;
		/* while (true) { */ case 3:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
			q = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (!(q === ptrType$14.nil)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!(q === ptrType$14.nil)) { */ case 5:
				_r = q.cancel($pkg.ErrConnClosed); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
			/* } */ case 6:
			_i++;
		/* } */ $s = 3; continue; case 4:
		c.questions = sliceType$10.nil;
		exps = c.exports;
		c.exports = sliceType$12.nil;
		c.embargoes = sliceType$13.nil;
		_ref$1 = c.answers;
		_i$1 = 0;
		_keys = $keys(_ref$1);
		/* while (true) { */ case 8:
			/* if (!(_i$1 < _keys.length)) { break; } */ if(!(_i$1 < _keys.length)) { $s = 9; continue; }
			_entry = _ref$1[_keys[_i$1]];
			if (_entry === undefined) {
				_i$1++;
				/* continue; */ $s = 8; continue;
			}
			a = _entry.v;
			$r = a.cancel(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i$1++;
		/* } */ $s = 8; continue; case 9:
		c.answers = false;
		c.imports = false;
		c.mainFunc = $throwNilPointerError;
		$r = new chanMutex(c.mu).Unlock(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!($interfaceIsEqual(c.mainCloser, $ifaceNil))) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (!($interfaceIsEqual(c.mainCloser, $ifaceNil))) { */ case 12:
			_r$1 = c.mainCloser.Close(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			err = _r$1;
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 15:
				$r = c.errorf("closing main interface: %v", new sliceType$6([err])); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 16:
			c.mainCloser = $ifaceNil;
		/* } */ case 13:
		_ref$2 = exps;
		_i$2 = 0;
		/* while (true) { */ case 18:
			/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 19; continue; }
			id = _i$2;
			e = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
			/* */ if (e === ptrType$15.nil) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (e === ptrType$15.nil) { */ case 20:
				_i$2++;
				/* continue; */ $s = 18; continue;
			/* } */ case 21:
			_r$2 = e.client.Close(); /* */ $s = 22; case 22: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			err$1 = _r$2;
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 23:
				$r = c.errorf("export %v close: %v", new sliceType$6([new $Int(id), err$1])); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 24:
			_i$2++;
		/* } */ $s = 18; continue; case 19:
		exps = sliceType$12.nil;
		werr = $ifaceNil;
		/* */ if ($clone(abort.Struct, capnp.Struct).IsValid()) { $s = 26; continue; }
		/* */ $s = 27; continue;
		/* if ($clone(abort.Struct, capnp.Struct).IsValid()) { */ case 26:
			_r$3 = c.transport.SendMessage(context.Background(), $clone(abort, rpc.Message)); /* */ $s = 28; case 28: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			werr = _r$3;
		/* } */ case 27:
		_r$4 = c.transport.Close(); /* */ $s = 29; case 29: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		cerr = _r$4;
		$r = c.stateMu.Lock(); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if ($interfaceIsEqual(c.closeErr, $pkg.ErrConnClosed)) {
			if (!($interfaceIsEqual(cerr, $ifaceNil))) {
				c.closeErr = cerr;
			} else if (!($interfaceIsEqual(werr, $ifaceNil))) {
				c.closeErr = werr;
			}
		}
		c.state = 2;
		$close(c.death);
		$r = c.stateMu.Unlock(); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.teardown }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.a = a; $f.abort = abort; $f.c = c; $f.cerr = cerr; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.exps = exps; $f.id = id; $f.q = q; $f.werr = werr; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.teardown = function(abort) { return this.$val.teardown(abort); };
	Conn.ptr.prototype.Bootstrap = function(ctx) {
		var $ptr, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _selection, _selection$1, _tuple, boot, c, ctx, err, msg, q, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _selection = $f._selection; _selection$1 = $f._selection$1; _tuple = $f._tuple; boot = $f.boot; c = $f.c; ctx = $f.ctx; err = $f.err; msg = $f.msg; q = $f.q; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		c = this;
		_r = ctx.Done(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = c.bg.Done(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = $select([[c.mu], [_r], [_r$1]]); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_selection = _r$2;
		/* */ if (_selection[0] === 0) { $s = 4; continue; }
		/* */ if (_selection[0] === 1) { $s = 5; continue; }
		/* */ if (_selection[0] === 2) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_selection[0] === 0) { */ case 4:
			$deferred.push([$methodVal(new chanMutex(c.mu), "Unlock"), []]);
			_r$3 = c.startWork(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			err = _r$3;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return capnp.ErrorClient(err);
			}
			$deferred.push([$methodVal(c.workers, "Done"), []]);
			$s = 7; continue;
		/* } else if (_selection[0] === 1) { */ case 5:
			_r$4 = ctx.Err(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = capnp.ErrorClient(_r$4); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return _r$5;
		/* } else if (_selection[0] === 2) { */ case 6:
			$s = -1; return capnp.ErrorClient($pkg.ErrConnClosed);
		/* } */ case 7:
		q = c.newQuestion(ctx, ptrType$7.nil);
		_r$6 = newMessage(sliceType$2.nil); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		msg = $clone(_r$6, rpc.Message);
		_r$7 = $clone(msg, rpc.Message).NewBootstrap(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_tuple = _r$7;
		boot = $clone(_tuple[0], rpc.Bootstrap);
		$clone(boot, rpc.Bootstrap).SetQuestionId((q.id >>> 0));
		_r$8 = ctx.Done(); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$9 = c.bg.Done(); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_r$10 = $select([[c.out, $clone(msg, rpc.Message)], [_r$8], [_r$9]]); /* */ $s = 15; case 15: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_selection$1 = _r$10;
		/* */ if (_selection$1[0] === 0) { $s = 16; continue; }
		/* */ if (_selection$1[0] === 1) { $s = 17; continue; }
		/* */ if (_selection$1[0] === 2) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (_selection$1[0] === 0) { */ case 16:
			q.start();
			$s = -1; return capnp.NewPipeline(q).Client();
		/* } else if (_selection$1[0] === 1) { */ case 17:
			c.popQuestion(q.id);
			_r$11 = ctx.Err(); /* */ $s = 20; case 20: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$12 = capnp.ErrorClient(_r$11); /* */ $s = 21; case 21: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			$s = -1; return _r$12;
		/* } else if (_selection$1[0] === 2) { */ case 18:
			c.popQuestion(q.id);
			$s = -1; return capnp.ErrorClient($pkg.ErrConnClosed);
		/* } */ case 19:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.Bootstrap }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._selection = _selection; $f._selection$1 = _selection$1; $f._tuple = _tuple; $f.boot = boot; $f.c = c; $f.ctx = ctx; $f.err = err; $f.msg = msg; $f.q = q; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Conn.prototype.Bootstrap = function(ctx) { return this.$val.Bootstrap(ctx); };
	Conn.ptr.prototype.handleMessage = function(m) {
		var $ptr, _1, _i, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, a, a$1, boot, c, err, err$1, err$2, err$3, err$4, err$5, err$6, id, id$1, id$2, id$3, m, mfin, refs, rel, um, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; a = $f.a; a$1 = $f.a$1; boot = $f.boot; c = $f.c; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; id = $f.id; id$1 = $f.id$1; id$2 = $f.id$2; id$3 = $f.id$3; m = $f.m; mfin = $f.mfin; refs = $f.refs; rel = $f.rel; um = $f.um; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
			_1 = $clone(m, rpc.Message).Which();
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (3)) { $s = 4; continue; }
			/* */ if (_1 === (4)) { $s = 5; continue; }
			/* */ if (_1 === (8)) { $s = 6; continue; }
			/* */ if (_1 === (2)) { $s = 7; continue; }
			/* */ if (_1 === (6)) { $s = 8; continue; }
			/* */ if (_1 === (13)) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (0)) { */ case 2:
				$s = 11; continue;
			/* } else if (_1 === (1)) { */ case 3:
				_r = copyAbort($clone(m, rpc.Message)); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				a = $clone(_tuple[0], Abort);
				err = _tuple[1];
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 13:
					$r = c.errorf("decode abort: %v", new sliceType$6([err])); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 14:
				$r = c.infof("abort: %v", new sliceType$6([new a.constructor.elem(a)])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = c.shutdown(new a.constructor.elem(a)); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 11; continue;
			/* } else if (_1 === (3)) { */ case 4:
				_r$1 = copyRPCMessage($clone(m, rpc.Message)); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				rpc.Message.copy(m, _r$1);
				$r = new chanMutex(c.mu).Lock(); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$2 = c.handleReturnMessage($clone(m, rpc.Message)); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				err$1 = _r$2;
				$r = new chanMutex(c.mu).Unlock(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 22:
					$r = c.errorf("handle return: %v", new sliceType$6([err$1])); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 23:
				$s = 11; continue;
			/* } else if (_1 === (4)) { */ case 5:
				_r$3 = $clone(m, rpc.Message).Finish(); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$1 = _r$3;
				mfin = $clone(_tuple$1[0], rpc.Finish);
				err$2 = _tuple$1[1];
				/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 26; continue; }
				/* */ $s = 27; continue;
				/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 26:
					$r = c.errorf("decode finish: %v", new sliceType$6([err$2])); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 27:
				id = ($clone(mfin, rpc.Finish).QuestionId() >>> 0);
				$r = new chanMutex(c.mu).Lock(); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a$1 = c.popAnswer(id);
				/* */ if (a$1 === ptrType.nil) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if (a$1 === ptrType.nil) { */ case 30:
					$r = new chanMutex(c.mu).Unlock(); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = c.errorf("finish called for unknown answer %d", new sliceType$6([new answerID(id)])); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 31:
				$r = a$1.cancel(); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if ($clone(mfin, rpc.Finish).ReleaseResultCaps()) { $s = 35; continue; }
				/* */ $s = 36; continue;
				/* if ($clone(mfin, rpc.Finish).ReleaseResultCaps()) { */ case 35:
					_ref = a$1.resultCaps;
					_i = 0;
					/* while (true) { */ case 37:
						/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 38; continue; }
						id$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
						$r = c.releaseExport(id$1, 1); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i++;
					/* } */ $s = 37; continue; case 38:
				/* } */ case 36:
				$r = new chanMutex(c.mu).Unlock(); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 11; continue;
			/* } else if (_1 === (8)) { */ case 6:
				_r$4 = $clone(m, rpc.Message).Bootstrap(); /* */ $s = 41; case 41: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$2 = _r$4;
				boot = $clone(_tuple$2[0], rpc.Bootstrap);
				err$3 = _tuple$2[1];
				/* */ if (!($interfaceIsEqual(err$3, $ifaceNil))) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if (!($interfaceIsEqual(err$3, $ifaceNil))) { */ case 42:
					$r = c.errorf("decode bootstrap: %v", new sliceType$6([err$3])); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 43:
				id$2 = ($clone(boot, rpc.Bootstrap).QuestionId() >>> 0);
				$r = new chanMutex(c.mu).Lock(); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$5 = c.handleBootstrapMessage(id$2); /* */ $s = 46; case 46: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				err$3 = _r$5;
				$r = new chanMutex(c.mu).Unlock(); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (!($interfaceIsEqual(err$3, $ifaceNil))) { $s = 48; continue; }
				/* */ $s = 49; continue;
				/* if (!($interfaceIsEqual(err$3, $ifaceNil))) { */ case 48:
					$r = c.errorf("handle bootstrap: %v", new sliceType$6([err$3])); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 49:
				$s = 11; continue;
			/* } else if (_1 === (2)) { */ case 7:
				_r$6 = copyRPCMessage($clone(m, rpc.Message)); /* */ $s = 51; case 51: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				rpc.Message.copy(m, _r$6);
				$r = new chanMutex(c.mu).Lock(); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$7 = c.handleCallMessage($clone(m, rpc.Message)); /* */ $s = 53; case 53: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				err$4 = _r$7;
				$r = new chanMutex(c.mu).Unlock(); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (!($interfaceIsEqual(err$4, $ifaceNil))) { $s = 55; continue; }
				/* */ $s = 56; continue;
				/* if (!($interfaceIsEqual(err$4, $ifaceNil))) { */ case 55:
					$r = c.errorf("handle call: %v", new sliceType$6([err$4])); /* */ $s = 57; case 57: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 56:
				$s = 11; continue;
			/* } else if (_1 === (6)) { */ case 8:
				_r$8 = $clone(m, rpc.Message).Release(); /* */ $s = 58; case 58: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_tuple$3 = _r$8;
				rel = $clone(_tuple$3[0], rpc.Release);
				err$5 = _tuple$3[1];
				/* */ if (!($interfaceIsEqual(err$5, $ifaceNil))) { $s = 59; continue; }
				/* */ $s = 60; continue;
				/* if (!($interfaceIsEqual(err$5, $ifaceNil))) { */ case 59:
					$r = c.errorf("decode release: %v", new sliceType$6([err$5])); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 60:
				id$3 = ($clone(rel, rpc.Release).Id() >>> 0);
				refs = ($clone(rel, rpc.Release).ReferenceCount() >> 0);
				$r = new chanMutex(c.mu).Lock(); /* */ $s = 62; case 62: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = c.releaseExport(id$3, refs); /* */ $s = 63; case 63: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = new chanMutex(c.mu).Unlock(); /* */ $s = 64; case 64: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 11; continue;
			/* } else if (_1 === (13)) { */ case 9:
				_r$9 = copyRPCMessage($clone(m, rpc.Message)); /* */ $s = 65; case 65: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				rpc.Message.copy(m, _r$9);
				$r = new chanMutex(c.mu).Lock(); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$10 = c.handleDisembargoMessage($clone(m, rpc.Message)); /* */ $s = 67; case 67: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				err$6 = _r$10;
				$r = new chanMutex(c.mu).Unlock(); /* */ $s = 68; case 68: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (!($interfaceIsEqual(err$6, $ifaceNil))) { $s = 69; continue; }
				/* */ $s = 70; continue;
				/* if (!($interfaceIsEqual(err$6, $ifaceNil))) { */ case 69:
					$r = c.abort(err$6); /* */ $s = 71; case 71: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 70:
				$s = 11; continue;
			/* } else { */ case 10:
				$r = c.infof("received unimplemented message, which = %v", new sliceType$6([new rpc.Message_Which($clone(m, rpc.Message).Which())])); /* */ $s = 72; case 72: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$11 = newUnimplementedMessage(sliceType$2.nil, $clone(m, rpc.Message)); /* */ $s = 73; case 73: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				um = $clone(_r$11, rpc.Message);
				_r$12 = c.sendMessage($clone(um, rpc.Message)); /* */ $s = 74; case 74: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_r$12;
			/* } */ case 11:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.handleMessage }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.a = a; $f.a$1 = a$1; $f.boot = boot; $f.c = c; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.id = id; $f.id$1 = id$1; $f.id$2 = id$2; $f.id$3 = id$3; $f.m = m; $f.mfin = mfin; $f.refs = refs; $f.rel = rel; $f.um = um; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.handleMessage = function(m) { return this.$val.handleMessage(m); };
	newUnimplementedMessage = function(buf, m) {
		var $ptr, _r, _r$1, buf, m, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; buf = $f.buf; m = $f.m; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newMessage(buf); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = $clone(_r, rpc.Message);
		_r$1 = $clone(n, rpc.Message).SetUnimplemented($clone(m, rpc.Message)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newUnimplementedMessage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.buf = buf; $f.m = m; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.ptr.prototype.fillParams = function(payload, cl) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, c, cl, ctab, err, err$1, err$2, params, payload, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; cl = $f.cl; ctab = $f.ctab; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; params = $f.params; payload = $f.payload; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = cl.PlaceParams($clone(payload.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		params = $clone(_tuple[0], capnp.Struct);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = $clone(payload, rpc.Payload).SetContent(new params.constructor.elem(params)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err$1 = _r$1;
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		_r$2 = c.makeCapTable($clone(payload.Struct, capnp.Struct).Segment()); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		ctab = $clone(_tuple$1[0], rpc.CapDescriptor_List);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = $clone(payload, rpc.Payload).SetCapTable($clone(ctab, rpc.CapDescriptor_List)); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err$2 = _r$3;
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			$s = -1; return err$2;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.fillParams }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.cl = cl; $f.ctab = ctab; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.params = params; $f.payload = payload; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.fillParams = function(payload, cl) { return this.$val.fillParams(payload, cl); };
	transformToPromisedAnswer = function(s, answer$1, transform) {
		var $ptr, _i, _r, _r$1, _ref, _tuple, answer$1, err, i, op, opList, s, transform, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; answer$1 = $f.answer$1; err = $f.err; i = $f.i; op = $f.op; opList = $f.opList; s = $f.s; transform = $f.transform; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = rpc.NewPromisedAnswer_Op_List(s, (transform.$length >> 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		opList = $clone(_tuple[0], rpc.PromisedAnswer_Op_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_ref = transform;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			op = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), capnp.PipelineOp);
			$clone($clone(opList, rpc.PromisedAnswer_Op_List).At(i), rpc.PromisedAnswer_Op).SetGetPointerField(op.Field);
			_i++;
		}
		_r$1 = $clone(answer$1, rpc.PromisedAnswer).SetTransform($clone(opList, rpc.PromisedAnswer_Op_List)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: transformToPromisedAnswer }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f.answer$1 = answer$1; $f.err = err; $f.i = i; $f.op = op; $f.opList = opList; $f.s = s; $f.transform = transform; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.ptr.prototype.handleReturnMessage = function(m) {
		var $ptr, _1, _i, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, c, content, e, err, err$1, err$2, err$3, err$4, exc, fin, id, id$1, m, q, qstate, releaseResultCaps, results, ret, um, um$1, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; c = $f.c; content = $f.content; e = $f.e; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; exc = $f.exc; fin = $f.fin; id = $f.id; id$1 = $f.id$1; m = $f.m; q = $f.q; qstate = $f.qstate; releaseResultCaps = $f.releaseResultCaps; results = $f.results; ret = $f.ret; um = $f.um; um$1 = $f.um$1; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = $clone(m, rpc.Message).Return(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ret = $clone(_tuple[0], rpc.Return);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		id = ($clone(ret, rpc.Return).AnswerId() >>> 0);
		q = c.popQuestion(id);
		/* */ if (q === ptrType$14.nil) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (q === ptrType$14.nil) { */ case 2:
			_r$1 = fmt.Errorf("received return for unknown question id=%d", new sliceType$6([new questionID(id)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		/* */ if ($clone(ret, rpc.Return).ReleaseParamCaps()) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ($clone(ret, rpc.Return).ReleaseParamCaps()) { */ case 5:
			_ref = q.paramCaps;
			_i = 0;
			/* while (true) { */ case 7:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
				id$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				$r = c.releaseExport(id$1, 1); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
			/* } */ $s = 7; continue; case 8:
		/* } */ case 6:
		$r = q.mu.RLock(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		qstate = q.state;
		$r = q.mu.RUnlock(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (qstate === 2) {
			$s = -1; return $ifaceNil;
		}
		releaseResultCaps = true;
			_1 = $clone(ret, rpc.Return).Which();
			/* */ if (_1 === (0)) { $s = 13; continue; }
			/* */ if (_1 === (1)) { $s = 14; continue; }
			/* */ if (_1 === (2)) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (_1 === (0)) { */ case 13:
				releaseResultCaps = false;
				_r$2 = $clone(ret, rpc.Return).Results(); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				results = $clone(_tuple$1[0], rpc.Payload);
				err$1 = _tuple$1[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
				}
				_r$3 = c.populateMessageCapTable($clone(results, rpc.Payload)); /* */ $s = 19; case 19: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err$2 = _r$3;
				/* */ if ($interfaceIsEqual(err$2, errUnimplemented)) { $s = 20; continue; }
				/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if ($interfaceIsEqual(err$2, errUnimplemented)) { */ case 20:
					_r$4 = newUnimplementedMessage(sliceType$2.nil, $clone(m, rpc.Message)); /* */ $s = 23; case 23: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					um = $clone(_r$4, rpc.Message);
					_r$5 = c.sendMessage($clone(um, rpc.Message)); /* */ $s = 24; case 24: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$5;
					$s = -1; return errUnimplemented;
				/* } else if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 21:
					$r = c.abort(err$2); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return err$2;
				/* } */ case 22:
				_r$6 = $clone(results, rpc.Payload).ContentPtr(); /* */ $s = 26; case 26: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple$2 = _r$6;
				content = $clone(_tuple$2[0], capnp.Ptr);
				err$1 = _tuple$2[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
				}
				$r = q.fulfill($clone(content, capnp.Ptr)); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 17; continue;
			/* } else if (_1 === (1)) { */ case 14:
				_r$7 = $clone(ret, rpc.Return).Exception(); /* */ $s = 28; case 28: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_tuple$3 = _r$7;
				exc = $clone(_tuple$3[0], rpc.Exception);
				err$3 = _tuple$3[1];
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					$s = -1; return err$3;
				}
				e = (x = new Exception.ptr($clone(exc, rpc.Exception)), new x.constructor.elem(x));
				if (!(q.method === ptrType$7.nil)) {
					e = new capnp.MethodError.ptr(q.method, e);
				} else {
					e = (x$1 = new bootstrapError.ptr(e), new x$1.constructor.elem(x$1));
				}
				$r = q.reject(e); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 17; continue;
			/* } else if (_1 === (2)) { */ case 15:
				_r$8 = fmt.Errorf("receiver reported canceled", new sliceType$6([])); /* */ $s = 30; case 30: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				err$4 = new questionError.ptr(id, q.method, _r$8);
				$r = c.errorf("%v", new sliceType$6([err$4])); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = q.reject(err$4); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return $ifaceNil;
			/* } else { */ case 16:
				_r$9 = newUnimplementedMessage(sliceType$2.nil, $clone(m, rpc.Message)); /* */ $s = 33; case 33: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				um$1 = $clone(_r$9, rpc.Message);
				_r$10 = c.sendMessage($clone(um$1, rpc.Message)); /* */ $s = 34; case 34: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$10;
				$s = -1; return errUnimplemented;
			/* } */ case 17:
		case 12:
		_r$11 = newFinishMessage(sliceType$2.nil, id, releaseResultCaps); /* */ $s = 35; case 35: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		fin = $clone(_r$11, rpc.Message);
		_r$12 = c.sendMessage($clone(fin, rpc.Message)); /* */ $s = 36; case 36: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_r$12;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.handleReturnMessage }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.c = c; $f.content = content; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.exc = exc; $f.fin = fin; $f.id = id; $f.id$1 = id$1; $f.m = m; $f.q = q; $f.qstate = qstate; $f.releaseResultCaps = releaseResultCaps; $f.results = results; $f.ret = ret; $f.um = um; $f.um$1 = um$1; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.handleReturnMessage = function(m) { return this.$val.handleReturnMessage(m); };
	newFinishMessage = function(buf, questionID$1, release) {
		var $ptr, _r, _r$1, _tuple, buf, f, m, questionID$1, release, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; buf = $f.buf; f = $f.f; m = $f.m; questionID$1 = $f.questionID$1; release = $f.release; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newMessage(buf); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		m = $clone(_r, rpc.Message);
		_r$1 = $clone(m, rpc.Message).NewFinish(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		f = $clone(_tuple[0], rpc.Finish);
		$clone(f, rpc.Finish).SetQuestionId((questionID$1 >>> 0));
		$clone(f, rpc.Finish).SetReleaseResultCaps(release);
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newFinishMessage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.buf = buf; $f.f = f; $f.m = m; $f.questionID$1 = questionID$1; $f.release = release; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.ptr.prototype.populateMessageCapTable = function(payload) {
		var $ptr, _1, _entry, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, a, c, client, client$1, ctab, desc, e, err, err$1, i, id, id$1, id$2, id$3, msg, n, payload, recvAns, recvTransform, transform, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; a = $f.a; c = $f.c; client = $f.client; client$1 = $f.client$1; ctab = $f.ctab; desc = $f.desc; e = $f.e; err = $f.err; err$1 = $f.err$1; i = $f.i; id = $f.id; id$1 = $f.id$1; id$2 = $f.id$2; id$3 = $f.id$3; msg = $f.msg; n = $f.n; payload = $f.payload; recvAns = $f.recvAns; recvTransform = $f.recvTransform; transform = $f.transform; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		msg = $clone(payload.Struct, capnp.Struct).Segment().Message();
		_r = $clone(payload, rpc.Payload).CapTable(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ctab = $clone(_tuple[0], rpc.CapDescriptor_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_tmp = 0;
		_tmp$1 = $clone(ctab.List, capnp.List).Len();
		i = _tmp;
		n = _tmp$1;
		/* while (true) { */ case 2:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 3; continue; }
			desc = $clone($clone(ctab, rpc.CapDescriptor_List).At(i), rpc.CapDescriptor);
				_1 = $clone(desc, rpc.CapDescriptor).Which();
				/* */ if (_1 === (0)) { $s = 5; continue; }
				/* */ if (_1 === (1)) { $s = 6; continue; }
				/* */ if (_1 === (2)) { $s = 7; continue; }
				/* */ if (_1 === (3)) { $s = 8; continue; }
				/* */ if (_1 === (4)) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_1 === (0)) { */ case 5:
					msg.AddCap($ifaceNil);
					$s = 11; continue;
				/* } else if (_1 === (1)) { */ case 6:
					id = ($clone(desc, rpc.CapDescriptor).SenderHosted() >>> 0);
					_r$1 = c.addImport(id); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					client = _r$1;
					msg.AddCap(client);
					$s = 11; continue;
				/* } else if (_1 === (2)) { */ case 7:
					id$1 = ($clone(desc, rpc.CapDescriptor).SenderPromise() >>> 0);
					_r$2 = c.addImport(id$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					client$1 = _r$2;
					msg.AddCap(client$1);
					$s = 11; continue;
				/* } else if (_1 === (3)) { */ case 8:
					id$2 = ($clone(desc, rpc.CapDescriptor).ReceiverHosted() >>> 0);
					e = c.findExport(id$2);
					/* */ if (e === ptrType$15.nil) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (e === ptrType$15.nil) { */ case 14:
						_r$3 = fmt.Errorf("rpc: capability table references unknown export ID %d", new sliceType$6([new exportID(id$2)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						$s = -1; return _r$3;
					/* } */ case 15:
					_r$4 = e.rc.Ref(); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$5 = msg.AddCap(_r$4); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$5;
					$s = 11; continue;
				/* } else if (_1 === (4)) { */ case 9:
					_r$6 = $clone(desc, rpc.CapDescriptor).ReceiverAnswer(); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_tuple$1 = _r$6;
					recvAns = $clone(_tuple$1[0], rpc.PromisedAnswer);
					err$1 = _tuple$1[1];
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						$s = -1; return err$1;
					}
					id$3 = ($clone(recvAns, rpc.PromisedAnswer).QuestionId() >>> 0);
					a = (_entry = c.answers[answerID.keyFor(id$3)], _entry !== undefined ? _entry.v : ptrType.nil);
					/* */ if (a === ptrType.nil) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (a === ptrType.nil) { */ case 20:
						_r$7 = fmt.Errorf("rpc: capability table references unknown answer ID %d", new sliceType$6([new answerID(id$3)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						$s = -1; return _r$7;
					/* } */ case 21:
					_r$8 = $clone(recvAns, rpc.PromisedAnswer).Transform(); /* */ $s = 23; case 23: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_tuple$2 = _r$8;
					recvTransform = $clone(_tuple$2[0], rpc.PromisedAnswer_Op_List);
					err$1 = _tuple$2[1];
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						$s = -1; return err$1;
					}
					transform = promisedAnswerOpsToTransform($clone(recvTransform, rpc.PromisedAnswer_Op_List));
					msg.AddCap(a.pipelineClient(transform));
					$s = 11; continue;
				/* } else { */ case 10:
					$r = c.errorf("unknown capability type %v", new sliceType$6([new rpc.CapDescriptor_Which($clone(desc, rpc.CapDescriptor).Which())])); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return errUnimplemented;
				/* } */ case 11:
			case 4:
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.populateMessageCapTable }; } $f.$ptr = $ptr; $f._1 = _1; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.a = a; $f.c = c; $f.client = client; $f.client$1 = client$1; $f.ctab = ctab; $f.desc = desc; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.i = i; $f.id = id; $f.id$1 = id$1; $f.id$2 = id$2; $f.id$3 = id$3; $f.msg = msg; $f.n = n; $f.payload = payload; $f.recvAns = recvAns; $f.recvTransform = recvTransform; $f.transform = transform; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.populateMessageCapTable = function(payload) { return this.$val.populateMessageCapTable(payload); };
	Conn.ptr.prototype.makeCapTable = function(s) {
		var $ptr, _i, _r, _r$1, _ref, _tuple, c, client, desc, err, i, msgtab, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; c = $f.c; client = $f.client; desc = $f.desc; err = $f.err; i = $f.i; msgtab = $f.msgtab; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		msgtab = s.Message().CapTable;
		_r = rpc.NewCapDescriptor_List(s, (msgtab.$length >> 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		t = $clone(_tuple[0], rpc.CapDescriptor_List);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new rpc.CapDescriptor_List.ptr(new capnp.List.ptr(ptrType$2.nil, 0, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), $ifaceNil];
		}
		_ref = msgtab;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			client = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			desc = $clone($clone(t, rpc.CapDescriptor_List).At(i), rpc.CapDescriptor);
			/* */ if ($interfaceIsEqual(client, $ifaceNil)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ($interfaceIsEqual(client, $ifaceNil)) { */ case 4:
				$clone(desc, rpc.CapDescriptor).SetNone();
				_i++;
				/* continue; */ $s = 2; continue;
			/* } */ case 5:
			_r$1 = c.descriptorForClient($clone(desc, rpc.CapDescriptor), client); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [t, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.makeCapTable }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f.c = c; $f.client = client; $f.desc = desc; $f.err = err; $f.i = i; $f.msgtab = msgtab; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.makeCapTable = function(s) { return this.$val.makeCapTable(s); };
	Conn.ptr.prototype.handleBootstrapMessage = function(id) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, a, c, cancel, ctx, err, id, in$1, m, main, r, retmsg, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; a = $f.a; c = $f.c; cancel = $f.cancel; ctx = $f.ctx; err = $f.err; id = $f.id; in$1 = $f.in$1; m = $f.m; main = $f.main; r = $f.r; retmsg = $f.retmsg; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		c = this;
		_r = c.newContext(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ctx = _tuple[0];
		cancel = _tuple[1];
		$deferred.push([cancel, []]);
		a = c.insertAnswer(id, cancel);
		/* */ if (a === ptrType.nil) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (a === ptrType.nil) { */ case 2:
			_r$1 = newReturnMessage(sliceType$2.nil, id); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			retmsg = $clone(_r$1, rpc.Message);
			_r$2 = $clone(retmsg, rpc.Message).Return(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			r = $clone(_tuple$1[0], rpc.Return);
			_r$3 = setReturnException($clone(r, rpc.Return), errQuestionReused); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_r$4 = c.sendMessage($clone(retmsg, rpc.Message)); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return _r$4;
		/* } */ case 3:
		/* */ if (c.mainFunc === $throwNilPointerError) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (c.mainFunc === $throwNilPointerError) { */ case 8:
			_r$5 = a.reject(errNoMainInterface); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return _r$5;
		/* } */ case 9:
		_r$6 = c.mainFunc(ctx); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple$2 = _r$6;
		main = _tuple$2[0];
		err = _tuple$2[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 12:
			_r$7 = a.reject(errNoMainInterface); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$s = -1; return _r$7;
		/* } */ case 13:
		m = new capnp.Message.ptr(new capnp.ReadLimiter.ptr(new $Uint64(0, 0)), new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0), capnp.SingleSegment($makeSlice(sliceType$2, 0)), new sliceType$8([main]), new $Uint64(0, 0), 0, new sync.Mutex.ptr(0, 0), false, new capnp.Segment.ptr(ptrType$16.nil, 0, sliceType$2.nil));
		_r$8 = m.Segment(0); /* */ $s = 15; case 15: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_tuple$3 = _r$8;
		s = _tuple$3[0];
		in$1 = $clone(capnp.NewInterface(s, 0), capnp.Interface);
		_r$9 = a.fulfill($clone($clone(in$1, capnp.Interface).ToPtr(), capnp.Ptr)); /* */ $s = 16; case 16: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		$s = -1; return _r$9;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.handleBootstrapMessage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.a = a; $f.c = c; $f.cancel = cancel; $f.ctx = ctx; $f.err = err; $f.id = id; $f.in$1 = in$1; $f.m = m; $f.main = main; $f.r = r; $f.retmsg = retmsg; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Conn.prototype.handleBootstrapMessage = function(id) { return this.$val.handleBootstrapMessage(id); };
	Conn.ptr.prototype.handleCallMessage = function(m) {
		var $ptr, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, a, c, cancel, cl, ctx, err, err$1, err$2, id, m, mcall, meth, mparams, mt, paramContent, um, um$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; a = $f.a; c = $f.c; cancel = $f.cancel; cl = $f.cl; ctx = $f.ctx; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; id = $f.id; m = $f.m; mcall = $f.mcall; meth = $f.meth; mparams = $f.mparams; mt = $f.mt; paramContent = $f.paramContent; um = $f.um; um$1 = $f.um$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = $clone(m, rpc.Message).Call(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		mcall = $clone(_tuple[0], rpc.Call);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = $clone(mcall, rpc.Call).Target(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		mt = $clone(_tuple$1[0], rpc.MessageTarget);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		/* */ if (!(($clone(mt, rpc.MessageTarget).Which() === 0)) && !(($clone(mt, rpc.MessageTarget).Which() === 1))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!(($clone(mt, rpc.MessageTarget).Which() === 0)) && !(($clone(mt, rpc.MessageTarget).Which() === 1))) { */ case 3:
			_r$2 = newUnimplementedMessage(sliceType$2.nil, $clone(m, rpc.Message)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			um = $clone(_r$2, rpc.Message);
			_r$3 = c.sendMessage($clone(um, rpc.Message)); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 4:
		_r$4 = $clone(mcall, rpc.Call).Params(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$2 = _r$4;
		mparams = $clone(_tuple$2[0], rpc.Payload);
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$5 = c.populateMessageCapTable($clone(mparams, rpc.Payload)); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		err$1 = _r$5;
		/* */ if ($interfaceIsEqual(err$1, errUnimplemented)) { $s = 9; continue; }
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if ($interfaceIsEqual(err$1, errUnimplemented)) { */ case 9:
			_r$6 = newUnimplementedMessage(sliceType$2.nil, $clone(m, rpc.Message)); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			um$1 = $clone(_r$6, rpc.Message);
			_r$7 = c.sendMessage($clone(um$1, rpc.Message)); /* */ $s = 13; case 13: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$s = -1; return _r$7;
		/* } else if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 10:
			$r = c.abort(err$1); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return err$1;
		/* } */ case 11:
		_r$8 = c.newContext(); /* */ $s = 15; case 15: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_tuple$3 = _r$8;
		ctx = _tuple$3[0];
		cancel = _tuple$3[1];
		id = ($clone(mcall, rpc.Call).QuestionId() >>> 0);
		a = c.insertAnswer(id, cancel);
		/* */ if (a === ptrType.nil) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (a === ptrType.nil) { */ case 16:
			$r = c.abort(errQuestionReused); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return errQuestionReused;
		/* } */ case 17:
		meth = new capnp.Method.ptr($clone(mcall, rpc.Call).InterfaceId(), $clone(mcall, rpc.Call).MethodId(), "", "");
		_r$9 = $clone(mparams, rpc.Payload).ContentPtr(); /* */ $s = 19; case 19: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_tuple$4 = _r$9;
		paramContent = $clone(_tuple$4[0], capnp.Ptr);
		err = _tuple$4[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		cl = new capnp.Call.ptr(ctx, $clone(meth, capnp.Method), $clone($clone(paramContent, capnp.Ptr).Struct(), capnp.Struct), $throwNilPointerError, new capnp.ObjectSize.ptr(0, 0), new capnp.CallOptions.ptr(false));
		_r$10 = c.routeCallMessage(a, $clone(mt, rpc.MessageTarget), cl); /* */ $s = 20; case 20: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		err$2 = _r$10;
		/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 21:
			_r$11 = a.reject(err$2); /* */ $s = 23; case 23: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			$s = -1; return _r$11;
		/* } */ case 22:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.handleCallMessage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.a = a; $f.c = c; $f.cancel = cancel; $f.cl = cl; $f.ctx = ctx; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.id = id; $f.m = m; $f.mcall = mcall; $f.meth = meth; $f.mparams = mparams; $f.mt = mt; $f.paramContent = paramContent; $f.um = um; $f.um$1 = um$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.handleCallMessage = function(m) { return this.$val.handleCallMessage(m); };
	Conn.ptr.prototype.routeCallMessage = function(result, mt, cl) {
		var $ptr, _1, _entry, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tuple, _tuple$1, answer$1, answer$2, c, cl, client, e, err, err$1, id, id$1, mpromise, mt, mtrans, obj, pa, result, transform, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; answer$1 = $f.answer$1; answer$2 = $f.answer$2; c = $f.c; cl = $f.cl; client = $f.client; e = $f.e; err = $f.err; err$1 = $f.err$1; id = $f.id; id$1 = $f.id$1; mpromise = $f.mpromise; mt = $f.mt; mtrans = $f.mtrans; obj = $f.obj; pa = $f.pa; result = $f.result; transform = $f.transform; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
			_1 = $clone(mt, rpc.MessageTarget).Which();
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (0)) { */ case 2:
				id = ($clone(mt, rpc.MessageTarget).ImportedCap() >>> 0);
				e = c.findExport(id);
				if (e === ptrType$15.nil) {
					$s = -1; return errBadTarget;
				}
				_r = c.lockedCall(e.client, cl); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				answer$1 = _r;
				$go(joinAnswer, [result, answer$1]);
				$s = 5; continue;
			/* } else if (_1 === (1)) { */ case 3:
				_r$1 = $clone(mt, rpc.MessageTarget).PromisedAnswer(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				mpromise = $clone(_tuple[0], rpc.PromisedAnswer);
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return err;
				}
				id$1 = ($clone(mpromise, rpc.PromisedAnswer).QuestionId() >>> 0);
				if (id$1 === result.id) {
					$s = -1; return errBadTarget;
				}
				pa = (_entry = c.answers[answerID.keyFor(id$1)], _entry !== undefined ? _entry.v : ptrType.nil);
				if (pa === ptrType.nil) {
					$s = -1; return errBadTarget;
				}
				_r$2 = $clone(mpromise, rpc.PromisedAnswer).Transform(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				mtrans = $clone(_tuple$1[0], rpc.PromisedAnswer_Op_List);
				err = _tuple$1[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return err;
				}
				transform = promisedAnswerOpsToTransform($clone(mtrans, rpc.PromisedAnswer_Op_List));
				$r = pa.mu.Lock(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (pa.done) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (pa.done) { */ case 10:
					_tmp = $clone(pa.obj, capnp.Ptr);
					_tmp$1 = pa.err;
					obj = $clone(_tmp, capnp.Ptr);
					err$1 = _tmp$1;
					$r = pa.mu.Unlock(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$3 = clientFromResolution(transform, $clone(obj, capnp.Ptr), err$1); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					client = _r$3;
					_r$4 = c.lockedCall(client, cl); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					answer$2 = _r$4;
					$go(joinAnswer, [result, answer$2]);
					$s = 12; continue;
				/* } else { */ case 11:
					_r$5 = pa.queueCallLocked(cl, new pcall.ptr(transform, new qcall.ptr(result, ptrType$5.nil, ptrType$6.nil, 0, new rpc.MessageTarget.ptr(new capnp.Struct.ptr(ptrType$2.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0))))); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					err = _r$5;
					$r = pa.mu.Unlock(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 12:
				$s = -1; return err;
			/* } else { */ case 4:
				$panic(new $String("unreachable"));
			/* } */ case 5:
		case 1:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.routeCallMessage }; } $f.$ptr = $ptr; $f._1 = _1; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.answer$1 = answer$1; $f.answer$2 = answer$2; $f.c = c; $f.cl = cl; $f.client = client; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.id = id; $f.id$1 = id$1; $f.mpromise = mpromise; $f.mt = mt; $f.mtrans = mtrans; $f.obj = obj; $f.pa = pa; $f.result = result; $f.transform = transform; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.routeCallMessage = function(result, mt, cl) { return this.$val.routeCallMessage(result, mt, cl); };
	Conn.ptr.prototype.handleDisembargoMessage = function(msg) {
		var $ptr, _1, _entry, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, a, aid, c, d, dpa, dtarget, dtrans, err, err$1, err$2, id, id$1, msg, queued, rd, resp, transform, um, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; a = $f.a; aid = $f.aid; c = $f.c; d = $f.d; dpa = $f.dpa; dtarget = $f.dtarget; dtrans = $f.dtrans; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; id = $f.id; id$1 = $f.id$1; msg = $f.msg; queued = $f.queued; rd = $f.rd; resp = $f.resp; transform = $f.transform; um = $f.um; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = $clone(msg, rpc.Message).Disembargo(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		d = $clone(_tuple[0], rpc.Disembargo);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = $clone(d, rpc.Disembargo).Target(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		dtarget = $clone(_tuple$1[0], rpc.MessageTarget);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
			_1 = $clone($clone(d, rpc.Disembargo).Context(), rpc.Disembargo_context).Which();
			/* */ if (_1 === (0)) { $s = 4; continue; }
			/* */ if (_1 === (1)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (0)) { */ case 4:
				id = ($clone($clone(d, rpc.Disembargo).Context(), rpc.Disembargo_context).SenderLoopback() >>> 0);
				if (!(($clone(dtarget, rpc.MessageTarget).Which() === 1))) {
					$s = -1; return errDisembargoNonImport;
				}
				_r$2 = $clone(dtarget, rpc.MessageTarget).PromisedAnswer(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$2 = _r$2;
				dpa = $clone(_tuple$2[0], rpc.PromisedAnswer);
				err$1 = _tuple$2[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
				}
				aid = ($clone(dpa, rpc.PromisedAnswer).QuestionId() >>> 0);
				a = (_entry = c.answers[answerID.keyFor(aid)], _entry !== undefined ? _entry.v : ptrType.nil);
				if (a === ptrType.nil) {
					$s = -1; return errDisembargoMissingAnswer;
				}
				_r$3 = $clone(dpa, rpc.PromisedAnswer).Transform(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$3 = _r$3;
				dtrans = $clone(_tuple$3[0], rpc.PromisedAnswer_Op_List);
				err$1 = _tuple$3[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
				}
				transform = promisedAnswerOpsToTransform($clone(dtrans, rpc.PromisedAnswer_Op_List));
				_r$4 = a.queueDisembargo(transform, id, $clone(dtarget, rpc.MessageTarget)); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$4 = _r$4;
				queued = _tuple$4[0];
				err$1 = _tuple$4[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
				}
				/* */ if (!queued) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!queued) { */ case 11:
					_r$5 = newDisembargoMessage(sliceType$2.nil, 1, id); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					resp = $clone(_r$5, rpc.Message);
					_r$6 = $clone(resp, rpc.Message).Disembargo(); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_tuple$5 = _r$6;
					rd = $clone(_tuple$5[0], rpc.Disembargo);
					_r$7 = $clone(rd, rpc.Disembargo).SetTarget($clone(dtarget, rpc.MessageTarget)); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					err$2 = _r$7;
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						$s = -1; return err$2;
					}
					_r$8 = c.sendMessage($clone(resp, rpc.Message)); /* */ $s = 16; case 16: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$8;
				/* } */ case 12:
				$s = 7; continue;
			/* } else if (_1 === (1)) { */ case 5:
				id$1 = ($clone($clone(d, rpc.Disembargo).Context(), rpc.Disembargo_context).ReceiverLoopback() >>> 0);
				c.disembargo(id$1);
				$s = 7; continue;
			/* } else { */ case 6:
				_r$9 = newUnimplementedMessage(sliceType$2.nil, $clone(msg, rpc.Message)); /* */ $s = 17; case 17: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				um = $clone(_r$9, rpc.Message);
				_r$10 = c.sendMessage($clone(um, rpc.Message)); /* */ $s = 18; case 18: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$10;
			/* } */ case 7:
		case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.handleDisembargoMessage }; } $f.$ptr = $ptr; $f._1 = _1; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.a = a; $f.aid = aid; $f.c = c; $f.d = d; $f.dpa = dpa; $f.dtarget = dtarget; $f.dtrans = dtrans; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.id = id; $f.id$1 = id$1; $f.msg = msg; $f.queued = queued; $f.rd = rd; $f.resp = resp; $f.transform = transform; $f.um = um; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.handleDisembargoMessage = function(msg) { return this.$val.handleDisembargoMessage(msg); };
	newDisembargoMessage = function(buf, which, id) {
		var $ptr, _1, _r, _r$1, _tuple, buf, d, id, msg, which, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; buf = $f.buf; d = $f.d; id = $f.id; msg = $f.msg; which = $f.which; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newMessage(buf); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		msg = $clone(_r, rpc.Message);
		_r$1 = $clone(msg, rpc.Message).NewDisembargo(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		d = $clone(_tuple[0], rpc.Disembargo);
		_1 = which;
		if (_1 === (0)) {
			$clone($clone(d, rpc.Disembargo).Context(), rpc.Disembargo_context).SetSenderLoopback((id >>> 0));
		} else if (_1 === (1)) {
			$clone($clone(d, rpc.Disembargo).Context(), rpc.Disembargo_context).SetReceiverLoopback((id >>> 0));
		} else {
			$panic(new $String("unreachable"));
		}
		$s = -1; return msg;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newDisembargoMessage }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.buf = buf; $f.d = d; $f.id = id; $f.msg = msg; $f.which = which; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.ptr.prototype.newContext = function() {
		var $ptr, _r, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = context.WithCancel(c.bg); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.newContext }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.newContext = function() { return this.$val.newContext(); };
	promisedAnswerOpsToTransform = function(list) {
		var $ptr, _1, i, list, n, op, transform;
		n = $clone(list.List, capnp.List).Len();
		transform = $makeSlice(sliceType$4, 0, n);
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			op = $clone($clone(list, rpc.PromisedAnswer_Op_List).At(i), rpc.PromisedAnswer_Op);
			_1 = $clone(op, rpc.PromisedAnswer_Op).Which();
			if (_1 === (1)) {
				transform = $append(transform, new capnp.PipelineOp.ptr($clone(op, rpc.PromisedAnswer_Op).GetPointerField(), sliceType$2.nil));
			} else if (_1 === (0)) {
			}
			i = i + (1) >> 0;
		}
		return transform;
	};
	newAbortMessage = function(buf, err) {
		var $ptr, _r, _r$1, _tuple, buf, e, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; buf = $f.buf; e = $f.e; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newMessage(buf); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = $clone(_r, rpc.Message);
		_r$1 = $clone(n, rpc.Message).NewAbort(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		e = $clone(_tuple[0], rpc.Exception);
		$r = toException($clone(e, rpc.Exception), err); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newAbortMessage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.buf = buf; $f.e = e; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	newReturnMessage = function(buf, id) {
		var $ptr, _r, _r$1, _tuple, buf, id, ret, retmsg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; buf = $f.buf; id = $f.id; ret = $f.ret; retmsg = $f.retmsg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newMessage(buf); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		retmsg = $clone(_r, rpc.Message);
		_r$1 = $clone(retmsg, rpc.Message).NewReturn(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		ret = $clone(_tuple[0], rpc.Return);
		$clone(ret, rpc.Return).SetAnswerId((id >>> 0));
		$clone(ret, rpc.Return).SetReleaseParamCaps(false);
		$s = -1; return retmsg;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newReturnMessage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.buf = buf; $f.id = id; $f.ret = ret; $f.retmsg = retmsg; $f.$s = $s; $f.$r = $r; return $f;
	};
	setReturnException = function(ret, err) {
		var $ptr, _r, _r$1, _tuple, e, err, ret, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; e = $f.e; err = $f.err; ret = $f.ret; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = rpc.NewException($clone(ret.Struct, capnp.Struct).Segment()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		e = $clone(_tuple[0], rpc.Exception);
		$r = toException($clone(e, rpc.Exception), err); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = $clone(ret, rpc.Return).SetException($clone(e, rpc.Exception)); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return e;
		/* */ } return; } if ($f === undefined) { $f = { $blk: setReturnException }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.e = e; $f.err = err; $f.ret = ret; $f.$s = $s; $f.$r = $r; return $f;
	};
	clientFromResolution = function(transform, obj, err) {
		var $ptr, _r, _tuple, c, err, obj, out, transform, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; obj = $f.obj; out = $f.out; transform = $f.transform; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return capnp.ErrorClient(err);
		}
		_r = capnp.TransformPtr($clone(obj, capnp.Ptr), transform); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		out = $clone(_tuple[0], capnp.Ptr);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return capnp.ErrorClient(err);
		}
		c = $clone($clone(out, capnp.Ptr).Interface(), capnp.Interface).Client();
		if ($interfaceIsEqual(c, $ifaceNil)) {
			$s = -1; return capnp.ErrorClient(capnp.ErrNullClient);
		}
		$s = -1; return c;
		/* */ } return; } if ($f === undefined) { $f = { $blk: clientFromResolution }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.obj = obj; $f.out = out; $f.transform = transform; $f.$s = $s; $f.$r = $r; return $f;
	};
	newMessage = function(buf) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, buf, err, m, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buf = $f.buf; err = $f.err; m = $f.m; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = capnp.NewMessage(capnp.SingleSegment(buf)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		s = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		_r$1 = rpc.NewRootMessage(s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		m = $clone(_tuple$1[0], rpc.Message);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newMessage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.err = err; $f.m = m; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	newChanMutex = function() {
		var $ptr, mu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; mu = $f.mu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mu = new $Chan(structType, 1);
		$r = $send(mu, $clone(new structType.ptr(), structType)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return mu;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newChanMutex }; } $f.$ptr = $ptr; $f.mu = mu; $f.$s = $s; $f.$r = $r; return $f;
	};
	chanMutex.prototype.Lock = function() {
		var $ptr, _r, mu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; mu = $f.mu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mu = this.$val;
		_r = $recv(mu); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r[0];
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: chanMutex.prototype.Lock }; } $f.$ptr = $ptr; $f._r = _r; $f.mu = mu; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(chanMutex).prototype.Lock = function() { return new chanMutex(this.$get()).Lock(); };
	chanMutex.prototype.TryLock = function(ctx) {
		var $ptr, _r, _r$1, _r$2, _selection, ctx, mu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _selection = $f._selection; ctx = $f.ctx; mu = $f.mu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mu = this.$val;
		_r = ctx.Done(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $select([[mu], [_r]]); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_selection = _r$1;
		/* */ if (_selection[0] === 0) { $s = 3; continue; }
		/* */ if (_selection[0] === 1) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_selection[0] === 0) { */ case 3:
			$s = -1; return $ifaceNil;
		/* } else if (_selection[0] === 1) { */ case 4:
			_r$2 = ctx.Err(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } */ case 5:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: chanMutex.prototype.TryLock }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._selection = _selection; $f.ctx = ctx; $f.mu = mu; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(chanMutex).prototype.TryLock = function(ctx) { return new chanMutex(this.$get()).TryLock(ctx); };
	chanMutex.prototype.Unlock = function() {
		var $ptr, mu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; mu = $f.mu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mu = this.$val;
		$r = $send(mu, $clone(new structType.ptr(), structType)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: chanMutex.prototype.Unlock }; } $f.$ptr = $ptr; $f.mu = mu; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(chanMutex).prototype.Unlock = function() { return new chanMutex(this.$get()).Unlock(); };
	Conn.ptr.prototype.addImport = function(id) {
		var $ptr, _entry, _key, _r, _r$1, _tuple, c, client, ent, id, rc, ref, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; c = $f.c; client = $f.client; ent = $f.ent; id = $f.id; rc = $f.rc; ref = $f.ref; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		/* */ if (c.imports === false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (c.imports === false) { */ case 1:
			c.imports = {};
			$s = 3; continue;
		/* } else { */ case 2:
			ent = (_entry = c.imports[importID.keyFor(id)], _entry !== undefined ? _entry.v : ptrType$17.nil);
			/* */ if (!(ent === ptrType$17.nil)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!(ent === ptrType$17.nil)) { */ case 4:
				ent.refs = ent.refs + (1) >> 0;
				_r = ent.rc.Ref(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 5:
		/* } */ case 3:
		client = new importClient.ptr(id, c, false);
		_r$1 = refcount.New(client); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		rc = _tuple[0];
		ref = _tuple[1];
		_key = id; (c.imports || $throwRuntimeError("assignment to entry in nil map"))[importID.keyFor(_key)] = { k: _key, v: new impent.ptr(rc, 1) };
		$s = -1; return ref;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.addImport }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.c = c; $f.client = client; $f.ent = ent; $f.id = id; $f.rc = rc; $f.ref = ref; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.addImport = function(id) { return this.$val.addImport(id); };
	Conn.ptr.prototype.popImport = function(id) {
		var $ptr, _entry, c, ent, id, refs;
		refs = 0;
		c = this;
		if (c.imports === false) {
			refs = 0;
			return refs;
		}
		ent = (_entry = c.imports[importID.keyFor(id)], _entry !== undefined ? _entry.v : ptrType$17.nil);
		if (ent === ptrType$17.nil) {
			refs = 0;
			return refs;
		}
		refs = ent.refs;
		delete c.imports[importID.keyFor(id)];
		refs = refs;
		return refs;
	};
	Conn.prototype.popImport = function(id) { return this.$val.popImport(id); };
	importClient.ptr.prototype.Call = function(cl) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _selection, ans, cl, err, ic, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _selection = $f._selection; ans = $f.ans; cl = $f.cl; err = $f.err; ic = $f.ic; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ic = this;
		_r = cl.Ctx.Done(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $select([[ic.conn.mu], [_r]]); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_selection = _r$1;
		/* */ if (_selection[0] === 0) { $s = 3; continue; }
		/* */ if (_selection[0] === 1) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_selection[0] === 0) { */ case 3:
			_r$2 = ic.conn.startWork(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			err = _r$2;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return capnp.ErrorAnswer(err);
			}
			$s = 5; continue;
		/* } else if (_selection[0] === 1) { */ case 4:
			_r$3 = cl.Ctx.Err(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = capnp.ErrorAnswer(_r$3); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return _r$4;
		/* } */ case 5:
		_r$5 = ic.lockedCall(cl); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		ans = _r$5;
		ic.conn.workers.Done();
		$r = new chanMutex(ic.conn.mu).Unlock(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return ans;
		/* */ } return; } if ($f === undefined) { $f = { $blk: importClient.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._selection = _selection; $f.ans = ans; $f.cl = cl; $f.err = err; $f.ic = ic; $f.$s = $s; $f.$r = $r; return $f;
	};
	importClient.prototype.Call = function(cl) { return this.$val.Call(cl); };
	importClient.ptr.prototype.lockedCall = function(cl) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _selection, _tuple, _tuple$1, _tuple$2, cl, err, ic, msg, msgCall, payload, q, target, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _selection = $f._selection; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; cl = $f.cl; err = $f.err; ic = $f.ic; msg = $f.msg; msgCall = $f.msgCall; payload = $f.payload; q = $f.q; target = $f.target; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ic = this;
		if (ic.closed) {
			$s = -1; return capnp.ErrorAnswer(errImportClosed);
		}
		q = ic.conn.newQuestion(cl.Ctx, cl.Method);
		_r = newMessage(sliceType$2.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		msg = $clone(_r, rpc.Message);
		_r$1 = $clone(msg, rpc.Message).NewCall(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		msgCall = $clone(_tuple[0], rpc.Call);
		$clone(msgCall, rpc.Call).SetQuestionId((q.id >>> 0));
		$clone(msgCall, rpc.Call).SetInterfaceId(cl.Method.InterfaceID);
		$clone(msgCall, rpc.Call).SetMethodId(cl.Method.MethodID);
		_r$2 = $clone(msgCall, rpc.Call).NewTarget(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		target = $clone(_tuple$1[0], rpc.MessageTarget);
		$clone(target, rpc.MessageTarget).SetImportedCap((ic.id >>> 0));
		_r$3 = $clone(msgCall, rpc.Call).NewParams(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$2 = _r$3;
		payload = $clone(_tuple$2[0], rpc.Payload);
		_r$4 = ic.conn.fillParams($clone(payload, rpc.Payload), cl); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		err = _r$4;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			ic.conn.popQuestion(q.id);
			$s = -1; return capnp.ErrorAnswer(err);
		}
		_r$5 = cl.Ctx.Done(); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$6 = ic.conn.bg.Done(); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = $select([[ic.conn.out, $clone(msg, rpc.Message)], [_r$5], [_r$6]]); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_selection = _r$7;
		/* */ if (_selection[0] === 0) { $s = 9; continue; }
		/* */ if (_selection[0] === 1) { $s = 10; continue; }
		/* */ if (_selection[0] === 2) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (_selection[0] === 0) { */ case 9:
			$s = 12; continue;
		/* } else if (_selection[0] === 1) { */ case 10:
			ic.conn.popQuestion(q.id);
			_r$8 = cl.Ctx.Err(); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$9 = capnp.ErrorAnswer(_r$8); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			$s = -1; return _r$9;
		/* } else if (_selection[0] === 2) { */ case 11:
			ic.conn.popQuestion(q.id);
			$s = -1; return capnp.ErrorAnswer($pkg.ErrConnClosed);
		/* } */ case 12:
		q.start();
		$s = -1; return q;
		/* */ } return; } if ($f === undefined) { $f = { $blk: importClient.ptr.prototype.lockedCall }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._selection = _selection; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.cl = cl; $f.err = err; $f.ic = ic; $f.msg = msg; $f.msgCall = msgCall; $f.payload = payload; $f.q = q; $f.target = target; $f.$s = $s; $f.$r = $r; return $f;
	};
	importClient.prototype.lockedCall = function(cl) { return this.$val.lockedCall(cl); };
	importClient.ptr.prototype.Close = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _selection, _tuple, closed, err, err$1, i, ic, mr, msg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _selection = $f._selection; _tuple = $f._tuple; closed = $f.closed; err = $f.err; err$1 = $f.err$1; i = $f.i; ic = $f.ic; mr = $f.mr; msg = $f.msg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ic = this;
		$r = new chanMutex(ic.conn.mu).Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = ic.conn.startWork(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 3:
			$r = new chanMutex(ic.conn.mu).Unlock(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return err;
		/* } */ case 4:
		closed = ic.closed;
		i = 0;
		if (!closed) {
			i = ic.conn.popImport(ic.id);
			ic.closed = true;
		}
		ic.conn.workers.Done();
		$r = new chanMutex(ic.conn.mu).Unlock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (closed) {
			$s = -1; return errImportClosed;
		}
		if (i === 0) {
			$s = -1; return $ifaceNil;
		}
		_r$1 = newMessage(sliceType$2.nil); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		msg = $clone(_r$1, rpc.Message);
		_r$2 = $clone(msg, rpc.Message).NewRelease(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		mr = $clone(_tuple[0], rpc.Release);
		err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		$clone(mr, rpc.Release).SetId((ic.id >>> 0));
		$clone(mr, rpc.Release).SetReferenceCount((i >>> 0));
		_r$3 = ic.conn.bg.Done(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = $select([[ic.conn.out, $clone(msg, rpc.Message)], [_r$3]]); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_selection = _r$4;
		/* */ if (_selection[0] === 0) { $s = 11; continue; }
		/* */ if (_selection[0] === 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (_selection[0] === 0) { */ case 11:
			$s = -1; return $ifaceNil;
		/* } else if (_selection[0] === 1) { */ case 12:
			$s = -1; return $pkg.ErrConnClosed;
		/* } */ case 13:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: importClient.ptr.prototype.Close }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._selection = _selection; $f._tuple = _tuple; $f.closed = closed; $f.err = err; $f.err$1 = err$1; $f.i = i; $f.ic = ic; $f.mr = mr; $f.msg = msg; $f.$s = $s; $f.$r = $r; return $f;
	};
	importClient.prototype.Close = function() { return this.$val.Close(); };
	Conn.ptr.prototype.findExport = function(id) {
		var $ptr, c, id, x;
		c = this;
		if ((id >> 0) >= c.exports.$length) {
			return ptrType$15.nil;
		}
		return (x = c.exports, ((id < 0 || id >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + id]));
	};
	Conn.prototype.findExport = function(id) { return this.$val.findExport(id); };
	Conn.ptr.prototype.addExport = function(client) {
		var $ptr, _i, _r, _r$1, _ref, _tuple, _v, c, client, e, export$2, i, id, rc, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; _v = $f._v; c = $f.c; client = $f.client; e = $f.e; export$2 = $f.export$2; i = $f.i; id = $f.id; rc = $f.rc; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_ref = c.exports;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			e = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!(!(e === ptrType$15.nil))) { _v = false; $s = 5; continue s; }
			_r = isSameClient(e.rc.Client, client); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				e.wireRefs = e.wireRefs + (1) >> 0;
				$s = -1; return (i >>> 0);
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		id = (c.exportID.next() >>> 0);
		_r$1 = refcount.New(client); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		rc = _tuple[0];
		client = _tuple[1];
		export$2 = new export$1.ptr(id, rc, client, 1);
		if ((id >> 0) === c.exports.$length) {
			c.exports = $append(c.exports, export$2);
		} else {
			(x = c.exports, ((id < 0 || id >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + id] = export$2));
		}
		$s = -1; return id;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.addExport }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f._v = _v; $f.c = c; $f.client = client; $f.e = e; $f.export$2 = export$2; $f.i = i; $f.id = id; $f.rc = rc; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.addExport = function(client) { return this.$val.addExport(client); };
	Conn.ptr.prototype.releaseExport = function(id, refs) {
		var $ptr, _r, c, e, err, id, refs, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; e = $f.e; err = $f.err; id = $f.id; refs = $f.refs; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		e = c.findExport(id);
		if (e === ptrType$15.nil) {
			$s = -1; return;
		}
		e.wireRefs = e.wireRefs - (refs) >> 0;
		if (e.wireRefs > 0) {
			$s = -1; return;
		}
		/* */ if (e.wireRefs < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (e.wireRefs < 0) { */ case 1:
			$r = c.errorf("warning: export %v has negative refcount (%d)", new sliceType$6([new exportID(id), new $Int(e.wireRefs)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r = e.client.Close(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 5:
			$r = c.errorf("export %v close: %v", new sliceType$6([new exportID(id), err])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		(x = c.exports, ((id < 0 || id >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + id] = ptrType$15.nil));
		c.exportID.remove((id >>> 0));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.releaseExport }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.e = e; $f.err = err; $f.id = id; $f.refs = refs; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.releaseExport = function(id, refs) { return this.$val.releaseExport(id, refs); };
	Conn.ptr.prototype.newEmbargo = function() {
		var $ptr, c, e, id, x;
		c = this;
		id = (c.embargoID.next() >>> 0);
		e = new $Chan(structType, 0);
		if ((id >> 0) === c.embargoes.$length) {
			c.embargoes = $append(c.embargoes, e);
		} else {
			(x = c.embargoes, ((id < 0 || id >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + id] = e));
		}
		return [id, e];
	};
	Conn.prototype.newEmbargo = function() { return this.$val.newEmbargo(); };
	Conn.ptr.prototype.disembargo = function(id) {
		var $ptr, c, e, id, x, x$1;
		c = this;
		if ((id >> 0) >= c.embargoes.$length) {
			return;
		}
		e = (x = c.embargoes, ((id < 0 || id >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + id]));
		if (e === $chanNil) {
			return;
		}
		$close(e);
		(x$1 = c.embargoes, ((id < 0 || id >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + id] = $chanNil));
		c.embargoID.remove((id >>> 0));
	};
	Conn.prototype.disembargo = function(id) { return this.$val.disembargo(id); };
	idgen.ptr.prototype.next = function() {
		var $ptr, gen, i, i$1, n, x, x$1;
		gen = this;
		n = gen.free.$length;
		if (n > 0) {
			i = (x = gen.free, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
			gen.free = $subslice(gen.free, 0, (n - 1 >> 0));
			return i;
		}
		i$1 = gen.i;
		gen.i = gen.i + (1) >>> 0;
		return i$1;
	};
	idgen.prototype.next = function() { return this.$val.next(); };
	idgen.ptr.prototype.remove = function(i) {
		var $ptr, gen, i;
		gen = this;
		gen.free = $append(gen.free, i);
	};
	idgen.prototype.remove = function(i) { return this.$val.remove(i); };
	StreamTransport = function(rwc) {
		var $ptr, _tuple, d, rwc, s;
		_tuple = $assertType(rwc, writeDeadlineSetter, true);
		d = _tuple[0];
		s = new streamTransport.ptr(rwc, d, ptrType$19.nil, capnp.NewDecoder(rwc), new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType$1.zero(), 0));
		s.wbuf.Grow(4096);
		s.enc = capnp.NewEncoder(s.wbuf);
		return s;
	};
	$pkg.StreamTransport = StreamTransport;
	streamTransport.ptr.prototype.SendMessage = function(ctx, msg) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, ctx, d, err, err$1, msg, ok, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; ctx = $f.ctx; d = $f.d; err = $f.err; err$1 = $f.err$1; msg = $f.msg; ok = $f.ok; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.wbuf.Reset();
		_r = s.enc.Encode($clone(msg.Struct, capnp.Struct).Segment().Message()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		/* */ if (!($interfaceIsEqual(s.deadline, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(s.deadline, $ifaceNil))) { */ case 2:
			_r$1 = ctx.Deadline(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			d = $clone(_tuple[0], time.Time);
			ok = _tuple[1];
			/* */ if (ok) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (ok) { */ case 5:
				_r$2 = s.deadline.SetWriteDeadline($clone(d, time.Time)); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				$s = 7; continue;
			/* } else { */ case 6:
				_r$3 = s.deadline.SetWriteDeadline(new time.Time.ptr(new $Int64(0, 0), 0, ptrType$21.nil)); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
			/* } */ case 7:
		/* } */ case 3:
		_r$4 = s.rwc.Write(s.wbuf.Bytes()); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$1 = _r$4;
		err$1 = _tuple$1[1];
		$s = -1; return err$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: streamTransport.ptr.prototype.SendMessage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.ctx = ctx; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.msg = msg; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	streamTransport.prototype.SendMessage = function(ctx, msg) { return this.$val.SendMessage(ctx, msg); };
	streamTransport.ptr.prototype.RecvMessage = function(ctx) {
		var $ptr, _r, _r$1, _r$2, _r$3, _selection, ctx, err, msg, read, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _selection = $f._selection; ctx = $f.ctx; err = $f.err; msg = $f.msg; read = $f.read; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = [err];
		msg = [msg];
		read = [read];
		s = [s];
		s[0] = this;
		msg[0] = ptrType$16.nil;
		err[0] = $ifaceNil;
		read[0] = new $Chan(structType, 0);
		$go((function(err, msg, read, s) { return function $b() {
			var $ptr, _r, _tuple, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = s[0].dec.Decode(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			msg[0] = _tuple[0];
			err[0] = _tuple[1];
			$close(read[0]);
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.$s = $s; $f.$r = $r; return $f;
		}; })(err, msg, read, s), []);
		_r = ctx.Done(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $select([[read[0]], [_r]]); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_selection = _r$1;
		/* */ if (_selection[0] === 0) { $s = 3; continue; }
		/* */ if (_selection[0] === 1) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_selection[0] === 0) { */ case 3:
			$s = 5; continue;
		/* } else if (_selection[0] === 1) { */ case 4:
			_r$2 = ctx.Err(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return [new rpc.Message.ptr(new capnp.Struct.ptr(ptrType$2.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), _r$2];
		/* } */ case 5:
		if (!($interfaceIsEqual(err[0], $ifaceNil))) {
			$s = -1; return [new rpc.Message.ptr(new capnp.Struct.ptr(ptrType$2.nil, 0, new capnp.ObjectSize.ptr(0, 0), 0, 0)), err[0]];
		}
		_r$3 = rpc.ReadRootMessage(msg[0]); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: streamTransport.ptr.prototype.RecvMessage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._selection = _selection; $f.ctx = ctx; $f.err = err; $f.msg = msg; $f.read = read; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	streamTransport.prototype.RecvMessage = function(ctx) { return this.$val.RecvMessage(ctx); };
	streamTransport.ptr.prototype.Close = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.rwc.Close(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: streamTransport.ptr.prototype.Close }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	streamTransport.prototype.Close = function() { return this.$val.Close(); };
	Conn.ptr.prototype.dispatchSend = function() {
		var $ptr, _r, _r$1, _r$2, _selection, c, err, msg, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _selection = $f._selection; c = $f.c; err = $f.err; msg = $f.msg; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		c = this;
		$deferred.push([$methodVal(c.workers, "Done"), []]);
		/* while (true) { */ case 1:
			_r = c.bg.Done(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = $select([[c.out], [_r]]); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_selection = _r$1;
			/* */ if (_selection[0] === 0) { $s = 5; continue; }
			/* */ if (_selection[0] === 1) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_selection[0] === 0) { */ case 5:
				msg = $clone(_selection[1][0], rpc.Message);
				_r$2 = c.transport.SendMessage(c.bg, $clone(msg, rpc.Message)); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				err = _r$2;
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 9:
					$r = c.errorf("writing %v: %v", new sliceType$6([new rpc.Message_Which($clone(msg, rpc.Message).Which()), err])); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 10:
				$s = 7; continue;
			/* } else if (_selection[0] === 1) { */ case 6:
				$s = -1; return;
			/* } */ case 7:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.dispatchSend }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._selection = _selection; $f.c = c; $f.err = err; $f.msg = msg; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Conn.prototype.dispatchSend = function() { return this.$val.dispatchSend(); };
	Conn.ptr.prototype.sendMessage = function(msg) {
		var $ptr, _r, _r$1, _selection, c, msg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _selection = $f._selection; c = $f.c; msg = $f.msg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = c.bg.Done(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $select([[c.out, $clone(msg, rpc.Message)], [_r]]); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_selection = _r$1;
		/* */ if (_selection[0] === 0) { $s = 3; continue; }
		/* */ if (_selection[0] === 1) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_selection[0] === 0) { */ case 3:
			$s = -1; return $ifaceNil;
		/* } else if (_selection[0] === 1) { */ case 4:
			$s = -1; return $pkg.ErrConnClosed;
		/* } */ case 5:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.sendMessage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._selection = _selection; $f.c = c; $f.msg = msg; $f.$s = $s; $f.$r = $r; return $f;
	};
	Conn.prototype.sendMessage = function(msg) { return this.$val.sendMessage(msg); };
	Conn.ptr.prototype.dispatchRecv = function() {
		var $ptr, _r, _r$1, _tuple, c, err, msg, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; c = $f.c; err = $f.err; msg = $f.msg; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		c = this;
		$deferred.push([$methodVal(c.workers, "Done"), []]);
		/* while (true) { */ case 1:
			_r = c.transport.RecvMessage(c.bg); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			msg = $clone(_tuple[0], rpc.Message);
			err = _tuple[1];
			/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 4; continue; }
			_r$1 = isTemporaryError(err); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 4:
				$r = c.handleMessage($clone(msg, rpc.Message)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 7; continue;
			/* } else if (_r$1) { */ case 5:
				$r = c.errorf("read temporary error: %v", new sliceType$6([err])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 7; continue;
			/* } else { */ case 6:
				$r = c.shutdown(err); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 7:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.dispatchRecv }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.msg = msg; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Conn.prototype.dispatchRecv = function() { return this.$val.dispatchRecv(); };
	copyMessage = function(msg) {
		var $ptr, _i, _r, _r$1, _ref, _tuple, err, i, msg, n, s, segments, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; err = $f.err; i = $f.i; msg = $f.msg; n = $f.n; s = $f.s; segments = $f.segments; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = msg.NumSegments(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		segments = $makeSlice(sliceType$14, $flatten64(n));
		_ref = segments;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			_r$1 = msg.Segment((i >>> 0)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			s = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$panic(err);
			}
			((i < 0 || i >= segments.$length) ? ($throwRuntimeError("index out of range"), undefined) : segments.$array[segments.$offset + i] = $makeSlice(sliceType$2, s.Data().$length));
			$copySlice(((i < 0 || i >= segments.$length) ? ($throwRuntimeError("index out of range"), undefined) : segments.$array[segments.$offset + i]), s.Data());
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return new capnp.Message.ptr(new capnp.ReadLimiter.ptr(new $Uint64(0, 0)), new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0), capnp.MultiSegment(segments), sliceType$8.nil, new $Uint64(0, 0), 0, new sync.Mutex.ptr(0, 0), false, new capnp.Segment.ptr(ptrType$16.nil, 0, sliceType$2.nil));
		/* */ } return; } if ($f === undefined) { $f = { $blk: copyMessage }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f.err = err; $f.i = i; $f.msg = msg; $f.n = n; $f.s = s; $f.segments = segments; $f.$s = $s; $f.$r = $r; return $f;
	};
	copyRPCMessage = function(m) {
		var $ptr, _r, _r$1, _tuple, err, m, mm, rpcMsg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; m = $f.m; mm = $f.mm; rpcMsg = $f.rpcMsg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = copyMessage($clone(m.Struct, capnp.Struct).Segment().Message()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		mm = _r;
		_r$1 = rpc.ReadRootMessage(mm); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		rpcMsg = $clone(_tuple[0], rpc.Message);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		$s = -1; return rpcMsg;
		/* */ } return; } if ($f === undefined) { $f = { $blk: copyRPCMessage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.m = m; $f.mm = mm; $f.rpcMsg = rpcMsg; $f.$s = $s; $f.$r = $r; return $f;
	};
	isTemporaryError = function(e) {
		var $ptr, _r, _tuple, _v, e, ok, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _v = $f._v; e = $f.e; ok = $f.ok; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(e, temp, true);
		t = _tuple[0];
		ok = _tuple[1];
		if (!(ok)) { _v = false; $s = 1; continue s; }
		_r = t.Temporary(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: isTemporaryError }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._v = _v; $f.e = e; $f.ok = ok; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType.methods = [{prop: "fulfill", name: "fulfill", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([capnp.Ptr], [$error], false)}, {prop: "reject", name: "reject", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([$error], [$error], false)}, {prop: "emptyQueue", name: "emptyQueue", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([capnp.Ptr], [mapType, $error], false)}, {prop: "queueCallLocked", name: "queueCallLocked", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([ptrType$6, pcall], [$error], false)}, {prop: "queueDisembargo", name: "queueDisembargo", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([sliceType$4, embargoID, rpc.MessageTarget], [$Bool, $error], false)}, {prop: "pipelineClient", name: "pipelineClient", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([sliceType$4], [capnp.Client], false)}];
	ptrType$3.methods = [{prop: "pushCallLocked", name: "pushCallLocked", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([ptrType$6], [capnp.Answer], false)}, {prop: "pushEmbargoLocked", name: "pushEmbargoLocked", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([embargoID, rpc.MessageTarget], [$error], false)}, {prop: "flushQueue", name: "flushQueue", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([], [], false)}, {prop: "handle", name: "handle", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([ptrType$22], [], false)}, {prop: "isPassthrough", name: "isPassthrough", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([ptrType$6], [capnp.Answer], false)}, {prop: "tryQueue", name: "tryQueue", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([ptrType$6], [capnp.Answer], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "rejectQueue", name: "rejectQueue", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([], [$error], false)}];
	ptrType$22.methods = [{prop: "which", name: "which", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([], [$Int], false)}];
	qcallList.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([$Int], [], false)}];
	ptrType$11.methods = [{prop: "Call", name: "Call", pkg: "", typ: $funcType([ptrType$6], [capnp.Answer], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	Exception.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Abort.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	bootstrapError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$23.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	defaultLogger.methods = [{prop: "Infof", name: "Infof", pkg: "", typ: $funcType([context.Context, $String, sliceType$6], [], true)}, {prop: "Errorf", name: "Errorf", pkg: "", typ: $funcType([context.Context, $String, sliceType$6], [], true)}];
	ptrType$14.methods = [{prop: "start", name: "start", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([], [], false)}, {prop: "fulfill", name: "fulfill", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([capnp.Ptr], [], false)}, {prop: "reject", name: "reject", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([$error], [], false)}, {prop: "cancel", name: "cancel", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([$error], [$Bool], false)}, {prop: "addPromise", name: "addPromise", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([sliceType$4], [], false)}, {prop: "Struct", name: "Struct", pkg: "", typ: $funcType([], [capnp.Struct, $error], false)}, {prop: "PipelineCall", name: "PipelineCall", pkg: "", typ: $funcType([sliceType$4, ptrType$6], [capnp.Answer], false)}, {prop: "lockedPipelineCall", name: "lockedPipelineCall", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([sliceType$4, ptrType$6], [capnp.Answer], false)}, {prop: "PipelineClose", name: "PipelineClose", pkg: "", typ: $funcType([sliceType$4], [$error], false)}];
	ptrType$10.methods = [{prop: "push", name: "push", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([ptrType$6], [capnp.Answer], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([ptrType$6], [capnp.Answer], false)}, {prop: "tryQueue", name: "tryQueue", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([ptrType$6], [capnp.Answer], false)}, {prop: "isPassthrough", name: "isPassthrough", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([], [$Bool], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "flushQueue", name: "flushQueue", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([], [], false)}];
	ecallList.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([$Int], [], false)}];
	ptrType$1.methods = [{prop: "insertAnswer", name: "insertAnswer", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([answerID, context.CancelFunc], [ptrType], false)}, {prop: "popAnswer", name: "popAnswer", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([answerID], [ptrType], false)}, {prop: "lockedCall", name: "lockedCall", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([capnp.Client, ptrType$6], [capnp.Answer], false)}, {prop: "descriptorForClient", name: "descriptorForClient", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([rpc.CapDescriptor, capnp.Client], [$error], false)}, {prop: "infof", name: "infof", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([$String, sliceType$6], [], true)}, {prop: "errorf", name: "errorf", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([$String, sliceType$6], [], true)}, {prop: "newQuestion", name: "newQuestion", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([context.Context, ptrType$7], [ptrType$14], false)}, {prop: "findQuestion", name: "findQuestion", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([questionID], [ptrType$14], false)}, {prop: "popQuestion", name: "popQuestion", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([questionID], [ptrType$14], false)}, {prop: "Wait", name: "Wait", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Done", name: "Done", pkg: "", typ: $funcType([], [chanType$2], false)}, {prop: "Err", name: "Err", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "shutdown", name: "shutdown", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([$error], [], false)}, {prop: "abort", name: "abort", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([$error], [], false)}, {prop: "startWork", name: "startWork", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([], [$error], false)}, {prop: "teardown", name: "teardown", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([rpc.Message], [], false)}, {prop: "Bootstrap", name: "Bootstrap", pkg: "", typ: $funcType([context.Context], [capnp.Client], false)}, {prop: "handleMessage", name: "handleMessage", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([rpc.Message], [], false)}, {prop: "fillParams", name: "fillParams", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([rpc.Payload, ptrType$6], [$error], false)}, {prop: "handleReturnMessage", name: "handleReturnMessage", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([rpc.Message], [$error], false)}, {prop: "populateMessageCapTable", name: "populateMessageCapTable", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([rpc.Payload], [$error], false)}, {prop: "makeCapTable", name: "makeCapTable", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([ptrType$2], [rpc.CapDescriptor_List, $error], false)}, {prop: "handleBootstrapMessage", name: "handleBootstrapMessage", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([answerID], [$error], false)}, {prop: "handleCallMessage", name: "handleCallMessage", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([rpc.Message], [$error], false)}, {prop: "routeCallMessage", name: "routeCallMessage", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([ptrType, rpc.MessageTarget, ptrType$6], [$error], false)}, {prop: "handleDisembargoMessage", name: "handleDisembargoMessage", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([rpc.Message], [$error], false)}, {prop: "newContext", name: "newContext", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([], [context.Context, context.CancelFunc], false)}, {prop: "addImport", name: "addImport", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([importID], [capnp.Client], false)}, {prop: "popImport", name: "popImport", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([importID], [$Int], false)}, {prop: "findExport", name: "findExport", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([exportID], [ptrType$15], false)}, {prop: "addExport", name: "addExport", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([capnp.Client], [exportID], false)}, {prop: "releaseExport", name: "releaseExport", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([exportID, $Int], [], false)}, {prop: "newEmbargo", name: "newEmbargo", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([], [embargoID, embargo], false)}, {prop: "disembargo", name: "disembargo", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([embargoID], [], false)}, {prop: "dispatchSend", name: "dispatchSend", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([], [], false)}, {prop: "sendMessage", name: "sendMessage", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([rpc.Message], [$error], false)}, {prop: "dispatchRecv", name: "dispatchRecv", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([], [], false)}];
	chanMutex.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "TryLock", name: "TryLock", pkg: "", typ: $funcType([context.Context], [$error], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$4.methods = [{prop: "Call", name: "Call", pkg: "", typ: $funcType([ptrType$6], [capnp.Answer], false)}, {prop: "lockedCall", name: "lockedCall", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([ptrType$6], [capnp.Answer], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	ptrType$25.methods = [{prop: "next", name: "next", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([], [$Uint32], false)}, {prop: "remove", name: "remove", pkg: "zombiezen.com/go/capnproto2/rpc", typ: $funcType([$Uint32], [], false)}];
	ptrType$26.methods = [{prop: "SendMessage", name: "SendMessage", pkg: "", typ: $funcType([context.Context, rpc.Message], [$error], false)}, {prop: "RecvMessage", name: "RecvMessage", pkg: "", typ: $funcType([context.Context], [rpc.Message, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	answer.init("zombiezen.com/go/capnproto2/rpc", [{prop: "id", name: "id", exported: false, typ: answerID, tag: ""}, {prop: "cancel", name: "cancel", exported: false, typ: context.CancelFunc, tag: ""}, {prop: "resultCaps", name: "resultCaps", exported: false, typ: sliceType, tag: ""}, {prop: "conn", name: "conn", exported: false, typ: ptrType$1, tag: ""}, {prop: "resolved", name: "resolved", exported: false, typ: chanType$1, tag: ""}, {prop: "mu", name: "mu", exported: false, typ: sync.RWMutex, tag: ""}, {prop: "obj", name: "obj", exported: false, typ: capnp.Ptr, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "done", name: "done", exported: false, typ: $Bool, tag: ""}, {prop: "queue", name: "queue", exported: false, typ: sliceType$1, tag: ""}]);
	queueClient.init("zombiezen.com/go/capnproto2/rpc", [{prop: "client", name: "client", exported: false, typ: capnp.Client, tag: ""}, {prop: "conn", name: "conn", exported: false, typ: ptrType$1, tag: ""}, {prop: "mu", name: "mu", exported: false, typ: sync.RWMutex, tag: ""}, {prop: "q", name: "q", exported: false, typ: queue.Queue, tag: ""}, {prop: "calls", name: "calls", exported: false, typ: qcallList, tag: ""}]);
	pcall.init("zombiezen.com/go/capnproto2/rpc", [{prop: "transform", name: "transform", exported: false, typ: sliceType$4, tag: ""}, {prop: "qcall", name: "", exported: false, typ: qcall, tag: ""}]);
	qcall.init("zombiezen.com/go/capnproto2/rpc", [{prop: "a", name: "a", exported: false, typ: ptrType, tag: ""}, {prop: "f", name: "f", exported: false, typ: ptrType$5, tag: ""}, {prop: "call", name: "call", exported: false, typ: ptrType$6, tag: ""}, {prop: "embargoID", name: "embargoID", exported: false, typ: embargoID, tag: ""}, {prop: "embargoTarget", name: "embargoTarget", exported: false, typ: rpc.MessageTarget, tag: ""}]);
	qcallList.init(qcall);
	localAnswerClient.init("zombiezen.com/go/capnproto2/rpc", [{prop: "a", name: "a", exported: false, typ: ptrType, tag: ""}, {prop: "transform", name: "transform", exported: false, typ: sliceType$4, tag: ""}]);
	Exception.init("", [{prop: "Exception", name: "", exported: true, typ: rpc.Exception, tag: ""}]);
	Abort.init("", [{prop: "Exception", name: "", exported: true, typ: rpc.Exception, tag: ""}]);
	bootstrapError.init("zombiezen.com/go/capnproto2/rpc", [{prop: "err", name: "err", exported: false, typ: $error, tag: ""}]);
	questionError.init("zombiezen.com/go/capnproto2/rpc", [{prop: "id", name: "id", exported: false, typ: questionID, tag: ""}, {prop: "method", name: "method", exported: false, typ: ptrType$7, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}]);
	Logger.init([{prop: "Errorf", name: "Errorf", pkg: "", typ: $funcType([context.Context, $String, sliceType$6], [], true)}, {prop: "Infof", name: "Infof", pkg: "", typ: $funcType([context.Context, $String, sliceType$6], [], true)}]);
	defaultLogger.init("", []);
	question.init("zombiezen.com/go/capnproto2/rpc", [{prop: "id", name: "id", exported: false, typ: questionID, tag: ""}, {prop: "ctx", name: "ctx", exported: false, typ: context.Context, tag: ""}, {prop: "conn", name: "conn", exported: false, typ: ptrType$1, tag: ""}, {prop: "method", name: "method", exported: false, typ: ptrType$7, tag: ""}, {prop: "paramCaps", name: "paramCaps", exported: false, typ: sliceType, tag: ""}, {prop: "resolved", name: "resolved", exported: false, typ: chanType$1, tag: ""}, {prop: "derived", name: "derived", exported: false, typ: sliceType$7, tag: ""}, {prop: "mu", name: "mu", exported: false, typ: sync.RWMutex, tag: ""}, {prop: "obj", name: "obj", exported: false, typ: capnp.Ptr, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "state", name: "state", exported: false, typ: questionState, tag: ""}]);
	embargoClient.init("zombiezen.com/go/capnproto2/rpc", [{prop: "cancel", name: "cancel", exported: false, typ: chanType$2, tag: ""}, {prop: "client", name: "client", exported: false, typ: capnp.Client, tag: ""}, {prop: "embargo", name: "embargo", exported: false, typ: embargo, tag: ""}, {prop: "mu", name: "mu", exported: false, typ: sync.RWMutex, tag: ""}, {prop: "q", name: "q", exported: false, typ: queue.Queue, tag: ""}, {prop: "calls", name: "calls", exported: false, typ: ecallList, tag: ""}]);
	ecall.init("zombiezen.com/go/capnproto2/rpc", [{prop: "call", name: "call", exported: false, typ: ptrType$6, tag: ""}, {prop: "f", name: "f", exported: false, typ: ptrType$5, tag: ""}]);
	ecallList.init(ecall);
	Conn.init("zombiezen.com/go/capnproto2/rpc", [{prop: "transport", name: "transport", exported: false, typ: Transport, tag: ""}, {prop: "log", name: "log", exported: false, typ: Logger, tag: ""}, {prop: "mainFunc", name: "mainFunc", exported: false, typ: funcType, tag: ""}, {prop: "mainCloser", name: "mainCloser", exported: false, typ: io.Closer, tag: ""}, {prop: "death", name: "death", exported: false, typ: chanType$1, tag: ""}, {prop: "out", name: "out", exported: false, typ: chanType$3, tag: ""}, {prop: "bg", name: "bg", exported: false, typ: context.Context, tag: ""}, {prop: "bgCancel", name: "bgCancel", exported: false, typ: context.CancelFunc, tag: ""}, {prop: "workers", name: "workers", exported: false, typ: sync.WaitGroup, tag: ""}, {prop: "stateMu", name: "stateMu", exported: false, typ: sync.RWMutex, tag: ""}, {prop: "state", name: "state", exported: false, typ: connState, tag: ""}, {prop: "closeErr", name: "closeErr", exported: false, typ: $error, tag: ""}, {prop: "mu", name: "mu", exported: false, typ: chanMutex, tag: ""}, {prop: "questions", name: "questions", exported: false, typ: sliceType$10, tag: ""}, {prop: "questionID", name: "questionID", exported: false, typ: idgen, tag: ""}, {prop: "exports", name: "exports", exported: false, typ: sliceType$12, tag: ""}, {prop: "exportID", name: "exportID", exported: false, typ: idgen, tag: ""}, {prop: "embargoes", name: "embargoes", exported: false, typ: sliceType$13, tag: ""}, {prop: "embargoID", name: "embargoID", exported: false, typ: idgen, tag: ""}, {prop: "answers", name: "answers", exported: false, typ: mapType$1, tag: ""}, {prop: "imports", name: "imports", exported: false, typ: mapType$2, tag: ""}]);
	connParams.init("zombiezen.com/go/capnproto2/rpc", [{prop: "log", name: "log", exported: false, typ: Logger, tag: ""}, {prop: "mainFunc", name: "mainFunc", exported: false, typ: funcType, tag: ""}, {prop: "mainCloser", name: "mainCloser", exported: false, typ: io.Closer, tag: ""}, {prop: "sendBufferSize", name: "sendBufferSize", exported: false, typ: $Int, tag: ""}]);
	ConnOption.init("zombiezen.com/go/capnproto2/rpc", [{prop: "f", name: "f", exported: false, typ: funcType$1, tag: ""}]);
	chanMutex.init(structType, false, false);
	impent.init("zombiezen.com/go/capnproto2/rpc", [{prop: "rc", name: "rc", exported: false, typ: ptrType$18, tag: ""}, {prop: "refs", name: "refs", exported: false, typ: $Int, tag: ""}]);
	importClient.init("zombiezen.com/go/capnproto2/rpc", [{prop: "id", name: "id", exported: false, typ: importID, tag: ""}, {prop: "conn", name: "conn", exported: false, typ: ptrType$1, tag: ""}, {prop: "closed", name: "closed", exported: false, typ: $Bool, tag: ""}]);
	export$1.init("zombiezen.com/go/capnproto2/rpc", [{prop: "id", name: "id", exported: false, typ: exportID, tag: ""}, {prop: "rc", name: "rc", exported: false, typ: ptrType$18, tag: ""}, {prop: "client", name: "client", exported: false, typ: capnp.Client, tag: ""}, {prop: "wireRefs", name: "wireRefs", exported: false, typ: $Int, tag: ""}]);
	embargo.init(structType, false, true);
	idgen.init("zombiezen.com/go/capnproto2/rpc", [{prop: "i", name: "i", exported: false, typ: $Uint32, tag: ""}, {prop: "free", name: "free", exported: false, typ: sliceType$11, tag: ""}]);
	Transport.init([{prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "RecvMessage", name: "RecvMessage", pkg: "", typ: $funcType([context.Context], [rpc.Message, $error], false)}, {prop: "SendMessage", name: "SendMessage", pkg: "", typ: $funcType([context.Context, rpc.Message], [$error], false)}]);
	streamTransport.init("zombiezen.com/go/capnproto2/rpc", [{prop: "rwc", name: "rwc", exported: false, typ: io.ReadWriteCloser, tag: ""}, {prop: "deadline", name: "deadline", exported: false, typ: writeDeadlineSetter, tag: ""}, {prop: "enc", name: "enc", exported: false, typ: ptrType$19, tag: ""}, {prop: "dec", name: "dec", exported: false, typ: ptrType$20, tag: ""}, {prop: "wbuf", name: "wbuf", exported: false, typ: bytes.Buffer, tag: ""}]);
	writeDeadlineSetter.init([{prop: "SetWriteDeadline", name: "SetWriteDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}]);
	temp.init([{prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = context.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = log.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = capnp.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fulfiller.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = queue.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = refcount.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rpc.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		errQueueFull = errors.New("rpc: pipeline queue full");
		errQueueCallCancel = errors.New("rpc: queued call canceled");
		errDisembargoOngoingAnswer = errors.New("rpc: disembargo attempted on in-progress answer");
		errDisembargoNonImport = errors.New("rpc: disembargo attempted on non-import capability");
		errDisembargoMissingAnswer = errors.New("rpc: disembargo attempted on missing answer (finished too early?)");
		$pkg.ErrConnClosed = errors.New("rpc: connection closed");
		errQuestionReused = errors.New("rpc: question ID reused");
		errNoMainInterface = errors.New("rpc: no bootstrap interface");
		errBadTarget = errors.New("rpc: target not found");
		errShutdown = errors.New("rpc: shutdown");
		errUnimplemented = errors.New("rpc: remote used unimplemented protocol feature");
		errImportClosed = errors.New("rpc: call on closed import");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
	(function() {
/*! peerjs build:0.3.13, production. Copyright(c) 2013 Michelle Bu <michelle@michellebu.com> */!function a(b,c,d){function e(g,h){if(!c[g]){if(!b[g]){var i="function"==typeof require&&require;if(!h&&i)return i(g,!0);if(f)return f(g,!0);var j=new Error("Cannot find module '"+g+"'");throw j.code="MODULE_NOT_FOUND",j}var k=c[g]={exports:{}};b[g][0].call(k.exports,function(a){var c=b[g][1][a];return e(c?c:a)},k,k.exports,a,b,c,d)}return c[g].exports}for(var f="function"==typeof require&&require,g=0;g<d.length;g++)e(d[g]);return e}({1:[function(a,b){b.exports.RTCSessionDescription=window.RTCSessionDescription||window.mozRTCSessionDescription,b.exports.RTCPeerConnection=window.RTCPeerConnection||window.mozRTCPeerConnection||window.webkitRTCPeerConnection,b.exports.RTCIceCandidate=window.RTCIceCandidate||window.mozRTCIceCandidate},{}],2:[function(a,b){function c(a,b,g){return this instanceof c?(e.call(this),this.options=d.extend({serialization:"binary",reliable:!1},g),this.open=!1,this.type="data",this.peer=a,this.provider=b,this.id=this.options.connectionId||c._idPrefix+d.randomToken(),this.label=this.options.label||this.id,this.metadata=this.options.metadata,this.serialization=this.options.serialization,this.reliable=this.options.reliable,this._buffer=[],this._buffering=!1,this.bufferSize=0,this._chunkedData={},this.options._payload&&(this._peerBrowser=this.options._payload.browser),void f.startConnection(this,this.options._payload||{originator:!0})):new c(a,b,g)}var d=a("./util"),e=a("eventemitter3"),f=a("./negotiator"),g=a("reliable");d.inherits(c,e),c._idPrefix="dc_",c.prototype.initialize=function(a){this._dc=this.dataChannel=a,this._configureDataChannel()},c.prototype._configureDataChannel=function(){var a=this;d.supports.sctp&&(this._dc.binaryType="arraybuffer"),this._dc.onopen=function(){d.log("Data channel connection success"),a.open=!0,a.emit("open")},!d.supports.sctp&&this.reliable&&(this._reliable=new g(this._dc,d.debug)),this._reliable?this._reliable.onmessage=function(b){a.emit("data",b)}:this._dc.onmessage=function(b){a._handleDataMessage(b)},this._dc.onclose=function(){d.log("DataChannel closed for:",a.peer),a.close()}},c.prototype._handleDataMessage=function(a){var b=this,c=a.data,e=c.constructor;if("binary"===this.serialization||"binary-utf8"===this.serialization){if(e===Blob)return void d.blobToArrayBuffer(c,function(a){c=d.unpack(a),b.emit("data",c)});if(e===ArrayBuffer)c=d.unpack(c);else if(e===String){var f=d.binaryStringToArrayBuffer(c);c=d.unpack(f)}}else"json"===this.serialization&&(c=JSON.parse(c));if(c.__peerData){var g=c.__peerData,h=this._chunkedData[g]||{data:[],count:0,total:c.total};return h.data[c.n]=c.data,h.count+=1,h.total===h.count&&(delete this._chunkedData[g],c=new Blob(h.data),this._handleDataMessage({data:c})),void(this._chunkedData[g]=h)}this.emit("data",c)},c.prototype.close=function(){this.open&&(this.open=!1,f.cleanup(this),this.emit("close"))},c.prototype.send=function(a,b){if(!this.open)return void this.emit("error",new Error("Connection is not open. You should listen for the `open` event before sending messages."));if(this._reliable)return void this._reliable.send(a);var c=this;if("json"===this.serialization)this._bufferedSend(JSON.stringify(a));else if("binary"===this.serialization||"binary-utf8"===this.serialization){var e=d.pack(a),f=d.chunkedBrowsers[this._peerBrowser]||d.chunkedBrowsers[d.browser];if(f&&!b&&e.size>d.chunkedMTU)return void this._sendChunks(e);d.supports.sctp?d.supports.binaryBlob?this._bufferedSend(e):d.blobToArrayBuffer(e,function(a){c._bufferedSend(a)}):d.blobToBinaryString(e,function(a){c._bufferedSend(a)})}else this._bufferedSend(a)},c.prototype._bufferedSend=function(a){(this._buffering||!this._trySend(a))&&(this._buffer.push(a),this.bufferSize=this._buffer.length)},c.prototype._trySend=function(a){try{this._dc.send(a)}catch(b){this._buffering=!0;var c=this;return setTimeout(function(){c._buffering=!1,c._tryBuffer()},100),!1}return!0},c.prototype._tryBuffer=function(){if(0!==this._buffer.length){var a=this._buffer[0];this._trySend(a)&&(this._buffer.shift(),this.bufferSize=this._buffer.length,this._tryBuffer())}},c.prototype._sendChunks=function(a){for(var b=d.chunk(a),c=0,e=b.length;e>c;c+=1){var a=b[c];this.send(a,!0)}},c.prototype.handleMessage=function(a){var b=a.payload;switch(a.type){case"ANSWER":this._peerBrowser=b.browser,f.handleSDP(a.type,this,b.sdp);break;case"CANDIDATE":f.handleCandidate(this,b.candidate);break;default:d.warn("Unrecognized message type:",a.type,"from peer:",this.peer)}},b.exports=c},{"./negotiator":5,"./util":8,eventemitter3:9,reliable:12}],3:[function(a){window.Socket=a("./socket"),window.MediaConnection=a("./mediaconnection"),window.DataConnection=a("./dataconnection"),window.Peer=a("./peer"),window.RTCPeerConnection=a("./adapter").RTCPeerConnection,window.RTCSessionDescription=a("./adapter").RTCSessionDescription,window.RTCIceCandidate=a("./adapter").RTCIceCandidate,window.Negotiator=a("./negotiator"),window.util=a("./util"),window.BinaryPack=a("js-binarypack")},{"./adapter":1,"./dataconnection":2,"./mediaconnection":4,"./negotiator":5,"./peer":6,"./socket":7,"./util":8,"js-binarypack":10}],4:[function(a,b){function c(a,b,g){return this instanceof c?(e.call(this),this.options=d.extend({},g),this.open=!1,this.type="media",this.peer=a,this.provider=b,this.metadata=this.options.metadata,this.localStream=this.options._stream,this.id=this.options.connectionId||c._idPrefix+d.randomToken(),void(this.localStream&&f.startConnection(this,{_stream:this.localStream,originator:!0}))):new c(a,b,g)}var d=a("./util"),e=a("eventemitter3"),f=a("./negotiator");d.inherits(c,e),c._idPrefix="mc_",c.prototype.addStream=function(a){d.log("Receiving stream",a),this.remoteStream=a,this.emit("stream",a)},c.prototype.handleMessage=function(a){var b=a.payload;switch(a.type){case"ANSWER":f.handleSDP(a.type,this,b.sdp),this.open=!0;break;case"CANDIDATE":f.handleCandidate(this,b.candidate);break;default:d.warn("Unrecognized message type:",a.type,"from peer:",this.peer)}},c.prototype.answer=function(a){if(this.localStream)return void d.warn("Local stream already exists on this MediaConnection. Are you answering a call twice?");this.options._payload._stream=a,this.localStream=a,f.startConnection(this,this.options._payload);for(var b=this.provider._getMessages(this.id),c=0,e=b.length;e>c;c+=1)this.handleMessage(b[c]);this.open=!0},c.prototype.close=function(){this.open&&(this.open=!1,f.cleanup(this),this.emit("close"))},b.exports=c},{"./negotiator":5,"./util":8,eventemitter3:9}],5:[function(a,b){var c=a("./util"),d=a("./adapter").RTCPeerConnection,e=a("./adapter").RTCSessionDescription,f=a("./adapter").RTCIceCandidate,g={pcs:{data:{},media:{}},queue:[]};g._idPrefix="pc_",g.startConnection=function(a,b){var d=g._getPeerConnection(a,b);if("media"===a.type&&b._stream&&d.addStream(b._stream),a.pc=a.peerConnection=d,b.originator){if("data"===a.type){var e={};c.supports.sctp||(e={reliable:b.reliable});var f=d.createDataChannel(a.label,e);a.initialize(f)}c.supports.onnegotiationneeded||g._makeOffer(a)}else g.handleSDP("OFFER",a,b.sdp)},g._getPeerConnection=function(a,b){g.pcs[a.type]||c.error(a.type+" is not a valid connection type. Maybe you overrode the `type` property somewhere."),g.pcs[a.type][a.peer]||(g.pcs[a.type][a.peer]={});{var d;g.pcs[a.type][a.peer]}return b.pc&&(d=g.pcs[a.type][a.peer][b.pc]),d&&"stable"===d.signalingState||(d=g._startPeerConnection(a)),d},g._startPeerConnection=function(a){c.log("Creating RTCPeerConnection.");var b=g._idPrefix+c.randomToken(),e={};"data"!==a.type||c.supports.sctp?"media"===a.type&&(e={optional:[{DtlsSrtpKeyAgreement:!0}]}):e={optional:[{RtpDataChannels:!0}]};var f=new d(a.provider.options.config,e);return g.pcs[a.type][a.peer][b]=f,g._setupListeners(a,f,b),f},g._setupListeners=function(a,b){var d=a.peer,e=a.id,f=a.provider;c.log("Listening for ICE candidates."),b.onicecandidate=function(b){b.candidate&&(c.log("Received ICE candidates for:",a.peer),f.socket.send({type:"CANDIDATE",payload:{candidate:b.candidate,type:a.type,connectionId:a.id},dst:d}))},b.oniceconnectionstatechange=function(){switch(b.iceConnectionState){case"disconnected":case"failed":c.log("iceConnectionState is disconnected, closing connections to "+d),a.close();break;case"completed":b.onicecandidate=c.noop}},b.onicechange=b.oniceconnectionstatechange,c.log("Listening for `negotiationneeded`"),b.onnegotiationneeded=function(){c.log("`negotiationneeded` triggered"),"stable"==b.signalingState?g._makeOffer(a):c.log("onnegotiationneeded triggered when not stable. Is another connection being established?")},c.log("Listening for data channel"),b.ondatachannel=function(a){c.log("Received data channel");var b=a.channel,g=f.getConnection(d,e);g.initialize(b)},c.log("Listening for remote stream"),b.onaddstream=function(a){c.log("Received remote stream");var b=a.stream,g=f.getConnection(d,e);"media"===g.type&&g.addStream(b)}},g.cleanup=function(a){c.log("Cleaning up PeerConnection to "+a.peer);var b=a.pc;!b||"closed"===b.readyState&&"closed"===b.signalingState||(b.close(),a.pc=null)},g._makeOffer=function(a){var b=a.pc;b.createOffer(function(d){c.log("Created offer."),!c.supports.sctp&&"data"===a.type&&a.reliable&&(d.sdp=Reliable.higherBandwidthSDP(d.sdp)),b.setLocalDescription(d,function(){c.log("Set localDescription: offer","for:",a.peer),a.provider.socket.send({type:"OFFER",payload:{sdp:d,type:a.type,label:a.label,connectionId:a.id,reliable:a.reliable,serialization:a.serialization,metadata:a.metadata,browser:c.browser},dst:a.peer})},function(b){a.provider.emitError("webrtc",b),c.log("Failed to setLocalDescription, ",b)})},function(b){a.provider.emitError("webrtc",b),c.log("Failed to createOffer, ",b)},a.options.constraints)},g._makeAnswer=function(a){var b=a.pc;b.createAnswer(function(d){c.log("Created answer."),!c.supports.sctp&&"data"===a.type&&a.reliable&&(d.sdp=Reliable.higherBandwidthSDP(d.sdp)),b.setLocalDescription(d,function(){c.log("Set localDescription: answer","for:",a.peer),a.provider.socket.send({type:"ANSWER",payload:{sdp:d,type:a.type,connectionId:a.id,browser:c.browser},dst:a.peer})},function(b){a.provider.emitError("webrtc",b),c.log("Failed to setLocalDescription, ",b)})},function(b){a.provider.emitError("webrtc",b),c.log("Failed to create answer, ",b)})},g.handleSDP=function(a,b,d){d=new e(d);var f=b.pc;c.log("Setting remote description",d),f.setRemoteDescription(d,function(){c.log("Set remoteDescription:",a,"for:",b.peer),"OFFER"===a&&g._makeAnswer(b)},function(a){b.provider.emitError("webrtc",a),c.log("Failed to setRemoteDescription, ",a)})},g.handleCandidate=function(a,b){var d=b.candidate,e=b.sdpMLineIndex;a.pc.addIceCandidate(new f({sdpMLineIndex:e,candidate:d})),c.log("Added ICE candidate for:",a.peer)},b.exports=g},{"./adapter":1,"./util":8}],6:[function(a,b){function c(a,b){return this instanceof c?(e.call(this),a&&a.constructor==Object?(b=a,a=void 0):a&&(a=a.toString()),b=d.extend({debug:0,host:d.CLOUD_HOST,port:d.CLOUD_PORT,key:"peerjs",path:"/",token:d.randomToken(),config:d.defaultConfig},b),this.options=b,"/"===b.host&&(b.host=window.location.hostname),"/"!==b.path[0]&&(b.path="/"+b.path),"/"!==b.path[b.path.length-1]&&(b.path+="/"),void 0===b.secure&&b.host!==d.CLOUD_HOST&&(b.secure=d.isSecure()),b.logFunction&&d.setLogFunction(b.logFunction),d.setLogLevel(b.debug),d.supports.audioVideo||d.supports.data?d.validateId(a)?d.validateKey(b.key)?b.secure&&"0.peerjs.com"===b.host?void this._delayedAbort("ssl-unavailable","The cloud server currently does not support HTTPS. Please run your own PeerServer to use HTTPS."):(this.destroyed=!1,this.disconnected=!1,this.open=!1,this.connections={},this._lostMessages={},this._initializeServerConnection(),void(a?this._initialize(a):this._retrieveId())):void this._delayedAbort("invalid-key",'API KEY "'+b.key+'" is invalid'):void this._delayedAbort("invalid-id",'ID "'+a+'" is invalid'):void this._delayedAbort("browser-incompatible","The current browser does not support WebRTC")):new c(a,b)}var d=a("./util"),e=a("eventemitter3"),f=a("./socket"),g=a("./mediaconnection"),h=a("./dataconnection");d.inherits(c,e),c.prototype._initializeServerConnection=function(){var a=this;this.socket=new f(this.options.secure,this.options.host,this.options.port,this.options.path,this.options.key),this.socket.on("message",function(b){a._handleMessage(b)}),this.socket.on("error",function(b){a._abort("socket-error",b)}),this.socket.on("disconnected",function(){a.disconnected||(a.emitError("network","Lost connection to server."),a.disconnect())}),this.socket.on("close",function(){a.disconnected||a._abort("socket-closed","Underlying socket is already closed.")})},c.prototype._retrieveId=function(){var a=this,b=new XMLHttpRequest,c=this.options.secure?"https://":"http://",e=c+this.options.host+":"+this.options.port+this.options.path+this.options.key+"/id",f="?ts="+(new Date).getTime()+Math.random();e+=f,b.open("get",e,!0),b.onerror=function(b){d.error("Error retrieving ID",b);var c="";"/"===a.options.path&&a.options.host!==d.CLOUD_HOST&&(c=" If you passed in a `path` to your self-hosted PeerServer, you'll also need to pass in that same path when creating a new Peer."),a._abort("server-error","Could not get an ID from the server."+c)},b.onreadystatechange=function(){return 4===b.readyState?200!==b.status?void b.onerror():void a._initialize(b.responseText):void 0},b.send(null)},c.prototype._initialize=function(a){this.id=a,this.socket.start(this.id,this.options.token)},c.prototype._handleMessage=function(a){var b,c=a.type,e=a.payload,f=a.src;switch(c){case"OPEN":this.emit("open",this.id),this.open=!0;break;case"ERROR":this._abort("server-error",e.msg);break;case"ID-TAKEN":this._abort("unavailable-id","ID `"+this.id+"` is taken");break;case"INVALID-KEY":this._abort("invalid-key",'API KEY "'+this.options.key+'" is invalid');break;case"LEAVE":d.log("Received leave message from",f),this._cleanupPeer(f);break;case"EXPIRE":this.emitError("peer-unavailable","Could not connect to peer "+f);break;case"OFFER":var i=e.connectionId;if(b=this.getConnection(f,i))d.warn("Offer received for existing Connection ID:",i);else{if("media"===e.type)b=new g(f,this,{connectionId:i,_payload:e,metadata:e.metadata}),this._addConnection(f,b),this.emit("call",b);else{if("data"!==e.type)return void d.warn("Received malformed connection type:",e.type);b=new h(f,this,{connectionId:i,_payload:e,metadata:e.metadata,label:e.label,serialization:e.serialization,reliable:e.reliable}),this._addConnection(f,b),this.emit("connection",b)}for(var j=this._getMessages(i),k=0,l=j.length;l>k;k+=1)b.handleMessage(j[k])}break;default:if(!e)return void d.warn("You received a malformed message from "+f+" of type "+c);var m=e.connectionId;b=this.getConnection(f,m),b&&b.pc?b.handleMessage(a):m?this._storeMessage(m,a):d.warn("You received an unrecognized message:",a)}},c.prototype._storeMessage=function(a,b){this._lostMessages[a]||(this._lostMessages[a]=[]),this._lostMessages[a].push(b)},c.prototype._getMessages=function(a){var b=this._lostMessages[a];return b?(delete this._lostMessages[a],b):[]},c.prototype.connect=function(a,b){if(this.disconnected)return d.warn("You cannot connect to a new Peer because you called .disconnect() on this Peer and ended your connection with the server. You can create a new Peer to reconnect, or call reconnect on this peer if you believe its ID to still be available."),void this.emitError("disconnected","Cannot connect to new Peer after disconnecting from server.");var c=new h(a,this,b);return this._addConnection(a,c),c},c.prototype.call=function(a,b,c){if(this.disconnected)return d.warn("You cannot connect to a new Peer because you called .disconnect() on this Peer and ended your connection with the server. You can create a new Peer to reconnect."),void this.emitError("disconnected","Cannot connect to new Peer after disconnecting from server.");if(!b)return void d.error("To call a peer, you must provide a stream from your browser's `getUserMedia`.");c=c||{},c._stream=b;var e=new g(a,this,c);return this._addConnection(a,e),e},c.prototype._addConnection=function(a,b){this.connections[a]||(this.connections[a]=[]),this.connections[a].push(b)},c.prototype.getConnection=function(a,b){var c=this.connections[a];if(!c)return null;for(var d=0,e=c.length;e>d;d++)if(c[d].id===b)return c[d];return null},c.prototype._delayedAbort=function(a,b){var c=this;d.setZeroTimeout(function(){c._abort(a,b)})},c.prototype._abort=function(a,b){d.error("Aborting!"),this._lastServerId?this.disconnect():this.destroy(),this.emitError(a,b)},c.prototype.emitError=function(a,b){d.error("Error:",b),"string"==typeof b&&(b=new Error(b)),b.type=a,this.emit("error",b)},c.prototype.destroy=function(){this.destroyed||(this._cleanup(),this.disconnect(),this.destroyed=!0)},c.prototype._cleanup=function(){if(this.connections)for(var a=Object.keys(this.connections),b=0,c=a.length;c>b;b++)this._cleanupPeer(a[b]);this.emit("close")},c.prototype._cleanupPeer=function(a){for(var b=this.connections[a],c=0,d=b.length;d>c;c+=1)b[c].close()},c.prototype.disconnect=function(){var a=this;d.setZeroTimeout(function(){a.disconnected||(a.disconnected=!0,a.open=!1,a.socket&&a.socket.close(),a.emit("disconnected",a.id),a._lastServerId=a.id,a.id=null)})},c.prototype.reconnect=function(){if(this.disconnected&&!this.destroyed)d.log("Attempting reconnection to server with ID "+this._lastServerId),this.disconnected=!1,this._initializeServerConnection(),this._initialize(this._lastServerId);else{if(this.destroyed)throw new Error("This peer cannot reconnect to the server. It has already been destroyed.");if(this.disconnected||this.open)throw new Error("Peer "+this.id+" cannot reconnect because it is not disconnected from the server!");d.error("In a hurry? We're still trying to make the initial connection!")}},c.prototype.listAllPeers=function(a){a=a||function(){};var b=this,c=new XMLHttpRequest,e=this.options.secure?"https://":"http://",f=e+this.options.host+":"+this.options.port+this.options.path+this.options.key+"/peers",g="?ts="+(new Date).getTime()+Math.random();f+=g,c.open("get",f,!0),c.onerror=function(){b._abort("server-error","Could not get peers from the server."),a([])},c.onreadystatechange=function(){if(4===c.readyState){if(401===c.status){var e="";throw e=b.options.host!==d.CLOUD_HOST?"It looks like you're using the cloud server. You can email team@peerjs.com to enable peer listing for your API key.":"You need to enable `allow_discovery` on your self-hosted PeerServer to use this feature.",a([]),new Error("It doesn't look like you have permission to list peers IDs. "+e)}a(200!==c.status?[]:JSON.parse(c.responseText))}},c.send(null)},b.exports=c},{"./dataconnection":2,"./mediaconnection":4,"./socket":7,"./util":8,eventemitter3:9}],7:[function(a,b){function c(a,b,d,f,g){if(!(this instanceof c))return new c(a,b,d,f,g);e.call(this),this.disconnected=!1,this._queue=[];var h=a?"https://":"http://",i=a?"wss://":"ws://";this._httpUrl=h+b+":"+d+f+g,this._wsUrl=i+b+":"+d+f+"peerjs?key="+g}var d=a("./util"),e=a("eventemitter3");d.inherits(c,e),c.prototype.start=function(a,b){this.id=a,this._httpUrl+="/"+a+"/"+b,this._wsUrl+="&id="+a+"&token="+b,this._startXhrStream(),this._startWebSocket()},c.prototype._startWebSocket=function(){var a=this;this._socket||(this._socket=new WebSocket(this._wsUrl),this._socket.onmessage=function(b){try{var c=JSON.parse(b.data)}catch(e){return void d.log("Invalid server message",b.data)}a.emit("message",c)},this._socket.onclose=function(){d.log("Socket closed."),a.disconnected=!0,a.emit("disconnected")},this._socket.onopen=function(){a._timeout&&(clearTimeout(a._timeout),setTimeout(function(){a._http.abort(),a._http=null},5e3)),a._sendQueuedMessages(),d.log("Socket open")})},c.prototype._startXhrStream=function(a){try{var b=this;this._http=new XMLHttpRequest,this._http._index=1,this._http._streamIndex=a||0,this._http.open("post",this._httpUrl+"/id?i="+this._http._streamIndex,!0),this._http.onerror=function(){clearTimeout(b._timeout),b.emit("disconnected")},this._http.onreadystatechange=function(){2==this.readyState&&this.old?(this.old.abort(),delete this.old):this.readyState>2&&200===this.status&&this.responseText&&b._handleStream(this)},this._http.send(null),this._setHTTPTimeout()}catch(c){d.log("XMLHttpRequest not available; defaulting to WebSockets")}},c.prototype._handleStream=function(a){var b=a.responseText.split("\n");if(a._buffer)for(;a._buffer.length>0;){var c=a._buffer.shift(),e=b[c];try{e=JSON.parse(e)}catch(f){a._buffer.shift(c);break}this.emit("message",e)}var g=b[a._index];if(g)if(a._index+=1,a._index===b.length)a._buffer||(a._buffer=[]),a._buffer.push(a._index-1);else{try{g=JSON.parse(g)}catch(f){return void d.log("Invalid server message",g)}this.emit("message",g)}},c.prototype._setHTTPTimeout=function(){var a=this;this._timeout=setTimeout(function(){var b=a._http;a._wsOpen()?b.abort():(a._startXhrStream(b._streamIndex+1),a._http.old=b)},25e3)},c.prototype._wsOpen=function(){return this._socket&&1==this._socket.readyState},c.prototype._sendQueuedMessages=function(){for(var a=0,b=this._queue.length;b>a;a+=1)this.send(this._queue[a])},c.prototype.send=function(a){if(!this.disconnected){if(!this.id)return void this._queue.push(a);if(!a.type)return void this.emit("error","Invalid message");var b=JSON.stringify(a);if(this._wsOpen())this._socket.send(b);else{var c=new XMLHttpRequest,d=this._httpUrl+"/"+a.type.toLowerCase();c.open("post",d,!0),c.setRequestHeader("Content-Type","application/json"),c.send(b)}}},c.prototype.close=function(){!this.disconnected&&this._wsOpen()&&(this._socket.close(),this.disconnected=!0)},b.exports=c},{"./util":8,eventemitter3:9}],8:[function(a,b){var c={iceServers:[{url:"stun:stun.l.google.com:19302"}]},d=1,e=a("js-binarypack"),f=a("./adapter").RTCPeerConnection,g={noop:function(){},CLOUD_HOST:"0.peerjs.com",CLOUD_PORT:9e3,chunkedBrowsers:{Chrome:1},chunkedMTU:16300,logLevel:0,setLogLevel:function(a){var b=parseInt(a,10);g.logLevel=isNaN(parseInt(a,10))?a?3:0:b,g.log=g.warn=g.error=g.noop,g.logLevel>0&&(g.error=g._printWith("ERROR")),g.logLevel>1&&(g.warn=g._printWith("WARNING")),g.logLevel>2&&(g.log=g._print)},setLogFunction:function(a){a.constructor!==Function?g.warn("The log function you passed in is not a function. Defaulting to regular logs."):g._print=a},_printWith:function(a){return function(){var b=Array.prototype.slice.call(arguments);b.unshift(a),g._print.apply(g,b)}},_print:function(){var a=!1,b=Array.prototype.slice.call(arguments);b.unshift("PeerJS: ");for(var c=0,d=b.length;d>c;c++)b[c]instanceof Error&&(b[c]="("+b[c].name+") "+b[c].message,a=!0);a?console.error.apply(console,b):console.log.apply(console,b)},defaultConfig:c,browser:function(){return window.mozRTCPeerConnection?"Firefox":window.webkitRTCPeerConnection?"Chrome":window.RTCPeerConnection?"Supported":"Unsupported"}(),supports:function(){if("undefined"==typeof f)return{};var a,b,d=!0,e=!0,h=!1,i=!1,j=!!window.webkitRTCPeerConnection;try{a=new f(c,{optional:[{RtpDataChannels:!0}]})}catch(k){d=!1,e=!1}if(d)try{b=a.createDataChannel("_PEERJSTEST")}catch(k){d=!1}if(d){try{b.binaryType="blob",h=!0}catch(k){}var l=new f(c,{});try{var m=l.createDataChannel("_PEERJSRELIABLETEST",{});i=m.reliable}catch(k){}l.close()}if(e&&(e=!!a.addStream),!j&&d){var n=new f(c,{optional:[{RtpDataChannels:!0}]});n.onnegotiationneeded=function(){j=!0,g&&g.supports&&(g.supports.onnegotiationneeded=!0)},n.createDataChannel("_PEERJSNEGOTIATIONTEST"),setTimeout(function(){n.close()},1e3)}return a&&a.close(),{audioVideo:e,data:d,binaryBlob:h,binary:i,reliable:i,sctp:i,onnegotiationneeded:j}}(),validateId:function(a){return!a||/^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.exec(a)},validateKey:function(a){return!a||/^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.exec(a)},debug:!1,inherits:function(a,b){a.super_=b,a.prototype=Object.create(b.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}})},extend:function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c]);return a},pack:e.pack,unpack:e.unpack,log:function(){if(g.debug){var a=!1,b=Array.prototype.slice.call(arguments);b.unshift("PeerJS: ");for(var c=0,d=b.length;d>c;c++)b[c]instanceof Error&&(b[c]="("+b[c].name+") "+b[c].message,a=!0);a?console.error.apply(console,b):console.log.apply(console,b)}},setZeroTimeout:function(a){function b(b){d.push(b),a.postMessage(e,"*")}function c(b){b.source==a&&b.data==e&&(b.stopPropagation&&b.stopPropagation(),d.length&&d.shift()())}var d=[],e="zero-timeout-message";return a.addEventListener?a.addEventListener("message",c,!0):a.attachEvent&&a.attachEvent("onmessage",c),b}(window),chunk:function(a){for(var b=[],c=a.size,e=index=0,f=Math.ceil(c/g.chunkedMTU);c>e;){var h=Math.min(c,e+g.chunkedMTU),i=a.slice(e,h),j={__peerData:d,n:index,data:i,total:f};b.push(j),e=h,index+=1}return d+=1,b},blobToArrayBuffer:function(a,b){var c=new FileReader;c.onload=function(a){b(a.target.result)},c.readAsArrayBuffer(a)},blobToBinaryString:function(a,b){var c=new FileReader;c.onload=function(a){b(a.target.result)},c.readAsBinaryString(a)},binaryStringToArrayBuffer:function(a){for(var b=new Uint8Array(a.length),c=0;c<a.length;c++)b[c]=255&a.charCodeAt(c);return b.buffer},randomToken:function(){return Math.random().toString(36).substr(2)},isSecure:function(){return"https:"===location.protocol}};b.exports=g},{"./adapter":1,"js-binarypack":10}],9:[function(a,b){"use strict";function c(a,b,c){this.fn=a,this.context=b,this.once=c||!1}function d(){}d.prototype._events=void 0,d.prototype.listeners=function(a){if(!this._events||!this._events[a])return[];for(var b=0,c=this._events[a].length,d=[];c>b;b++)d.push(this._events[a][b].fn);return d},d.prototype.emit=function(a,b,c,d,e,f){if(!this._events||!this._events[a])return!1;var g,h,i,j=this._events[a],k=j.length,l=arguments.length,m=j[0];if(1===k){switch(m.once&&this.removeListener(a,m.fn,!0),l){case 1:return m.fn.call(m.context),!0;case 2:return m.fn.call(m.context,b),!0;case 3:return m.fn.call(m.context,b,c),!0;case 4:return m.fn.call(m.context,b,c,d),!0;case 5:return m.fn.call(m.context,b,c,d,e),!0;case 6:return m.fn.call(m.context,b,c,d,e,f),!0}for(h=1,g=new Array(l-1);l>h;h++)g[h-1]=arguments[h];m.fn.apply(m.context,g)}else for(h=0;k>h;h++)switch(j[h].once&&this.removeListener(a,j[h].fn,!0),l){case 1:j[h].fn.call(j[h].context);break;case 2:j[h].fn.call(j[h].context,b);break;case 3:j[h].fn.call(j[h].context,b,c);break;default:if(!g)for(i=1,g=new Array(l-1);l>i;i++)g[i-1]=arguments[i];j[h].fn.apply(j[h].context,g)}return!0},d.prototype.on=function(a,b,d){return this._events||(this._events={}),this._events[a]||(this._events[a]=[]),this._events[a].push(new c(b,d||this)),this},d.prototype.once=function(a,b,d){return this._events||(this._events={}),this._events[a]||(this._events[a]=[]),this._events[a].push(new c(b,d||this,!0)),this},d.prototype.removeListener=function(a,b,c){if(!this._events||!this._events[a])return this;var d=this._events[a],e=[];if(b)for(var f=0,g=d.length;g>f;f++)d[f].fn!==b&&d[f].once!==c&&e.push(d[f]);return this._events[a]=e.length?e:null,this},d.prototype.removeAllListeners=function(a){return this._events?(a?this._events[a]=null:this._events={},this):this},d.prototype.off=d.prototype.removeListener,d.prototype.addListener=d.prototype.on,d.prototype.setMaxListeners=function(){return this},d.EventEmitter=d,d.EventEmitter2=d,d.EventEmitter3=d,"object"==typeof b&&b.exports&&(b.exports=d)},{}],10:[function(a,b){function c(a){this.index=0,this.dataBuffer=a,this.dataView=new Uint8Array(this.dataBuffer),this.length=this.dataBuffer.byteLength}function d(){this.bufferBuilder=new g}function e(a){var b=a.charCodeAt(0);return 2047>=b?"00":65535>=b?"000":2097151>=b?"0000":67108863>=b?"00000":"000000"}function f(a){return a.length>600?new Blob([a]).size:a.replace(/[^\u0000-\u007F]/g,e).length}var g=a("./bufferbuilder").BufferBuilder,h=a("./bufferbuilder").binaryFeatures,i={unpack:function(a){var b=new c(a);return b.unpack()},pack:function(a){var b=new d;b.pack(a);var c=b.getBuffer();return c}};b.exports=i,c.prototype.unpack=function(){var a=this.unpack_uint8();if(128>a){var b=a;return b}if(32>(224^a)){var c=(224^a)-32;return c}var d;if((d=160^a)<=15)return this.unpack_raw(d);if((d=176^a)<=15)return this.unpack_string(d);if((d=144^a)<=15)return this.unpack_array(d);if((d=128^a)<=15)return this.unpack_map(d);switch(a){case 192:return null;case 193:return void 0;case 194:return!1;case 195:return!0;case 202:return this.unpack_float();case 203:return this.unpack_double();case 204:return this.unpack_uint8();case 205:return this.unpack_uint16();case 206:return this.unpack_uint32();case 207:return this.unpack_uint64();case 208:return this.unpack_int8();case 209:return this.unpack_int16();case 210:return this.unpack_int32();case 211:return this.unpack_int64();case 212:return void 0;case 213:return void 0;case 214:return void 0;case 215:return void 0;case 216:return d=this.unpack_uint16(),this.unpack_string(d);case 217:return d=this.unpack_uint32(),this.unpack_string(d);case 218:return d=this.unpack_uint16(),this.unpack_raw(d);case 219:return d=this.unpack_uint32(),this.unpack_raw(d);case 220:return d=this.unpack_uint16(),this.unpack_array(d);case 221:return d=this.unpack_uint32(),this.unpack_array(d);case 222:return d=this.unpack_uint16(),this.unpack_map(d);case 223:return d=this.unpack_uint32(),this.unpack_map(d)}},c.prototype.unpack_uint8=function(){var a=255&this.dataView[this.index];return this.index++,a},c.prototype.unpack_uint16=function(){var a=this.read(2),b=256*(255&a[0])+(255&a[1]);return this.index+=2,b},c.prototype.unpack_uint32=function(){var a=this.read(4),b=256*(256*(256*a[0]+a[1])+a[2])+a[3];return this.index+=4,b},c.prototype.unpack_uint64=function(){var a=this.read(8),b=256*(256*(256*(256*(256*(256*(256*a[0]+a[1])+a[2])+a[3])+a[4])+a[5])+a[6])+a[7];return this.index+=8,b},c.prototype.unpack_int8=function(){var a=this.unpack_uint8();return 128>a?a:a-256},c.prototype.unpack_int16=function(){var a=this.unpack_uint16();return 32768>a?a:a-65536},c.prototype.unpack_int32=function(){var a=this.unpack_uint32();return a<Math.pow(2,31)?a:a-Math.pow(2,32)},c.prototype.unpack_int64=function(){var a=this.unpack_uint64();return a<Math.pow(2,63)?a:a-Math.pow(2,64)},c.prototype.unpack_raw=function(a){if(this.length<this.index+a)throw new Error("BinaryPackFailure: index is out of range "+this.index+" "+a+" "+this.length);var b=this.dataBuffer.slice(this.index,this.index+a);return this.index+=a,b},c.prototype.unpack_string=function(a){for(var b,c,d=this.read(a),e=0,f="";a>e;)b=d[e],128>b?(f+=String.fromCharCode(b),e++):32>(192^b)?(c=(192^b)<<6|63&d[e+1],f+=String.fromCharCode(c),e+=2):(c=(15&b)<<12|(63&d[e+1])<<6|63&d[e+2],f+=String.fromCharCode(c),e+=3);return this.index+=a,f},c.prototype.unpack_array=function(a){for(var b=new Array(a),c=0;a>c;c++)b[c]=this.unpack();return b},c.prototype.unpack_map=function(a){for(var b={},c=0;a>c;c++){var d=this.unpack(),e=this.unpack();b[d]=e}return b},c.prototype.unpack_float=function(){var a=this.unpack_uint32(),b=a>>31,c=(a>>23&255)-127,d=8388607&a|8388608;return(0==b?1:-1)*d*Math.pow(2,c-23)},c.prototype.unpack_double=function(){var a=this.unpack_uint32(),b=this.unpack_uint32(),c=a>>31,d=(a>>20&2047)-1023,e=1048575&a|1048576,f=e*Math.pow(2,d-20)+b*Math.pow(2,d-52);return(0==c?1:-1)*f},c.prototype.read=function(a){var b=this.index;if(b+a<=this.length)return this.dataView.subarray(b,b+a);throw new Error("BinaryPackFailure: read index out of range")},d.prototype.getBuffer=function(){return this.bufferBuilder.getBuffer()},d.prototype.pack=function(a){var b=typeof a;if("string"==b)this.pack_string(a);else if("number"==b)Math.floor(a)===a?this.pack_integer(a):this.pack_double(a);else if("boolean"==b)a===!0?this.bufferBuilder.append(195):a===!1&&this.bufferBuilder.append(194);else if("undefined"==b)this.bufferBuilder.append(192);else{if("object"!=b)throw new Error('Type "'+b+'" not yet supported');if(null===a)this.bufferBuilder.append(192);else{var c=a.constructor;if(c==Array)this.pack_array(a);else if(c==Blob||c==File)this.pack_bin(a);
else if(c==ArrayBuffer)this.pack_bin(h.useArrayBufferView?new Uint8Array(a):a);else if("BYTES_PER_ELEMENT"in a)this.pack_bin(h.useArrayBufferView?new Uint8Array(a.buffer):a.buffer);else if(c==Object)this.pack_object(a);else if(c==Date)this.pack_string(a.toString());else{if("function"!=typeof a.toBinaryPack)throw new Error('Type "'+c.toString()+'" not yet supported');this.bufferBuilder.append(a.toBinaryPack())}}}this.bufferBuilder.flush()},d.prototype.pack_bin=function(a){var b=a.length||a.byteLength||a.size;if(15>=b)this.pack_uint8(160+b);else if(65535>=b)this.bufferBuilder.append(218),this.pack_uint16(b);else{if(!(4294967295>=b))throw new Error("Invalid length");this.bufferBuilder.append(219),this.pack_uint32(b)}this.bufferBuilder.append(a)},d.prototype.pack_string=function(a){var b=f(a);if(15>=b)this.pack_uint8(176+b);else if(65535>=b)this.bufferBuilder.append(216),this.pack_uint16(b);else{if(!(4294967295>=b))throw new Error("Invalid length");this.bufferBuilder.append(217),this.pack_uint32(b)}this.bufferBuilder.append(a)},d.prototype.pack_array=function(a){var b=a.length;if(15>=b)this.pack_uint8(144+b);else if(65535>=b)this.bufferBuilder.append(220),this.pack_uint16(b);else{if(!(4294967295>=b))throw new Error("Invalid length");this.bufferBuilder.append(221),this.pack_uint32(b)}for(var c=0;b>c;c++)this.pack(a[c])},d.prototype.pack_integer=function(a){if(a>=-32&&127>=a)this.bufferBuilder.append(255&a);else if(a>=0&&255>=a)this.bufferBuilder.append(204),this.pack_uint8(a);else if(a>=-128&&127>=a)this.bufferBuilder.append(208),this.pack_int8(a);else if(a>=0&&65535>=a)this.bufferBuilder.append(205),this.pack_uint16(a);else if(a>=-32768&&32767>=a)this.bufferBuilder.append(209),this.pack_int16(a);else if(a>=0&&4294967295>=a)this.bufferBuilder.append(206),this.pack_uint32(a);else if(a>=-2147483648&&2147483647>=a)this.bufferBuilder.append(210),this.pack_int32(a);else if(a>=-0x8000000000000000&&0x8000000000000000>=a)this.bufferBuilder.append(211),this.pack_int64(a);else{if(!(a>=0&&0x10000000000000000>=a))throw new Error("Invalid integer");this.bufferBuilder.append(207),this.pack_uint64(a)}},d.prototype.pack_double=function(a){var b=0;0>a&&(b=1,a=-a);var c=Math.floor(Math.log(a)/Math.LN2),d=a/Math.pow(2,c)-1,e=Math.floor(d*Math.pow(2,52)),f=Math.pow(2,32),g=b<<31|c+1023<<20|e/f&1048575,h=e%f;this.bufferBuilder.append(203),this.pack_int32(g),this.pack_int32(h)},d.prototype.pack_object=function(a){var b=Object.keys(a),c=b.length;if(15>=c)this.pack_uint8(128+c);else if(65535>=c)this.bufferBuilder.append(222),this.pack_uint16(c);else{if(!(4294967295>=c))throw new Error("Invalid length");this.bufferBuilder.append(223),this.pack_uint32(c)}for(var d in a)a.hasOwnProperty(d)&&(this.pack(d),this.pack(a[d]))},d.prototype.pack_uint8=function(a){this.bufferBuilder.append(a)},d.prototype.pack_uint16=function(a){this.bufferBuilder.append(a>>8),this.bufferBuilder.append(255&a)},d.prototype.pack_uint32=function(a){var b=4294967295&a;this.bufferBuilder.append((4278190080&b)>>>24),this.bufferBuilder.append((16711680&b)>>>16),this.bufferBuilder.append((65280&b)>>>8),this.bufferBuilder.append(255&b)},d.prototype.pack_uint64=function(a){var b=a/Math.pow(2,32),c=a%Math.pow(2,32);this.bufferBuilder.append((4278190080&b)>>>24),this.bufferBuilder.append((16711680&b)>>>16),this.bufferBuilder.append((65280&b)>>>8),this.bufferBuilder.append(255&b),this.bufferBuilder.append((4278190080&c)>>>24),this.bufferBuilder.append((16711680&c)>>>16),this.bufferBuilder.append((65280&c)>>>8),this.bufferBuilder.append(255&c)},d.prototype.pack_int8=function(a){this.bufferBuilder.append(255&a)},d.prototype.pack_int16=function(a){this.bufferBuilder.append((65280&a)>>8),this.bufferBuilder.append(255&a)},d.prototype.pack_int32=function(a){this.bufferBuilder.append(a>>>24&255),this.bufferBuilder.append((16711680&a)>>>16),this.bufferBuilder.append((65280&a)>>>8),this.bufferBuilder.append(255&a)},d.prototype.pack_int64=function(a){var b=Math.floor(a/Math.pow(2,32)),c=a%Math.pow(2,32);this.bufferBuilder.append((4278190080&b)>>>24),this.bufferBuilder.append((16711680&b)>>>16),this.bufferBuilder.append((65280&b)>>>8),this.bufferBuilder.append(255&b),this.bufferBuilder.append((4278190080&c)>>>24),this.bufferBuilder.append((16711680&c)>>>16),this.bufferBuilder.append((65280&c)>>>8),this.bufferBuilder.append(255&c)}},{"./bufferbuilder":11}],11:[function(a,b){function c(){this._pieces=[],this._parts=[]}var d={};d.useBlobBuilder=function(){try{return new Blob([]),!1}catch(a){return!0}}(),d.useArrayBufferView=!d.useBlobBuilder&&function(){try{return 0===new Blob([new Uint8Array([])]).size}catch(a){return!0}}(),b.exports.binaryFeatures=d;var e=b.exports.BlobBuilder;"undefined"!=typeof window&&(e=b.exports.BlobBuilder=window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder||window.BlobBuilder),c.prototype.append=function(a){"number"==typeof a?this._pieces.push(a):(this.flush(),this._parts.push(a))},c.prototype.flush=function(){if(this._pieces.length>0){var a=new Uint8Array(this._pieces);d.useArrayBufferView||(a=a.buffer),this._parts.push(a),this._pieces=[]}},c.prototype.getBuffer=function(){if(this.flush(),d.useBlobBuilder){for(var a=new e,b=0,c=this._parts.length;c>b;b++)a.append(this._parts[b]);return a.getBlob()}return new Blob(this._parts)},b.exports.BufferBuilder=c},{}],12:[function(a,b){function c(a,b){return this instanceof c?(this._dc=a,d.debug=b,this._outgoing={},this._incoming={},this._received={},this._window=1e3,this._mtu=500,this._interval=0,this._count=0,this._queue=[],void this._setupDC()):new c(a)}var d=a("./util");c.prototype.send=function(a){var b=d.pack(a);return b.size<this._mtu?void this._handleSend(["no",b]):(this._outgoing[this._count]={ack:0,chunks:this._chunk(b)},d.debug&&(this._outgoing[this._count].timer=new Date),this._sendWindowedChunks(this._count),void(this._count+=1))},c.prototype._setupInterval=function(){var a=this;this._timeout=setInterval(function(){var b=a._queue.shift();if(b._multiple)for(var c=0,d=b.length;d>c;c+=1)a._intervalSend(b[c]);else a._intervalSend(b)},this._interval)},c.prototype._intervalSend=function(a){var b=this;a=d.pack(a),d.blobToBinaryString(a,function(a){b._dc.send(a)}),0===b._queue.length&&(clearTimeout(b._timeout),b._timeout=null)},c.prototype._processAcks=function(){for(var a in this._outgoing)this._outgoing.hasOwnProperty(a)&&this._sendWindowedChunks(a)},c.prototype._handleSend=function(a){for(var b=!0,c=0,d=this._queue.length;d>c;c+=1){var e=this._queue[c];e===a?b=!1:e._multiple&&-1!==e.indexOf(a)&&(b=!1)}b&&(this._queue.push(a),this._timeout||this._setupInterval())},c.prototype._setupDC=function(){var a=this;this._dc.onmessage=function(b){var c=b.data,e=c.constructor;if(e===String){var f=d.binaryStringToArrayBuffer(c);c=d.unpack(f),a._handleMessage(c)}}},c.prototype._handleMessage=function(a){var b,c=a[1],e=this._incoming[c],f=this._outgoing[c];switch(a[0]){case"no":var g=c;g&&this.onmessage(d.unpack(g));break;case"end":if(b=e,this._received[c]=a[2],!b)break;this._ack(c);break;case"ack":if(b=f){var h=a[2];b.ack=Math.max(h,b.ack),b.ack>=b.chunks.length?(d.log("Time: ",new Date-b.timer),delete this._outgoing[c]):this._processAcks()}break;case"chunk":if(b=e,!b){var i=this._received[c];if(i===!0)break;b={ack:["ack",c,0],chunks:[]},this._incoming[c]=b}var j=a[2],k=a[3];b.chunks[j]=new Uint8Array(k),j===b.ack[2]&&this._calculateNextAck(c),this._ack(c);break;default:this._handleSend(a)}},c.prototype._chunk=function(a){for(var b=[],c=a.size,e=0;c>e;){var f=Math.min(c,e+this._mtu),g=a.slice(e,f),h={payload:g};b.push(h),e=f}return d.log("Created",b.length,"chunks."),b},c.prototype._ack=function(a){var b=this._incoming[a].ack;this._received[a]===b[2]&&(this._complete(a),this._received[a]=!0),this._handleSend(b)},c.prototype._calculateNextAck=function(a){for(var b=this._incoming[a],c=b.chunks,d=0,e=c.length;e>d;d+=1)if(void 0===c[d])return void(b.ack[2]=d);b.ack[2]=c.length},c.prototype._sendWindowedChunks=function(a){d.log("sendWindowedChunks for: ",a);for(var b=this._outgoing[a],c=b.chunks,e=[],f=Math.min(b.ack+this._window,c.length),g=b.ack;f>g;g+=1)c[g].sent&&g!==b.ack||(c[g].sent=!0,e.push(["chunk",a,g,c[g].payload]));b.ack+this._window>=c.length&&e.push(["end",a,c.length]),e._multiple=!0,this._handleSend(e)},c.prototype._complete=function(a){d.log("Completed called for",a);var b=this,c=this._incoming[a].chunks,e=new Blob(c);d.blobToArrayBuffer(e,function(a){b.onmessage(d.unpack(a))}),delete this._incoming[a]},c.higherBandwidthSDP=function(a){var b=navigator.appVersion.match(/Chrome\/(.*?) /);if(b&&(b=parseInt(b[1].split(".").shift()),31>b)){var c=a.split("b=AS:30"),d="b=AS:102400";if(c.length>1)return c[0]+d+c[1]}return a},c.prototype.onmessage=function(){},b.exports.Reliable=c},{"./util":13}],13:[function(a,b){var c=a("js-binarypack"),d={debug:!1,inherits:function(a,b){a.super_=b,a.prototype=Object.create(b.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}})},extend:function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c]);return a},pack:c.pack,unpack:c.unpack,log:function(){if(d.debug){for(var a=[],b=0;b<arguments.length;b++)a[b]=arguments[b];a.unshift("Reliable: "),console.log.apply(console,a)}},setZeroTimeout:function(a){function b(b){d.push(b),a.postMessage(e,"*")}function c(b){b.source==a&&b.data==e&&(b.stopPropagation&&b.stopPropagation(),d.length&&d.shift()())}var d=[],e="zero-timeout-message";return a.addEventListener?a.addEventListener("message",c,!0):a.attachEvent&&a.attachEvent("onmessage",c),b}(this),blobToArrayBuffer:function(a,b){var c=new FileReader;c.onload=function(a){b(a.target.result)},c.readAsArrayBuffer(a)},blobToBinaryString:function(a,b){var c=new FileReader;c.onload=function(a){b(a.target.result)},c.readAsBinaryString(a)},binaryStringToArrayBuffer:function(a){for(var b=new Uint8Array(a.length),c=0;c<a.length;c++)b[c]=255&a.charCodeAt(c);return b.buffer},randomToken:function(){return Math.random().toString(36).substr(2)}};b.exports=d},{"js-binarypack":10}]},{},[3]);
	}).call($global);
$packages["github.com/kothar/capngopher/webrtc"] = (function() {
	var $pkg = {}, $init, errors, js, log, time, rpc, PeerError, PeerConfig, ConfigOption, Peer, PeerListener, PeerConnection, ptrType, structType, funcType, sliceType, ptrType$1, funcType$1, ptrType$2, ptrType$3, ptrType$4, funcType$2, sliceType$1, funcType$3, ptrType$5, chanType, chanType$1, chanType$2, chanType$3, WithKey, WithDebug, NewPeerConfig, NewPeer, newPeerConnection;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	log = $packages["log"];
	time = $packages["time"];
	rpc = $packages["zombiezen.com/go/capnproto2/rpc"];
	PeerError = $pkg.PeerError = $newType(0, $kindStruct, "webrtc.PeerError", true, "github.com/kothar/capngopher/webrtc", true, function(o_, Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.o = null;
			this.Type = "";
			return;
		}
		this.o = o_;
		this.Type = Type_;
	});
	PeerConfig = $pkg.PeerConfig = $newType(0, $kindStruct, "webrtc.PeerConfig", true, "github.com/kothar/capngopher/webrtc", true, function(o_, ID_, Key_, Debug_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.o = null;
			this.ID = "";
			this.Key = "";
			this.Debug = 0;
			return;
		}
		this.o = o_;
		this.ID = ID_;
		this.Key = Key_;
		this.Debug = Debug_;
	});
	ConfigOption = $pkg.ConfigOption = $newType(4, $kindFunc, "webrtc.ConfigOption", true, "github.com/kothar/capngopher/webrtc", true, null);
	Peer = $pkg.Peer = $newType(0, $kindStruct, "webrtc.Peer", true, "github.com/kothar/capngopher/webrtc", true, function(o_, id_, onOpen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.o = null;
			this.id = "";
			this.onOpen = $chanNil;
			return;
		}
		this.o = o_;
		this.id = id_;
		this.onOpen = onOpen_;
	});
	PeerListener = $pkg.PeerListener = $newType(0, $kindStruct, "webrtc.PeerListener", true, "github.com/kothar/capngopher/webrtc", true, function(peer_, onConnect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.peer = ptrType$2.nil;
			this.onConnect = $chanNil;
			return;
		}
		this.peer = peer_;
		this.onConnect = onConnect_;
	});
	PeerConnection = $pkg.PeerConnection = $newType(0, $kindStruct, "webrtc.PeerConnection", true, "github.com/kothar/capngopher/webrtc", true, function(o_, Peer_, status_, onReady_, err_, onErr_, buffer_, onData_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.o = null;
			this.Peer = "";
			this.status = "";
			this.onReady = $chanNil;
			this.err = $ifaceNil;
			this.onErr = $chanNil;
			this.buffer = sliceType$1.nil;
			this.onData = $chanNil;
			return;
		}
		this.o = o_;
		this.Peer = Peer_;
		this.status = status_;
		this.onReady = onReady_;
		this.err = err_;
		this.onErr = onErr_;
		this.buffer = buffer_;
		this.onData = onData_;
	});
	ptrType = $ptrType(PeerConfig);
	structType = $structType("", []);
	funcType = $funcType([$String], [], false);
	sliceType = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(PeerError);
	funcType$1 = $funcType([ptrType$1], [], false);
	ptrType$2 = $ptrType(Peer);
	ptrType$3 = $ptrType(PeerConnection);
	ptrType$4 = $ptrType(js.Object);
	funcType$2 = $funcType([ptrType$4], [], false);
	sliceType$1 = $sliceType($Uint8);
	funcType$3 = $funcType([], [], false);
	ptrType$5 = $ptrType(PeerListener);
	chanType = $chanType(structType, false, false);
	chanType$1 = $chanType(ptrType$3, false, false);
	chanType$2 = $chanType($error, false, false);
	chanType$3 = $chanType(sliceType$1, false, false);
	PeerError.ptr.prototype.Error = function() {
		var $ptr, err;
		err = this;
		return "[" + $internalize(err.o.type, $String) + "] " + $internalize(err.o, $String);
	};
	PeerError.prototype.Error = function() { return this.$val.Error(); };
	WithKey = function(key) {
		var $ptr, key;
		return (function(config) {
			var $ptr, config;
			config.o.key = $externalize(key, $String);
		});
	};
	$pkg.WithKey = WithKey;
	WithDebug = function(debug) {
		var $ptr, debug;
		return (function(config) {
			var $ptr, config;
			config.o.debug = debug;
		});
	};
	$pkg.WithDebug = WithDebug;
	NewPeerConfig = function(options) {
		var $ptr, _i, _ref, config, option, options, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; config = $f.config; option = $f.option; options = $f.options; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		config = new PeerConfig.ptr(new ($global.Object)(), "", "", 0);
		_ref = options;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			option = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = option(config); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return config;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewPeerConfig }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.config = config; $f.option = option; $f.options = options; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewPeerConfig = NewPeerConfig;
	NewPeer = function(config) {
		var $ptr, config, o, peer;
		o = new ($global.Peer)($externalize(config, ptrType));
		peer = new Peer.ptr(o, "", $chanNil);
		peer.onOpen = new $Chan(structType, 0);
		o.on($externalize("open", $String), $externalize((function(id) {
			var $ptr, id;
			$go((function() {
				var $ptr;
				$close(peer.onOpen);
				peer.onOpen = $chanNil;
			}), []);
		}), funcType));
		o.on($externalize("error", $String), $externalize((function(err) {
			var $ptr, err;
			$go((function $b() {
				var $ptr, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				$r = log.Println(new sliceType([new $String("Peer:"), err])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
			}), []);
		}), funcType$1));
		return peer;
	};
	$pkg.NewPeer = NewPeer;
	Peer.ptr.prototype.ID = function() {
		var $ptr, _1, _2, _r, _tuple, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _r = $f._r; _tuple = $f._tuple; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (!(p.onOpen === $chanNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(p.onOpen === $chanNil)) { */ case 1:
			_2 = p.onOpen;
			/* while (true) { */ case 3:
				_r = $recv(_2); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				_1 = _tuple[1];
				if (!_1) {
					/* break; */ $s = 4; continue;
				}
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		$s = -1; return [$internalize(p.o.id, $String), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Peer.ptr.prototype.ID }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._r = _r; $f._tuple = _tuple; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	Peer.prototype.ID = function() { return this.$val.ID(); };
	Peer.ptr.prototype.Listen = function() {
		var $ptr, l, p;
		p = this;
		l = new PeerListener.ptr(p, new $Chan(ptrType$3, 0));
		p.o.on($externalize("connection", $String), $externalize((function $b(conn) {
			var $ptr, c, conn, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; c = $f.c; conn = $f.conn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			c = newPeerConnection(conn);
			$r = log.Println(new sliceType([new $String("Received connection from remote peer "), new $String($internalize(c.o.peer, $String))])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = $send(l.onConnect, c); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.c = c; $f.conn = conn; $f.$s = $s; $f.$r = $r; return $f;
		}), funcType$2));
		return [l, $ifaceNil];
	};
	Peer.prototype.Listen = function() { return this.$val.Listen(); };
	PeerListener.ptr.prototype.Accept = function() {
		var $ptr, _r, c, l, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; l = $f.l; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = $recv(l.onConnect); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c = _r[0];
		$r = log.Println(new sliceType([new $String("Accepted connection from remote peer "), new $String($internalize(c.o.peer, $String))])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		t = rpc.StreamTransport(c);
		$s = -1; return [t, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: PeerListener.ptr.prototype.Accept }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.l = l; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	PeerListener.prototype.Accept = function() { return this.$val.Accept(); };
	Peer.ptr.prototype.Connect = function(remoteID) {
		var $ptr, c, conn, p, remoteID, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; c = $f.c; conn = $f.conn; p = $f.p; remoteID = $f.remoteID; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		conn = p.o.connect($externalize(remoteID, $String));
		$r = log.Println(new sliceType([new $String("Connecting to remote peer "), new $String(remoteID)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		c = newPeerConnection(conn);
		t = rpc.StreamTransport(c);
		$s = -1; return [t, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Peer.ptr.prototype.Connect }; } $f.$ptr = $ptr; $f.c = c; $f.conn = conn; $f.p = p; $f.remoteID = remoteID; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Peer.prototype.Connect = function(remoteID) { return this.$val.Connect(remoteID); };
	newPeerConnection = function(conn) {
		var $ptr, c, conn;
		c = new PeerConnection.ptr(conn, "", "", $chanNil, $ifaceNil, $chanNil, sliceType$1.nil, $chanNil);
		c.onData = new $Chan(sliceType$1, 0);
		c.onErr = new $Chan($error, 0);
		c.onReady = new $Chan(structType, 0);
		$go((function $b() {
			var $ptr, _r, onErr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; onErr = $f.onErr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = $recv(time.After(new time.Duration(1, 705032704))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
			/* */ if (!(c.onReady === $chanNil) && !(c.onErr === $chanNil)) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (!(c.onReady === $chanNil) && !(c.onErr === $chanNil)) { */ case 2:
				c.err = errors.New("Connection to " + $internalize(c.o.peer, $String) + " timed out");
				onErr = c.onErr;
				c.onErr = $chanNil;
				$r = log.Println(new sliceType([new $String("Marked connection error")])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = $send(onErr, c.err); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$close(onErr);
			/* } */ case 3:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f.onErr = onErr; $f.$s = $s; $f.$r = $r; return $f;
		}), []);
		conn.on($externalize("open", $String), $externalize((function() {
			var $ptr;
			$go((function $b() {
				var $ptr, onReady, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; onReady = $f.onReady; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				$r = log.Println(new sliceType([new $String("Connection to " + $internalize(c.o.peer, $String) + " open")])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				c.status = "open";
				onReady = c.onReady;
				c.onReady = $chanNil;
				$r = log.Println(new sliceType([new $String("Marked connection as ready")])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = $send(onReady, $clone(new structType.ptr(), structType)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$close(onReady);
				$s = -1; return;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.onReady = onReady; $f.$s = $s; $f.$r = $r; return $f;
			}), []);
		}), funcType$3));
		conn.on($externalize("close", $String), $externalize((function() {
			var $ptr;
			$go((function $b() {
				var $ptr, onErr, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; onErr = $f.onErr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				$r = log.Println(new sliceType([new $String("Connection to " + $internalize(c.o.peer, $String) + " closed")])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				c.status = "closed";
				c.err = errors.New("Closed");
				onErr = c.onErr;
				c.onErr = $chanNil;
				$r = log.Println(new sliceType([new $String("Marked connection as closed")])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = $send(onErr, c.err); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$close(onErr);
				$s = -1; return;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.onErr = onErr; $f.$s = $s; $f.$r = $r; return $f;
			}), []);
		}), funcType$3));
		conn.on($externalize("data", $String), $externalize((function(data) {
			var $ptr, data;
			$go((function $b() {
				var $ptr, bytes, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; bytes = $f.bytes; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				bytes = $assertType($internalize(new ($global.Uint8Array)(data), $emptyInterface), sliceType$1);
				$r = $send(c.onData, bytes); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.bytes = bytes; $f.$s = $s; $f.$r = $r; return $f;
			}), []);
		}), funcType$2));
		conn.on($externalize("error", $String), $externalize((function(err) {
			var $ptr, err;
			$go((function $b() {
				var $ptr, onErr, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; onErr = $f.onErr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				$r = log.Println(new sliceType([new $String("Conn:"), new $String($internalize(err.o.type, $String))])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				c.err = err;
				/* */ if (!(c.onErr === $chanNil)) { $s = 2; continue; }
				/* */ $s = 3; continue;
				/* if (!(c.onErr === $chanNil)) { */ case 2:
					onErr = c.onErr;
					c.onErr = $chanNil;
					$r = log.Println(new sliceType([new $String("Marked connection error")])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = $send(onErr, c.err); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$close(onErr);
				/* } */ case 3:
				$s = -1; return;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.onErr = onErr; $f.$s = $s; $f.$r = $r; return $f;
			}), []);
		}), funcType$1));
		return c;
	};
	PeerConnection.ptr.prototype.Read = function(p) {
		var $ptr, _r, _selection, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, c, err, n, p, remaining, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _selection = $f._selection; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; c = $f.c; err = $f.err; n = $f.n; p = $f.p; remaining = $f.remaining; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		c = this;
		if (!($interfaceIsEqual(c.err, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = c.err;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		remaining = c.buffer.$length;
		/* */ if (remaining === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (remaining === 0) { */ case 1:
			_r = $select([[c.onErr], [c.onData]]); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_selection = _r;
			if (_selection[0] === 0) {
				err = _selection[1][0];
				_tmp$2 = 0;
				_tmp$3 = err;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			} else if (_selection[0] === 1) {
				c.buffer = _selection[1][0];
				remaining = c.buffer.$length;
			}
		/* } */ case 2:
		if (remaining > 0) {
			n = p.$length;
			if (remaining < n) {
				n = remaining;
			}
			$copySlice($subslice(p, 0, n), $subslice(c.buffer, 0, n));
			c.buffer = $subslice(c.buffer, n);
		}
		_tmp$4 = n;
		_tmp$5 = c.err;
		n = _tmp$4;
		err = _tmp$5;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: PeerConnection.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._selection = _selection; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.c = c; $f.err = err; $f.n = n; $f.p = p; $f.remaining = remaining; $f.$s = $s; $f.$r = $r; return $f;
	};
	PeerConnection.prototype.Read = function(p) { return this.$val.Read(p); };
	PeerConnection.ptr.prototype.Write = function(p) {
		var $ptr, _r, _selection, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, c, err, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _selection = $f._selection; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; c = $f.c; err = $f.err; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		c = this;
		if (!($interfaceIsEqual(c.err, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = c.err;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		/* */ if (!(c.onReady === $chanNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(c.onReady === $chanNil)) { */ case 1:
			$r = log.Println(new sliceType([new $String("Waiting for channel " + $internalize(c.o.peer, $String) + " to connect")])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r = $select([[c.onReady], [c.onErr]]); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_selection = _r;
			/* */ if (_selection[0] === 0) { $s = 5; continue; }
			/* */ if (_selection[0] === 1) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_selection[0] === 0) { */ case 5:
				$r = log.Println(new sliceType([new $String("Connected to " + $internalize(c.o.peer, $String) + ": writing")])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 7; continue;
			/* } else if (_selection[0] === 1) { */ case 6:
				err = _selection[1][0];
				_tmp$2 = 0;
				_tmp$3 = err;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			/* } */ case 7:
		/* } */ case 2:
		c.o.send(js.NewArrayBuffer(p));
		_tmp$4 = p.$length;
		_tmp$5 = c.err;
		n = _tmp$4;
		err = _tmp$5;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: PeerConnection.ptr.prototype.Write }; } $f.$ptr = $ptr; $f._r = _r; $f._selection = _selection; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.c = c; $f.err = err; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	PeerConnection.prototype.Write = function(p) { return this.$val.Write(p); };
	PeerConnection.ptr.prototype.Close = function() {
		var $ptr, c;
		c = this;
		if (!($interfaceIsEqual(c.err, $ifaceNil))) {
			return c.err;
		}
		c.o.close();
		return c.err;
	};
	PeerConnection.prototype.Close = function() { return this.$val.Close(); };
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "ID", name: "ID", pkg: "", typ: $funcType([], [$String, $error], false)}, {prop: "Listen", name: "Listen", pkg: "", typ: $funcType([], [ptrType$5, $error], false)}, {prop: "Connect", name: "Connect", pkg: "", typ: $funcType([$String], [rpc.Transport, $error], false)}];
	ptrType$5.methods = [{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([], [rpc.Transport, $error], false)}];
	ptrType$3.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	PeerError.init("github.com/kothar/capngopher/webrtc", [{prop: "o", name: "o", exported: false, typ: ptrType$4, tag: ""}, {prop: "Type", name: "Type", exported: true, typ: $String, tag: "js:\"type\""}]);
	PeerConfig.init("github.com/kothar/capngopher/webrtc", [{prop: "o", name: "o", exported: false, typ: ptrType$4, tag: ""}, {prop: "ID", name: "ID", exported: true, typ: $String, tag: "js:\"id\""}, {prop: "Key", name: "Key", exported: true, typ: $String, tag: "js:\"key\""}, {prop: "Debug", name: "Debug", exported: true, typ: $Int, tag: "js:\"debug\""}]);
	ConfigOption.init([ptrType], [], false);
	Peer.init("github.com/kothar/capngopher/webrtc", [{prop: "o", name: "o", exported: false, typ: ptrType$4, tag: ""}, {prop: "id", name: "id", exported: false, typ: $String, tag: "js:\"id\""}, {prop: "onOpen", name: "onOpen", exported: false, typ: chanType, tag: ""}]);
	PeerListener.init("github.com/kothar/capngopher/webrtc", [{prop: "peer", name: "peer", exported: false, typ: ptrType$2, tag: ""}, {prop: "onConnect", name: "onConnect", exported: false, typ: chanType$1, tag: ""}]);
	PeerConnection.init("github.com/kothar/capngopher/webrtc", [{prop: "o", name: "o", exported: false, typ: ptrType$4, tag: ""}, {prop: "Peer", name: "Peer", exported: true, typ: $String, tag: "js:\"peer\""}, {prop: "status", name: "status", exported: false, typ: $String, tag: ""}, {prop: "onReady", name: "onReady", exported: false, typ: chanType, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "onErr", name: "onErr", exported: false, typ: chanType$2, tag: ""}, {prop: "buffer", name: "buffer", exported: false, typ: sliceType$1, tag: ""}, {prop: "onData", name: "onData", exported: false, typ: chanType$3, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = log.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rpc.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/kothar/capngopher/example/webrtc/client"] = (function() {
	var $pkg = {}, $init, webconsole, context, json, http, service, webrtc, ioutil, log, time, rpc, sliceType, mapType, ptrType, sliceType$1, sliceType$2, sliceType$3, init, requestPeers, serve, main;
	webconsole = $packages["bitbucket.org/mikehouston/webconsole"];
	context = $packages["context"];
	json = $packages["encoding/json"];
	http = $packages["github.com/PalmStoneGames/gopherjs-net-http"];
	service = $packages["github.com/kothar/capngopher/example/service"];
	webrtc = $packages["github.com/kothar/capngopher/webrtc"];
	ioutil = $packages["io/ioutil"];
	log = $packages["log"];
	time = $packages["time"];
	rpc = $packages["zombiezen.com/go/capnproto2/rpc"];
	sliceType = $sliceType($emptyInterface);
	mapType = $mapType($String, time.Time);
	ptrType = $ptrType(mapType);
	sliceType$1 = $sliceType(rpc.ConnOption);
	sliceType$2 = $sliceType(webrtc.ConfigOption);
	sliceType$3 = $sliceType($packages["zombiezen.com/go/capnproto2"].CallOption);
	init = function() {
		var $ptr;
		webconsole.Enable();
	};
	requestPeers = function(id) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, _tuple$2, body, client, err, id, peers, req, resp, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; body = $f.body; client = $f.client; err = $f.err; id = $f.id; peers = $f.peers; req = $f.req; resp = $f.resp; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		peers = [peers];
		_r = http.NewRequest("GET", "/register?id=" + id, $ifaceNil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		req = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [false, err];
		}
		client = new http.Client.ptr($ifaceNil, $throwNilPointerError, $ifaceNil, new time.Duration(0, 0));
		_r$1 = client.Do(req); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		resp = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [false, err];
		}
		$deferred.push([$methodVal(resp.Body, "Close"), []]);
		/* */ if (!((resp.StatusCode === 200))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!((resp.StatusCode === 200))) { */ case 3:
			_r$2 = ioutil.ReadAll(resp.Body); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2;
			body = _tuple$2[0];
			$r = log.Printf("did not get acceptable status code: %s body: %q", new sliceType([new $String(resp.Status), new $String($bytesToString(body))])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return [false, $ifaceNil];
		/* } */ case 4:
		peers[0] = false;
		_r$3 = json.NewDecoder(resp.Body).Decode((peers.$ptr || (peers.$ptr = new ptrType(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, peers)))); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err = _r$3;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [false, err];
		}
		$s = -1; return [peers[0], $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [false, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: requestPeers }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.body = body; $f.client = client; $f.err = err; $f.id = id; $f.peers = peers; $f.req = req; $f.resp = resp; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	serve = function(s, l) {
		var $ptr, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _tuple, err, l, main$1, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; err = $f.err; l = $f.l; main$1 = $f.main$1; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			_r = l.Accept(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			t = _tuple[0];
			err = _tuple[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:
				$r = log.Println(new sliceType([err])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			$r = log.Println(new sliceType([new $String("Received connection, starting server")])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$1 = service.Pinger_ServerToClient(s); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			main$1 = $clone(_r$1, service.Pinger);
			_arg = t;
			_r$2 = rpc.MainInterface(main$1.Client); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg$1 = $clone(_r$2, rpc.ConnOption);
			_r$3 = rpc.NewConn(_arg, new sliceType$1([_arg$1])); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: serve }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.err = err; $f.l = l; $f.main$1 = main$1; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	main = function() {
		var $ptr, _entry, _i, _keys, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, conn, ctx, err, err$1, id, l, lastSeen, msg, peer, peers, pinger, remote, response, s, t, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; conn = $f.conn; ctx = $f.ctx; err = $f.err; err$1 = $f.err$1; id = $f.id; l = $f.l; lastSeen = $f.lastSeen; msg = $f.msg; peer = $f.peer; peers = $f.peers; pinger = $f.pinger; remote = $f.remote; response = $f.response; s = $f.s; t = $f.t; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		id = [id];
		$r = log.Printf("Connecting to PeerJS broker", new sliceType([])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = webrtc.NewPeerConfig(new sliceType$2([webrtc.WithKey("znaqnunoxaqt1emi"), webrtc.WithDebug(3)])); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = webrtc.NewPeer(_r); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		peer = _r$1;
		$r = log.Printf("Starting local Pinger server", new sliceType([])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = new service.PingerServer.ptr();
		_tuple = peer.Listen();
		l = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 5:
			$r = log.Fatal(new sliceType([err])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		$go(serve, [s, l]);
		_r$2 = peer.ID(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		id[0] = _tuple$1[0];
		err = _tuple$1[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 9:
			$r = log.Fatal(new sliceType([err])); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 10:
		$r = log.Printf("Connected to broker: id = %s", new sliceType([new $String(id[0])])); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = requestPeers(id[0]); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$2 = _r$3;
		peers = _tuple$2[0];
		err = _tuple$2[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 14:
			$r = log.Fatal(new sliceType([err])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 15:
		$r = log.Printf("Received list of peers from server: %v", new sliceType([new mapType(peers)])); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = peers;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 18:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 19; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 18; continue;
			}
			remote = _entry.k;
			lastSeen = $clone(_entry.v, time.Time);
			/* */ if (!$clone(lastSeen, time.Time).After($clone($clone(time.Now(), time.Time).Add(new time.Duration(-7, 64771072)), time.Time))) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (!$clone(lastSeen, time.Time).After($clone($clone(time.Now(), time.Time).Add(new time.Duration(-7, 64771072)), time.Time))) { */ case 20:
				_i++;
				/* continue; */ $s = 18; continue;
			/* } */ case 21:
			_r$4 = peer.Connect(remote); /* */ $s = 22; case 22: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$3 = _r$4;
			t = _tuple$3[0];
			err$1 = _tuple$3[1];
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 23:
				$r = log.Fatal(new sliceType([err$1])); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 24:
			_r$5 = rpc.NewConn(t, new sliceType$1([])); /* */ $s = 26; case 26: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			conn = _r$5;
			$deferred.push([$methodVal(conn, "Close"), []]);
			ctx = context.Background();
			_r$6 = conn.Bootstrap(ctx); /* */ $s = 27; case 27: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			pinger = new service.Pinger.ptr(_r$6);
			$r = log.Println(new sliceType([new $String("Sending ping")])); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$7 = $clone(pinger, service.Pinger).Ping(ctx, (function(id) { return function $b(p) {
				var $ptr, _r$7, p, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$7 = $f._r$7; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r$7 = $clone(p, service.Pinger_ping_Params).SetMsg("Hello World from " + id[0] + " over WebRTC"); /* */ $s = 1; case 1: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
				$s = -1; return $ifaceNil;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$7 = _r$7; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
			}; })(id), new sliceType$3([])); /* */ $s = 29; case 29: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$8 = $clone(_r$7, service.Pinger_ping_Results_Promise).Struct(); /* */ $s = 30; case 30: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_tuple$4 = _r$8;
			response = $clone(_tuple$4[0], service.Pinger_ping_Results);
			err$1 = _tuple$4[1];
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 31:
				$r = log.Println(new sliceType([new $String("Failed to send ping: "), err$1])); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 33; continue;
			/* } else { */ case 32:
				$r = log.Println(new sliceType([new $String("Sent ping")])); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 33:
			_r$9 = $clone(response, service.Pinger_ping_Results).Msg(); /* */ $s = 36; case 36: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_tuple$5 = _r$9;
			msg = _tuple$5[0];
			err$1 = _tuple$5[1];
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 37; continue; }
			/* */ $s = 38; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 37:
				$r = log.Fatal(new sliceType([err$1])); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 38:
			$r = log.Printf("Received ping response: %s", new sliceType([new $String(msg)])); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 18; continue; case 19:
		$r = log.Printf("Waiting 20m...", new sliceType([])); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$10 = $recv(time.After(new time.Duration(279, 1704124416))); /* */ $s = 42; case 42: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_r$10[0];
		$r = log.Printf("Exiting", new sliceType([])); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: main }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.conn = conn; $f.ctx = ctx; $f.err = err; $f.err$1 = err$1; $f.id = id; $f.l = l; $f.lastSeen = lastSeen; $f.msg = msg; $f.peer = peer; $f.peers = peers; $f.pinger = pinger; $f.remote = remote; $f.response = response; $f.s = s; $f.t = t; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = webconsole.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = context.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = json.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = http.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = service.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = webrtc.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ioutil.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = log.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rpc.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ if ($pkg === $mainPkg) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if ($pkg === $mainPkg) { */ case 11:
			$r = main(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$mainFinished = true;
		/* } */ case 12:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$synthesizeMethods();
var $mainPkg = $packages["github.com/kothar/capngopher/example/webrtc/client"];
$packages["runtime"].$init();
$go($mainPkg.$init, []);
$flushConsole();

}).call(this);
//# sourceMappingURL=client.js.map
